/******************************************************************************/
// @copyright   Copyright Notification
//   No part may be reproduced except as authorized by written permission.
//   The copyright and the foregoing restriction extend to reproduction in all media.
//   Trademark 2019, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).
//   All rights reserved.
// @version: 36.523-3 v15.3.0
// $Date: 2019-03-04 20:58:34 +0100 (Mon, 04 Mar 2019) $
// $Rev: 23805 $
/******************************************************************************/
module NBIOT_Idle_CellReselection {

  import from NBIOT_RRC_ASN1_Definitions language "ASN.1:2002" all with {encode "UNALIGNED_PER_OctetAligned"};
  import from CIOT_NASTemplates all;
  import from CommonDefs all;
  import from EPS_NAS_Constants all;
  import from EPS_NAS_MsgContainers all;
  import from EPS_NAS_Templates all;
  import from EPS_NAS_TypeDefs all;
  import from EUTRA_NB_CommonDefs all;
  import from EUTRA_NB_RRC_Templates all;
  import from EUTRA_Parameters all;
  import from NAS_CommonTemplates all;
  import from NAS_CommonTypeDefs all;
  import from NBIOT_CellInfo all;
  import from NBIOT_CellInfoFrequency all;
  import from NBIOT_CommonDefs all;
  import from NBIOT_CommonProcedures all;
  import from NBIOT_Component all;
  import from NBIOT_ConfigurationSteps all;
  import from NBIOT_Imported_EUTRA_ASN1_Types all;
  import from NBIOT_NASSteps all;
  import from NBIOT_Parameters all;
  import from NBIOT_RRCSteps all;
  import from NBIOT_RRC_Templates all;
  import from NBIOT_SRB_DRB_Templates all;
  import from NBIOT_SysInfo_Templates all;
  import from UpperTesterFunctions all;

  template (value) SystemInformationBlockType4_NB_r13 cs_SIB4_NB_NeighCellList(template (value) EUTRA_ASN1_IntraFreqNeighCellList_Type p_IntraFreqNeighCellList) :=
  /* @status    APPROVED (NBIOT) */
    cs_508_SystemInformationBlockType4_NB_Def (p_IntraFreqNeighCellList, omit);

  template (value) SystemInformationBlockType4_NB_r13 cs_SIB4_NB_ThreeNeighCellEntries(EUTRA_ASN1_PhysCellId_Type p_PhysCellId1,
                                                                                       EUTRA_ASN1_Q_OffsetRange_Type p_Q_OffsetRange1,
                                                                                       EUTRA_ASN1_PhysCellId_Type p_PhysCellId2,
                                                                                       EUTRA_ASN1_Q_OffsetRange_Type p_Q_OffsetRange2,
                                                                                       EUTRA_ASN1_PhysCellId_Type p_PhysCellId3,
                                                                                       EUTRA_ASN1_Q_OffsetRange_Type p_Q_OffsetRange3) :=
  /* @status    APPROVED (NBIOT) */
    cs_SIB4_NB_NeighCellList( { cs_IntraFreqNeighCellInfo(p_PhysCellId1, p_Q_OffsetRange1),
                                cs_IntraFreqNeighCellInfo(p_PhysCellId2, p_Q_OffsetRange2),
                                cs_IntraFreqNeighCellInfo(p_PhysCellId3, p_Q_OffsetRange3) } );

 /*
   * @desc      To initialise the band and MFBI frequencies of a NBIOT cell
   *            Frequencies are defined in 36.508 Table 8.1.4.2-1 and Table 8.3.2.3.1-1a
   *            Function specific to MFBI TC
   * @param     p_CellId
   * @param     p_Band
   * @param     p_OverlapingBand
   * @param     p_NB_OperationMode
   * @status    APPROVED (NBIOT)
   */
  function f_NBIOT_InitBandFrequency_MFBI(NBIOT_CellId_Type p_CellId,
                                          integer  p_Band,
                                          integer  p_OverlapingBand,
                                          NB_OperationMode_Type p_NB_OperationMode) runs on NBIOT_PTC
  {
    var NBIOT_Frequency_fList_Type v_Freq;
    var SystemInformationBlockType1_NB v_SIB1;
    
    // Initialise Frequencies f1/f2/f3
    v_Freq := f_NBIOT_InitFrequency_f1Tof3_MFBI(p_Band, p_OverlapingBand, p_NB_OperationMode);
    
    // Initialised Frequency per cell. See 36.508 Table 8.1.4.2-1
    // Cell 1/2/4/11 -> Frequency f1
    // Cell 3/12 -> Frequency f2
    // Cell 6/13 -> Frequency f3
    // Cell 14 -> Frequency f4
    select (p_CellId) {
      case (nbiot_Cell1,
            nbiot_Cell2,
            nbiot_Cell4,
            nbiot_Cell5,
            nbiot_Cell11,
            nbiot_Cell18) {
        f_NBIOT_CellInfo_SetEARFCN(p_CellId, v_Freq.f1);
      }
      case (nbiot_Cell3,
            nbiot_Cell12,
            nbiot_Cell23) {
        f_NBIOT_CellInfo_SetEARFCN(p_CellId, v_Freq.f2);
      }
      case (nbiot_Cell6,
            nbiot_Cell13) {
        f_NBIOT_CellInfo_SetEARFCN(p_CellId, v_Freq.f3);
      }
      case else {
        FatalError(__FILE__, __LINE__, "invalid cell Identity");
      }
    }
    //Set the frequency band
    f_NBIOT_CellInfo_SetBand(p_CellId, p_Band);
    //Set MFBI band
    v_SIB1 := f_NBIOT_CellInfo_GetSIB1(p_CellId);
    v_SIB1.multiBandInfoList_r13[0].freqBandIndicator_r13 := p_OverlapingBand;
    f_NBIOT_CellInfo_SetSIB1( p_CellId, v_SIB1 );

  }

    /*
   * @desc      Function used to define the Frequency f1/f2/f3/f4 based on the Frequency band, the overlaping band and channel bandwidth
   *            for MFBI as per 36.508 cl 8.3.2.3.1 tables 8.3.2.3.1-1a
   *            Function specific to MFBI TC
   * @param     p_Band
   * @param     p_OverlapingBand
   * @param     p_NB_OperationMode
   * @return    NBIOT_Frequency_fList_Type
   * @status    APPROVED (NBIOT)
   */
  function f_NBIOT_InitFrequency_f1Tof3_MFBI(integer  p_Band,
                                             integer  p_OverlapingBand,
                                             NB_OperationMode_Type p_NB_OperationMode) return NBIOT_Frequency_fList_Type
  {
    var NBIOT_FrequencyLowMidHigh_Type v_FreqLMH;
    var template(value) NBIOT_Frequency_fList_Type v_Freq := cs_NBIOT_FrequencyInitDummy;   //Initialise with Dummy value
    
    // Initialise Frequencies Low/Mid/High for the primary Band
    v_FreqLMH:= f_NBIOT_InitFrequencyLowMidHigh(p_Band, p_NB_OperationMode );
    
    // Most of the bands assigns f1->Mid  f2->High  f3->Low
    v_Freq.f1 := v_FreqLMH.FrequencyMid;
    v_Freq.f2 := v_FreqLMH.FrequencyHigh;
    v_Freq.f3 := v_FreqLMH.FrequencyLow;
    
    // update f1/f2/f3 for specific bands
    // Acc. to 36.508 tables:
    // Table 8.3.2.3.1-1a: Test frequencies for NB-IoT FDD MFBI (180 kHz)
    select (p_Band) {
      case (2) {   // Band 2
        select (p_OverlapingBand) {
          case (25) {
          }
          case else {
            FatalError(__FILE__, __LINE__, "invalid overlaping Band");
          }
        }
      }
      case (5) {   // Band 5
        select (p_OverlapingBand) { //@sic R5-191553 sic@
          case (18) {
            v_Freq.f2 := cs_NB_CarrierFreq (5999, v_2, 23999, v0);
          }
          case (19) {
              v_Freq.f2 := cs_NB_CarrierFreq (2609, v_0dot5, 20609, v0);
          }
          case else {
            FatalError(__FILE__, __LINE__, "invalid overlaping Band");
          }
        }
      }
      case (12) {   // Band 12
        select (p_OverlapingBand) {
          case (17) {
          }
          case else {
            FatalError(__FILE__, __LINE__, "invalid overlaping Band");
          }
        }
      }
      case (17) {   // Band 17
        select (p_OverlapingBand) {
          case (12) {
         }
          case else {
            FatalError(__FILE__, __LINE__, "invalid overlaping Band");
          }
        }
      }
      case (19) {   // Band 19
        select (p_OverlapingBand) {
          case (5, 26) {
          }
          case else {
            FatalError(__FILE__, __LINE__, "invalid overlaping Band");
          }
        }
      }
      case (25) {   // Band 25
        select (p_OverlapingBand) {
          case (2) {
          }
          case else {
            FatalError(__FILE__, __LINE__, "invalid overlaping Band");
          }
        }
      }
      case (26) {   // Band 26
        select (p_OverlapingBand) {
          case (5, 18, 19) {
          }
          case else {
            FatalError(__FILE__, __LINE__, "invalid overlaping Band");
          }
        }
      }
      case else {
        FatalError(__FILE__, __LINE__, "invalid Band");
      }
    }
    return valueof(v_Freq);
  }

  /*
   * @desc  Check that a Band is not supported by NBIOT UE
   * @param     p_Band
   * @status    APPROVED (NBIOT)
   */
  function f_NBIOT_CheckNotSupportedBand(integer p_Band) runs on NBIOT_PTC
  {
    var bitstring v_SuppBandsAccToPICS := f_DeriveSuppNBIoTBandsFromPics();
    var UE_Capability_NB_r13 v_NBIOT_Cap := f_NBIOT_MobileInfo_GetUECapability();
    var SupportedBandList_NB_r13 v_NBIOT_BandListReported;
    var boolean v_BandReported := false;
    var integer i:=0;

    v_NBIOT_BandListReported := v_NBIOT_Cap.rf_Parameters_r13.supportedBandList_r13;

    //Check the band support against the PICS
    if ((v_SuppBandsAccToPICS[p_Band-1] == '1'B)) {
      f_NBIOT_SetVerdictFailOrInconc (__FILE__, __LINE__, "Band is wrongly reported as supported in the PICS");
    }

    //Check the band support against the UE capabilities
    for (i:=0; (i < lengthof(v_NBIOT_BandListReported) and v_BandReported==false) ; i:=i+1) {
      if (v_NBIOT_BandListReported[i].band_r13 == p_Band){
        v_BandReported:= true;
      }
    }
    if (v_BandReported) {
      f_NBIOT_SetVerdictFailOrInconc (__FILE__, __LINE__, "Band is wrongly reported as supported in UE capabilities");
    }
  }

  /*
   * @desc      REFERENCE TS 36.523-1 clause 22.2.5
   * @status    APPROVED (NBIOT)
   */
  function f_TC_22_2_5_NBIOT() runs on NBIOT_PTC
  { /* NB-IoT / Cell reselection / Qhyst, Qoffset, Treselection and Cell-specific reselection parameters */
    var float v_ModificationPeriod_s; // Modification period in second
    var template (value) NB_CellPowerList_Type v_CellPowerList_AtT1T2;
    var template (value) NB_CellPowerList_Type v_CellPowerList_AtT3;
    var template (value) NB_CellPowerList_Type v_CellPowerList_AtT4T5;
    var template (value) NB_CellPowerList_Type v_CellPowerList_AtT6;
    var template (value) NB_CellPowerList_Type v_CellPowerList_AtT7;
    var template (value) NB_CellPowerList_Type v_CellPowerList_AtT8;
    var template (value) NB_CellPowerList_Type v_CellPowerList_AtT9;
    var template (value) NB_CellPowerList_Type v_CellPowerList_AtT10;
    var template (value) NB_CellPowerList_Type v_CellPowerList_AtT11;
    var SystemInformationBlockType3_NB_r13 v_SIB3_Cell1;
    var SystemInformationBlockType3_NB_r13 v_SIB3_Cell2;
    timer t_ResponseTimer := 26.0;
    
    v_CellPowerList_AtT1T2 := {
      cs_NB_CellPower(nbiot_Cell1, -91),
      cs_NB_CellPower(nbiot_Cell2, -85),
      cs_NB_CellPower(nbiot_Cell4, tsc_NonSuitableOffNBIOTCellRS_EPRE)
    };
    v_CellPowerList_AtT3 := {
      cs_NB_CellPower(nbiot_Cell1, -85),
      cs_NB_CellPower(nbiot_Cell2, -91),
      cs_NB_CellPower(nbiot_Cell4, tsc_NonSuitableOffNBIOTCellRS_EPRE)
    };
    v_CellPowerList_AtT4T5 := {
      cs_NB_CellPower(nbiot_Cell1, -91),
      cs_NB_CellPower(nbiot_Cell2, -85),
      cs_NB_CellPower(nbiot_Cell4, tsc_NonSuitableOffNBIOTCellRS_EPRE)
    };
    v_CellPowerList_AtT6 := {
      cs_NB_CellPower(nbiot_Cell1, -85),
      cs_NB_CellPower(nbiot_Cell2, -91),
      cs_NB_CellPower(nbiot_Cell4, tsc_NonSuitableOffNBIOTCellRS_EPRE)
    };
    v_CellPowerList_AtT7 := {
      cs_NB_CellPower(nbiot_Cell1, -91),
      cs_NB_CellPower(nbiot_Cell2, -85),
      cs_NB_CellPower(nbiot_Cell4, tsc_NonSuitableOffNBIOTCellRS_EPRE)
    };
    v_CellPowerList_AtT8 := {
      cs_NB_CellPower(nbiot_Cell1, tsc_NonSuitableOffNBIOTCellRS_EPRE),
      cs_NB_CellPower(nbiot_Cell2, -91),
      cs_NB_CellPower(nbiot_Cell4, -85)
    };
    v_CellPowerList_AtT9 := {
      cs_NB_CellPower(nbiot_Cell1, -91),
      cs_NB_CellPower(nbiot_Cell2, -85),
      cs_NB_CellPower(nbiot_Cell4, tsc_NonSuitableOffNBIOTCellRS_EPRE)
    };
    v_CellPowerList_AtT10 := {
      cs_NB_CellPower(nbiot_Cell1, -85),
      cs_NB_CellPower(nbiot_Cell2, tsc_NonSuitableOffNBIOTCellRS_EPRE),
      cs_NB_CellPower(nbiot_Cell4, tsc_NonSuitableOffNBIOTCellRS_EPRE)
    };
    v_CellPowerList_AtT11 := {
      cs_NB_CellPower(nbiot_Cell1, -91),
      cs_NB_CellPower(nbiot_Cell2, -79),
      cs_NB_CellPower(nbiot_Cell4, tsc_NonSuitableOffNBIOTCellRS_EPRE)
    };
    //Initialise all Ncells, security and mobile parameters
    f_NBIOT_Init(c2);

    //Get ModificationPeriod
    v_ModificationPeriod_s := int2float(f_NB_CalculateModificationPeriod (nbiot_Cell1))/100.0;

    //Set TAC according to 36.508 Table 8.1.4.2-6: Tracking Area Code (TAC) for NBIOT cells */
    f_NBIOT_CellInfo_SetTAC(nbiot_Cell2, tsc_Idle_TAC_Cell2);
    f_NBIOT_CellInfo_SetTAC(nbiot_Cell4, tsc_Idle_TAC_Cell4);

    //Set SIB3-NB according to specific message contents(Table 22.2.5.3.3-2)
    v_SIB3_Cell1 := f_NBIOT_CellInfo_GetSIB3(nbiot_Cell1);
    v_SIB3_Cell1.cellReselectionInfoCommon_r13.q_Hyst_r13 := dB24;
    f_NBIOT_CellInfo_SetSIB3 (nbiot_Cell1, v_SIB3_Cell1);

    //Set SIB4-NB according to specific message contents(Table 22.2.5.3.3-3) - Default values according to 36.508  cl. 8.3.3.1.1
    f_NBIOT_CellInfo_SetSIB4(nbiot_Cell1, cs_SIB4_NB_ThreeNeighCellEntries(2, dB0,    //q-OffsetCell = 0 dB for cell 2
                                                                           4, dB0,    //q-OffsetCell = 0 dB for cell 4
                                                                          11, dB0));  //q-OffsetCell = 0 dB for cell 11
    f_NBIOT_CellInfo_SetSIB4(nbiot_Cell2, cs_508_SystemInformationBlockType4_NB_Def({ cs_IntraFreqNeighCellInfo(0, dB0),  //q-OffsetCell = 0 dB for cell 1 @sic R5s170701 sic@
                                                                                      cs_IntraFreqNeighCellInfo(4, dB0),  //q-OffsetCell = 0 dB for cell 4
                                                                                      cs_IntraFreqNeighCellInfo(11, dB0) },//q-OffsetCell = 0 dB for cell 11
                                                                                    { cs_PhysCellIdRange(f_NBIOT_CellInfo_GetPhyCellId(nbiot_Cell4), omit) }));
    f_NBIOT_CellInfo_SetSIB4(nbiot_Cell4, cs_SIB4_NB_ThreeNeighCellEntries(0, dB0,    //q-OffsetCell = 0 dB for cell 1 //@sic R5s170811 sic@
                                                                           2, dB0,    //q-OffsetCell = 0 dB for cell 2
                                                                           11, dB0)); //q-OffsetCell = 0 dB for cell 11);

    //Set maximum cell power level for Ncell 2
    f_NBIOT_CellInfo_InitMaxReferencePower(nbiot_Cell2, -79);// @sic R5s170701 sic@
    
    //Create and configure all NBIOT Cells
    f_NBIOT_CellConfig_Def(nbiot_Cell1, CONTROL_PLANE);
    f_NBIOT_CellConfig_Def(nbiot_Cell2, CONTROL_PLANE);
    f_NBIOT_CellConfig_Def(nbiot_Cell4, CONTROL_PLANE);
    
    //Perform Idle updated procedure to make sure UE is in a known state before test case starts
    f_NBIOT_Preamble(nbiot_Cell1, CONTROL_PLANE, STATE3_NB_IDLEUPDATED);

    f_NBIOT_TestBody_Set(true);

    //@siclog "Step 0" siclog@
    //Wait for 1 sec after preamble to allow UE to come to idle mode
    f_Delay(1.0);
    
    //@siclog "Step 1" siclog@
    //Change Ncell settings according to T1
    f_NBIOT_SetCellPowerList(v_CellPowerList_AtT1T2);
    
    //@siclog "Step 2" siclog@
    //Check for no RRCConnectionRequest-NB message on Ncell 2
    if (f_NBIOT_RRC_RRCConnectionRequest_Check(nbiot_Cell2, 10.0)) {
      //* @verdict fail UE sent RRCConnectionRequest-NB message on Ncell 1 within 10s
      f_NBIOT_SetVerdictFailOrInconc (__FILE__, __LINE__, "Test Case 22.2.5 Step 2 : RRCConnectionRequest-NB message received on NCell 2 within wait time");
    }
    
    //@siclog "Step 3" siclog@
    //Change cell settings according to T2
    v_SIB3_Cell1 := f_NBIOT_CellInfo_GetSIB3(nbiot_Cell1);
    v_SIB3_Cell1.cellReselectionInfoCommon_r13.q_Hyst_r13 := dB0;
    f_NBIOT_CellInfo_SetSIB3 (nbiot_Cell1, v_SIB3_Cell1);
    f_NBIOT_SetCellPowerList (v_CellPowerList_AtT1T2);
    
    //@siclog "Step 4" siclog@
    f_NBIOT_ModifySysinfo (nbiot_Cell1, true);
    
    //@siclog "Step 5" siclog@
    //Check for camp on Ncell 2
    f_NBIOT_508CheckCampOnNewNBIOTCell (nbiot_Cell2, CONTROL_PLANE);

    //@siclog "Step 6-7" siclog@
    //Change system information according to T3 - Default values according to 36.508  cl. 8.3.3.1.1
    f_NBIOT_CellInfo_SetSIB4(nbiot_Cell1, cs_SIB4_NB_ThreeNeighCellEntries(2, dB24,//q-OffsetCell = 24 dB for cell 2
                                                                           4, dB0,//q-OffsetCell = 0 dB for cell 4
                                                                           11, dB0));//q-OffsetCell = 0 dB for cell 11

    f_NBIOT_ModifySysinfo(nbiot_Cell1, false);// @sic R5s170701 sic@
    f_NBIOT_ModifySysinfo(nbiot_Cell2, true);
    
    //@siclog "Step 8" siclog@
    //Wait 2.1*modification period to allow new system information to take effect
    f_Delay(2.1 * v_ModificationPeriod_s);

    //@siclog "Step 8A" siclog@
    //SS re-adjusts cell-specific reference signal levels according to rows "T3" in table 22.2.5.3.2-1
    f_NBIOT_SetCellPowerList (v_CellPowerList_AtT3);
    
    //@siclog "Step 9" siclog@
    //Check for camp on Ncell 1
    f_NBIOT_508CheckCampOnNewNBIOTCell (nbiot_Cell1, CONTROL_PLANE);
    
    //@siclog "Step 10" siclog@
    //Wait for 1 sec after preamble to allow UE to come to idle mode
    f_Delay(1.0);
    
    //@siclog "Step 11" siclog@
    //Change Ncell settings according to T4
    f_NBIOT_SetCellPowerList(v_CellPowerList_AtT4T5);
    
    //@siclog "Step 12" siclog@
    //Check for no RRCConnectionRequest-NB message on Ncell 2
    if (f_NBIOT_RRC_RRCConnectionRequest_Check(nbiot_Cell2, 10.0)) {
      //* @verdict fail UE sent RRCConnectionRequest-NB message on Cell 1 within 10s
      f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, "Test Case 22.2.5 Step 12 : RRCConnectionRequest-NB message received on NCell 2 within wait time");
    }
    
    //@siclog "Step 13-14" siclog@
    //Change cell settings according to T5 - Default values according to 36.508  cl. 8.3.3.1.1
    f_NBIOT_CellInfo_SetSIB4(nbiot_Cell1, cs_SIB4_NB_ThreeNeighCellEntries(2, dB0,    //q-OffsetCell = 0 dB for cell 2
                                                                           4, dB0,    //q-OffsetCell = 0 dB for cell 4
                                                                          11, dB0));  //q-OffsetCell = 0 dB for cell 11
    f_NBIOT_ModifySysinfo(nbiot_Cell1, true);
    
    //@siclog "Step 15" siclog@
    //Check for camp on Ncell 1
    f_NBIOT_508CheckCampOnNewNBIOTCell(nbiot_Cell2, CONTROL_PLANE);

    //@siclog "Step 16-17" siclog@
    //Change cell settings according to T6
    v_SIB3_Cell1 := f_NBIOT_CellInfo_GetSIB3(nbiot_Cell1);
    v_SIB3_Cell1.intraFreqCellReselectionInfo_r13.t_Reselection_r13 := s21;
    f_NBIOT_CellInfo_SetSIB3(nbiot_Cell1, v_SIB3_Cell1);
    f_NBIOT_ModifySysinfo(nbiot_Cell1, false);// @sic R5s170701 sic@
    f_NBIOT_ModifySysinfo(nbiot_Cell2, true);

    //@siclog "Step 18" siclog@
    //Wait 2.1*modification period to allow new system information to take effect
    f_Delay(2.1 * v_ModificationPeriod_s);

    //@siclog "Step 18A" siclog@
    //SS re-adjusts cell-specific reference signal levels according to rows "T6" in table 22.2.5.3.2-1
    f_NBIOT_SetCellPowerList(v_CellPowerList_AtT6);

    //@siclog "Step 19" siclog@
    //Check for camp on Ncell 1
    f_NBIOT_508CheckCampOnNewNBIOTCell(nbiot_Cell1, CONTROL_PLANE);

    //@siclog "Step 20" siclog@
    //Wait for 1 sec after preamble to allow UE to come to idle mode
    f_Delay(1.0);

    //@siclog "Step 21" siclog@
    //Change cell settings according to T7
    f_NBIOT_SetCellPowerList(v_CellPowerList_AtT7);

    //@siclog "Step 22" siclog@
    if (f_NBIOT_RRC_RRCConnectionRequest_Check(nbiot_Cell2, 20.0)) {
      //* @verdict fail UE sent RRCConnectionRequest-NB message on Ncell 2 within 20s
      f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, "Test Case 22.2.5 Step 22 : RRCConnectionRequest-NB message received on Ncell 2 within wait time");
    }

    //@siclog "Step 23" siclog@
    //Receive RRCConnectionRequest-NB on Ncell 2 within t_ResponseTimer
    t_ResponseTimer.start;
    alt {
      [] SRB.check(receive(car_NB_SRB0_RrcPdu_IND(nbiot_Cell2, cr_RRCConnectionRequest_NB(cr_EstablishmentCause_NB_Any, ?))))
         {
          //* @verdict pass RRCConnectionRequest-NB message received within t_ResponseTimer
          f_NBIOT_PreliminaryPass(__FILE__, __LINE__, "Test Case 22.2.5 Step 23");
          t_ResponseTimer.stop;// @sic R5s170701 sic@
         }
       [] t_ResponseTimer.timeout
       {
         //* @verdict fail No RRCConnectionRequest-NB message received on Ncell 2 within t_ResponseTimer time
         f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, "Test Case 22.2.5 Step 23");
       }
    }
    
    //@siclog "Step 24" siclog@
    f_NBIOT_508CheckCampOnNewNBIOTCell(nbiot_Cell2, CONTROL_PLANE);
    
    //@siclog "Step 25" siclog@
    //Change cell settings according to T8
    f_NBIOT_SetCellPowerList (v_CellPowerList_AtT8);
    
    //@siclog "Step 26" siclog@
    if (f_NBIOT_RRC_RRCConnectionRequest_Check(nbiot_Cell4, 120.0)) {
      //* @verdict fail UE sent RRCConnectionRequest-NB message on Ncell 4 within 120s
      f_NBIOT_SetVerdictFailOrInconc (__FILE__, __LINE__, "Test Case 22.2.5 Step 26 : RRCConnectionRequest-NB message received on Ncell 6 within wait time");
    }
    
    //@siclog "Step 27-28" siclog@
    //Change system information according to T9
    f_NBIOT_CellInfo_SetSIB4(nbiot_Cell1, cs_SIB4_NB_NeighCellList({cs_IntraFreqNeighCellInfo(2, dB24)}));
    f_NBIOT_CellInfo_SetSIB4(nbiot_Cell2, cs_508_SystemInformationBlockType4_NB_Def ({cs_IntraFreqNeighCellInfo (0, dB_24)},
                                                                     { cs_PhysCellIdRange(f_NBIOT_CellInfo_GetPhyCellId(nbiot_Cell4), omit) }));// @sic R5s170701 sic@


    //@sic R5-174648 sic@
    v_SIB3_Cell1 := f_NBIOT_CellInfo_GetSIB3(nbiot_Cell1);
    v_SIB3_Cell1.intraFreqCellReselectionInfo_r13.t_Reselection_r13 := s0;
    f_NBIOT_CellInfo_SetSIB3(nbiot_Cell1, v_SIB3_Cell1);
    f_NBIOT_SS_ConfigureSysinfo(nbiot_Cell1); // @sic R5s180418 sic@

    f_NBIOT_ModifySysinfo(nbiot_Cell2, true);
    
    //@siclog "Step 29" siclog@
    //Wait 2.1*modification period to allow new system information to take effect
    f_Delay(2.1 * v_ModificationPeriod_s);

    //@siclog "Step 29A" siclog@
    //SS re-adjusts cell-specific reference signal levels according to rows "T9" in table 22.2.5.3.2-1
    f_NBIOT_SetCellPowerList(v_CellPowerList_AtT9);

    //@siclog "Step 30" siclog@
    //Check for camp on Ncell 1
    f_NBIOT_508CheckCampOnNewNBIOTCell(nbiot_Cell1, CONTROL_PLANE);

    //@siclog "Step 31-32" siclog@
    //Change system information according to T10
    f_NBIOT_SetCellPowerList(v_CellPowerList_AtT10);
    f_NBIOT_CellInfo_SetSIB4(nbiot_Cell1, cs_SIB4_NB_NeighCellList({cs_IntraFreqNeighCellInfo (2, dB0)}));
    f_NBIOT_CellInfo_SetSIB4(nbiot_Cell2, cs_SIB4_NB_NeighCellList({cs_IntraFreqNeighCellInfo (0, dB0)}));// @sic R5s170701 sic@
    f_NBIOT_ModifySysinfo(nbiot_Cell1, true);

    //@siclog "Step 33" siclog@
    //Wait 2.1*modification period to allow new system information to take effect
    f_Delay(2.1 * v_ModificationPeriod_s);

    //@siclog "Step 33A-33B" siclog@
    //@sic R5-174648 sic@ Set SIB3-NB according to table 22.2.5.3.3-14
    v_SIB3_Cell1 := f_NBIOT_CellInfo_GetSIB3(nbiot_Cell1);
    v_SIB3_Cell1.intraFreqCellReselectionInfo_r13.s_IntraSearchP_r13 := 11;
    f_NBIOT_CellInfo_SetSIB3(nbiot_Cell1, v_SIB3_Cell1);
    v_SIB3_Cell2 := f_NBIOT_CellInfo_GetSIB3(nbiot_Cell2);
    v_SIB3_Cell2.intraFreqCellReselectionInfo_r13.s_IntraSearchP_r13 := 11;
    f_NBIOT_CellInfo_SetSIB3(nbiot_Cell2, v_SIB3_Cell2);// @sic R5s170701 sic@
    f_NBIOT_ModifySysinfo(nbiot_Cell1, true);
    f_NBIOT_SS_ConfigureSysinfo(nbiot_Cell2); // @sic R5s180418 sic@

    //@siclog "Step 34" siclog@
    //Change system information according to T11
    f_NBIOT_SetCellPowerList(v_CellPowerList_AtT11);

    //@siclog "Step 35" siclog@
    //Check for camp on Ncell 2
    f_NBIOT_508CheckCampOnNewNBIOTCell(nbiot_Cell2, CONTROL_PLANE);
    f_NBIOT_PreliminaryPass (__FILE__, __LINE__, "Test Case 22.2.5 Step 35");// @sic R5s170701 sic@

    f_NBIOT_TestBody_Set(false);

    //Switch/power off UE
    f_NBIOT_Postamble(nbiot_Cell2, CONTROL_PLANE, N1_IDLE);
  }

  /*
   * @desc      REFERENCE TS 36.523-1 clause 22.2.6
   * @status    APPROVED (NBIOT)
   */
  function f_TC_22_2_6_NBIOT() runs on NBIOT_PTC
  { /* NB-IoT / Cell reselection using cell status and cell reservations / Access control class 0 to 9 */
    var NB_CellBarred_Type v_CellBarred := barred;
    var NB_CellBarred_Type v_CellNotBarred := notBarred;
    var template (value) NB_CellPowerList_Type v_CellPowerList_AtT0;
    var SystemInformationBlockType1_NB v_SIB1;

    v_CellPowerList_AtT0 := {
      cs_NB_CellPower(nbiot_Cell1, -97),
      cs_NB_CellPower(nbiot_Cell3, -82),
      cs_NB_CellPower(nbiot_Cell6, -67)
    };
    
    //Initialise all Ncell, security and mobile parameters
    f_NBIOT_Init (c3);
    
    //Set TAC according to 36.508 Table 8.1.4.2-6: Tracking Area Code (TAC) for NBIOT cells */
    f_NBIOT_CellInfo_SetTAC(nbiot_Cell3, tsc_Idle_TAC_Cell3);
    f_NBIOT_CellInfo_SetTAC(nbiot_Cell6, tsc_Idle_TAC_Cell6);

    //Set system information according to specific message contents
    f_NBIOT_CellInfo_SetSysInfo_CellBarred(nbiot_Cell3, v_CellBarred);
    f_NBIOT_CellInfo_SetSysInfo_CellBarred(nbiot_Cell6, v_CellBarred);
    
    //Set maximum cell power level for Ncell 1, 3 & 6 to be used in creation
    f_NBIOT_CellInfo_InitMaxReferencePower(nbiot_Cell3, -82);
    f_NBIOT_CellInfo_InitMaxReferencePower(nbiot_Cell6, -67);
    
    //Create and configure all Ncells
    f_NBIOT_CellConfig_Def(nbiot_Cell1, CONTROL_PLANE);
    f_NBIOT_CellConfig_Def(nbiot_Cell3, CONTROL_PLANE);
    f_NBIOT_CellConfig_Def(nbiot_Cell6, CONTROL_PLANE);
      
    //Make sure the UE is in automatic PLMN selection mode
    f_UT_AutomaticPLMN_Select_WithSwitchOnOff (UT);    //@sic R5s180214 sic@

    //Bring UE to initial state
    f_NBIOT_Preamble(nbiot_Cell1, CONTROL_PLANE, STATE3_NB_IDLEUPDATED);
        
    //Set initial Ncell power level according to T0
    f_NBIOT_SetCellPowerList(v_CellPowerList_AtT0);
    
    f_NBIOT_TestBody_Set(true);
    
    //@siclog "Step 1" siclog@
    //Adjust SIB1-NB of Ncell 3 to indicate cellBarred-r13 = notBarred
    f_NBIOT_CellInfo_SetSysInfo_CellBarred (nbiot_Cell3, v_CellNotBarred);
    f_NBIOT_ModifySysinfo(nbiot_Cell3, false);

    //@siclog "Step 2" siclog@
    //Check if UE camps on Ncell 3
    f_NBIOT_508CheckCampOnNewNBIOTCell (nbiot_Cell3, CONTROL_PLANE);
    f_NBIOT_PreliminaryPass(__FILE__, __LINE__, "Step 2");// @sic R5s170509 sic@
        
    //@siclog "Step 3-4" siclog@
    //Adjust SIB1-NB of Ncell 3 to indicate cellBarred-r13 = barred & notify UE of change of System Information
    f_NBIOT_CellInfo_SetSysInfo_CellBarred (nbiot_Cell3, v_CellBarred);
    f_NBIOT_ModifySysinfo (nbiot_Cell3, true);
    
    //@siclog "Step 5" siclog@
    //Check if UE camps on Ncell 1
    f_NBIOT_508CheckCampOnNewNBIOTCell(nbiot_Cell1, CONTROL_PLANE);
    f_NBIOT_PreliminaryPass(__FILE__, __LINE__, "Step 5");// @sic R5s170509 sic@
    
    //@siclog "Step 6" siclog@
    //Adjust SIB1-NB of Ncell 3 and 6
    f_NBIOT_CellInfo_SetSysInfo_CellBarred(nbiot_Cell3, v_CellNotBarred);
    f_NBIOT_CellInfo_SetSysInfo_CellBarred(nbiot_Cell6, v_CellNotBarred);
    v_SIB1 := f_NBIOT_CellInfo_GetSIB1( nbiot_Cell6);
    v_SIB1.cellAccessRelatedInfo_r13.plmn_IdentityList_r13[0].cellReservedForOperatorUse_r13 := reserved;
    f_NBIOT_CellInfo_SetSIB1( nbiot_Cell6, v_SIB1);
    f_NBIOT_ModifySysinfo (nbiot_Cell3, false);
    f_NBIOT_ModifySysinfo (nbiot_Cell6, false);

    //@siclog "Step 7" siclog@
    //Check if UE camps on Ncell 3
    f_NBIOT_508CheckCampOnNewNBIOTCell(nbiot_Cell3, CONTROL_PLANE);
    f_NBIOT_PreliminaryPass(__FILE__, __LINE__, "Step 7");// @sic R5s170509 sic@
    
    //@siclog "Step 8-9" siclog@
    //Adjusts SIB1-NB of Ncell 3 and 6 to indicate cellReservedForOperatorUse-r13 = reserved & notify UE of change of System Information
    v_SIB1 := f_NBIOT_CellInfo_GetSIB1( nbiot_Cell3);
    v_SIB1.cellAccessRelatedInfo_r13.plmn_IdentityList_r13[0].cellReservedForOperatorUse_r13 := reserved;
    f_NBIOT_CellInfo_SetSIB1( nbiot_Cell3, v_SIB1);
    f_NBIOT_ModifySysinfo (nbiot_Cell3, true);
    
    
    //@siclog "Step 10" siclog@
    //Check if UE camps on Ncell 1
    f_NBIOT_508CheckCampOnNewNBIOTCell(nbiot_Cell1, CONTROL_PLANE);
    f_NBIOT_PreliminaryPass(__FILE__, __LINE__, "Step 10");// @sic R5s170509 sic@
    
    f_NBIOT_TestBody_Set(false);
    
    //Switch/power off UE
    f_NBIOT_Postamble(nbiot_Cell1, CONTROL_PLANE, N1_IDLE);
  }

  /*
   * @desc      REFERENCE TS 36.523-1 clause 22.2.7
   * @status    APPROVED (NBIOT)
   */
  function f_TC_22_2_7_NBIOT() runs on NBIOT_PTC
  { /* NB-IoT / Cell reselection using cell status and cell reservations / Access control class 11 to 15 */
    var NB_CellBarred_Type v_CellBarred := barred;
    var NB_CellBarred_Type v_CellNotBarred := notBarred;
    var template (value) NB_CellPowerList_Type v_CellPowerList_AtT0;
    var SystemInformationBlockType1_NB v_SIB1;
    
    v_CellPowerList_AtT0 := {
      cs_NB_CellPower(nbiot_Cell1, -97),
      cs_NB_CellPower(nbiot_Cell3, -82),
      cs_NB_CellPower(nbiot_Cell6, -67)
    };
    
    //Initialise all Ncell, security and mobile parameters
    f_NBIOT_Init(c3);
    
    //Set TAC according to 36.508 Table 8.1.4.2-6: Tracking Area Code (TAC) for NBIOT cells */
    f_NBIOT_CellInfo_SetTAC(nbiot_Cell3, tsc_Idle_TAC_Cell3);
    f_NBIOT_CellInfo_SetTAC(nbiot_Cell6, tsc_Idle_TAC_Cell6);
    
    //Set system information according to specific message contents
    f_NBIOT_CellInfo_SetSysInfo_CellBarred(nbiot_Cell3, v_CellBarred);
    f_NBIOT_CellInfo_SetSysInfo_CellBarred(nbiot_Cell6, v_CellBarred);

    //Set maximum cell power level for Ncell 1, 3 & 6 to be used in creation
    f_NBIOT_CellInfo_InitMaxReferencePower(nbiot_Cell3, -82);
    f_NBIOT_CellInfo_InitMaxReferencePower(nbiot_Cell6, -67);

    //Create and configure all Ncells
    f_NBIOT_CellConfig_Def(nbiot_Cell1, CONTROL_PLANE);
    f_NBIOT_CellConfig_Def(nbiot_Cell3, CONTROL_PLANE);
    f_NBIOT_CellConfig_Def(nbiot_Cell6, CONTROL_PLANE);
    
    //Equip UE with a USIM containing default values (as per TS 36.508) except for those shown in Table 22.2.7.3.1-2
    f_UT_USIM_Insert(UT, "36.523-1 Table 22.2.7.3.1-2");
    
    //Make sure the UE is in automatic PLMN selection mode
    f_UT_AutomaticPLMN_Select_WithSwitchOnOff (UT);    //@sic R5s180214 sic@

    //Bring UE to initial state
    f_NBIOT_Preamble(nbiot_Cell1, CONTROL_PLANE, STATE3_NB_IDLEUPDATED);
    
    //Set initial Ncell power level according to T0
    f_NBIOT_SetCellPowerList (v_CellPowerList_AtT0);
    
    f_NBIOT_TestBody_Set (true);
    
    //@siclog "Step 1" siclog@
    //Adjust SIB1-NB of Ncell 3 to indicate cellBarred-r13 = notBarred
    f_NBIOT_CellInfo_SetSysInfo_CellBarred (nbiot_Cell3, v_CellNotBarred);
    f_NBIOT_ModifySysinfo(nbiot_Cell3, false);
    
    //@siclog "Step 2" siclog@
    //Check if UE camps on Ncell 3
    f_NBIOT_508CheckCampOnNewNBIOTCell (nbiot_Cell3, CONTROL_PLANE);
    
    //@siclog "Step 3-4" siclog@
    //Adjust SIB1-NB of Ncell 3 to indicate cellBarred-r13 = barred & notify UE of change of System Information
    f_NBIOT_CellInfo_SetSysInfo_CellBarred (nbiot_Cell3, v_CellBarred);
    f_NBIOT_ModifySysinfo (nbiot_Cell3, true);

    //@siclog "Step 5" siclog@
    //Check if UE camps on Ncell 1
    f_NBIOT_508CheckCampOnNewNBIOTCell(nbiot_Cell1, CONTROL_PLANE);
    
    //@siclog "Step 6" siclog@
    //Adjust SIB1-NB of Ncell 3 and 6
    f_NBIOT_CellInfo_SetSysInfo_CellBarred(nbiot_Cell3, v_CellNotBarred);
    f_NBIOT_CellInfo_SetSysInfo_CellBarred(nbiot_Cell6, v_CellNotBarred);
    v_SIB1 := f_NBIOT_CellInfo_GetSIB1( nbiot_Cell6);
    v_SIB1.cellAccessRelatedInfo_r13.plmn_IdentityList_r13[0].cellReservedForOperatorUse_r13 := reserved;
    f_NBIOT_CellInfo_SetSIB1( nbiot_Cell6, v_SIB1);
    f_NBIOT_ModifySysinfo (nbiot_Cell3, false);
    f_NBIOT_ModifySysinfo (nbiot_Cell6, false);

    //@siclog "Step 7" siclog@
    //Check if UE camps on Ncell 6
    f_NBIOT_508CheckCampOnNewNBIOTCell(nbiot_Cell6, CONTROL_PLANE);
    f_NBIOT_TestBody_Set(false);
    
    //Switch/power off UE
    f_NBIOT_Postamble(nbiot_Cell6, CONTROL_PLANE, N1_IDLE);
  }

  /*
   * @desc      REFERENCE TS 36.523-1 clause 22.2.8
   * @status    APPROVED (NBIOT)
   */
  function f_TC_22_2_8_NBIOT() runs on NBIOT_PTC
  { /* NB-IoT / Cell reselection in shared network environment */
    var NAS_MSG_Indication_Type v_NasInd;
    var NAS_KsiValue v_KsiValue;
    var template (value) NB_CellPowerList_Type v_CellPowerList_AtT1;
    var GutiParameters_Type v_Guti;
    var template (omit) EPS_BearerContextStatus v_EPS_ContextStatus;
    var SystemInformationBlockType3_NB_r13 v_SIB3_Cell1;   // @sic R5s170284 sic@
    
    v_CellPowerList_AtT1 := {
      cs_NB_CellPower(nbiot_Cell1, tsc_ServingCellRS_EPRE),
      cs_NB_CellPower(nbiot_Cell2, -73)
    };

    //Initialise all Ncell, security and mobile parameters
    //System information combination 2 as defined in TS 36.508 cl. 8.1.4.3.1
    f_NBIOT_Init (c2);
    
    // Set SIB1-NB according to Table 22.2.8.3.3-1
    f_NBIOT_CellInfo_SetPLMN_1Entry(nbiot_Cell1, cs_HPLMN_Def);
    // Set SIB1-NB according to Table 22.2.8.3.3-1
    f_NBIOT_CellInfo_SetPLMN_2Entries(nbiot_Cell2, cs_HPLMN_001_02, cs_HPLMN_Def, 1); //Table 22.2.8.3.3-2
    
    f_NBIOT_CellInfo_SetSelectedPlmnIndex (nbiot_Cell2, 2); // @sic R5s170284 sic@
    
    //Set maximum cell power level for Ncell 2
    f_NBIOT_CellInfo_InitMaxReferencePower(nbiot_Cell2, -73);
    
    //Set TAC according to 36.508 Table 8.1.4.2-6: Tracking Area Code (TAC) for NBIOT cells */
    f_NBIOT_CellInfo_SetTAC(nbiot_Cell2, tsc_Idle_TAC_Cell2);
    
    //Set SIB3-NB according to specific message contents
    v_SIB3_Cell1 := f_NBIOT_CellInfo_GetSIB3(nbiot_Cell1);  // @sic R5s170284 sic@
    v_SIB3_Cell1.intraFreqCellReselectionInfo_r13.s_IntraSearchP_r13 := 31;
    f_NBIOT_CellInfo_SetSIB3 (nbiot_Cell1, v_SIB3_Cell1);
    

    //Create and configure all Ncells
    f_NBIOT_CellConfig_Def(nbiot_Cell1, CONTROL_PLANE);
    f_NBIOT_CellConfig_Def(nbiot_Cell2, CONTROL_PLANE);

    //Bring UE to initial state
    f_NBIOT_Preamble(nbiot_Cell1, CONTROL_PLANE, STATE3_NB_IDLEUPDATED);

    f_NBIOT_TestBody_Set (true);

    //@siclog "Step 1" siclog@
    //The SS changes Ncell 1 and Ncell 2 level according to the row "T1" in Table 22.2.8.3.2-1
    f_NBIOT_SetCellPowerList (v_CellPowerList_AtT1);

    //@siclog "Step 2" siclog@
    //Check: Does the UE transmit an RRCConnectionRequest-NB on Ncell 2?
    f_NBIOT_RRC_ConnectionRequest_Def(nbiot_Cell2);
    f_NBIOT_PreliminaryPass(__FILE__, __LINE__, "Step 2");

    //@siclog "Step 3" siclog@
    //The SS transmits an RRCConnectionSetup-NB
    f_NBIOT_RRC_ConnectionSetup_Def();
    
    v_KsiValue := f_NBIOT_SecurityKSIasme_Get();

    //@siclog "Step 4" siclog@
    //Check: Does the UE transmit an RRCConnectionSetupComplete-NB message indicating the HPLMN (second PLMN in the list)?
    // Note: this message contains an TRACKING AREA UPDATE REQUEST message according to default message contents.
    v_NasInd := f_NBIOT_RRCConnectionSetupComplete_Def(nbiot_Cell2,
                                                       cr_508_RRCConnectionSetupComplete_NB(-, 2, -, ?),  //Table 22.2.8.3.3-3: RRCConnectionSetupComplete-NB
                                                       cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                                 cr_508_TAU_Request(tsc_EpsUpdate_TaUpdate,
                                                                                    v_KsiValue,
                                                                                    cr_DRXparameter_Any ('5C'O) ifpresent,
                                                                                    cr_AdditionalUpdateType_CIOT ifpresent)));
    f_NBIOT_PreliminaryPass(__FILE__, __LINE__, "Step 4");
    v_EPS_ContextStatus := v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.epsBearerContextStatus; // Send this back in the Accept
    
    v_Guti:= f_NBIOT_CellInfo_GetGuti(nbiot_Cell2);
    //@siclog "Step 5 - 7" siclog@
    // Steps 4 to 6 of the generic test procedure in TS 36.508 subclause 8.1.5A.5 are performed
    f_NBIOT_TrackingAreaUpdate_Accept_Complete(nbiot_Cell2,
                                               CONTROL_PLANE,
                                               tsc_SRB1bis,
                                               v_Guti,
                                               v_EPS_ContextStatus,
                                               v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.addUpdateType);
    /* Step 6: Release RRC connection */
    f_NBIOT_RRC_ConnectionRelease(nbiot_Cell2);
    
    f_NBIOT_TestBody_Set (false);

    //Switch/power off UE
    f_NBIOT_Postamble(nbiot_Cell2, CONTROL_PLANE, N1_IDLE);
  }

  /*
   * @desc      REFERENCE TS 36.523-1 clause 22.2.9
   * @status    APPROVED (NBIOT)
   */
  function f_TC_22_2_9_NBIOT() runs on NBIOT_PTC
  { /* NB-IoT / Inter-frequency cell reselection */
    var SystemInformationBlockType3_NB_r13 v_SIB3;
    var template (value) SystemInformationBlockType5_NB_r13 v_SIB5;
    var NB_CarrierFreq_Type v_CarrierFreq_Cell1;
    var template (value) NB_CellPowerList_Type v_CellPowerList_AtT0;// @sic R5s180384,R5-185018 sic@
    var template (value) NB_CellPowerList_Type v_CellPowerList_AtT1;
    var template (value) NB_CellPowerList_Type v_CellPowerList_AtT2;
    var float v_ModificationPeriod_s; // Modification period in second
    
    v_CellPowerList_AtT0 := {
      cs_NB_CellPower (nbiot_Cell1, -91),
      cs_NB_CellPower (nbiot_Cell2, -95),
      cs_NB_CellPower (nbiot_Cell3, -95)// @sic R5s180384,R5-185018 sic@
    };
    v_CellPowerList_AtT1 := {
      cs_NB_CellPower (nbiot_Cell1, -91),
      cs_NB_CellPower (nbiot_Cell2, -85),
      cs_NB_CellPower (nbiot_Cell3, -73)
    };
    v_CellPowerList_AtT2 := {
      cs_NB_CellPower (nbiot_Cell1, -79),
      cs_NB_CellPower (nbiot_Cell2, tsc_NonSuitableOffNBIOTCellRS_EPRE),
      cs_NB_CellPower (nbiot_Cell3, -95)// @sic R5s170500,R5-173742 sic@
    };

    //Initialise all cell, security and mobile parameters
    f_NBIOT_Init(c3);

    //Get ModificationPeriod
    v_ModificationPeriod_s := int2float(f_NB_CalculateModificationPeriod (nbiot_Cell3))/100.0;

    //Set TAC according to 36.508 8.1.4.3.1: Tracking Area Code (TAC)
    //TAC for Cell 1 is set to 1 in f_NBIOT_Init ();
    f_NBIOT_CellInfo_SetTAC (nbiot_Cell2, tsc_Idle_TAC_Cell2);
    f_NBIOT_CellInfo_SetTAC (nbiot_Cell3, tsc_Idle_TAC_Cell3);
    
    // @sic R5s170500,R5-173742, R5s170760 sic@
    v_SIB3 := f_NBIOT_CellInfo_GetSIB3(nbiot_Cell3);
    v_SIB3.cellReselectionServingFreqInfo_r13.s_NonIntraSearch_r13 := 0;
    f_NBIOT_CellInfo_SetSIB3 (nbiot_Cell3, v_SIB3);
    
    //Set maximum cell power level for Cell 3 to be used in creation
    f_NBIOT_CellInfo_InitMaxReferencePower(nbiot_Cell1, -75);
    f_NBIOT_CellInfo_InitMaxReferencePower(nbiot_Cell3, -73);
    
    //Create and configure all cells
    f_NBIOT_CellConfig_Def(nbiot_Cell1, CONTROL_PLANE);
    f_NBIOT_CellConfig_Def(nbiot_Cell2, CONTROL_PLANE);
    f_NBIOT_CellConfig_Def(nbiot_Cell3, CONTROL_PLANE);

    //Bring UE to inital state
    f_NBIOT_Preamble(nbiot_Cell1, CONTROL_PLANE, STATE3_NB_IDLEUPDATED);

    f_NBIOT_TestBody_Set (true);
    
    // @siclog "Step 0" siclog@
    // @sic R5s170760 This is done before the cell is configured, as it's not yet turned on sic@

    //@siclog "Step 0A" siclog@
    // Change cell settings according to T0
    f_NBIOT_SetCellPowerList(v_CellPowerList_AtT0);// @sic R5s180384,R5-185018 sic@

    //@siclog "Step 0B" siclog@
    f_Delay(60.0);// @sic R5s180384,R5-185018 sic@
    
    //@siclog "Step 1" siclog@
    //Change cell settings according to T1
    f_NBIOT_SetCellPowerList(v_CellPowerList_AtT1);
    
    //@siclog "Step 2" siclog@
    //Check if UE camps on cell 3
    f_NBIOT_508CheckCampOnNewNBIOTCell(nbiot_Cell3, CONTROL_PLANE);
    f_NBIOT_PreliminaryPass(__FILE__, __LINE__, "Test Case 22.2.9 Step 2");
    
    //@siclog "Step 3 void" siclog@
    //@siclog "Step 3A-4" siclog@
    //SIB3-NB according to Table 22.2.9.3.3-1
    v_SIB3 := f_NBIOT_CellInfo_GetSIB3(nbiot_Cell1);
    v_SIB3.cellReselectionServingFreqInfo_r13.s_NonIntraSearch_r13 := 8;
    f_NBIOT_CellInfo_SetSIB3 (nbiot_Cell1, v_SIB3);
    
    v_SIB3 := f_NBIOT_CellInfo_GetSIB3(nbiot_Cell3);
    v_SIB3.cellReselectionServingFreqInfo_r13.s_NonIntraSearch_r13 := 8;
    f_NBIOT_CellInfo_SetSIB3 (nbiot_Cell3, v_SIB3);

    //SIB5-NB according to Table 22.2.9.3.3-4
    v_CarrierFreq_Cell1 := f_NBIOT_CellInfo_GetEARFCN(nbiot_Cell1);
    v_SIB5 := cs_508_SystemInformationBlockType5_NB_Def ({cs_NB_InterFreqCarrierFreq (v_CarrierFreq_Cell1)});
    f_NBIOT_CellInfo_SetSIB5 (nbiot_Cell3, v_SIB5);
    
    //MIB-NB according to Table 22.2.9.3.3-2
    f_NBIOT_ModifySysinfoUE_Off (nbiot_Cell1); // UE not camped on this cell, so effectively 'off'. Just update sysinfo
    f_NBIOT_ModifySysinfo (nbiot_Cell3, true);

    //@siclog "Step 5 void" siclog@
    //@siclog "Step 5A" siclog@
    f_Delay(2.1 * v_ModificationPeriod_s);
    
    //@siclog "Step 6" siclog@
    //Change cell settings according to T3
    f_NBIOT_SetCellPowerList (v_CellPowerList_AtT2);
    
    //@siclog "Step 7" siclog@
    //Check if UE camps on cell 3
    f_NBIOT_508CheckCampOnNewNBIOTCell(nbiot_Cell1, CONTROL_PLANE);
    f_NBIOT_PreliminaryPass (__FILE__, __LINE__, "Test Case 22.2.9 Step 7");
    
    f_NBIOT_TestBody_Set(false);
    
    //Switch/power off UE
    f_NBIOT_Postamble(nbiot_Cell1, CONTROL_PLANE, N1_IDLE);
  }

  /*
   * @desc      REFERENCE TS 36.523-3 clause 22.2.10
   * @status    APPROVED (NBIOT)
   */
    function f_TC_22_2_10_NBIOT() runs on NBIOT_PTC
  { /*NB-IoT / Cell reselection / MFBI*/
   // @sic R5-181305 sic@
    var SystemInformationBlockType1_NB v_SIB1;
    var template (value) SystemInformationBlockType5_NB_r13 v_SIB5;
    var NB_CarrierFreq_Type v_CarrierFreq_Cell1;
    var NB_CarrierFreq_Type v_CarrierFreq_Cell3;
    var NB_CarrierFreq_Type v_CarrierFreq_Cell11;
    var template (value) NB_CellPowerList_Type v_CellPowerList_AtT1;
    var template (value) NB_CellPowerList_Type v_CellPowerList_AtT2;
    
    v_CellPowerList_AtT1 := {
      cs_NB_CellPower (nbiot_Cell1, -85),
      cs_NB_CellPower (nbiot_Cell11, -79),
      cs_NB_CellPower (nbiot_Cell3, tsc_NonSuitableOffNBIOTCellRS_EPRE)
    };
    v_CellPowerList_AtT2 := {
      cs_NB_CellPower (nbiot_Cell1, tsc_NonSuitableOffNBIOTCellRS_EPRE),
      cs_NB_CellPower (nbiot_Cell11, -85),
      cs_NB_CellPower (nbiot_Cell3, -73)
    };
    
    //Initialise all cell, security and mobile parameters
    f_NBIOT_Init(c3);

    //Initialise the Band in SIB1-NB in FreqBandIndicator and the MFBI frequency
    f_NBIOT_InitBandFrequency_MFBI(nbiot_Cell1, px_OverlappingNotSupportedFrequencyBand_MFBI, px_MFBI_FrequencyBand, px_NB_OperationMode);
    f_NBIOT_InitBandFrequency_MFBI(nbiot_Cell11, px_OverlappingNotSupportedFrequencyBand_MFBI, px_MFBI_FrequencyBand, px_NB_OperationMode);
    f_NBIOT_InitBandFrequency_MFBI(nbiot_Cell3, px_OverlappingNotSupportedFrequencyBand_MFBI, px_MFBI_FrequencyBand, px_NB_OperationMode);
    
    // Set SIB1-NB according to Table 22.2.10.3.3-1
    v_SIB1 := f_NBIOT_CellInfo_GetSIB1(nbiot_Cell1);
    v_SIB1.multiBandInfoList_r13[0].freqBandInfo_r13[0].additionalPmax_r13 := omit;
    v_SIB1.multiBandInfoList_r13[0].freqBandInfo_r13[0].additionalSpectrumEmission_r13 := 1;
    f_NBIOT_CellInfo_SetSIB1( nbiot_Cell1, v_SIB1 );

    v_SIB1 := f_NBIOT_CellInfo_GetSIB1(nbiot_Cell11);
    v_SIB1.multiBandInfoList_r13[0].freqBandInfo_r13[0].additionalPmax_r13 := omit;
    v_SIB1.multiBandInfoList_r13[0].freqBandInfo_r13[0].additionalSpectrumEmission_r13 := 1;
    f_NBIOT_CellInfo_SetSIB1( nbiot_Cell11, v_SIB1 );

    v_SIB1 := f_NBIOT_CellInfo_GetSIB1(nbiot_Cell3);
    v_SIB1.multiBandInfoList_r13[0].freqBandInfo_r13[0].additionalPmax_r13 := omit;
    v_SIB1.multiBandInfoList_r13[0].freqBandInfo_r13[0].additionalSpectrumEmission_r13 := 1;
    f_NBIOT_CellInfo_SetSIB1( nbiot_Cell3, v_SIB1 );
    
    // Set SIB5-NB according to Table 22.2.10.3.3-2
    v_CarrierFreq_Cell1 := f_NBIOT_CellInfo_GetEARFCN(nbiot_Cell1);
    v_CarrierFreq_Cell3 := f_NBIOT_CellInfo_GetEARFCN(nbiot_Cell3);
    v_CarrierFreq_Cell11 := f_NBIOT_CellInfo_GetEARFCN(nbiot_Cell11);

    v_SIB5 := cs_508_SystemInformationBlockType5_NB_Def ({cs_NB_InterFreqCarrierFreq (v_CarrierFreq_Cell1)});
    v_SIB5.interFreqCarrierFreqList_r13[0].multiBandInfoList_r13[0].freqBandIndicator_r13 := px_MFBI_FrequencyBand;
    v_SIB5.interFreqCarrierFreqList_r13[0].multiBandInfoList_r13[0].freqBandInfo_r13[0].additionalPmax_r13 := omit;
    v_SIB5.interFreqCarrierFreqList_r13[0].multiBandInfoList_r13[0].freqBandInfo_r13[0].additionalSpectrumEmission_r13 := 1;
    f_NBIOT_CellInfo_SetSIB5( nbiot_Cell1, v_SIB5 );

    v_SIB5 := cs_508_SystemInformationBlockType5_NB_Def ({cs_NB_InterFreqCarrierFreq (v_CarrierFreq_Cell1)});// @sic R5s180237 sic@
    v_SIB5.interFreqCarrierFreqList_r13[0].multiBandInfoList_r13[0].freqBandIndicator_r13 := px_MFBI_FrequencyBand;
    v_SIB5.interFreqCarrierFreqList_r13[0].multiBandInfoList_r13[0].freqBandInfo_r13[0].additionalPmax_r13 := omit;
    v_SIB5.interFreqCarrierFreqList_r13[0].multiBandInfoList_r13[0].freqBandInfo_r13[0].additionalSpectrumEmission_r13 := 1;
    f_NBIOT_CellInfo_SetSIB5( nbiot_Cell3, v_SIB5 );

    v_SIB5 := cs_508_SystemInformationBlockType5_NB_Def ({cs_NB_InterFreqCarrierFreq (v_CarrierFreq_Cell3)});// @sic R5s180237 sic@
    v_SIB5.interFreqCarrierFreqList_r13[0].multiBandInfoList_r13[0].freqBandIndicator_r13 := px_MFBI_FrequencyBand;
    v_SIB5.interFreqCarrierFreqList_r13[0].multiBandInfoList_r13[0].freqBandInfo_r13[0].additionalPmax_r13 := omit;
    v_SIB5.interFreqCarrierFreqList_r13[0].multiBandInfoList_r13[0].freqBandInfo_r13[0].additionalSpectrumEmission_r13 := 1;
    f_NBIOT_CellInfo_SetSIB5( nbiot_Cell11, v_SIB5 );

    //Set maximum cell power level for Ncell 11 & 3
    f_NBIOT_CellInfo_InitMaxReferencePower(nbiot_Cell11, -79);
    f_NBIOT_CellInfo_InitMaxReferencePower(nbiot_Cell3, -73);
    
    //Create and configure all Ncells
    f_NBIOT_CellConfig_Def(nbiot_Cell1, CONTROL_PLANE);
    f_NBIOT_CellConfig_Def(nbiot_Cell11, CONTROL_PLANE);
    f_NBIOT_CellConfig_Def(nbiot_Cell3, CONTROL_PLANE);
    
    //Bring UE to initial state
    f_NBIOT_Preamble(nbiot_Cell1, CONTROL_PLANE, STATE3_NB_IDLEUPDATED);
    
    // Check that the "px_OverlappingNotSupportedFrequencyBand_MFBI" band is not supported by UE
    f_NBIOT_CheckNotSupportedBand( px_OverlappingNotSupportedFrequencyBand_MFBI );
    
    f_NBIOT_TestBody_Set(true);
    
    //@siclog "Step 0" siclog@
    //Wait 1 second. (to ensure than 1 second has elapsed since the UE camped on the current serving cell)
    f_Delay(1.0);
    
    //@siclog "Step 1" siclog@
    //The SS changes the cells power level setting according to the row "T1" in table 22.2.10.3.2-1.
    f_NBIOT_SetCellPowerList(v_CellPowerList_AtT1);
    
    //@siclog "Step 2" siclog@
    //Check: Does the test result of generic test procedure in TS 36.508 subclause 8.1.5A.5 indicate that the UE is camped on Ncell 11?
    //NOTE: The UE performs a TAU procedure and the RRC connection is released.
    f_NBIOT_508CheckCampOnNewNBIOTCell (nbiot_Cell11, CONTROL_PLANE);
    f_NBIOT_PreliminaryPass(__FILE__, __LINE__, "Test Case 22.2.10 Step 2");

    //@siclog "Step 3" siclog@
    //The SS changes the cells power level setting according to the row "T2" in table 22.2.10.3.2-1.
    f_NBIOT_SetCellPowerList(v_CellPowerList_AtT2);
    
    //@siclog "Step 4" siclog@
    //Check: Does the test result of generic test procedure in TS 36.508 subclause 8.1.5A.5 indicate that the UE is camped on Ncell 3?
    //NOTE: The UE performs a TAU procedure and the RRC connection is released.
    f_NBIOT_508CheckCampOnNewNBIOTCell (nbiot_Cell3, CONTROL_PLANE);
    f_NBIOT_PreliminaryPass(__FILE__, __LINE__, "Test Case 22.2.10 Step 4");
    
    f_NBIOT_TestBody_Set(false);
    
    //Switch/power off UE
    f_NBIOT_Postamble(nbiot_Cell3, CONTROL_PLANE, N1_IDLE);
  }// function f_TC_22_2_10_NBIOT

}
