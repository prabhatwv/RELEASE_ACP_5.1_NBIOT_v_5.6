/******************************************************************************/
// @copyright   Copyright Notification
//   No part may be reproduced except as authorized by written permission.
//   The copyright and the foregoing restriction extend to reproduction in all media.
//   Trademark 2019, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).
//   All rights reserved.
// @version: 36.523-3 v15.3.0
// $Date: 2018-12-16 11:45:57 +0100 (Sun, 16 Dec 2018) $
// $Rev: 23491 $
/******************************************************************************/

module NasEmu_Common {

  import from CommonDefs all;
  import from EPS_NAS_Constants all;
  import from EPS_NAS_MsgContainers all;
  import from EPS_NAS_TypeDefs all;
  import from EUTRA_NB_SecurityDefinitionsAndExternalFunctions all;
  import from NAS_CommonTemplates all;
  import from NAS_CommonTypeDefs all;
  import from NasEmu_Common4G5G all;
  import from NasEmu_CtrlAspTypes all;

  type union NasEmu_DecodedNasPduUL_Type {      /* Return type for f_NasEmu_DecodeMsg
                                                   @status    APPROVED (ENDC, IMS, IMS_IRAT, LTE, LTE_A_IRAT, LTE_A_PRO, LTE_A_R10_R11, LTE_A_R12, LTE_IRAT, NBIOT, POS, UTRAN) */
    NAS_UL_Message_Type  Msg,
    Null_Type            Invalid
  };

  type record NasEmu_DecodingInfo_Type {        /* Return type for f_DecipherAndDecodeNasPdu
                                                   @status    APPROVED (ENDC, IMS, IMS_IRAT, LTE, LTE_A_IRAT, LTE_A_PRO, LTE_A_R10_R11, LTE_A_R12, LTE_IRAT, NBIOT, POS, UTRAN) */
    NAS_MSG_Indication_Type  NasIndication optional,       // omit when octetstring cannot be decoded
    boolean                  IntegrityError
  };

  type union NasEmu_SN_Type {           /* @status    APPROVED (ENDC, IMS, IMS_IRAT, LTE, LTE_A_IRAT, LTE_A_PRO, LTE_A_R10_R11, LTE_A_R12, LTE_IRAT, NBIOT, POS, UTRAN) */
    integer             Long,           // sequence number as usual (1 octet)
    integer             Short           // short sequence number as used in SERVICE REQUEST (5 bits)
  };

  template (value) NasEmu_DecodingInfo_Type cs_DecodingInfo_Init :=
  { /* @status    APPROVED (ENDC, IMS, IMS_IRAT, LTE, LTE_A_IRAT, LTE_A_PRO, LTE_A_R10_R11, LTE_A_R12, LTE_IRAT, NBIOT, POS, UTRAN) */
    NasIndication := omit,
    IntegrityError := false
  };

  type record NasSecurity_Type { /* @status    APPROVED (ENDC, IMS, IMS_IRAT, LTE, LTE_A_IRAT, LTE_A_PRO, LTE_A_R10_R11, LTE_A_R12, LTE_IRAT, NBIOT, POS, UTRAN) */
    NAS_SecurityInfo_Type       Integrity,
    NAS_SecurityInfo_Type       Ciphering,
    NasCountInfo_Type           NasCount,
    B5_Type                     BearerId,       /* @sic R5-101050: BearerId changed to 5 bits sic@ */
    boolean                     SecurityStarted /* can be set to true after the download of security keys since
                                                   ciphering is assumed for all security protected NAS PDUs in UL */
  };

  /*
   * @desc      initialise the global information
   * @return    NasSecurity_Type
   * @status    APPROVED (ENDC, IMS, IMS_IRAT, LTE, LTE_A_IRAT, LTE_A_PRO, LTE_A_R10_R11, LTE_A_R12, LTE_IRAT, NBIOT, POS, UTRAN)
   */
  function f_NasEmu_NasSecurity_Init() return NasSecurity_Type
  { /* @sic R5s160711 BASELINE MOVING 2016 - NBIOT: NasSecurity no global variable anymore sic@ */
    return valueof(cs_NasSecurity_Init);    // valueof cannot be avoided here
  }

  template (present) NAS_CTRL_REQ cr_NAS_CTRL_Security_REQ :=
  { /* @status    APPROVED (ENDC, IMS, IMS_IRAT, LTE, LTE_A_IRAT, LTE_A_PRO, LTE_A_R10_R11, LTE_A_R12, LTE_IRAT, NBIOT, POS, UTRAN) */
    Common := ?,
    Request := {
      Security := ?
    }
  };

  template (present) NAS_CTRL_REQ cr_NAS_CTRL_NasCount_REQ :=
  { /* @status    APPROVED (ENDC, IMS, IMS_IRAT, LTE, LTE_A_IRAT, LTE_A_PRO, LTE_A_R10_R11, LTE_A_R12, LTE_IRAT, NBIOT, POS, UTRAN) */
    Common := ?,
    Request := {
      NasCount := ?
    }
  };

  template (value) NAS_CTRL_CNF cs_NAS_CTRL_Security_CNF :=
  { /* @status    APPROVED (ENDC, IMS, IMS_IRAT, LTE, LTE_A_IRAT, LTE_A_PRO, LTE_A_R10_R11, LTE_A_R12, LTE_IRAT, NBIOT, POS, UTRAN) */
    Common := cs_NasCtrlCnfAspCommonPart,
    Confirm := {
      Security := true
    }
  };

  template (value) NAS_CTRL_CNF cs_NAS_CTRL_NasCountSet_CNF :=
  { /* @status    APPROVED (ENDC, IMS, IMS_IRAT, LTE, LTE_A_IRAT, LTE_A_PRO, LTE_A_R10_R11, LTE_A_R12, LTE_IRAT, NBIOT, POS, UTRAN) */
    Common := cs_NasCtrlCnfAspCommonPart,
      Confirm := {
      NasCount := {
        Set := true
      }
    }
  };

  template (value) NAS_CTRL_CNF cs_NAS_CTRL_NasCountGet_CNF(template (value) NasCountInfo_Type p_NasCountInfo) :=
  { /* @status    APPROVED (ENDC, IMS, IMS_IRAT, LTE, LTE_A_IRAT, LTE_A_PRO, LTE_A_R10_R11, LTE_A_R12, LTE_IRAT, NBIOT, POS, UTRAN) */
    Common := cs_NasCtrlCnfAspCommonPart,
    Confirm := {
      NasCount := {
        Get := p_NasCountInfo
      }
    }
  };

  template (value) NasSecurity_Type cs_NasSecurity_Init :=
  { /* @status    APPROVED (ENDC, IMS, IMS_IRAT, LTE, LTE_A_IRAT, LTE_A_PRO, LTE_A_R10_R11, LTE_A_R12, LTE_IRAT, NBIOT, POS, UTRAN) */
    Integrity := {
      Algorithm := '000'B,
      K_NAS     := int2bit(0, 128)
    },
    Ciphering := {
      Algorithm := '000'B,
      K_NAS     := int2bit(0, 128)
    },
    NasCount := {
      UL        := f_NasCountInit(),
      DL        := f_NasCountInit()
    },
    BearerId := '00000'B,       /* fix value acc. 33.401 cl. 8.1
                                   @sic R5-101050: BearerId changed to 5 bits sic@ */
    SecurityStarted := false
  };

  template (value) NAS_DL_Message_Type cs_SecurityProtectedNasMsg(SecurityHeaderType p_SecurityHeaderType,
                                                                  MessageAuthenticationCode p_MessageAuthenticationCode,
                                                                  NAS_SequenceNumber p_NAS_SequenceNumber,
                                                                  template (value) NAS_Message p_NAS_Message) :=
  { /* @status    APPROVED (ENDC, IMS, IMS_IRAT, LTE, LTE_A_IRAT, LTE_A_PRO, LTE_A_R10_R11, LTE_A_R12, LTE_IRAT, NBIOT, POS, UTRAN) */
    sECURITY_PROTECTED_NAS_MESSAGE := {
      securityHeaderType                 := p_SecurityHeaderType,
      protocolDiscriminator              := tsc_PD_EMM,
      messageAuthenticationCode          := p_MessageAuthenticationCode,
      sequenceNumber                     := p_NAS_SequenceNumber,
      nasMessage                         := p_NAS_Message
    }
  };

  template (value) ESM_MessageContainer cs_ESM_MessageContainer(template (omit) IEI8_Type p_IEI,
                                                                octetstring p_EncodedEsmMsg) :=
  { /* @status    APPROVED (ENDC, IMS, IMS_IRAT, LTE, LTE_A_IRAT, LTE_A_PRO, LTE_A_R10_R11, LTE_A_R12, LTE_IRAT, NBIOT, POS, UTRAN) */
    iei := p_IEI,
    iel := int2oct(lengthof(p_EncodedEsmMsg), 2),
    esmPdu := p_EncodedEsmMsg
  };

  /*
   * @desc      estimate COUNT (in UL) based on SN of received PDU and previous COUNT
   *            Note: at the beginning COUNT is intialised with 0 as well as the SN at the UE
   *                  => an overflow is assumed when (previous SN > received SN)
   * @param     p_PrevCount      .. COUNT of the previous UL message
   * @param     p_SequenceNumber .. SN received in current UL message
   * @return    NasCount_Type    .. estimated COUNT
   * @status    APPROVED (ENDC, IMS, IMS_IRAT, LTE, LTE_A_IRAT, LTE_A_PRO, LTE_A_R10_R11, LTE_A_R12, LTE_IRAT, NBIOT, POS, UTRAN)
   */
  function f_NasSecurity_EstimateCOUNT(NasCount_Type p_PrevCount,
                                       NasEmu_SN_Type p_SequenceNumber) return NasCount_Type
  {
    var integer v_PrevCountValue := oct2int(p_PrevCount);
    var integer v_CountValue;
    var integer v_MaxSnPlus1;
    var integer v_PrevSnValue;
    var integer v_ReceivedSnValue;
    var integer v_OverflowCounter;    /* Note: for normal (long) SN this is the overflow counter as described in 24.301;
                                         for 5 bit SN it includes the 3 most significant bits of the least significant octet (what normally is the SN) */
    if (ischosen(p_SequenceNumber.Long)) {
      v_ReceivedSnValue := p_SequenceNumber.Long;
      v_MaxSnPlus1 := 256;
    } else {
      v_ReceivedSnValue := p_SequenceNumber.Short;
      v_MaxSnPlus1 := 32;
    }
    v_OverflowCounter := v_PrevCountValue / v_MaxSnPlus1;
    v_PrevSnValue := v_PrevCountValue mod v_MaxSnPlus1;

    if (v_ReceivedSnValue < v_PrevSnValue) {     // => overflow
      v_OverflowCounter := (v_OverflowCounter + 1) mod 65536;
    }
    v_CountValue := (v_OverflowCounter * v_MaxSnPlus1) + v_ReceivedSnValue;

    return int2oct(v_CountValue, 4);
  };

  /*
   * @desc      wrapper function for encvalue
   * @param     p_NasMessage
   * @return    bitstring
   * @status    APPROVED (ENDC, IMS, IMS_IRAT, LTE, LTE_A_IRAT, LTE_A_PRO, LTE_A_R10_R11, LTE_A_R12, LTE_IRAT, NBIOT, POS, UTRAN)
   */
  function f_NasEmu_EncvalueNAS(template (value) NAS_DL_Message_Type p_NasMessage) return bitstring
  {
    return encvalue(p_NasMessage);
  };

  /*
   * @desc      wrapper function for decvalue
   * @param     p_EncodedNasMessage (by reference)
   * @param     p_NAS_UL_Message    (by reference)
   * @return    integer
   * @status    APPROVED (ENDC, IMS, IMS_IRAT, LTE, LTE_A_IRAT, LTE_A_PRO, LTE_A_R10_R11, LTE_A_R12, LTE_IRAT, NBIOT, POS, UTRAN)
   */
  function f_NasEmu_DecvalueNAS(inout bitstring p_EncodedNasMessage,
                                out NAS_UL_Message_Type p_NAS_UL_Message) return integer
  {
    return decvalue(p_EncodedNasMessage, p_NAS_UL_Message);
  };

  /*
   * @desc      return a the decoded NAS PDU (v_DecodedNasPduUL.Msg) or v_DecodedNasPduUL.Invalid
   * @param     p_EncodedMsg
   * @return    NasEmu_DecodedNasPduUL_Type
   * @status    APPROVED (ENDC, IMS, IMS_IRAT, LTE, LTE_A_IRAT, LTE_A_PRO, LTE_A_R10_R11, LTE_A_R12, LTE_IRAT, NBIOT, POS, UTRAN)
   */
  function f_NasEmu_DecodeMsg(octetstring p_EncodedMsg) return NasEmu_DecodedNasPduUL_Type
  {
    var bitstring v_NasPduBitstring;
    var NAS_UL_Message_Type v_NAS_UL_Message;
    var NasEmu_DecodedNasPduUL_Type v_DecodedNasPduUL;
    
//    log("p_EncodedMsg:", p_EncodedMsg);
    v_NasPduBitstring := oct2bit(p_EncodedMsg);
    if (f_NasEmu_DecvalueNAS(v_NasPduBitstring, v_NAS_UL_Message) != 0) {  /* v_NasPduBitstring needed as a variable since being 'inout' in decvalue
                                                                              v_NAS_UL_Message is out parameter i.e. needs not to be initialised */
      f_NasEmulationError(__FILE__, __LINE__, "NAS message cannot be decoded");
      v_DecodedNasPduUL.Invalid := true;
    } else {
      v_DecodedNasPduUL.Msg := v_NAS_UL_Message;
    }
    return v_DecodedNasPduUL;
  }

  /*
   * @desc      check whether NAS message contains piggybacked (ESM) message and deocde it
   *            Note: function is called recursively
   * @param     p_NAS_UL_Message
   * @return    template (omit) NAS_UL_PduList_Type
   *            list of decoded piggybacked NAS messges (in general just one message)
   *            omit if given NAS message does not contain a piggybacked message
   * @status    APPROVED (ENDC, IMS, IMS_IRAT, LTE, LTE_A_IRAT, LTE_A_PRO, LTE_A_R10_R11, LTE_A_R12, LTE_IRAT, NBIOT, POS, UTRAN)
   */
  function f_NasEmu_DecodePiggybacked(NAS_UL_Message_Type p_NAS_UL_Message) return template (omit) NAS_UL_PduList_Type
  {
    var template (omit) NAS_UL_PduList_Type v_NAS_UL_PduList := omit;
    var template (omit) NAS_UL_Pdu_Type     v_NAS_UL_Pdu := omit;
    var octetstring v_PiggybackedOctetString := ''O;
    var NasEmu_DecodedNasPduUL_Type v_DecodedNasPduUL;

    if (ischosen(p_NAS_UL_Message.ul_NAS_TRANSPORT)) {
      // v_PiggybackedOctetString := p_NAS_UL_Message.ul_NAS_TRANSPORT.nasMessage.smsMessage;
      // decoding of smsMessage is not supported (i.e. the test case needs to deal with an octetstring)

    } else if (ischosen(p_NAS_UL_Message.aTTACH_COMPLETE)) {
      v_PiggybackedOctetString := p_NAS_UL_Message.aTTACH_COMPLETE.esmMessage.esmPdu;

    } else if (ischosen(p_NAS_UL_Message.aTTACH_REQUEST)) {
      v_PiggybackedOctetString := p_NAS_UL_Message.aTTACH_REQUEST.esmMessage.esmPdu;

    } else if (ischosen(p_NAS_UL_Message.cONTROL_PLANE_SERVICE_REQUEST)) {    /* @sic R5s170364: handling of CONTROL_PLANE_SERVICE_REQUEST sic@ */
      if (ispresent(p_NAS_UL_Message.cONTROL_PLANE_SERVICE_REQUEST.esmMessage.esmPdu)) {
        v_PiggybackedOctetString := p_NAS_UL_Message.cONTROL_PLANE_SERVICE_REQUEST.esmMessage.esmPdu;
      }
    } else {
      // NAS message does not contain piggybacked NAS message
    }

    if (lengthof(v_PiggybackedOctetString) > 0) {

      v_DecodedNasPduUL := f_NasEmu_DecodeMsg(v_PiggybackedOctetString);
      if (ischosen(v_DecodedNasPduUL.Invalid)) {
        // do nothing i.e. keep v_NAS_UL_Pdu as omit
      } else {
        v_NAS_UL_Pdu.Msg := v_DecodedNasPduUL.Msg;
        // recursive call: check whether piggybacked message contains further piggybacked messages
        v_NAS_UL_Pdu.PiggybackedPduList := f_NasEmu_DecodePiggybacked(v_DecodedNasPduUL.Msg);
      }
      v_NAS_UL_PduList[0] := v_NAS_UL_Pdu;      // Note: acc. to 24.301 V8.0.0 cl. 9.9.3.15 there is only one PDU piggybacked
    }
    return v_NAS_UL_PduList;
  }

  /*
   * @desc      encode piggybacked (ESM) message and add it to the NAS PDU
   *            Note: if there is a piggybacked ESM message the whole IE of the EMM ie replaced (i.e. not only the octetstring)
   * @param     p_NAS_DL_Pdu
   * @return    octetstring
   *            encoded NAS message
   * @status    APPROVED (ENDC, IMS, IMS_IRAT, LTE, LTE_A_IRAT, LTE_A_PRO, LTE_A_R10_R11, LTE_A_R12, LTE_IRAT, NBIOT, POS, UTRAN)
   */
  function f_NasEmu_EncodePiggybacked(NAS_DL_Pdu_Type p_NAS_DL_Pdu) return octetstring
  {
    const IEI8_Type const_EsmMsgIEI := '78'O;     // IEI for EsmMessage contained in AttachReject
    var template (value) NAS_DL_Message_Type v_NAS_DL_Message := p_NAS_DL_Pdu.Msg;
    var NAS_DL_PduList_Type v_PiggybackedPduList;
    var NAS_DL_Pdu_Type v_PiggybackedPDU;
    var integer v_NoOfPiggybacked;
    var octetstring v_EncodedPiggybackedMsg;

    if (ispresent(p_NAS_DL_Pdu.PiggybackedPduList)) {
      v_PiggybackedPduList := p_NAS_DL_Pdu.PiggybackedPduList;
      v_NoOfPiggybacked := lengthof(v_PiggybackedPduList);
    } else {
      v_NoOfPiggybacked := 0;
    }

    if (v_NoOfPiggybacked > 0) {
      v_PiggybackedPDU := v_PiggybackedPduList[0];
      v_EncodedPiggybackedMsg := bit2oct(f_NasEmu_EncvalueNAS(v_PiggybackedPDU.Msg));

      if (v_NoOfPiggybacked > 1) {
        f_NasEmulationError(__FILE__, __LINE__, "number of piggybacked PDUs is > 1 but acc. to 24.301 V8.0.0 there is only one message being piggy-backed");
        /* only the first piggybacked PDU will be considered */
      }
      if (ispresent(v_PiggybackedPDU.PiggybackedPduList)) {
        f_NasEmulationError(__FILE__, __LINE__, "Acc. to 24.301 V8.0.0 there is just one level of piggy-backing");
        /* piggybacking for the piggybacked PDU is ignored */
      }

      if (ischosen(v_NAS_DL_Message.aTTACH_ACCEPT)) {
        v_NAS_DL_Message.aTTACH_ACCEPT.esmMessage := cs_ESM_MessageContainer(omit, v_EncodedPiggybackedMsg);

      } else if (ischosen(v_NAS_DL_Message.aTTACH_REJECT)) {
        v_NAS_DL_Message.aTTACH_REJECT.esmMessage := cs_ESM_MessageContainer(const_EsmMsgIEI, v_EncodedPiggybackedMsg);

      } else if (ischosen(v_NAS_DL_Message.dl_NAS_TRANSPORT)) {
        f_NasEmulationError(__FILE__, __LINE__, "DL_NAS_TRANSPORT: encoding of SMS PDUs is not supported by the NAS emulator");
        // v_NAS_DL_Message.dl_NAS_TRANSPORT.nasMessage.smsMessage := ...;

      } else {
        f_NasEmulationError(__FILE__, __LINE__, "NAS message can not carry piggy-backed NAS PDU");
        /* piggy backed messages is ignored */
      }
    }
    return bit2oct(f_NasEmu_EncvalueNAS(v_NAS_DL_Message));
  }

  /*
   * @desc      encode and cipher NAS PDU
   * @param     p_NasSecurityByRef  (by reference)
   * @param     p_NAS_MSG_Request .. NAS message
   * @return    octetstring       .. encoded and ciphered NAS message (DedicatedInfoNAS)
   * @status    APPROVED (ENDC, IMS, IMS_IRAT, LTE, LTE_A_IRAT, LTE_A_PRO, LTE_A_R10_R11, LTE_A_R12, LTE_IRAT, NBIOT, POS, UTRAN)
   */
  function f_EncodeAndCipherNasPdu(inout NasSecurity_Type p_NasSecurityByRef,
                                   NAS_MSG_Request_Type p_NAS_MSG_Request) return octetstring
  { /* @sic R5s160711 BASELINE MOVING 2016 - NBIOT: p_NasSecurityByRef  sic@ */
    var SecurityHeaderType v_SecurityStatus := p_NAS_MSG_Request.SecurityProtection.Status;
    var boolean v_ForceMacError := p_NAS_MSG_Request.SecurityProtection.ForceMacError;  // @sic R5s100358 additional changes sic@
    var octetstring v_EncodedNasPdu;
    var NasCount_Type v_CountDL;
    var MessageAuthenticationCode v_CalculatedMac;
    var NAS_SequenceNumber v_SequenceNumber;
    var octetstring v_Octet6toN;

    v_EncodedNasPdu := f_NasEmu_EncodePiggybacked(p_NAS_MSG_Request.Pdu);

    if (v_SecurityStatus != tsc_SHT_NoSecurityProtection) {

      if (not p_NasSecurityByRef.SecurityStarted) {
        f_NasEmulationError(__FILE__, __LINE__, "security is not started");
        /* => PDU will not be security protected */

      } else {
        /* Note: acc. 24.301 cl. 4.4.1 "When both ciphering and integrity protection are activated, then the NAS message is first encrypted
           and then the encrypted NAS message and the SN are integrity protected by calculating the MAC"
           => we apply ciphering first and then integrity protection */

        // INCREMENT DL NAS COUNT:
        v_CountDL := f_NasSecurity_IncrementCOUNT(p_NasSecurityByRef.NasCount.DL);
        p_NasSecurityByRef.NasCount.DL := v_CountDL;

        // APPLY CIPHERING (if necessary):
        if ((v_SecurityStatus == tsc_SHT_IntegrityProtected_Ciphered) or
            (v_SecurityStatus == tsc_SHT_IntegrityProtected_Ciphered_NewSecurityContext)) {

          v_EncodedNasPdu := fx_NasCiphering(v_EncodedNasPdu,
                                             p_NasSecurityByRef.Ciphering.Algorithm,
                                             p_NasSecurityByRef.Ciphering.K_NAS,
                                             v_CountDL,
                                             p_NasSecurityByRef.BearerId);
        }

        // APPLY INTEGRITY PROTECTION:
        v_SequenceNumber := f_NasSecurity_ExtractSNfromCOUNT(v_CountDL);
        v_Octet6toN := v_SequenceNumber & v_EncodedNasPdu;
        v_CalculatedMac := fx_NasIntegrityAlgorithm(v_Octet6toN,
                                                    p_NasSecurityByRef.Integrity.Algorithm,
                                                    p_NasSecurityByRef.Integrity.K_NAS,
                                                    v_CountDL,
                                                    p_NasSecurityByRef.BearerId,
                                                    tsc_DirectionDL);

        if (v_ForceMacError) {    // @sic R5s100358 additional changes sic@
          v_CalculatedMac := not4b v_CalculatedMac;      // O4_Type
        }

        // build up SECURITY PROTECTED NAS message
        // @sic R5s090194: v_SecurityStatus used directly in call of cs_SecurityProtectedNasMsg sic@
        v_EncodedNasPdu := bit2oct(f_NasEmu_EncvalueNAS(cs_SecurityProtectedNasMsg(v_SecurityStatus,
                                                                                   v_CalculatedMac,
                                                                                   v_SequenceNumber,
                                                                                   v_EncodedNasPdu)));
      }
    }
    return v_EncodedNasPdu;
  }

  template (value) NAS_MSG_Indication_Type cs_NAS_MSG_Indication(SecurityHeaderType p_NAS_SecurityStatus,
                                                                 NasCount_Type p_NasCount,
                                                                 NAS_UL_Message_Type p_NAS_UL_Message) :=
  { /* local type templates (uses f_NasEmu_DecodePiggybacked) */
    /* @status    APPROVED (ENDC, IMS, IMS_IRAT, LTE, LTE_A_IRAT, LTE_A_PRO, LTE_A_R10_R11, LTE_A_R12, LTE_IRAT, NBIOT, POS, UTRAN) */
    SecurityProtection:= {
      Status := p_NAS_SecurityStatus,
      NasCount := p_NasCount
    },
    Pdu := {
      Msg := p_NAS_UL_Message,
      PiggybackedPduList := f_NasEmu_DecodePiggybacked(p_NAS_UL_Message)
    }
  };

  /*
   * @desc      Decipher and decode NAS PDU
   *            Notes:
   *            - When receiving a security protected NAS PDU firstly deceiphering is applied; integrity protection is applied on the deciphered NAS PDU;
   *            - Deciphering is applied on the encoded NAS PDU only (but not on any other IE of SECURITY PROTECTED NAS MESSAGE) since the SN is used for deciphering;
   *            - if the NAS PDU is security protected (without error) the UL NAS COUNT is incremented
   * @param     p_NasSecurityByRef  (by reference)
   * @param     p_NAS_DedicatedInformation .. encoded and ciphered NAS message
   * @return    template (value) NasEmu_DecodingInfo_Type .. decoded NAS message
   * @status    APPROVED (ENDC, IMS, IMS_IRAT, LTE, LTE_A_IRAT, LTE_A_PRO, LTE_A_R10_R11, LTE_A_R12, LTE_IRAT, NBIOT, POS, UTRAN)
   */
  function f_DecipherAndDecodeNasPdu(inout NasSecurity_Type p_NasSecurityByRef,
                                     octetstring p_NAS_DedicatedInformation) return template (value) NasEmu_DecodingInfo_Type
  { /* @sic R5s160711 BASELINE MOVING 2016 - NBIOT: p_NasSecurityByRef  sic@ */
    var template (value) NasEmu_DecodingInfo_Type v_DecodingInfo := cs_DecodingInfo_Init; // NasIndication := omit, IntegrityError := false
    var NasEmu_DecodedNasPduUL_Type v_DecodedNasPduUL;
    var octetstring v_IntegrityProtectedOctets;
    var SECURITY_PROTECTED_NAS_MESSAGE v_SecurityProtectedNasMsg;
    var MessageAuthenticationCode v_ContainedMac;
    var MessageAuthenticationCode v_CalculatedMac;
    var NasEmu_SN_Type v_SequenceNumber;
    var B16_Type v_ShortMac;                     // (SERVICE_REQUEST)
    var NAS_Message v_EncodedNasPdu;
    var NasCount_Type v_CountUL;
    var SecurityHeaderType v_SecurityHeader;

    // Decode NAS message: message is either SECURITY_PROTECTED_NAS_MESSAGE or non-protected NAS message
    v_DecodedNasPduUL := f_NasEmu_DecodeMsg(p_NAS_DedicatedInformation);

//    log("v_DecodedNasPduUL:", v_DecodedNasPduUL);
    if (ischosen(v_DecodedNasPduUL.Invalid)) {
      return v_DecodingInfo;            // v_DecodingInfo is {omit, false}
    }

    if (ischosen(v_DecodedNasPduUL.Msg.sECURITY_PROTECTED_NAS_MESSAGE)) {     // SECURITY_PROTECTED_NAS_MESSAGE

      v_SecurityProtectedNasMsg := v_DecodedNasPduUL.Msg.sECURITY_PROTECTED_NAS_MESSAGE;

      v_SecurityHeader      := v_SecurityProtectedNasMsg.securityHeaderType;
      v_ContainedMac        := v_SecurityProtectedNasMsg.messageAuthenticationCode;
      v_SequenceNumber.Long := oct2int(v_SecurityProtectedNasMsg.sequenceNumber);
      v_EncodedNasPdu       := v_SecurityProtectedNasMsg.nasMessage;
      v_CountUL             := f_NasSecurity_EstimateCOUNT(p_NasSecurityByRef.NasCount.UL, v_SequenceNumber);


      if ((not p_NasSecurityByRef.SecurityStarted) and (v_SecurityHeader != tsc_SHT_IntegrityProtected)) { /* @sic R5s100024 tsc_SHT_EnabledSecurityProtection replaced by tsc_SHT_IntegrityProtected sic@ */
        /* Note: A UE is allowed to transmit a security protected Attach request (Security header set to '0001'B)
         *       at the initial registration in case the USIM used has a valid EPS security context  */

        f_NasEmulationError(__FILE__, __LINE__, "security protected PDU received but security is not started");
        return v_DecodingInfo;            // v_DecodingInfo is {omit, false}

      } else {
        if (p_NasSecurityByRef.SecurityStarted) {
          /* Note: acc. 24.301 cl. 4.4.1 "When both ciphering and integrity protection are activated, then the NAS message is first encrypted
             and then the encrypted NAS message and the SN are integrity protected by calculating the MAC"
             => we apply integrity protection on the ciphered ciphering data */

          // CHECK INTEGRITY
          v_IntegrityProtectedOctets := v_SecurityProtectedNasMsg.sequenceNumber & v_EncodedNasPdu;
          v_CalculatedMac := fx_NasIntegrityAlgorithm(v_IntegrityProtectedOctets,
                                                      p_NasSecurityByRef.Integrity.Algorithm,
                                                      p_NasSecurityByRef.Integrity.K_NAS,
                                                      v_CountUL,
                                                      p_NasSecurityByRef.BearerId,
                                                      tsc_DirectionUL);
          if (v_ContainedMac == v_CalculatedMac) {
            p_NasSecurityByRef.NasCount.UL := v_CountUL;   /* write back the latest count value */

          } else {
            // UL NAS COUNT is not updated in case of integrity error
            v_DecodingInfo.IntegrityError := true;
          }

          // DECIPHERING:
          if ((v_SecurityHeader == tsc_SHT_IntegrityProtected_Ciphered) or
              (v_SecurityHeader == tsc_SHT_IntegrityProtected_Ciphered_NewSecurityContext)) {

            v_EncodedNasPdu := fx_NasDeciphering(v_EncodedNasPdu,
                                                 p_NasSecurityByRef.Ciphering.Algorithm,
                                                 p_NasSecurityByRef.Ciphering.K_NAS,
                                                 v_CountUL,
                                                 p_NasSecurityByRef.BearerId);
          }
        } else {
          // NAS security not started yet, but e.g. in case of ATTACH REQ
          p_NasSecurityByRef.NasCount.UL := v_CountUL;   /* write back the latest count value */
        }
        // Decode NAS message
        v_DecodedNasPduUL := f_NasEmu_DecodeMsg(v_EncodedNasPdu);
        if (ischosen(v_DecodedNasPduUL.Invalid)) {
          // Do nothing: v_DecodingInfo.NasIndication remains omit
        } else {
          if (v_SecurityHeader == tsc_SHT_IntegrityProtected_PartiallyCiphered) {           /* NBIOT */
            if (not ischosen(v_DecodedNasPduUL.Msg.cONTROL_PLANE_SERVICE_REQUEST)) {
              f_NasEmulationError(__FILE__, __LINE__, "Only CONTROL_PLANE_SERVICE_REQUEST can be partially ciphered");
            } else {    /* @sic R5s170364: CONTROL_PLANE_SERVICE_REQUEST may contain esmMessage and nasMessage sic@ */
              if (ispresent(v_DecodedNasPduUL.Msg.cONTROL_PLANE_SERVICE_REQUEST.esmMessage)) {
                v_DecodedNasPduUL.Msg.cONTROL_PLANE_SERVICE_REQUEST.esmMessage.esmPdu := fx_NasDeciphering(v_DecodedNasPduUL.Msg.cONTROL_PLANE_SERVICE_REQUEST.esmMessage.esmPdu,
                                                                                                           p_NasSecurityByRef.Ciphering.Algorithm,
                                                                                                           p_NasSecurityByRef.Ciphering.K_NAS,
                                                                                                           v_CountUL,
                                                                                                           p_NasSecurityByRef.BearerId);
              }
              if (ispresent(v_DecodedNasPduUL.Msg.cONTROL_PLANE_SERVICE_REQUEST.nasMessage)) {
                v_DecodedNasPduUL.Msg.cONTROL_PLANE_SERVICE_REQUEST.nasMessage.smsmessage := fx_NasDeciphering(v_DecodedNasPduUL.Msg.cONTROL_PLANE_SERVICE_REQUEST.nasMessage.smsmessage,
                                                                                                               p_NasSecurityByRef.Ciphering.Algorithm,
                                                                                                               p_NasSecurityByRef.Ciphering.K_NAS,
                                                                                                               v_CountUL,
                                                                                                               p_NasSecurityByRef.BearerId);
              }
            }
          }                                                                                 /* /NBIOT */
          v_DecodingInfo.NasIndication := cs_NAS_MSG_Indication(v_SecurityHeader,
                                                                v_CountUL,
                                                                v_DecodedNasPduUL.Msg);
        }
      }
    } else if (ischosen(v_DecodedNasPduUL.Msg.sERVICE_REQUEST)) {             // SERVICE_REQUEST

      // NAS COUNT: Wrap-around count + seq number
      // SERVICE_REQUEST: 5-bit seq number
      //                  Short MAC: cl. 9.9.3.28 integrity is applied on the octet 1 and 2 of the SERVICE_REQUEST

      v_SequenceNumber.Short := bit2int(v_DecodedNasPduUL.Msg.sERVICE_REQUEST.ksiAndSN.sn);
      v_ShortMac := v_DecodedNasPduUL.Msg.sERVICE_REQUEST.shortMAC.macValue;
      v_CountUL  := f_NasSecurity_EstimateCOUNT(p_NasSecurityByRef.NasCount.UL, v_SequenceNumber);

      v_IntegrityProtectedOctets := substr(p_NAS_DedicatedInformation, 0, 2); // 24.301 cl. 9.9.3.28: integrity is applied on the first 2 octets of SERVICE_REQUEST

      v_CalculatedMac := fx_NasIntegrityAlgorithm(v_IntegrityProtectedOctets,
                                                  p_NasSecurityByRef.Integrity.Algorithm,
                                                  p_NasSecurityByRef.Integrity.K_NAS,
                                                  v_CountUL,
                                                  p_NasSecurityByRef.BearerId,
                                                  tsc_DirectionUL);

      if (bit2oct(v_ShortMac) == substr(v_CalculatedMac, 2, 2)) {             // 24.301 cl. 9.9.3.28: ShortMAC contains the 2 least significant octets of the MAC
        p_NasSecurityByRef.NasCount.UL := v_CountUL;                              // write back the latest count value

      } else {
        // UL NAS COUNT is not updated in case of integrity error
        v_DecodingInfo.IntegrityError := true;
      }
      v_DecodingInfo.NasIndication := cs_NAS_MSG_Indication(tsc_SHT_IntegrityProtected,
                                                            p_NasSecurityByRef.NasCount.UL,
                                                            v_DecodedNasPduUL.Msg);

    } else {                                                                  // non security protected PDU
      v_DecodingInfo.NasIndication := cs_NAS_MSG_Indication(tsc_SHT_NoSecurityProtection,
                                                            p_NasSecurityByRef.NasCount.UL,    /* Note: NAS-Count shall be ignored by the test case
                                                                                                  in case of non-protected messages */
                                                            v_DecodedNasPduUL.Msg);
    }
    return v_DecodingInfo;
  }

  /*
   * @desc      handle configuration of the NAS emulation (NAS_CTRL_REQ)
   * @param     p_Port
   * @param     p_NasSecurityByRef  (by reference)
   * @status    APPROVED (ENDC, IMS, IMS_IRAT, LTE, LTE_A_IRAT, LTE_A_PRO, LTE_A_R10_R11, LTE_A_R12, LTE_IRAT, NBIOT, POS, UTRAN)
   */
  altstep a_NasEmu_ConfigurationHandler(NASEMU_CTRL_PORT p_Port,
                                        inout NasSecurity_Type p_NasSecurityByRef)
  { /* @sic R5s160711 BASELINE MOVING 2016 - NBIOT: p_Port, p_NasSecurityByRef  sic@ */
    var NAS_CTRL_REQ v_ConfigAsp;
    var NasCountInfo_Type v_NasCountInfo;

    [] p_Port.receive(cr_NAS_CTRL_Security_REQ) -> value v_ConfigAsp {          /* NAS SECURITY */
      if (ischosen(v_ConfigAsp.Request.Security.StartRestart)) {                /* Start NAS Security */
        p_NasSecurityByRef.SecurityStarted := true;
        p_NasSecurityByRef.Integrity := v_ConfigAsp.Request.Security.StartRestart.Integrity;
        p_NasSecurityByRef.Ciphering := v_ConfigAsp.Request.Security.StartRestart.Ciphering;
        if (ispresent(v_ConfigAsp.Request.Security.StartRestart.NasCountReset)) {
          p_NasSecurityByRef.NasCount.UL := f_NasCountInit();
          p_NasSecurityByRef.NasCount.DL := f_NasCountInit();
        }
      } else {                                                                  /* Release: Reset NAS Security */
        p_NasSecurityByRef := f_NasEmu_NasSecurity_Init();
      }
      if (v_ConfigAsp.Common.ControlInfo.CnfFlag) {
        p_Port.send(cs_NAS_CTRL_Security_CNF);
      }
    }
    [] p_Port.receive(cr_NAS_CTRL_NasCount_REQ) -> value v_ConfigAsp {            /* NAS COUNT */
      if (ischosen(v_ConfigAsp.Request.NasCount.Set)) {
        v_NasCountInfo := v_ConfigAsp.Request.NasCount.Set;
        if (ispresent(v_NasCountInfo.UL)) {
          p_NasSecurityByRef.NasCount.UL := v_NasCountInfo.UL;
        } /* else: keep as it is */
        if (ispresent(v_NasCountInfo.DL)) {
          p_NasSecurityByRef.NasCount.DL := v_NasCountInfo.DL;
        } /* else: keep as it is */
        if (v_ConfigAsp.Common.ControlInfo.CnfFlag) {
          p_Port.send(cs_NAS_CTRL_NasCountSet_CNF);
        }
      } else if (ischosen(v_ConfigAsp.Request.NasCount.Get)) {
        if (v_ConfigAsp.Common.ControlInfo.CnfFlag) {
          p_Port.send(cs_NAS_CTRL_NasCountGet_CNF(p_NasSecurityByRef.NasCount));
        }
      }
    }
  }

}
