/******************************************************************************/
// @copyright   Copyright Notification
//   No part may be reproduced except as authorized by written permission.
//   The copyright and the foregoing restriction extend to reproduction in all media.
//   Trademark 2019, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).
//   All rights reserved.
// @version: 36.523-3 v15.3.0
// $Date: 2018-11-28 13:20:54 +0100 (Wed, 28 Nov 2018) $
// $Rev: 23090 $
/******************************************************************************/

module NBIOT_ASP_TypeDefs {
  /* Type definitions for configuration of the system simulator;
   * Common design principles:
   * Semantics of OMIT: for all TTCN-3 type definitions used in ASPs omit means "keep as it is" =>
   * - on initial configuration in general all fields shall be provided
   * - no default values for fields are foreseen
   * - if necessary non-existence of information shall be explicitly configured
   *   (e.g. with a union of "no configuration" and "configuration parameters"
   * - fields within structures imported from the core spec are excepted from this rule */

  import from NBIOT_RRC_ASN1_Definitions language "ASN.1:2002" all with {encode "UNALIGNED_PER_OctetAligned"};
  import from NBIOT_Imported_EUTRA_ASN1_Types all;
  import from NBIOT_AspCommon_Templates all;
  import from CommonDefs all;
  import from CommonAspDefs all;
  import from NBIOT_CommonDefs all;
  import from EUTRA_NB_CommonDefs all;
  import from EUTRA_NB_ASP_TypeDefs all;

  //****************************************************************************

  group ASN1_Container { /* Definitions containing ASN.1 types for backward compatibility;
                          * NOTE 1: PCCH_Message and BCCH_DL_SCH_Message already have a critical extension mechanism by RRC type definition
                          * NOTE 2: BCCH_BCH_Message contains the MIB and therefore is considered to be not extendable
                          * NOTE 3: "simple types" are not considered: C_RNTI, PhysCellId, CellIdentity, ARFCN_ValueEUTRA
                          */

  type record NPUSCH_ConfigDedicated_Type {
    NPUSCH_ConfigDedicated_NB_r13 R13
  };
  type record NPRACH_Config_Type {
    NPRACH_ConfigSIB_NB_r13 R13
  };
  type record NB_RACH_ConfigCommon_Type {
    RACH_ConfigCommon_NB_r13  R13
  };
  type union NB_PDCP_Config_Type {
    PDCP_Config_NB_r13 R13
  };
  type record NB_UL_AM_RLC_Type {
    UL_AM_RLC_NB_r13 R13
  };
  type record NB_DL_AM_RLC_Type {
    DL_AM_RLC_NB_r13 R13
  };
  type record NPUSCH_ConfigCommon_Type {
    NPUSCH_ConfigCommon_NB_r13 R13
  };
  type record NB_DRX_Config_Type {
    DRX_Config_NB_r13 R13
  };
  type record CarrierConfigDedicated_Type {
    CarrierConfigDedicated_NB_r13 R13
  };
  type record DL_GapConfig_Type {
    DL_GapConfig_NB_r13 R13
  };
  type record DL_Bitmap_Type {
    DL_Bitmap_NB_r13 R13
  };
  
  type record NB_DL_ConfigCommon_NB_Type {
    DL_ConfigCommon_NB_r14 R14
  };

  type record NB_UL_ConfigCommon_NB_Type {
    UL_ConfigCommon_NB_r14 R14
  };

  } // End group System_Configuration

  //****************************************************************************

  group System_Configuration {
  //****************************************************************************
  // Formal ASP Definitions for system configuration
  //****************************************************************************

  type union NB_SystemRequest_Type {
    NB_CellConfigRequest_Type           Cell,                   /* configure/release a cell */
    NB_CellAttenuationList_Type         CellAttenuationList,    /* power attenuation for one or several cells;
                                                                 * all cells included in the list shall be changed at the same time;
                                                                 * all cells in the list shall reach the new cell power within a maximum of 100ms (10 frames)
                                                                 * acc. to the tolerances given in TS 36.508
                                                                 * NOTE: In the common ASP part the CellId shall be set
                                                                 * - to the cell the timing information refers to if activation time shall be applied
                                                                 * - to nbiot_Cell_NonSpecific when there is no activation time */
    NB_RadioBearerList_Type             RadioBearerList,        /* configure/release one or several SRBs and/or DRBs */
    Null_Type                           EnquireTiming,          /* get HSFN, SFN and sub-frame number for this cell */
    NB_AS_Security_Type                 AS_Security,            /* StartRestart/Release of AS security */
    NB_PagingTrigger_Type               Paging,                 /* to trigger SS to send paging at the given paging occasion (as calculated in TTCN) or a Direct Indication*/
    NB_L1Mac_IndicationControl_Type     L1MacIndCtrl,           /* to configure SS to generate indications for L1/MAC events */
    NB_PDCP_CountReq_Type               PdcpCount,              /* to set or enquire PDCP COUNT for one or more RBs */
    NB_RLC_CountsReq_Type               RlcCounts,              /* to set or enquire RLC Counts VTS and VRR */
    NB_RA_NPDCCH_Order_Type             NpdcchOrder,            /* to configure SS to transmit a NPDCCH order with configured C-RNTI to the UE to trigger RA procedure;
                                                                   result in DCI Format N1 transmission as in TS 36.212, clause 6.4.3.2;
                                                                   the SS shall schedule the NPDCCH order in the same way as DCI for DL transmissions */
    NB_PTM_Config_Type                  PtmConfig,              /* Configuration of Point To Multipoint (PTM) */
    DRB_Traffic_Control_Type             DRBTrafficCtrl,
    NB_L1Mac_ControlConfiguration_Type                          L1MacCtrlCfg
    
  };

  type union NB_SystemConfirm_Type {                            /* confirmations for system configuration;
                                                                 * in general to be sent after the configuration has been done */
    Null_Type                           Cell,                   /* (no further parameters from SS) */
    Null_Type                           CellAttenuationList,    /* (no further parameters from SS)
                                                                 * NOTE 1:
                                                                 * the confirmation shall be sent when all cells have changed power levels
                                                                 * NOTE 2:
                                                                 * for the CellId in the common ASP part the same rules are applied as for the SYSTEM REQ */
    Null_Type                           RadioBearerList,        /* (no further parameters from SS) */
    Null_Type                           EnquireTiming,          /* SFN and sub-frame number are included in the TimingInfo */
    Null_Type                           AS_Security,            /* (no further parameters from SS) */
    Null_Type                           Paging,                 /* normally not needed but defined for completeness */
    Null_Type                           L1MacIndCtrl,           /* (no further parameters from SS) */
    NB_PDCP_CountCnf_Type               PdcpCount,              /* as response to 'Get' a list is returned containing COUNT information for the requested RBs */
    NB_RLC_CountsCnf_Type               RlcCounts,              /* as response to 'Get' a list is returned containing RLC Counts VTS and VRR */
    Null_Type                           NpdcchOrder,             /* confirmation for NPDCCH Order */
    DRB_TrafficCtrlCnf_Type             DRBTrafficCtrl,
    Null_Type                           L1MacCtrlCfg  
  };
  
  type union NB_HarqError_Type {
    Null_Type                   UL,                             /* there is just one HARQ process for NB-IoT and uplink HARQ operation is asynchronous (see TS 36.321 clause 5.4.2) */
    Null_Type                   DL
  };

  type record NB_RachPreamble_Type {
    integer                     RAPID,                          /* indicates the RAPID of the preamble used (integer (0..63));
                                                                   according to TS 36.321 clause 6.2.2 "For NB-IoT, the Random Access Preamble IDentifier field corresponds to the start subcarrier index";
                                                                   in case of NPDCCH order it is calculated according to TS 36.321 clause 5.2.1 for CBRA or CFRA */
    integer                     RepetitionsPerPreambleAttempt,  /* number of preambles the SS has detected for the preamble attempt */
    integer                     NonAnchorCarrierId optional     /* Id of the non-anchor carrier (-> NB_NonAnchorCarrierCommonUL_Type.Id) on which the UE as sent the RACH preamble;
                                                                   omit when the RACH preamble has been sent on the anchor carrier */
  };

  
  type integer NB_DPR_DataVolumnIndex_Type (0..15);
  type integer NB_DPR_PowerHeadroomLevel_Type (0..3);

  type record NB_DPR_Type {
    NB_DPR_DataVolumnIndex_Type         DataVolumnIndex,
    NB_DPR_PowerHeadroomLevel_Type      PowerHeadroomLevel
  };

  type union NB_SystemIndication_Type {
    charstring                          Error,                  /* indicates an error situation in SS;
                                                                 * is not explicitly handled in TTCN but causes an INCONC due to default behaviour;
                                                                 * an additional error code can be signalled in the common part of the ASP; */
    NB_RachPreamble_Type                RachPreamble,           /* RACH preamble being sent by the UE
                                                                   NOTE 1: for NB-IoT there can be more than one repetition per preamble attempt (numRepetitionsPerPreambleAttempt-r13 in NPRACH-ConfigSIB-NB-DEFAULT in SystemInformationBlockType2-NB); nevertheless the SS shall raise only one indication per preamble attempt and indicate the number of attempts in the 'RepetitionsPerPreambleAttempt' field of the indication
                                                                   NOTE 2: The SS shall provide start of the attempt's first preamble as timing information of the primitive (in a lab environment in general this is the start time of the NPRACH preamble transmission according to clause 10.1.6.1 of TS 36.211 - depending on nprach-Periodicity and nprach-StartTime) */
    NB_DPR_Type                         DPR,                    /* indicates MAC DPR control element (TS 36.321 clause 6.1.3.10) being contained in MAC PDU */
    NB_HarqError_Type                   HarqError,              /* indicates detection of HARQ error:
                                                                 * 1. HARQ CRC error for UL data
                                                                 * 2. HARQ NACK from the UE unless SS is configured to report HARQ ACK/NACK */
    HARQ_Type                           UL_HARQ                 /* to report the UL HARQ ACK/NACK;
                                                                   In case of HARQ repetitions (i.e. ack-NACK-NumRepetitions-Msg4-r13 OR ack-NACK-NumRepetitions-r13 > r1) the SS shall raise only one indication per logical HARQ, but not an indication per HARQ repetition
                                                                   (e.g. with ack-NACK-NumRepetitions-r13 = r8 in NPUSCH-ConfigDedicated-NB-r13 still only one HARQ indication shall be raised).
                                                                   The SS shall provide start of UL HARQ feedback as timing information of the primitive. */
  };

  } // End group System_Configuration

  //****************************************************************************

  group Cell_Configuration { /* Specific Info for Cell Configuration Primitive */

  // Primitive definition covers:
  // - Initial cell configuration
  // - Cell reconfigurations, mainly:
  //   - Cell Power configuration
  //   - System information
  //   - (to be continued)
  // - Release of a cell

  //----------------------------------------------------------------------------

  group Cell_Configuration_Common {

  type union NB_CellConfigRequest_Type {

    NB_CellConfigInfo_Type      AddOrReconfigure,               /* for cell configuration:
                                                                 * CellId : identifier of the cell to be configured
                                                                 * RoutingInfo : None
                                                                 * TimingInfo : Now (for initial configuration and for reconfiguration in general)
                                                                 * ControlInfo : CnfFlag:=true; FollowOnFlag:=false (in general) */
    Null_Type                   Release                         /* to remove a cell completely -
                                                                 * CellId : identifier of the cell to be released; nbiot_Cell_NonSpecific, in case all cells shall be released
                                                                 * RoutingInfo : None
                                                                 * TimingInfo : Now
                                                                 * ControlInfo : CnfFlag:=true; FollowOnFlag:=false (in general) */
  };
  
  type record NB_CellConfigInfo_Type {
    /* common information for initial cell configuration or reconfiguration;
       in case of reconfiguration OMIT means 'keep configuration as it is' */
    NB_BasicCellConfig_Type        Basic     optional,                  /* basic information for a cell (e.g. broadcasting) */
    NB_ActiveCellConfig_Type       Active    optional                   /* add. configuration for active cell (i.e. cell being capable to receive RACH preamble) */
  };
  
  type record NB_BasicCellConfig_Type {
    NB_StaticCellInfo_Type              StaticCellInfo        optional, /* Common information which does not change during a test */
    // Physical layer:
    NB_PhysicalLayerConfigDL_Type       PhysicalLayerConfigDL optional, /* default settings regarding DL physical control channels */
    InitialCellPower_Type               InitialCellPower      optional, /* reference cell power for the NRS of each antenna in DL
                                                                         * NOTE 1:
                                                                         * the power of the RS of an antenna may be reduced by antenna specific configuration
                                                                         * NOTE 2:
                                                                         * in general the power may be adjusted on a per resource element basis
                                                                         * => all physical channel/signal power settings shall be adjusted relatively to the NRS;
                                                                         * if there are more than one TX antennas each one may have its own attenuation;
                                                                         * independently from those relative power settings the cell power can easily be adjusted by just changing the reference power */
    NB_DownlinkBitmapConfig_Type        DownlinkBitmapConfig  optional, /* Usage of bitmap or no bitmap to define valid NB-IoT DL subframes; omit means "keep as it is" */
    // MAC: locical channels shared by all UEs
    NB_BcchConfig_Type                  BcchConfig            optional, /* configuration of BCCH/BCH; SS is triggered to configure RLC/MAC regardingly;
                                                                         * BCCH data on the NPDSCH
                                                                         * NPBCH: MIB;
                                                                         * NPDSCH: scheduling and resource allocation; SIBs */
    NB_PcchConfig_Type                  PcchConfig            optional  /* configuration of PCCH/PCH; SS is triggered to configure RLC/MAC regardingly;
                                                                         * PCCH data on the NPDSCH is distinguished by the P-RNTI
                                                                         * (needed even to modify SI => shall be configured for CELL_BROADCASTING) */
  };
  
  type record NB_ActiveCellConfig_Type {
    EUTRA_ASN1_C_RNTI_Type              C_RNTI                optional, /* (pre-)configured C-RNTI;
                                                                         * affects scrambling of NPDSCH/NPUSCH and CRC of NPDCCH(s);
                                                                         * shall be used implicitly in RACH procedure (i.e. as CE in RAR) */
    // Physical layer:
    NB_PhysicalLayerConfigUL_Type       PhysicalLayerConfigUL optional, /* parameters for NPRACH, NPUSCH
                                                                           Omitted when no UL frequency is applied to the band */
    // MAC: RACH procedure
    NB_RachProcedureConfig_Type         RachProcedureConfig   optional, /* to configure the SS's behaviour for the RACH procedure
                                                                           Omitted when no UL frequency is applied to the band */
    // MAC: UE-specific logical channels and related information
    NB_CcchDcchDtchConfig_Type          CcchDcchDtchConfig    optional, /* Parameters related to CCCH/DCCH/DTCH in UL and DL */
    NB_NonAnchorCarrier_Type            NonAnchorCarrier      optional, /* configuration for non-Anchor Carrier ("None" if there is no non-Anchor Carrier) */
    NB_CarrierConfigCommonDL_Type       CarrierConfigCommonDL optional, /* to config multiple NonAnchorCarriers for paging in accordance with TS 36.304 clause 7.1.1 (r14 and later) */
    NB_CarrierConfigCommonUL_Type       CarrierConfigCommonUL optional  /* to config multiple NonAnchorCarriers for RACH in accordance with TS 36.321 clause 5.1.1 (r14 and later) */
  };
  
  //----------------------------------------------------------------------------
  // Static cell info
  //----------------------------------------------------------------------------
  
  type record NB_StaticCellInfo_Type {
    /* Common information which (normally) does not change during a test;
       therefore all fields are mandatory */
    NB_CommonStaticCellInfo_Type        Common,                         /* information common for UL and DL */
    NB_CarrierFreq_Type                 Earfcn                          /* DL or UL EARFCN as defined in TS 36.101 */
  };

  //--------------------------------------------------------
  // Common Static Cell Info
  type record NB_CommonStaticCellInfo_Type {
    /* information common for UL and DL; all fields are mandatory */
    EUTRA_ASN1_PhysCellId_Type          PhysicalCellId,                 /* N(Ncell, ID): imported from core spec;
                                                                         * -> narrowband reference signals
                                                                         * -> scrambling of all DL physical channels:
                                                                         * NPBCH, NPDCCH, and NPDSCH (together with nRNTI) */
    integer                             NB_Band,
    CellTimingInfo_Type                 CellTimingInfo,
    NB_OperationModeInfo_Type           OperationModeInfo,
    NB_CommonStaticLteCellInfo_Type     LteCellInfo optional /* Only used for non-standalone operation mode, omitted otherwise.
                                                                Provides information on the associated E-UTRA cell within which the NBIOT cell is operating,
                                                                to enable LTE CRS broadcast or skipping (see TS 36.523-3 cl. 7A.1). */
  };
  
  type record NB_CommonStaticLteCellInfo_Type {
    /* @sic R5w180205r1 sic@ */
    integer                             Earfcn,                           /* E-UTRA cell DL EARFCN. */
    EUTRA_ASN1_Dl_Bandwidth_Type        Bandwidth,                        /* E-UTRA cell DL bandwidth. */
    EUTRA_CyclicPrefix_Type             CyclicPrefix,                     /* E-UTRA cell cyclic prefix. */
    EUTRA_ASN1_PhysCellId_Type          PhysicalCellId optional,          /* E-UTRA cell physical cell identity. If omitted, it is the same identity as the NBIOT cell identity. */
    NB_EutraControlRegionSize_Type      EutraControlRegionSize optional   /* Only used for the in-band operation modes, omitted otherwise. Indicates the control region size of the E-UTRA cell. */
  };
  //--------------------------------------------------------
  
  type integer NB_ToRS_EPRE_Ratio_Type (-35..0);           /* any-resource-element to NRS ratio in dB (e.g. NPDSCH-to-NRS ratio; see TS 36.213, clause 16.2.2) */
  
  } // End sub-group Cell_Configuration_Common
  
  //----------------------------------------------------------------------------
  
  group Downlink_Physical_Layer_Configuration {
  /* Downlink physical layer configuration:
     - DL antenna configuration
     - control region (NPDCCH)
     - primary/secondary sync signals
     - power control for physical channels and signals */
  
  //----------------------------------------------------------------------------
    
  type enumerated AntennaConfig_Type {                          /* This type specifies how many Tx antennas shall be used by the SS */
    AN1,                                                        /* single Tx antenna shall be used by the SS */
    AN2                                                         /* two Tx antennas shall be used by the SS */
  };

  group Physical_Channels {
  
  //****** NPBCH
  type record NPbchConfig_Type {
    NB_ToRS_EPRE_Ratio_Type     RelativeTxPower       optional  /* power ratio for NPBCH's resource elements relative to the NRS */
  };
  
  //****** NPDCCH

  type enumerated NPdcchFormat_Type {npdcchFormat0, npdcchFormat1};     /* NPDCCH format according to 36.211 claues 10.2.5.1 => aggregation level according to 36.213 clause 16.6 */

  type integer NPdcchSearchSpaceCandidateIndex_Type (0..7);             /* Index of the search space candidate to be used for UL grant or DL assignment (corresponds to "u" in the calculations of clause 16.6 in TS 36.213) */

  type record NPdcchUESpecificSearchSpace_Type {                        /* parameters for UE specific search space (UESS, TS 36.213 clause 16.6);
                                                                           In addition the SS needs to consider the "DCISubFrameRepetitionNumber" in the DCI UL/DL configuration
                                                                           to determine the value of R (actual number of NPDCCH repetitions for the DCI) */
    NPdcchFormat_Type                   NPdcchFormat,                   /* Aggregation level: According to tables 16.6-1, 16.6-2, 16.6-3 in TS 36.213 for typical search space configuration as per TS 36.508 NPDCCH format 1 is used i.e. there is just one search space candidate per NPDCCH transmission. Use cases for NPDCCH format 0 are FFS */
    NPDCCH_NumRepetitions_UESS_Type     NumRepetitions,                 /* Rmax for UE specific search space; TS 36.213 clause 16.6 */
    NPDCCH_StartSF_UESS_Type            StartSF,                        /* G for UE specific search space; TS 36.213 clause 16.6 */
    NPDCCH_Offset_UESS_Type             Offset,                         /* offset for UE specific search space; TS 36.213 clause 16.6 */
    NPdcchSearchSpaceCandidateIndex_Type    SearchSpaceCandidateForDL,  /* index of the search space candidate to be used for DL assignment */
    NPdcchSearchSpaceCandidateIndex_Type    SearchSpaceCandidateForUL   /* index of the search space candidate to be used for UL grant */
  };
    
  type record NPdcchType1CommonSearchSpace_Type {                       /* parameters for Type1 common search space for paging (Type1CSS, TS 36.213 clause 16.6);
                                                                           In addition the SS needs to consider the "DCISubFrameRepetitionNumber" in the DCI DL configuration
                                                                           to determine the value of R (actual number of NPDCCH repetitions for the DCI) */
    NPDCCH_NumRepetitions_Type1CSS_Type NumRepetitions                  /* Rmax for Type1 common search space; TS 36.213 clause 16.6 */
  };

  type record NPdcchType2CommonSearchSpace_Type {                       /* parameters for Type2 common search space for RACH procedure (Type2CSS, TS 36.213 clause 16.6);
                                                                         * In addition the SS needs to consider the "DCISubFrameRepetitionNumber" in the DCI DL configuration
                                                                         * to determine the value of R (actual number of NPDCCH repetitions for the DCI);
                                                                         * NOTE:
                                                                         * NumRepetitions, StartSF and Offset are also included in each entry of the nprach-ParametersList of NPRACH_Config_Type (NB_PhysicalLayerConfigUL_Type);
                                                                         * nevertheless NPRACH_Config_Type contains a list of NPRACH resources whereas the SS needs to consider only one search space corresponding to the NPRACH resource the UE shall select */
    NPDCCH_NumRepetitions_Type2CSS_Type NumRepetitions,                 /* Rmax for Type2 common search space; TS 36.213 clause 16.6 */
    NPDCCH_StartSF_Type2CSS_Type        StartSF,                        /* G for Type2 common search space; TS 36.213 clause 16.6 */
    NPDCCH_Offset_Type2CSS_Type         Offset,                         /* offset for Type2 common search space; TS 36.213 clause 16.6 */
    NPdcchSearchSpaceCandidateIndex_Type    SearchSpaceCandidateForRAR, /* index of the search space candidate to be used for random access response */
    NPdcchSearchSpaceCandidateIndex_Type    SearchSpaceCandidateForMsg4 /* index of the search space candidate to be used for Msg4 scheduling;
                                                                           this can be an DL transmission (contention resolution id based) or an UL transmission (C-RNTI based);
                                                                           in case of early contention resolution the SS shall use this index also for the subsequent DL transmission */
  };

  type record NPdcchConfig_Type {
    NPdcchUESpecificSearchSpace_Type    UESS                optional,   /* parameters for UE specific search space */
    NPdcchType1CommonSearchSpace_Type   Type1CSS            optional,   /* parameters for Type1 common search space */
    NPdcchType2CommonSearchSpace_Type   Type2CSS            optional,   /* parameters for Type2 common search space */
    NB_ToRS_EPRE_Ratio_Type             RelativeTxPower     optional    /* power ratio for NPDCCH's resource elements relative to the NRS */
  };
  
  //****** NPDSCH
  type record NPdschRelativeTxPower_Type {
    /* FFS */
    NB_ToRS_EPRE_Ratio_Type     RachResponse           optional,
    NB_ToRS_EPRE_Ratio_Type     BcchOnNPdsch           optional,
    NB_ToRS_EPRE_Ratio_Type     PcchOnNPdsch           optional,
    NB_ToRS_EPRE_Ratio_Type     CcchOnNPdsch           optional,
    NB_ToRS_EPRE_Ratio_Type     DcchDtchOnNPdsch       optional
  };

  type record NPdschConfig_Type {
    NPdschRelativeTxPower_Type  RelativeTxPower        optional
  };

  } // End sub-sub-group Physical_Channels
  
  //----------------------------------------------------------------------------
  
  group Physical_Signals {
  
  type record NB_PrimarySyncSignal_Type {
    NB_ToRS_EPRE_Ratio_Type        RelativeTxPower       optional  /* power ratio for NPSS's resource elements relative to the NRS (NOTE: applicable even though NRS is not in the same subframe) */
  };
  
  type record NB_SecondarySyncSignal_Type {
    NB_ToRS_EPRE_Ratio_Type        RelativeTxPower       optional  /* power ratio for NPSS's resource elements relative to the NRS (NOTE: applicable even though NRS is not in the same subframe)  */
  };
  
  type record NB_LTE_CellSpecificReferenceSignal_Type {
    NB_ToRS_EPRE_Ratio_Type        RelativeTxPower       optional  /* power ratio for the LTE CRS in case of In-band transmission with same PCI */
  };

  } // End sub-sub-group Physical_Signals
  
  //----------------------------------------------------------------------------
  type record NB_PhysicalLayerConfigDL_Type {
    /* all fields are declared as optional to allow single reconfigurations; in this case omit means "keep as it is" */
    AntennaConfig_Type                  Antenna  optional,
    NPbchConfig_Type                    NPbch    optional,
    NPdcchConfig_Type                   NPdcch   optional,
    NPdschConfig_Type                   NPdsch   optional,
    NB_PrimarySyncSignal_Type           NPss     optional,
    NB_SecondarySyncSignal_Type         NSss     optional,
    NB_LTE_CellSpecificReferenceSignal_Type LteCrs optional     /* if omitted in initial configuration the CRS shall be considered as being not present, i.e. shall not be transmitted by the SS  */
  };
  
  type union NB_DownlinkBitmapConfig_Type {                     /* to specify valid NB-IoT DL subframes according to TS 36.213 clause 16.4 */
    DL_Bitmap_Type                      Bitmap,                 /* valid NB-IoT DL subframe specified by bitmap and does not contain NPSS/NSSS/NPBCH/NB-SIB1 transmission */
    Null_Type                           None                    /* valid NB-IoT DL subframe does not contain NPSS/NSSS/NPBCH/NB-SIB1 transmission */
  };

  type union NB_NonAnchorCarrier_Type {
    CarrierConfigDedicated_Type         Config,                 /* SS shall apply given configuration of non-anchor-carrier in accordance with TS 36.331 clause 5.3.10.6 and TS 36.321 clause 5.1.1 */
    Null_Type                           None
  };
  
  } // End sub-group Downlink_Physical_Layer_Configuration
  
  //----------------------------------------------------------------------------
  
  group Uplink_Physical_Layer_Configuration {
  // Uplink physical channel configuration: NPRACH, NPUSCH and UL RS
  
  type enumerated NB_SubCarrierSpacingUL_Type { subCarrierSpacing_15kHz, subCarrierSpacing_3_75kHz };

  type record NPUSCH_Configuration_Type {
    NPUSCH_ConfigCommon_Type     Common           optional,
    NPUSCH_ConfigDedicated_Type  Dedicated        optional
  };
  
  type record NB_PhysicalLayerConfigUL_Type {
    /* NOTE:
     * In general SS is required to keep the UE's UL power constant */
    NPRACH_Config_Type           NPrach           optional,     /* parameters acc. TS 36.331, clause 6.7.3.2 */
    NPUSCH_Configuration_Type    NPusch           optional,     /* parameters acc. TS 36.331, clause 6.7.3.2
                                                                 * (including configuration of RS) */
    SS_TimingAdvanceConfig_Type  TimingAdvance    optional,     /* to adjust timing advance;
                                                                 * at cell initialization absolute timing advance is configured as 0; absolute timing advance may be modified as part of the Random Access procedure configuration;
                                                                 * in some MAC test cases timing advance may be configured to a non-zero (11 bit value) at the beginning and modified by (6 bit) timing advance commands during the test */
    NB_SubCarrierSpacingUL_Type  SubCarrierSpacingUL optional   /* 15kHz or 3.75kHz UL carrier spacing; cyclic prefix as per 36.211 Table 10.1.5-1 accordingly */
  };
  
  } // End sub-group Uplink_Physical_Layer_Configuration
  
  //----------------------------------------------------------------------------
  
  group Common_MAC_Configuration {
  /* Transport channel and MAC related procedures and configuration */
  
  //----------------------------------------------------------------------------
  // common types
  type integer NPDSCH_ImcsValue_Type (0..12);           /* Modulation and coding scheme index coding; TS 36.213 Table 16.4.1.5.1-1 */
  type integer NPUSCH_ImcsValue_Type (0..12);           /* Modulation and coding scheme index coding; TS 36.213 Table 16.5.1.2-2 */
  
  type enumerated NB_PdcchDciFormat_Type {
    dci_N0,     /* physical layer parameters acc. TS 36.508 Table 8.1.3.6.1.1-1 (for NPUSCH)*/
    dci_N1,     /* physical layer parameters acc. TS 36.508 Table 8.1.3.6.1.1-3 (for NPDSCH) */
    dci_N2      /* physical layer parameters acc. TS 36.508 Table 8.1.3.6.1.1-3 (for Paging) */
  };

  type enumerated NB_CRC_ErrorMode_Type {
    noError,                                                    /* SS shall not generate any CRC error */
    crcErrorWithRetransmission,                                 /* SS shall generate CRC error for DL transmissions and schedule retransmissions for each HARQ NACK */
    crcErrorWithoutRetransmission                               /* SS shall generate CRC error for DL transmissions but not do any retransmissions */
  };

  type record NB_DciDlInfoCommon_Type {                         /* Downlink control information according to 36.212 clause 6.4.3 */
    NB_PdcchDciFormat_Type      Format,                         /* NPDSCH: N1; Paging: N2 */
    integer                     RepetitionNumber,               /* Defined in TS 36.213, clause 16.4.1.3 */
    integer                     DCISubFrameRepetitionNumber,    /* Defined in TS 36.213, clause 16.6 */
    integer                     SchedulingDelay  optional,      /* Defined in TS 36.213, clause 16.4.1
                                                                 * Present for N1; not present for N2 (Paging) */
    integer                     HARQ_ACKResource  optional,     /* Defined in TS 36.213, clause 16.4.2
                                                                   present for N1;
                                                                   not present for N2 (Paging) */
    NB_CRC_ErrorMode_Type       CRC_ErrorMode,                  /* no CRC error, CRC error with or without subsequent retransmission by the SS */
    integer                     HARQ_ProcessNumber optional     /* 1 bit to be added by the SS to the DCI in case of DCI format N1 being mapped onto the UE specific search space given by the C-RNTI
                                                                   (e.g. in case of RA_RNTI the SS shall skip this field even when it is present);
                                                                   if present, HARQ_ProcessNumber is 0 or 1 addressing the HARQ process to be used; see TS 36.212 clause 6.4.3.2
                                                                   Note: When two HARQ processes are configured at the UE, this field is provided to the SS otherwise it is omit (-> PhysicalConfigDedicated_NB_r13.twoHARQ_ProcessesConfig_r14:=true) */
  };

  type record NB_DciDlInfoExplicit_Type {                       /* Downlink control information according to 36.212 clause 6.4.3 */
    NB_PdcchDciFormat_Type      Format,                         /* NPDSCH: N1; Paging: N2 */
    NPDSCH_ImcsValue_Type       Imcs,                           /* MCS index of TS 36.213 Table 16.4.1.5.1-1 */
    integer                     ResourceAssignment,             /* Defined in TS 36.213, clause 16.4.1.3: to determine the number of subframes */
    integer                     RepetitionNumber,               /* Defined in TS 36.213, clause 16.4.1.3 */
    integer                     DCISubFrameRepetitionNumber,    /* Defined in TS 36.213, clause 16.6 */
    integer                     SchedulingDelay   optional,     /* Defined in TS 36.213, clause 16.4.1
                                                                 * Present for N1;
                                                                 * not present for N2 (Paging) */
    integer                     HARQ_ACKResource  optional,     /* Defined in clause 16.4.2
                                                                   present for N1;
                                                                   not present for N2 (Paging)  */
    NB_CRC_ErrorMode_Type       CRC_ErrorMode,                  /* no CRC error, CRC error with or without subsequent retransmission by the SS */
    integer                     HARQ_ProcessNumber optional     /* (see NB_DciDlInfoCommon_Type) */
  };

  type union NB_DciDlInfo_Type {
    NB_DciDlInfoCommon_Type             Auto,                   /* SS shall choose the appropriate TBS */
    NB_DciDlInfoExplicit_Type           Explicit                /* used in MAC or RAB tests where exact TBS needs to be specified */
  };


  type record NB_AdaptiveHarqNack_Type {
    integer                             RedundancyVersion       /* to be used in DCI for HARQ NACK to request UL restransmission */
  };

  type union NB_UL_TransRetransmission_Type {
    Null_Type                           NewTransmission,        /* new transmission of data with redundancy version RV=0 (acc. to TS 36.321 clause 5.4.2.2); NDI is toggled */
    NB_AdaptiveHarqNack_Type            ReTransmissionAdaptive  /* DCI requesting retransmission (NDI not toggled) */
  };

  type record length (1..infinity) of NB_UL_TransRetransmission_Type NB_UL_TransRetransmissionList_Type;    /* to allow multiple retransmissions */

  type record NB_DciUlInfo_Type {                                       /* Downlink control information according to 36.212 clause 6.4.3 */
    integer                             SubCarrierIndication,           /* Defined in TS 36.213, clause 16.5.1.1 */
    integer                             ResourceAssignment,             /* Defined in TS 36.213, clause 16.5.1.2 */
    integer                             SchedulingDelay,                /* Defined in TS 36.213, clause 16.5.1 */
    NPUSCH_ImcsValue_Type               Imcs,                           /* Defined in TS 36.213, clause 16.5.1.2 */
    integer                             RedundancyVersion,              /* Defined in TS 36.213, clause 16.5.1.2 */
    integer                             RepetitionNumber,               /* Defined in TS 36.213, clause 16.5.1.1 */
    integer                             DCISubFrameRepetitionNumber,    /* Defined in TS 36.213, clause 16.6 */
    NB_UL_TransRetransmissionList_Type  TransRetransmissionList,        /* for possible adaptive restransmissions:
                                                                           when there is more than one entry in the list the SS shall sent DCIs for the subsequent entries as ACK/NACK response according to TS 36.213 clause 16.5.2 */
    integer                             HARQ_ProcessNumber optional     /* 1 bit to be added by the SS to the DCI
                                                                           if the corresponding DCI format is mapped onto the UE specific search space given by the C-RNTI
                                                                           if present, HARQ_ProcessNumber is 0 or 1 addressing the HARQ process to be used; see TS 36.212 clause 6.4.3.1
                                                                           Note: When two HARQ processes are configured at the UE, this field is provided to the SS otherwise it is omit (-> PhysicalConfigDedicated_NB_r13.twoHARQ_ProcessesConfig_r14:=true) */
  };


  type record NB_PeriodicGrant_Type {                           /* configuration of UL grants to be assigned periodically acc. to configuration of the UE specific search space;
                                                                   DL assignments have higher priority than UL grant schedules:
                                                                   when there is a DL transmission to be scheduled for some search space the UL grant shall be scheduled in the next search space which is not used for DL assignment */
    NB_DciUlInfo_Type                   DciInfo,                /* DCI format: N0  (TS 36.212, clause 6.4.3.1) */
    TransmissionRepetition_Type         NoOfRepetitions,        /* number of UL Grants to be automatically transmitted or continuous repetition */
    integer                             Periodicity  optional   /* 1 => every search space, 2 => every 2nd search space, 3 => every 3rd search space, etc.
                                                                   may be omitted if only one UL grant shall be assigned and shall be ignored by the SS in this case;
                                                                   the periodicity is related to beginning of the UL grant scheduling, i.e. independent from whether or single grant is postponed due to pending DL assignment */
  };

  type union NB_UESS_GrantScheduling_Type {                     /* Configuration of (periodic) UL grants for the UE specific search space;
                                                                   NOTE: UL grants for Type2 common search space during RACH procedure are configured as part of the RACH procedure configuration */
    Null_Type                   None,                           /* no UL grant configured => UE needs to trigger RACH procedure to get UL resources;
                                                                   to used also to stop periodic UL grant scheduling when the UE goes back to IDLE */
    NB_PeriodicGrant_Type       Periodic,                       /* configuration of one or several grants */
    NB_PeriodicGrant_Type       PeriodicAfterRachContResolution /* The SS shall schedule UL grants periodically after sending the DCI for contention resolution:
                                                                   a) contention resolution id based contention resolution: DCI is DL assignment of Msg4 sent to the UE
                                                                   b) C-RNTI based contention resolution: DCI is grant for UL transmission
                                                                   The periodicity starts from the search space of DCI used for contention resolution
                                                                   NOTE: for now it is not foreseen that the SS needs to evaluate BSRs for (automatic) UL grant assignments; FFS */
  };

  } // End sub-group Common_MAC_Configuration

  //----------------------------------------------------------------------------

  group Random_Access_Procedure {

  type record NB_RAR_UplinkGrant_Type {                         /* TS 36.213, clause 16.3.3
                                                                   First bit for subcarrier spacing shall be set according to SubCarrierSpacingUL in NB_PhysicalLayerConfigUL_Type */
    B6_Type     SubCarrierIndication,                           /* Defined in TS 36.213 clause 16.5.1.1 */
    B2_Type     SchedulingDelay,                                /* Defined in TS 36.213 clause 16.5.1 where NB-IoT DL subframe n is the last
                                                                 * subframe in which the NPDSCH associated with the NB random access response grant is transmitted */
    B3_Type     Msg3RepetitionNumber,                           /* Defined in TS 36.213 clause 16.5.1.1 */
    B3_Type     MCSIndex                                        /* Indicating TBS, modulation and number of RUs for Msg3 according to TS 36.213 table 16.3.3-1 */
  };

  type union NB_CRNTI_ContentionResolutionCtrl_Type {           /* configuration for Random Access Procedure in RRC_CONNECTED (see TS 36.300, clause 10.1.5.1);
                                                                 * when SS receives C-RNTI MAC element sent by the UE after Random Access Response,
                                                                 * SS shall deal with the C-RNTI as specified in this structure */
    NB_DciUlInfo_Type                         AutomaticGrant,   /* before expiry of the contention resolution timer SS shall automatically send an UL grant to the UE by addressing NPDCCH
                                                                 * using C-RNTI as sent by the UE in Msg3 but scheduled according to Type2 common search space; the UL grant is explicitly specified by NB_DciUlInfo_Type */
    Null_Type                                 None              /* Used in case of dedicated preamble transmission (contention free random access) or to simulate failure cases for contention based random access procedure;
                                                                 * SS shall not address PDCCH using C-RNTI
                                                                 * => in case of contention based random access procedure: expiry of contention resolution timer on UE side */
  };

  type union NB_ContentionResolutionCtrl_Type {                 /* NOTE: SS only needs to consider one kind of contention resolution at one time;
                                                                 * in the initial configuration of a cell TCRNTI_Based shall be configured;
                                                                 * whether or not a UE triggers RACH procedures in RRC_CONNECTED depends on RRC signalling (logicalChannelSR-Prohibit, logicalChannelSR-ProhibitTimer);
                                                                 * when the UE is supposed to trigger RACH procedures in RRC_CONNECTED the SS needs to be configured for C-RNTI based contention resolution after the temporary C-RNTI based contention resolution has been done at RRC connection establishment */
    TCRNTI_ContentionResolutionCtrl_Type      TCRNTI_Based,     /* TCRNTI based contention resolution (e.g. initial access),
                                                                 * hence involves inclusion contention resolution identity in DL message 4 of RACH procedure;
                                                                 * in case of early contention resolution the SS shall schedule the subsequent DL transmission in the Type2 common search space;
                                                                 * NOTE: The subsequent DL transmission can be a CCCH message (e.g. RRC Connection Setup) but also a DCCH message (RRC Connection Resume) in which case according to the NOTE in TS 36.331 clause 5.3.3.3a the UE uses the common search space until successful connection resumption */
    NB_CRNTI_ContentionResolutionCtrl_Type    CRNTI_Based       /* CRNTI based contention resolution (e.g. in case UE is being in RRC_CONNECTED) or contention free random access:
                                                                 * in case of CRNTI based contention resolution the uplink message in step 3 (of RACH procedure) is followed by PDCCH transmission with UE C-RNTI to end procedure */
  };

  type record NB_RandomAccessResponseParameters_Type {          /* paramenters to control content of RAR sent to the UE */
    RAR_RapIdCtrl_Type                  RapId,                  /* to control Random Access Preamble Id to be sent back to the UE; used in RAR MAC sub-header */
    NB_RAR_UplinkGrant_Type             InitialGrant,           /* initial UL grant */
    RACH_TimingAdvance_Type             TimingAdvance,          /* timing advance: granularity of 0.52 micro sec (16*Ts);
                                                                 * see TS 36.300, clause 5.2.7.3, TS 36.321, clause 6.1.3.5;
                                                                 * NOTE:
                                                                 * timing advance has impact not only on the RA procedure;
                                                                 * SS in general needs to adjust its timing accordingly */
    TempC_RNTI_Type                     TempC_RNTI              /* NOTE:
                                                                 * For initial Random Access Procedure at network (SS) side there is no temporary C-RNTI:
                                                                 * network assigns the C-RNTI which is used by any UE as being temporary;
                                                                 * the UE which 'wins' the contention resolution keeps the (temporary) C-RNTI;
                                                                 * other UEs need to repeat the RACH procedure;
                                                                 * => at the SS the TempC_RNTI shall be 'SameAsC_RNTI'
                                                                 * For Random Access Procedure in RRC_CONNECTED state the NW assigns a temporary C-RNTI which is replaced by the one stored at the UE;
                                                                 * => TempC_RNTI may be 'SameAsC_RNTI' (in this case temp. C-RNTI and C-RNTI are equal what is not likely in a real network),
                                                                 * or there is an explicit temp. C-RNTI what is used during RA procedure only (as in a real network) */
  };

  type record of NB_RandomAccessResponseParameters_Type NB_RarList_Type;        /* in general MAC PDU may contain one or several RARs;
                                                                                 * normally only one RAR is contained */

  type union NB_RandomAccessResponse_Type {
    Null_Type                           None,                   /* used for unsuccessful RA procedure */
    NB_RarList_Type                     List                    /* normally one RAR to be sent to the UE; in general there can be more than one RAR */
  };

  type record NB_RandomAccessResponseCtrl_Type {                /* configuration for Random Access Response mapped to DL-SCH mapped to NPDSCH */
    /* TransmissionMode: single antenna mode when there is only one antenna configured, transmit diversity else;
       RNTI: RA-RNTI (TS 36.321, clause 7.1);
       if both RAR msg and backoff indicator are 'None' SS shall not respond on random access preamble */
    NB_DciDlInfoCommon_Type             DciInfo,                /* DCI format N1 addressed by RA-RNTI */
    NB_RandomAccessResponse_Type        Rar,                    /* RAR to be sent to the UE */
    RandomAccessBackoffIndicator_Type   BackoffInd              /* possible backoff indicator; 'None' for normal cases */
  };

  type union NB_RandomAccessResponseConfig_Type {
    NB_RandomAccessResponseCtrl_Type    Ctrl,                   /* contains information to control sending of RAR */
    Null_Type                           None                    /* to be used when there is no RAR to be sent at all */
  };

  type record NB_RachProcedure_Type {
    NB_RandomAccessResponseConfig_Type  RAResponse,             /* control of how the SS shall react on RA preamble;
                                                                 * this may be
                                                                 * - the RAP id as expected by the UE
                                                                 * - a RAP id not matching to the UE's RAP
                                                                 * - a backoff indicator
                                                                 * - nothing at all */
    NB_ContentionResolutionCtrl_Type    ContentionResolutionCtrl
                                                                /* control of how the SS shall react on (first) scheduled transmission from UE:
                                                                 * 1. UE sends CCCH SDU => contention resulation based on contention resolution id
                                                                 * 1.a) successful contention resolution: contention resolution id matched to CCCH SDU
                                                                 * 1.b) unsuccessful contention resolution: contention resolution id  does not match
                                                                 * 2. UE sends C-RNTI => contention resolution based on C-RNTI
                                                                 * 2.a) successful contention resolution: SS addresses C-RNTI (e.g. UL-grant)
                                                                 * 2.b) unsuccessful contention resolution: SS does not address C-RNTI (timeout at UE) */
  };

  type record of
    NB_RachProcedure_Type NB_RachProcedureList_Type;            /* to simulate RACH procedure with one or more than one attempt by the UE:
                                                                 * 1. Normal cases:
                                                                 * one single RandomAccessResponse is sent to the UE matching the UE's RACH preamble;
                                                                 * contention resolution is successful immediately
                                                                 * => list contains only one element which is used for any RA procedure
                                                                 *    (Even if a RACH procedure is repeated by the UE for any reason this element shall be used;
                                                                 *    e.g. it needs not to be handled as error when the UE sends another RACH preamble instead of the RRC connection request message)
                                                                 * 2. Special cases:
                                                                 * SS shall start with the first element in the list and use the RAR as specified in this element;
                                                                 * if the RAR matches at the UE side the UE will send UL data and contention resolution is performed as configured for this element;
                                                                 * if the RAR does not match the UE sends another RAP and SS continues with the next element in the list;
                                                                 * in this case the contention resolution of the respective element is not used;
                                                                 * if the end of the list is reached and further RACH preambles are sent by the UE SS shall repeatively apply the last element of the list
                                                                 * (this is necessary because there might be not enough time to reconfigure SS after the end of the list has been reached and there shall be well-defined behaviour after the list has been processed);
                                                                 *
                                                                 * to change from a special mode to normal mode the RachProcedureList is reconfigured by TTCN to achieve transparency and readability of the code;
                                                                 *
                                                                 *  NOTE:
                                                                 *  for NB-IoT there can be more than one repetition per preamble attempt (numRepetitionsPerPreambleAttempt-r13 in NPRACH-ConfigSIB-NB-DEFAULT in SystemInformationBlockType2-NB); the SS gets configured with the nprach-ParametersList (NPRACH_Config_Type in NB_PhysicalLayerConfigUL_Type) and it is up to SS implementation how to get out how many preamble repetitions an attempt has; => NB_PhysicalLayerConfigUL_Type contains one entry per attempt and the SS shall report the number of preambles per attempt in a RachPreamble indication (if configured) */

  type record NB_RachProcedureConfig_Type {
    /* parameters to control the random access procedure; TS 36.321, clause 5.1 */
    NB_RACH_ConfigCommon_Type           RACH_ConfigCommon             optional, /* acc. TS 36.331, clause 6.7.3.2; may not be necessary for SS;
                                                                                 * omit: "keep as it is" */
    NB_RachProcedureList_Type           RachProcedureList             optional  /* in normal cases there is one element which is used for any RA procedure;
                                                                                 * special cases are used in MAC test cases;
                                                                                 * omit means "keep as it is" */
  };

  type record  NB_RA_NPDCCH_Order_Type {        /* TS 36.212, clause 6.4.3.2 */
    integer     NprachRepetitions,              /* TS 36.213, Table 16.3.2-1: 0, 1, 3 */
    integer     SubcarrierIndex                 /* ra-PreambleIndex (acc. to 36.321 cl. 5.1.2) as indicated in subcarrier indication field of the DCI (36.213 cl. 16.3.2 and 36.213 cl. 6.4.3.2):
                                                   NOTE: the corresponding RAPID gets calculated according to 36.321 cl. 5.1.2 */
  };

  } // End sub-group Random_Access_Procedure

  //----------------------------------------------------------------------------
  
  group System_Information_Control {     /* Primitive to configuration BCCH/BCH */

  type record NB_SiSchedul_Type {                                       /* for specific SI scheduling and repetitions */
    NB_SiPeriodicity_Type               Periodicity           optional,
    NB_SiRepetitionPattern_Type         RepetitionPattern     optional, /* Indicates the starting radio frames within the SI window used for SI message transmission */
    NB_SiTransportBlockSize_Type        SchedulingInfoSI      optional  /* This field indicates the transport block size in number of bits used to broadcast the SI message */
  };

  type record length(1..maxSI_Message_NB_r13) of NB_SiSchedul_Type NB_SiSchedulList_Type;
  
  type record NB_AllSiSchedul_Type {                            /* SI-message scheduling according to TS 36.331, clause 5.1.2.1a and clause 5.2.3a */
    NB_SiWindowLength_Type      WindowLength          optional, /* Common window size for all Sis to calculate start of each SI window acc. TS 36.331, clause 5.2.3a */
    //integer                     RadioFrameOffset      optional,  vzw nbiot: commenting for omit/* Integer (0..15); Frame offset for scheduling of SI-messages (see TS 36.331, clause 5.2.3a) */
    NB_SiSchedulList_Type       SiList                optional  /* List of scheduling info for the SIs containing one or more SIBs */
  };

  // ***** PDSCH (SIB1 + SIs)
  type record SIScheduleConfig_Type {                         /* configuration for BCCH mapped to DL-SCH mapped to NPDSCH */
    /* SIB1-NB: fixed scheduling in time domain according to TS 36.331 clause 5.2.1.2a (subframe 4, periodicity 2560ms, repetitions in every other frame in 160ms) */
    NB_SchedulingInfoSIB1_Type SchedulingInfoSIB1_NB  optional, /* Integer (0..15) TBSize and Repetition number refer to TS 36.213 table 16.4.1.5.2-1*/
    NB_AllSiSchedul_Type       SiSchedul              optional  /* scheduling of SIs and TBSize in time domain */
  };

  type record of BCCH_DL_SCH_Message_NB NB_SI_List_Type;        /* TS 36.331, clause 6.7.1 BCCH-DL-SCH-Message-NB and clause 6.7.2 SystemInformation-NB */
  type record of octetstring NB_SI_octet_List_Type;
  // ***** content of system information
  type record NB_BcchInfo_Type {
    /* all fields are declared as optional to allow modification of single field;
     * acc. to TS 36.331, clause 9.1.1.1 "RRC will perform padding, if required due to the granularity of the TF signalling, as defined in 8.5.";
     * therefore this needs to be done by the system simulator */
    BCCH_BCH_Message_NB            MIB_NB              optional, /* TS 36.331, clause 6.7.1 BCCH-BCH-Message_NB and clause 6.7.2 MasterInformationBlock-NB;
                                                                 * NOTE:
                                                                 * the sequence numbers included in MIB-NB need to be handled and maintained by the system simulator;
                                                                 * that means that the sequence numbers being setup by TTCN will be overwritten by SS */
    BCCH_DL_SCH_Message_NB         SIB1_NB            optional, /* TS 36.331, clause 6.7.1 BCCH-DL-SCH-Message-NB and clause 6.7.2 SystemInformationBlockType1-NB */
    NB_SI_List_Type                SIs                optional  /* list of SIs corresponding to SiList of AllSiSchedul_Type
                                                                 * (i.e. element i of AllSiSchedul_Type's SiList specifies the scheduling for SIs[i]) */
  };

  //VZW NBIOT: Added to Encode MIB, SIB,SIs
   // ***** content of system information
  type record NB_BcchInfo_Type_octet {
    /* all fields are declared as optional to allow modification of single field;
     * acc. to TS 36.331, clause 9.1.1.1 "RRC will perform padding, if required due to the granularity of the TF signalling, as defined in 8.5.";
     * therefore this needs to be done by the system simulator */
    octetstring            MIB_NB              optional, /* TS 36.331, clause 6.7.1 BCCH-BCH-Message_NB and clause 6.7.2 MasterInformationBlock-NB;
                                                                 * NOTE:
                                                                 * the sequence numbers included in MIB-NB need to be handled and maintained by the system simulator;
                                                                 * that means that the sequence numbers being setup by TTCN will be overwritten by SS */
    octetstring         SIB1_NB            optional, /* TS 36.331, clause 6.7.1 BCCH-DL-SCH-Message-NB and clause 6.7.2 SystemInformationBlockType1-NB */
    //octetstring                SIs_0                optional  /* list of SIs corresponding to SiList of AllSiSchedul_Type(i.e. element i of AllSiSchedul_Type's SiList specifies the scheduling for SIs[i])*/   
    NB_SI_octet_List_Type    SIs
  };    
      
      
  // ***** configuration for BCCH
  type record NB_BcchConfig_Type {
    /* all fields are optional to allow single modifications;
     * activation time may be applied in the common part of the ASP;
     * NOTE 1:
     * mapping/scheduling and contents of the System Information in general is done in one go
     * (i.e. there are no separate ports for SIB data and configuration) */
    SIScheduleConfig_Type        SIConfig              optional,
    NB_BcchInfo_Type             BcchInfo              optional,
    NB_BcchInfo_Type_octet       BcchInfoOct           optional  
  };

  } // End sub-group System_Information_Control

  //----------------------------------------------------------------------------

  group Paging_Control {     /* Primitive to configuration PCCH/PCH */

  type record NB_PcchConfig_Type {                              /* configuration for PCCH mapped to NPCH */
    /* TransmissionMode: single antenna mode when there is only one antenna configured, transmit diversity else;
     * RNTI: P-RNTI (TS 36.321, clause 7.1)
     * NOTE: acc. to TS 36.331, clause 9.1.1.3 there is no PDCP and RLC/MAC are in TM */
    NB_DciDlInfoCommon_Type     DciInfoPaging                         optional, /* DCI format: N2, Paging  (TS 36.212, clause 6.4.3.3) */
    integer                     NoOfDciRepetitionsForDirectIndication optional  /* Absolute number of NPDCCH repetitions (R) for direct indication */
  };

  } // End sub-group Paging_Control
  
  //----------------------------------------------------------------------------

  group NonAnchorCarrier_Common {       /* configuration of non-anchor carrier for paging and RACH procedure according to rel-14 enhancements */
  
  type union NB_NonAnchorCarrier_SearchSpaceType1CSS_Type {
    Null_Type                           SameAsAnchorCarrier,    /* SS shall use the same Type1 common search space configuration as for the anchor carrier (-> NPdcchConfig_Type) */
    NPdcchType1CommonSearchSpace_Type   Explicit                /* to be used when test case requires different search space configuration for anchor and non-anchor configuration */
  };

  type union NB_NonAnchorCarrier_SearchSpaceType2CSS_Type {
    Null_Type                           SameAsAnchorCarrier,    /* SS shall use the same Type2 common search space configuration as for the anchor carrier (-> NPdcchConfig_Type)) */
    NPdcchType2CommonSearchSpace_Type   Explicit                /* to be used when test case requires different search space configuration for anchor and non-anchor configuration */
  };

  type record NB_NonAnchorCarrierCommonDL_Type {
    integer                                      Id,                    /* identifier to address the carrier to be used for paging (-> NB_PagingTrigger_Type) */
    NB_DL_ConfigCommon_NB_Type                   ConfigCommon optional, /* ASN.1 configuration as provided to the UE */
    NB_NonAnchorCarrier_SearchSpaceType1CSS_Type Type1CSS     optional  /* Type1CSS search space configuration to be applied by the SS for the given non-anchor carrier */
  };
  type record of NB_NonAnchorCarrierCommonDL_Type NB_NonAnchorCarrierCommonDL_List_Type;

  type union NB_CarrierConfigCommonDL_Type {
    NB_NonAnchorCarrierCommonDL_List_Type       Config,
    Null_Type                                   None
  };

  type union NB_NpdcchCarrier_Type {                                    /* to specify the DL carrier corresponding to the UL carrier on which the RACH preamble has been received */
    Null_Type           AnchorCarrier,                                  /* NPDCCCH on anchor carrier */
    integer             Id                                              /* identifier of a DL non-anchor carrier carrying the NPDCCH */
  };

  type record NB_NonAnchorCarrierCommonUL_Type {
    integer                                      Id,                            /* identifier to indicate the carrier on which the UE has sent a RACH preamble (-> NB_RachPreamble_Type) */
    NB_UL_ConfigCommon_NB_Type                   ConfigCommon optional,         /* ASN.1 configuration as provided to the UE */
    NB_NonAnchorCarrier_SearchSpaceType2CSS_Type Type2CSS     optional,         /* Type2CSS search space configuration to be applied by the SS for the given non-anchor carrier */
    NB_NpdcchCarrier_Type                        NpdcchCarrierId  optional      /* identifier of the corresponding DL carrier;
                                                                                   NOTE 1: the DL carrier shall be the same as being addressed by npdcch-CarrierIndex in SIB22
                                                                                   NOTE 2: in general the number and order of carriers being configured at the SS and being contained in SIB22 does not need to be the same */
  };
  type record of NB_NonAnchorCarrierCommonUL_Type NB_NonAnchorCarrierCommonUL_List_Type;

  type union NB_CarrierConfigCommonUL_Type {
    NB_NonAnchorCarrierCommonUL_List_Type       Config,
    Null_Type                                   None
  };

  } // End sub-group NonAnchorCarrier_Common

  //----------------------------------------------------------------------------
  
  group UE_Specific_Channel_Configuration {
  
  group UE_Specific_Channel_Configuration_DL {  /* Scheduling and other information for CCCH/DCCH/DTCH mapped to DL-SCH mapped to NPDSCH */
  
  //============================================================================
  
  type union NB_DownlinkGapConfig_Type {                        /* to specify DL gaps for NPDSCH according to TS 36.211 clause 10.2.3.4 */
    DL_GapConfig_Type                   DownlinkGapConfig,      /* DL gaps shall be used according to the DL gap configuration (TS 36.331 clause 6.7.3.2) */
    Null_Type                           None                    /* there are no gaps in DL */
  };

  type record NB_CcchDcchDtchConfigDL_Type {   /* configuration for CCCH/DCCH/DTCH mapped to DL-SCH mapped to NPDSCH */
    /* RNTI: C-RNTI (TS 36.321, clause 7.1);
     * all fields optional (omit = "keep as it is") since DCI format and modulation may be changed during a test;
     * for initial configuration all fields are mandatory */
    NB_DciDlInfo_Type                   DciInfo               optional,
    NB_DownlinkGapConfig_Type           GapConfig             optional  /* to specify the DL gap configuration for NPDSCH */
  };
  
  } // End sub-sub-group UE_Specific_Channel_Configuration_DL
  
  //============================================================================
  
  group UE_Specific_Channel_Configuration_UL {                  /* Scheduling information for CCCH/DCCH/DTCH mapped to UL-SCH mapped to NPUSCH */
  
  type record NB_CcchDcchDtchConfigUL_Type {   /* scheduling for CCCH/DCCH/DTCH mapped to UL-SCH mapped to NPUSCH */
    /* NOTE 1:
     * for definition of the possible UL grants the location of the NPUSCH (TS 36.211, clause 10.1.3)
     * and the NPRACH (TS 36.211, clause 10.1.6) need to be taken into account;
     * NOTE 2:
     * In contrast to the DL where the scheduling can be done (with consideration of some restrictions) by SS on a per need basis in the UL the scheduling depends on information provided by the UE: e.g. BSR (buffer status report)
     * see TS 36.523-3 clause 7.2 for further information. */
    UplinkTimeAlignment_Synch_Type      UplinkTimeAlignment_Synch  optional,    /* parameters to control automatic control of timing advance */
    NB_UESS_GrantScheduling_Type        UESS_GrantScheduling       optional     /* UL grant allocation to be applied */
  };
  
  } // End sub-sub-group UE_Specific_Channel_Configuration_UL
  
  //============================================================================
  
  type union NB_DrxCtrl_Type {                                  /* DRX configuration for connected mode (TS 36.321, clause 5.7) */
    Null_Type                   None,                           /* DRX not configured */
    NB_DRX_Config_Type          Config                          /* DRX is configured as signalled to the UE;
                                                                   NOTE: the release branch of DRX-Config in general is not used for configuration of the SS */
  };
  
  type record NB_CcchDcchDtchConfig_Type {
    NB_CcchDcchDtchConfigDL_Type        DL                    optional, /* Scheduling, parameters related to CCCH, DCCH and DTCH in DL */
    NB_CcchDcchDtchConfigUL_Type        UL                    optional, /* Scheduling, parameters related to CCCH, DCCH and DTCH in UL */
    NB_DrxCtrl_Type                     DrxCtrl               optional  /* DRX configuration as sent to the UE (or 'None' when the UE does not support connected mode DRX) */
  };
  
  } // End sub-group UE_Specific_Channel_Configuration
  
  //----------------------------------------------------------------------------
  
  } // End group Cell_Configuration
  
  //****************************************************************************
  
  group Cell_Power_Attenuation {
  
  type record NB_CellAttenuationConfig_Type {
    NBIOT_CellId_Type           CellId,
    Attenuation_Type            Attenuation,
    TimingInfo_Type             TimingInfo            optional
  };
  
  type record of NB_CellAttenuationConfig_Type NB_CellAttenuationList_Type;
  
  } // End group Cell_Power_Attenuation
  
  //****************************************************************************
  
  group Radio_Bearer_Configuration {            /* Radio Bearer Configuration: SRBs/DRBs */

  type union NB_PDCP_TestModeConfig_Type {
    Null_Type                   None,
    Null_Type                   Transparent                     /* requires PDCP to be configured as transparent =>
                                                                 * - TTCN uses AS ciphering in both directions, employing the dummy ciphering algorithm
                                                                 * - SS does not interpret, insert or remove PDCP headers
                                                                 * - SS does not maintain PDCP sequence numbers and state variables */
  };

  type union NB_PDCP_RbConfig_Type {
    Null_Type                   Srb,
    NB_PDCP_Config_Type         Drb                             /* PDCP-Configuration acc. to TS 36.331, clause 6.7.3.2 */
  };

  type record NB_PDCP_ConfigInfo_Type {
    NB_PDCP_RbConfig_Type       Rb        optional,            /* mandatory for initial configuration; omit means "keep as it is" */
    NB_PDCP_TestModeConfig_Type TestMode  optional             /* mandatory for initial configuration; omit means "keep as it is" */
  };

  type union NB_PDCP_Configuration_Type {
    Null_Type                   None,                           /* for SRB0 & SRB1bis no PDCP is configured;  */
    NB_PDCP_ConfigInfo_Type     Config
  };

  //----------------------------------------------------------------------------

  group RLC_Configuration {                     /* RLC configuration: radio bearer specific */

  type union NB_RLC_TestModeConfig_Type {
    Null_Type                   None
  };

  type record NB_SS_RLC_AM_Type {
    NB_UL_AM_RLC_Type           Tx        optional,             /* the UE's UL setting to be used in SS's tx direction */
    NB_DL_AM_RLC_Type           Rx        optional              /* the UE's DL setting to be used in SS's rx direction */
  };

  type Null_Type NB_SS_RLC_TM_Type;                             /* TM to configure SRB0; no parameters to be defined */

  type union NB_RLC_RbConfig_Type {
    NB_SS_RLC_AM_Type           AM,
    NB_SS_RLC_TM_Type           TM                              /* normally SRB0 only; may be used for test purposes also */
  };

  type record NB_RLC_Configuration_Type {
    NB_RLC_RbConfig_Type        Rb        optional,             /* mandatory for initial configuration; omit means "keep as it is" */
    NB_RLC_TestModeConfig_Type  TestMode  optional              /* mandatory for initial configuration; omit means "keep as it is" */
  };

  } // End sub-group RLC_Configuration

  //----------------------------------------------------------------------------

  group MAC_Configuration {                     /* MAC configuration: radio bearer specific configuration */

  type union NB_MAC_TestModeConfig_Type {
    Null_Type                   None,
    Null_Type                   Transparent                    /* In UL and DL the SS' MAC layer is transparent i.e. SS does not add or remove any MAC header */
  };

  type record NB_MAC_LogicalChannelConfig_Type {
    integer                     Priority                       /* logical channel priority for the DL as described in TS 36.321, clause 5.4.3.1 for the UL */
  };

  type record NB_MAC_Configuration_Type {
    NB_MAC_LogicalChannelConfig_Type   LogicalChannel    optional, /* mandatory for initial configuration; omit means "keep as it is" */
    NB_MAC_TestModeConfig_Type         TestMode          optional  /* mandatory for initial configuration; omit means "keep as it is";
                                                                    * for none MAC tests "TestMode.None:=true" */
  };

  } // End sub-group MAC_Configuration

  //----------------------------------------------------------------------------

  type record NB_RadioBearerConfigInfo_Type {
    /* semantics of omit: "keep as it is" */
    NB_PDCP_Configuration_Type  Pdcp                  optional, /* for SRB0 & SRB1bis: "Pdcp.None:=true"
                                                                 * mandatory for initial configuration; omit means "keep as it is" */
    NB_RLC_Configuration_Type   Rlc                   optional, /* mandatory for initial configuration; omit means "keep as it is" */
    LogicalChannelId_Type       LogicalChannelId      optional, /* DRBs: DTCH-LogicalChannelIdentity as for rb-MappingInfo in DRB-ToAddModifyList (according to 36.331 a value of 3 shall not be used in DRB-ToAddModifyList);
                                                                 * SRBs: for SRBs specified configurations acc. to TS 36.331, clause 9.1.2 shall be applied:
                                                                 * SRB1: ul-LogicalChannel-Identity = dl-LogicalChannel-Identity = 1
                                                                 * SRB1bis: ul-LogicalChannel-Identity = dl-LogicalChannel-Identity = 3
                                                                 * for SRB0 being mapped to CCCH the LCID is '00000'B acc. to TS 36.321, clause 6.2.1;
                                                                 * mandatory for initial configuration; omit means "keep as it is" */
    NB_MAC_Configuration_Type   Mac                   optional
  };

  type union NB_RadioBearerConfig_Type {
    NB_RadioBearerConfigInfo_Type  AddOrReconfigure,            /* add / re-configure RB -
                                                                 * CellId : identifier of the cell being configured
                                                                 * RoutingInfo : None
                                                                 * TimingInfo : 'Now' in common cases
                                                                 * ControlInfo : CnfFlag:=true; FollowOnFlag:=false (in general) */
    Null_Type                   Release                         /* release RB -
                                                                 * CellId : identifier of the cell being configured
                                                                 * RoutingInfo : None
                                                                 * TimingInfo : 'Now' in common cases
                                                                 * ControlInfo : CnfFlag:=true; FollowOnFlag:=false (in general) */
  };

  type record NB_RadioBearer_Type {
    NB_RadioBearerId_Type               Id,                     /* either for SRB or DRB */
    IndicationAndControlMode_Type       L2TestMode optional,    /* to enable/disable L2 testmode:
                                                                   omit : "keep as it is"; "omit" in initial configuration means that L2 testmode is disabled
                                                                   enable : SS shall route uplink data to N_L2DATA port instead of N_SRB port
                                                                   disable : SS shall route uplink data to N_SRB port as usual */

    NB_RadioBearerConfig_Type           Config
  };

  type record length (1..tsc_NB_MaxRB) of NB_RadioBearer_Type NB_RadioBearerList_Type;    /* array of SRBs and/or DRBs */

  } // End group Radio_Bearer_Configuration

  //****************************************************************************

  group AS_Security {      /* Primitive for control of AS security */

  type record NB_PdcpSQN_Type {
    NB_PdcpCountFormat_Type   Format,                          /* 5 bit, 7 bit or 12 bit SQN */
    integer                   Value                            /* SQN value (5 bit, 7 bit or 12 bit SQN)
                                                                * NOTE:
                                                                * in TTCN the test case writer is responsible to deal with potential overflows
                                                                * (e.g. there shall be a "mod 32", "mod 128" or "mod 4096" according to the format) */
  };

  type union NB_PDCP_ActTime_Type {
    /* The sequence number in UL and DL for SRB1 should be one more than the present SQN, as Ciphering starts in UL and DL soon after SMC and SMComp;
     * For DRBs it should be the present SQN */
    Null_Type                None,                           /* No Activation time; to be used if Ciphering is not applied */
    NB_PdcpSQN_Type          SQN                             /* PDCP sequence number */
  };

  type record NB_SecurityActTime_Type {
    NB_RadioBearerId_Type    RadioBearerId,
    NB_PDCP_ActTime_Type     UL,
    NB_PDCP_ActTime_Type     DL
  };

  type record length (1..tsc_NB_MaxRB) of NB_SecurityActTime_Type NB_SecurityActTimeList_Type;

  type record NB_AS_IntegrityInfo_Type {
    /* for initial configuration activation time is not needed for integrity protection as all messages in DL after security activation are integrity protected;
     * this means this ASP is invoked before transmission of Security mode command;
     * if there is a integrity violation in UL SS shall set the IndicationStatus in the common ASP part to flag the integrity error
     * (IndicationStatus.Error.Integrity.Pdcp := true);
     * integrity to be provided for each SRB as per core spec */
    IntegrityProtAlgorithm_Type         Algorithm,              /* IntegrityProtAlgorithm_Type being defined in RRC ASN.1 */
    B128_Key_Type                       KRRCint,
    NB_SecurityActTimeList_Type         ActTimeList optional    /* omit for initial configuration (i.e. all SRBs to be integrity protected immediately) */
  };

  type record NB_AS_CipheringInfo_Type {
    EUTRA_ASN1_CipheringAlgorithm_r12_Type      Algorithm,      /* CipheringAlgorithm_Type being defined in RRC ASN.1 */
    B128_Key_Type                               KRRCenc,
    B128_Key_Type                               KUPenc,         /* KUPenc is used by SS when DRBs are configured */
    NB_SecurityActTimeList_Type                 ActTimeList
  };
  
  type record NB_AS_SecStartRestart_Type {
    NB_AS_IntegrityInfo_Type    Integrity optional,             /* optional to allow separated activation of integrity and ciphering; omit: keep as it is */
    NB_AS_CipheringInfo_Type    Ciphering optional              /* optional to allow separated activation of integrity and ciphering; omit: keep as it is */
  };
  
  type union NB_AS_Security_Type {                              /* Security mode command procedure (TS 36.331, clause 5.3.4):
                                                                 * both SMC and SMComp are integrity protected
                                                                 * (nevertheless SS shall be able to cope with unprotected SM reject);
                                                                 * ciphering is started just after SMComp (acc. to TS 36.331, clause 5.3.4.3 and 5.3.1.1) */
    NB_AS_SecStartRestart_Type  StartRestart,                  /* information to start/restart AS security protection in the PDCP */
    Null_Type                   Release                        /* to release AS security protection in the PDCP */
  };
  
  } // End group AS_Security
  
  //****************************************************************************
  
  group Paging_Trigger {
  
  type union NB_PagingMessage_Type {
    PCCH_Message_NB             Paging,
    B8_Type                     DirectIndication
  };
  
  type record NB_PagingTrigger_Type {                           /* CellId : identifier of the cell where the UE is active
                                                                   RoutingInfo : None
                                                                   TimingInfo : Calculated paging occasion
                                                                   ControlInfo : CnfFlag:=false; FollowOnFlag:=false */
    /* primitive to trigger transmission of a paging on the NPCCH at a calculated paging occasion (TS 36.304, clause 7);
     * the paging occasion is calculated by TTCN and activation time is applied;
     * as for BCCH Info acc. to TS 36.331, clause 9.1.1.3 "RRC will perform padding, if required due to the granularity of the TF signalling, as defined in 8.5.";
     * therefore this needs to be done by the system simulator */
    NB_PagingMessage_Type       Paging,                         /* paging to be scheduled in the Type1 common search space beginning from the time given in the timing information of the common part of the ASP;
                                                                   the DCI is transmitted on the NPDCCH using P-RNTI */
    integer                     PagingCarrierId optional        /* When the UE supports paging on a non-anchor carrier and paging configuration for non-anchor carrier is provided in system information:
                                                                   Id of the DL non-anchor carrier (-> NB_NonAnchorCarrierCommonDL_Type.Id) on which the SS shall do the paging;
                                                                   the SS configuration of the carrier with the given Id corresponds to the entry in dl-ConfigList-r14 of SIB22 which has the same carrier frequency;
                                                                   NOTE: it is up to TTCN implementation to determine the carrier which fulfils the equation given in TS 36.304 clause 7.1 to determine the paging carrier;
                                                                   omit when paging happens on anchor-carrier */
  };
  
  } // End group  Paging_Trigger
  
  //****************************************************************************
  
  group RLC_Counts {    /* Primitives to enquire RLC Counts AM_VTS and AM_VRR */
  
  type record NB_RLC_CountsInfoList_Type {
    integer                     AM_VTS,   /* sequnce number for DL */
    integer                     AM_VRR    /* sequnce number for UL */
  };

  type union NB_RLC_CountsReq_Type {
    Null_Type                   Get,      /* Request RLC Counts  */
    NB_RLC_CountsInfoList_Type  Set       /* Set RLC Counts */
  };
  
  type union NB_RLC_CountsCnf_Type {
    NB_RLC_CountsInfoList_Type  Get,      /* VTS and VRR */
    Null_Type                   Set
  };
 
  } // End group RLC_Counts
  
  //****************************************************************************
  
  group PDCP_Count {    /* Primitives to enquire PDCP COUNT */

  type enumerated NB_PdcpCountFormat_Type {
    PdcpCount_Srb,                      /* 27 bit HFN; 5 bit SQF */
    PdcpCount_DrbShortSQN               /* 25 bit HFN; 7 bit SQF */
  };
  type record NB_PdcpCount_Type {
    NB_PdcpCountFormat_Type     Format,
    PdcpCountValue_Type         Value
  };
  type record NB_PdcpCountInfo_Type {
    /* - at the start of the PDCP entity Next_PDCP_RX_SN resp.   Next_PDCP_TX_SN are set to 0
       - when receiving or sending a PDCP PDU the COUNT associated is established from the current values of Next_PDCP_RX_SN resp. Next_PDCP_TX_SN
       - Next_PDCP_RX_SN resp. Next_PDCP_TX_SN are incremented afterwards */
    NB_RadioBearerId_Type       RadioBearerId,
    NB_PdcpCount_Type           UL  optional,     /* omit: keep as it is */
    NB_PdcpCount_Type           DL  optional      /* omit: keep as it is */
  };
  
  type record length (1..tsc_NB_MaxRB) of  NB_PdcpCountInfo_Type NB_PdcpCountInfoList_Type;
  
  type union NB_PdcpCountGetReq_Type {
    Null_Type                   AllRBs,   /* return COUNT values for all RBs being configured */
    NB_RadioBearerId_Type       SingleRB
  };
  
  type union NB_PDCP_CountReq_Type {
    NB_PdcpCountGetReq_Type     Get,      /* Request PDCP count for one or all RBs being configured at the PDCP */
    NB_PdcpCountInfoList_Type   Set       /* Set PDCP count for one or all RBs being configured at the PDCP;
                                           * list for RBs which's COUNT shall be manipulated */
  };
  
  type union NB_PDCP_CountCnf_Type {
    NB_PdcpCountInfoList_Type   Get,      /* RBs in ascending order; SRBs first */
    Null_Type                   Set
  };
  
  } // End group PDCP_Count
  
  //****************************************************************************
  group L1_MAC_Test_Mode {  /* Primitive for control of L1/MAC Test Modes */
  
  type record NB_L1Mac_IndicationControl_Type {
    IndicationAndControlMode_Type       RachPreamble          optional, /* To enable/disable reporting of NPRACH preamble received */
    IndicationAndControlMode_Type       DPR                   optional, /* To enable/disable reporting of MAC DPR control elements */
    IndicationAndControlMode_Type       HarqError             optional, /* To enable/disable reporting of HARQ errors */
    IndicationAndControlMode_Type       UL_HARQ               optional  /* To enable/disable reporting of HARQ ACK/NACK */
  };

  } // End group L1_MAC_Test_Mode
  
  //****************************************************************************

  group PTM_Configuration {    /* configuration of Point To Multipoint (PTM) according to rel-14 enhancements */

  const integer tsc_MaxSCMTCH_NB := 64;                                         /* Maximum number of SC-MTCHs in one cell for NB-IoT */

  type record NPdcchType2ACommonSearchSpace_Type {                              /* parameters for Type2A common search space for SC-MTCH (Type2ACSS, TS 36.213 clause 16.6); */
    NPDCCH_NumRepetitions_SC_MTCH_Type      NumRepetitions,                     /* Rmax for Type2A common search space; TS 36.213 clause 16.6 */
    NPDCCH_StartSF_SC_MTCH_Type             StartSF,                            /* G for Type2A common search space; TS 36.213 clause 16.6 */
    NPDCCH_Offset_SC_MTCH_Type              Offset,                             /* offset for Type2A common search space; TS 36.213 clause 16.6 */
    NPDCCH_NPDSCH_MaxTBS_SC_MTCH_Type       Npdsch_MaxTBS                       /* Maximum NPDSCH TBS for the SC-MTCH */
  };

  type record NB_SC_MTCH_Config_Type {
    B16_Type                                GRnti,
    NB_SC_MTCH_CarrierConfig_Type           ScMtchCarrierConfig,
    SC_MTCH_SchedulingInfo_NB_r14           ScMtchSchedulingInfo     optional
  };

  type record NB_SC_MTCH_Info_Type {
    NPdcchType2ACommonSearchSpace_Type      Type2ACSS,                          /* parameters for Type2A common search space */
    SC_MRB_Identity_Type                    ScMrbId,
    NB_SC_MTCH_Config_Type                  Config
  };

  type record length(1.. tsc_MaxSCMTCH_NB) of NB_SC_MTCH_Info_Type NB_SC_MTCH_InfoList_Type;

  type NPDCCH_SC_MCCH_Config_NB_r14         NPdcchType1ACommonSearchSpace_Type; /* parameters for Type1A common search space for SC-MCCH (Type1ACSS, TS 36.213 clause 16.6) */

  type record NB_SC_MCCH_Config_Type{
    NPdcchType1ACommonSearchSpace_Type      Type1ACSS,                          /* parameters for Type1A common search space */
    NB_SC_MCCH_CarrierConfig_Type           ScMcchCarrierConfig,
    NB_SC_MCCH_RepetitionPeriod_Type        ScMcchRepetitionPeriod,
    NB_SC_MCCH_Offset_Type                  ScMcchOffset,
    NB_SC_MCCH_ModificationPeriod_Type      ScMcchModificationPeriod,
    NB_SC_MCCH_SchedulingInfo_Type          ScMcchSchedulingInfo     optional
  };

  type record NB_SCPTM_Config_Type {
    /* all fields are optional to allow single modifications;
       in case of reconfiguration OMIT means 'keep configuration as it is' */
    NB_SC_MCCH_Config_Type                  ScMcchConfig             optional,  /* SC-MCCH scheduling configuration on NPDCCH as per SystemInformationBlockType20-NB
                                                                                 * acc. to TS 36.331 cl 9.1.1.7 there is no PDCP and SC-MCCH uses the RLC-UM mode
                                                                                 * configuration/scheduling and contents of the SC-MCCH Information is done in one go
                                                                                 * (i.e. there are no separate ports for SC-MCCH data and configuration) */
    SCPTMConfiguration_NB_r14               ScptmConfiguration       optional,  /* Message containing SC-MTCH configuration to be broadcasted on SC-MCCH */
    NB_SC_MTCH_InfoList_Type                ScMtchInfoList           optional   /* Configure/release SC-MTCH SC-MRB */
  };

  type record NB_PTM_Config_Type {
    NB_SCPTM_Config_Type                    ScptmConfig                         /* PTM services are provided via SC-PTM */
  };

  } // End group PTM_Configuration
  
  //****************************************************************************
   
  group System_Interface {
  
  type record NB_SYSTEM_CTRL_REQ {
    NB_ReqAspCommonPart_Type    Common,      /* TimingInfo depends on respective primitive: */
    NB_SystemRequest_Type       Request      /* - Cell
                                              *   TimingInfo: 'now' (in general)
                                              * - CellAttenuationList
                                              *   TimingInfo: 'now' (in general, but activation time may be used also)
                                              * - RadioBearerList
                                              *   TimingInfo: 'now' in general;
                                              *     activation time may be used in special case for release and/or reconfiguration of one or several RBs;
                                              */
  };
      
 // ADDED THIS FOR NBIOT COMPATIBLE START group DRB_Traffic_Control  
  group DRB_Traffic_Control {           /* Primitive to trigger SS to send command to initiate/terminate DRB Traffic */
  
  type enumerated DRB_Traffic_ControlMode_Type {START_TRAFFIC, STOP_TRAFFIC, NO_TRAFFIC};
      
  type enumerated DRB_Traffic_Stats_Mode_Type {ENABLE_STATS, DISABLE_STATS, REPORT_STATS};
   
  type enumerated DRB_Traffic_Type { FTP_DL_TYPE, FTP_UL_TYPE, FTP_FDX_TYPE, 
                                      UDP_DL_TYPE, UDP_UL_TYPE, UDP_FDX_TYPE, 
                                      TCP_DL_TYPE, TCP_UL_TYPE, TCP_FDX_TYPE};

  type record DRB_Traffic_Control_Type {
    DRB_Traffic_ControlMode_Type    ControlMode,             /* Specifies the Request Mode */
    integer                         UE_ID,                   /* Specifies the UE Identity */
    charstring                      UE_IP,                   /* Specifies the UE IPV4 Address */
    charstring                      UE_IPV6 optional,                 /* Specifies the UE IPV6 Address */
    DRB_Traffic_Type                Traffic_Type,            /* Specifies the Protocol to intiate Session */
    integer                         Ue_Category,             /* Specifies the UE Category */
    integer                         Session_ID optional,     /* Specifies the Session Number (If Multiple Sessions are allowed) */
    charstring                      FileName optional,       /* Specifies the FileName to Stream */
    DRB_Traffic_Stats_Mode_Type     StatsMode,               /* Specifies the Stats Collection Mode */
    integer                         PauseDuration,           /* Specifies the Pause Monitor Duration */
    NB_SRB_Identity_Type            SRB_Id,
    boolean                         IS_IPV6,
    boolean                         Tun_Down,                 /* Specifies if IP Tunnel needs to be brought down */
    boolean                         Internet_Switch,           /* Enable and Disable internet connectivity */
    charstring                      IOT_Service_Platform_IPv4_Start, /* Iot Service Platform IPv4 Address start */
    charstring                      IOT_Service_Platform_IPv4_End,
    charstring                      IOT_Service_Platform_IPv6_Start optional, /* Iot Service Platform IPv6 Address start*/
    charstring                      IOT_Service_Platform_IPv6_End optional,    /*Iot Service Platform IPv6 Address end*/
    charstring                      IOT_Service_Platform_URL_List optional,    /*Send URLlist to SA as configured by OEMs for URL based implementation*/
    charstring                      IOT_Service_Platform_IPv4_List optional,    /*Receive IPv4 list from SA for URl based implementation*/
    charstring                      IOT_Service_Platform_IPv6_List optional,    /*Receive IPv4 list from SA for URl based implementation*/
    boolean                         IsNatServerRunning optional
  };
      
  type record DRB_TrafficCtrlCnf_Type {
    Null_Type                   DRBTrafficCtrlCnf,   /* confirmation for DRB Traffic Ctrl */
    DRB_Traffic_Control_Type    DRBTrafficCtrlInfo   /* (Optional) Specifies the Session Number (If Multiple Sessions are allowed) */
  }

  } // ADDED THIS FOR NBIOT COMPATIBLE End group DRB_Traffic_Control
  //****************************************************************************
 

  type record NB_SYSTEM_CTRL_CNF {
    NB_CnfAspCommonPart_Type    Common,         /* TimingInfo is ignored by TTCN (apart from EnquireTiming)
                                                 * => SS may set TimingInfo to "None" */
    NB_SystemConfirm_Type       Confirm
  };

  type record NB_SYSTEM_IND {
    NB_IndAspCommonPart_Type    Common,         /* The SS shall provide TimingInfo (HSFN + SFN + subframe number) depending on the respective indication: */
    NB_SystemIndication_Type    Indication
  };

  type port NBIOT_SYSTEM_PORT message {         /* NBIOT PTC: Port for system configuration */
    out NB_SYSTEM_CTRL_REQ;
    in  NB_SYSTEM_CTRL_CNF;
  };

  type port NBIOT_SYSIND_PORT message {         /* NBIOT PTC: Port for system indications */
    in  NB_SYSTEM_IND;

  };
  } // End group System_Interface

}
