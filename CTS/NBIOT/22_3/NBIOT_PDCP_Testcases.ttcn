/******************************************************************************/
// @copyright   Copyright Notification
//   No part may be reproduced except as authorized by written permission.
//   The copyright and the foregoing restriction extend to reproduction in all media.
//   Trademark 2019, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).
//   All rights reserved.
// @version: 36.523-3 v15.3.0
// $Date: 2018-12-17 17:07:06 +0100 (Mon, 17 Dec 2018) $
// $Rev: 23499 $
/******************************************************************************/

module NBIOT_PDCP_Testcases {

  import from NBIOT_RRC_ASN1_Definitions language "ASN.1:2002" all with {encode "UNALIGNED_PER_OctetAligned"};
  import from CIOT_NASTemplates all;
  import from Common4G5G_Templates all;
  import from CommonAspDefs all;
  import from CommonDefs all;
  import from EPS_NAS_MsgContainers all;
  import from EPS_NAS_Templates all;
  import from EUTRA_NB_ASP_L2DataDefs all;
  import from EUTRA_NB_CommonDefs all;
  import from EUTRA_NB_CommonL2 all;
  import from LoopbackIP all;
  import from NAS_CommonTemplates all;
  import from NAS_CommonTypeDefs all;
  import from NBIOT_ASP_TypeDefs all;
  import from NBIOT_AspCommon_Templates all;
  import from NBIOT_CellCfg_Templates all;
  import from NBIOT_CellInfo all;
  import from NBIOT_CommonDefs all;
  import from NBIOT_CommonProcedures all;
  import from NBIOT_Component all;
  import from NBIOT_ConfigurationSteps all;
  import from NBIOT_Imported_EUTRA_ASN1_Types all;
  import from NBIOT_LoopBack all;
  import from NBIOT_NASSteps all;
  import from NBIOT_Paging all;
  import from NBIOT_RRCSteps all;
  import from NBIOT_RRC_Templates all;
  import from NBIOT_SRB_DRB_Templates all;
  import from NBIOT_SecurityFunctions all;
  import from NBIOT_SecuritySteps all;
  import from NBIOT_Security_Templates all;
  import from NBIOT_Timing all;

  template (value) L2Data_Request_Type cs_L2Data_Request_PdcpPdu(template (value) PDCP_DataPdu_ShortSN_Type p_PDCP_PDU) :=
  { /* @status    APPROVED (NBIOT) */
    SubframeDataList := {
      {
        SubframeOffset := tsc_NPdcchSearchSpaceCandidateIndex_0,
        HarqProcess := omit,
        PduSduList := {
          PdcpPdu := {
            { DataShortSN := p_PDCP_PDU }
          }
        }
      }
    }
  };

  template (present) L2Data_Indication_Type cr_L2Data_Indication_PdcpPdu(template (present) PDCP_DataPdu_ShortSN_Type p_PDCP_PDU) :=
  { /* @status    APPROVED (NBIOT) */
    SubframeData := {
      PduSduList := {
        PdcpPdu := {
          { DataShortSN := p_PDCP_PDU }
        }
      },
      NoOfTTIs   := ?
    }
  };

  template (value) PDCP_DataPdu_ShortSN_Type cs_NB_PDCP_DataPdu(integer p_SequenceNumber,
                                                                template (value) octetstring p_Data) :=
  { /* @status    APPROVED (NBIOT) */
    D_C := '1'B,
    SequenceNumber := int2bit(p_SequenceNumber, 7),
    SDU := p_Data
  };

  template (present) PDCP_DataPdu_ShortSN_Type cr_NB_PDCP_DataPdu(template (present) B7_Type p_SequenceNumber := ?,
                                                                  template (present) octetstring p_Data) :=
  { /* @status    APPROVED (NBIOT) */
    D_C := '1'B,
    SequenceNumber := p_SequenceNumber,
    SDU := p_Data
  };

  template (value) NB_RadioBearer_Type cs_NB_DRB1_ConfigAM_PDCP_Mode := cs_NB_DRB_Config(tsc_DRB1, -, -, cs_NB_PDCP_TestModeConfig_NonROHC);    /* @status    APPROVED (NBIOT) */

  /*
   * @desc      Send/receive PDCP PDU
   * @param     p_CellId
   * @param     p_SequenceNumberTX
   * @param     p_SequenceNumberRX  (default value: omit)
   * @param     p_Data
   * @status    APPROVED (NBIOT)
   */
  function fl_NBIOT_PDCP_SendRecv(NBIOT_CellId_Type p_CellId,
                                  integer p_SequenceNumberTX,
                                  template (omit) integer p_SequenceNumberRX := omit,
                                  template (value) octetstring p_Data) runs on NBIOT_PTC
  {
    var template (value)   PDCP_DataPdu_ShortSN_Type v_PDCP_PDU_TX;
    var template (present) PDCP_DataPdu_ShortSN_Type v_PDCP_PDU_RX;
    var integer v_SequenceNumberRX;

    if (isvalue(p_SequenceNumberRX)) {
      v_SequenceNumberRX := valueof(p_SequenceNumberRX);
    } else {
      v_SequenceNumberRX := p_SequenceNumberTX;
    }
    v_PDCP_PDU_TX := cs_NB_PDCP_DataPdu(p_SequenceNumberTX, p_Data);
    v_PDCP_PDU_RX := cs_NB_PDCP_DataPdu(v_SequenceNumberRX, p_Data);     // NOTE: we use the send-template here as the PDU is fully specified

    L2DATA.send(cas_NB_L2_DATA_REQ(cs_NB_ReqAspCommonPart_RB(p_CellId, tsc_NB_RbId_DRB1), cs_L2Data_Request_PdcpPdu(v_PDCP_PDU_TX)));
    L2DATA.receive(car_NB_L2_DATA_IND(cr_NB_IndAspCommonPart_RB(p_CellId, tsc_NB_RbId_DRB1), cr_L2Data_Indication_PdcpPdu(v_PDCP_PDU_RX)));
  }

  /*
   * @desc      REFERENCE TS 36.523-1 clause 22.3.3.1
   * @status    APPROVED (NBIOT)
   */
  function f_TC_22_3_3_1_NBIOT() runs on NBIOT_PTC
  {
    var NBIOT_CellId_Type v_CellId := nbiot_Cell1;
    var octetstring v_IPData :=  f_IPv4IPv6_IcmpEchoReply(f_LoopbackModeB_IP_Address_UE());   /* as for test case 7.3.1.1 */
    var integer v_Maximum_PDCP_SN := tsc_UInt7Max;    // 7bit SN
    var integer v_SequenceNumber;
    
    f_NBIOT_Init(c1, USER_PLANE);     /* @sic R5s170250: USER_PLANE sic@ */
    
    // Create and configure all cells
    f_NBIOT_CellConfig_Def(v_CellId, USER_PLANE);
    
    // Bring UE to idle state
    f_NBIOT_Preamble(v_CellId, USER_PLANE, STATE3A_NB_IDLEUPDATED_TESTLOOP_ModeA);
    
    // Set null AS ciphering algorithm
    f_NBIOT_AS_CipheringAlgorithm_Set(eea0);
    
    // Enter connected mode with null AS ciphering algorithm
    f_NBIOT_GenericRbEst(v_CellId);
    
    // Reconfigure DRB locally to set the required PDCP test mode
    f_NBIOT_SS_CommonRadioBearerConfig_SingleDRB(v_CellId, cs_NB_DRB1_ConfigAM_PDCP_Mode);
    
    // Close testloop mode
    f_NBIOT_CloseUE_TestLoopModeA(v_CellId);
    
    f_NBIOT_TestBody_Set(true, layer2);
    
    for (v_SequenceNumber := 0; v_SequenceNumber <= v_Maximum_PDCP_SN; v_SequenceNumber := v_SequenceNumber + 1) {
      //@siclog "Step 1 .. 2" siclog@
      fl_NBIOT_PDCP_SendRecv(v_CellId, v_SequenceNumber, -, v_IPData);
      f_NBIOT_PreliminaryPass(__FILE__, __LINE__, "Step 2");
    }
    
    //@siclog "Step 3 .. 4" siclog@
    v_SequenceNumber := 0;
    fl_NBIOT_PDCP_SendRecv(v_CellId, v_SequenceNumber, -, v_IPData);
    f_NBIOT_PreliminaryPass(__FILE__, __LINE__, "Step 4");
    
    //@siclog "Step 5 .. 6" siclog@
    v_SequenceNumber := 1;
    fl_NBIOT_PDCP_SendRecv(v_CellId, v_SequenceNumber, -, v_IPData);
    f_NBIOT_PreliminaryPass(__FILE__, __LINE__, "Step 6");
    
    f_NBIOT_TestBody_Set(false);
    
    //Switch/power off UE
    f_NBIOT_Postamble(nbiot_Cell1, USER_PLANE, N3_TESTMODE);
  }

  /*
   * @desc      test cases 22.3.3.2 .. 22.3.3.4
   * @param     p_CellId
   * @param     p_AS_IntegrityProtAlgorithm
   * @param     p_AS_CipheringAlgorithm
   * @status    APPROVED (NBIOT)
   */
  function fl_NBIOT_PdcpScurityProcedure(NBIOT_CellId_Type p_CellId,
                                         IntegrityProtAlgorithm_Type p_AS_IntegrityProtAlgorithm,
                                         EUTRA_ASN1_CipheringAlgorithm_r12_Type p_AS_CipheringAlgorithm) runs on NBIOT_PTC
  {
    var NAS_MSG_Indication_Type v_NasInd;
    var NAS_KsiValue v_KsiValue;
    var NBIOT_SecurityParams_Type v_SecurityParams;
    var EUTRA_ASN1_RRC_TransactionIdentifier_Type v_RRC_TI := tsc_RRC_TI_Def;
    var SubFrameTiming_Type v_TimingStart;
    var template (value) TimingInfo_Type v_TimingInfo;
    var EUTRA_ASN1_ShortMAC_I_Type v_ShortMAC_I;
    var EUTRA_ASN1_PhysCellId_Type v_PhysCellId;
    var template (present) EUTRA_ASN1_ReestabUE_Identity_Type v_UE_Identity;
    var template (value) PDCP_SDU_Type v_TestData := crs_PDCP_SDU_16B; // same as for LTE test case 7.3.3.2

    f_NBIOT_Init(c1);

    //Create and configure all cells
    f_NBIOT_CellConfig_Def(p_CellId, USER_PLANE);
    f_NBIOT_AS_IntegrityAlgorithm_Set(p_AS_IntegrityProtAlgorithm);
    f_NBIOT_AS_CipheringAlgorithm_Set(p_AS_CipheringAlgorithm);

    //Bring UE to initial state
    f_NBIOT_Preamble(p_CellId, USER_PLANE, STATE3A_NB_IDLEUPDATED_TESTLOOP_ModeA);

    f_NBIOT_TestBody_Set(true, layer2);

    //@siclog "Step 1" siclog@
    f_NBIOT_UE_Page(p_CellId);

    //@siclog "Step 2" siclog@
    f_NBIOT_RRC_ConnectionRequest_Def(p_CellId);     /* start peridic UL grant transmission and wait for RRC connection request */

    //@siclog "Step 3: Void" siclog@

    //@siclog "Step 4: Void" siclog@

    //@siclog "Step 5" siclog@
    f_NBIOT_RRC_ConnectionSetup_Def();

    //@siclog "Step 6" siclog@
    v_KsiValue := f_NBIOT_SecurityKSIasme_Get();
    v_NasInd := f_NBIOT_RRCConnectionSetupComplete_Def(p_CellId,
                                                       cr_508_RRCConnectionSetupComplete_NB,
                                                       cr_NAS_Indication(tsc_SHT_IntegrityProtected, cr_CONTROL_PLANE_SERVICE_REQUEST(v_KsiValue)));  // @sic R5-174643: CONTROL_PLANE_SERVICE_REQUEST instead of SERVICE_REQUEST sic@
    f_NBIOT_PreliminaryPass(__FILE__, __LINE__, "Step4");

    //@siclog "Step 7: Void" siclog@

    //@siclog "Step 8: Void" siclog@

    //@siclog "Step 9" siclog@
    // send SecurityModeCommand on SRB1; SS is not configured for Integrity and Security protection
    // => this should result in MAC-I failure as SS will set MAC-I as all zeros
    SRB.send(cas_NB_SRB_RrcPdu_REQ(p_CellId, tsc_SRB1, cs_TimingInfo_Now, cs_508_SecurityModeCommand_NB(v_RRC_TI, p_AS_IntegrityProtAlgorithm, p_AS_CipheringAlgorithm)));

    //@siclog "Step 10" siclog@
    SRB.receive(car_NB_SRB_RrcPdu_IND(p_CellId, tsc_SRB1, cr_508_SecurityModeFailure_NB(v_RRC_TI)));
    f_NBIOT_PreliminaryPass(__FILE__, __LINE__, "Step 10");

    //@siclog "Step 11 - 12" siclog@
    v_SecurityParams := f_NBIOT_Security_Get();
    v_SecurityParams := f_NBIOT_RRC_ActivateSecurity(p_CellId, v_SecurityParams, v_NasInd.SecurityProtection.NasCount, cs_NB_DrbConfigList_DRB1);
    f_NBIOT_Security_Set(v_SecurityParams);
    f_NBIOT_PreliminaryPass(__FILE__, __LINE__, "Step 12");

    v_ShortMAC_I := f_NBIOT_Calculate_ShortMAC(p_CellId);

    //@siclog "Step 13: Void" siclog@

    //@siclog "Step 14: Void" siclog@

    //@siclog "Step 15" siclog@
    // Configure SS to use different algorithm for integrity so that will result in MAC-I failure at UE
    f_NBIOT_SS_TriggerMAC_I_Failure(p_CellId);
    
    f_NBIOT_SS_ConfigRachProcedureMsg4(p_CellId, f_NBIOT_508_RRCConnectionReestablishment());    /* @sic R5s170258: configure SS to send RRCConnectionReestablishment as Msg4 at step 17 sic@ */

    v_TimingStart := f_NBIOT_GetNextSearchSpace(p_CellId);
    v_TimingInfo := cs_TimingInfo_SubFrameFull(v_TimingStart);
    SRB.send(cas_NB_SRB_RrcPdu_REQ(p_CellId, tsc_SRB1, v_TimingInfo, cs_508_UeCapabilityEnquiry_NB(v_RRC_TI)));
    
    // Reset SRB1 and DRB1
    v_TimingInfo := cs_TimingInfo_SubFrameFull(f_NBIOT_IncrementSearchSpace(v_TimingStart, 0.9));    // release SRB1 and DRB1 just before end of the NPDCCH period
    f_NBIOT_SS_SRBs_DRBs_Release(p_CellId, USER_PLANE, v_TimingInfo, tsc_DrbList_Def);

    v_TimingInfo := cs_TimingInfo_SubFrameFull(f_NBIOT_IncrementSearchSpace(v_TimingStart, 1.0));    // restore SRB1 and DRB1 at the beginning of the next NPDCCH period
    f_NBIOT_SS_SRBs_DRBs_Config(p_CellId, USER_PLANE, v_TimingInfo, cs_NB_DrbConfigList_DRB1);

    //@siclog "Step 16" siclog@
    v_PhysCellId := f_NBIOT_CellInfo_GetPhyCellId(p_CellId);
    v_UE_Identity := cr_ReestabUE_Identity_NB(tsc_C_RNTI_Def, v_PhysCellId, v_ShortMAC_I);
    SRB.receive(car_NB_SRB0_RrcPdu_IND(p_CellId, cr_RRCConnectionReestablishmentRequest_NB(v_UE_Identity, otherFailure)));
    f_NBIOT_PreliminaryPass(__FILE__, __LINE__, " Step 16");
    
    // Activate RRC security for SRB1 and DRB1
    v_SecurityParams := f_NBIOT_SS_AS_ReestablishResumeSecurity(p_CellId, v_SecurityParams, rrcConnectionReestablishment);
    f_NBIOT_Security_Set(v_SecurityParams);
    
    //@siclog "Step 17" siclog@
    /* The SS transmits the pre-configured RRCConnectionReestablishment message; @sic R5s170258 sic@ */
    
    //@siclog "Step 18" siclog@
    /* UE transmits an RRCConnectionReestablishmentComplete message */
    SRB.receive(car_NB_SRB_RrcPdu_IND(p_CellId, tsc_SRB1, cr_RRCConnectionReestablishmentComplete_NB(v_RRC_TI)));
    
    //@siclog "Step 19: Void" siclog@

    //@siclog "Step 20: Void" siclog@

    //@siclog "Step 21" siclog@
    f_NBIOT_ActivateDRBs_RRCConnectionReconfig(p_CellId);

    //@siclog "Step 22" siclog@
    f_NBIOT_ActivateDRBs_RRCConnectionReconfigComplete(p_CellId);
    f_NBIOT_PreliminaryPass(__FILE__, __LINE__, " Step 22");

    //@siclog "Step 23: Void" siclog@

    //@siclog "Step 24: Void" siclog@

    //@siclog "Step 25 - 26" siclog@
    f_NBIOT_CloseUE_TestLoopModeA(p_CellId);
                              
    //@siclog "Step 27" siclog@
    L2DATA.send(cas_NB_L2_DATA_REQ(cs_NB_ReqAspCommonPart_RB(p_CellId, tsc_NB_RbId_DRB1), cs_L2Data_Request_PdcpSdu(v_TestData)));

    //@siclog "Step 28" siclog@
    L2DATA.receive(car_NB_L2_DATA_IND(cr_NB_IndAspCommonPart_RB(p_CellId, tsc_NB_RbId_DRB1), cr_L2Data_Indication_PdcpSdu(v_TestData)));
    f_NBIOT_PreliminaryPass(__FILE__, __LINE__, "Step 28");

    f_NBIOT_TestBody_Set(false);
    
    f_NBIOT_SS_ConfigRachProcedureMsg4(p_CellId, f_NBIOT_508_RRCConnectionSetup());  /* @sic R5s170258 sic@ */

    //Switch/power off UE
    f_NBIOT_Postamble(nbiot_Cell1, USER_PLANE, N3_TESTMODE);
  }

  /*
   * @desc      REFERENCE TS 36.523-1 clause 22.3.3.2
   * @status    APPROVED (NBIOT)
   */
  function f_TC_22_3_3_2_NBIOT() runs on NBIOT_PTC
  {
    fl_NBIOT_PdcpScurityProcedure(nbiot_Cell1, eia1, eea1);
  }

  /*
   * @desc      REFERENCE TS 36.523-1 clause 22.3.3.3
   * @status    APPROVED (NBIOT)
   */
  function f_TC_22_3_3_3_NBIOT() runs on NBIOT_PTC
  {
    fl_NBIOT_PdcpScurityProcedure(nbiot_Cell1, eia2, eea2);
  }

  /*
   * @desc      REFERENCE TS 36.523-3 clause 22.3.3.4
   * @status    APPROVED (NBIOT)
   */
  function f_TC_22_3_3_4_NBIOT() runs on NBIOT_PTC
  {
    fl_NBIOT_PdcpScurityProcedure(nbiot_Cell1, eia3_v1130, eea3_v1130);
  }

  template (value) NB_PdcpCountInfo_Type cs_NB_PdcpCountInfoDL_DRB1(integer p_SequenceNumberTX) :=
  { /* @status    APPROVED (NBIOT) */
    RadioBearerId := {
      Drb := tsc_DRB1
    },
    UL := omit,   // keep as it is
    DL := {
      Format := PdcpCount_DrbShortSQN,
      Value := int2bit(p_SequenceNumberTX, 32)
    }
  };

  /*
   * @desc      get PDCP count for DRB1
   * @param     p_CellId
   * @return    NB_PdcpCountInfo_Type
   * @status    APPROVED (NBIOT)
   */
  function f_NBIOT_SS_PdcpCount_GetDRB1(NBIOT_CellId_Type p_CellId) runs on NBIOT_PTC return NB_PdcpCountInfo_Type
  {
    var NB_SYSTEM_CTRL_CNF  v_ReceivedAsp;
    
    SYS.send   (cas_NB_PdcpCount_REQ(p_CellId, cs_NB_PDCP_CountGet));
    SYS.receive(car_NB_PdcpCount_CNF(p_CellId, {Get := ?})) -> value v_ReceivedAsp;

    return v_ReceivedAsp.Confirm.PdcpCount.Get[0];
  }

  /*
   * @desc      Send and receive data for test case 22.3.3.5: sequence number is set before sending and retrieved after receiving
   * @param     p_CellId
   * @param     p_SequenceNumberTX
   * @param     p_SequenceNumberRX
   * @param     p_Data
   * @status    APPROVED (NBIOT)
   */
  function fl_TC_22_3_3_5_SendRecv(NBIOT_CellId_Type p_CellId,
                                   integer p_SequenceNumberTX,
                                   integer p_SequenceNumberRX,
                                   template (value) octetstring p_Data) runs on NBIOT_PTC
  {
    var template (value) NB_PdcpCountInfoList_Type v_NB_PdcpCountInfoListTX;
    var NB_PdcpCountInfo_Type v_NB_PdcpCountInfoRX_DRB1;
 
    v_NB_PdcpCountInfoListTX := { cs_NB_PdcpCountInfoDL_DRB1(p_SequenceNumberTX) };
    
    f_NBIOT_SS_PdcpCount_Set(p_CellId, v_NB_PdcpCountInfoListTX); // set PDCP DL count of DRB1 to p_SequenceNumberTX
    L2DATA.send(cas_NB_L2_DATA_REQ(cs_NB_ReqAspCommonPart_RB(p_CellId, tsc_NB_RbId_DRB1), cs_L2Data_Request_PdcpSdu(p_Data))); // tx PDCP SDU
    L2DATA.receive(car_NB_L2_DATA_IND(cr_NB_IndAspCommonPart_RB(p_CellId, tsc_NB_RbId_DRB1), cr_L2Data_Indication_PdcpSdu(p_Data))); // rx PDCP SDU

    v_NB_PdcpCountInfoRX_DRB1 := f_NBIOT_SS_PdcpCount_GetDRB1(p_CellId);

    if (not match(bit2int(v_NB_PdcpCountInfoRX_DRB1.UL.Value), p_SequenceNumberRX + 1)) {     /* @sic R5s180477 change 1: "+ 1" sic@ */
      f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, "Invalid sequence number in UL");
    }
  }

  /*
   * @desc      return header compression parameters depending on UE capability (Table 22.3.3.5.3.3-1)
   * @param     p_PDCP_Parameters
   * @return    template (value) PDCP_Config_NB_r13.headerCompression_r13
   * @status    APPROVED (NBIOT)
   */
  function fl_TC_22_3_3_5_PDCP_HeaderCompression(PDCP_Parameters_NB_r13 p_PDCP_Parameters) return template (value) PDCP_Config_NB_r13.headerCompression_r13
  {
    var template (value) PDCP_Config_NB_r13.headerCompression_r13 v_HeaderCompression := cs_NB_PDCP_HeaderCompression_ROHC;

    /* profile corresponding to the highest value shall be set to TRUE (@sic R5-185021 sic@) */
    if (p_PDCP_Parameters.supportedROHC_Profiles_r13.profile0x0104) {
      v_HeaderCompression.rohc.profiles_r13.profile0x0104 := true;
    } else if (p_PDCP_Parameters.supportedROHC_Profiles_r13.profile0x0103) {
      v_HeaderCompression.rohc.profiles_r13.profile0x0103 := true;
    } else if (p_PDCP_Parameters.supportedROHC_Profiles_r13.profile0x0102) {
      v_HeaderCompression.rohc.profiles_r13.profile0x0102 := true;
    } else if (p_PDCP_Parameters.supportedROHC_Profiles_r13.profile0x0006) {
      v_HeaderCompression.rohc.profiles_r13.profile0x0006 := true;
    } else if (p_PDCP_Parameters.supportedROHC_Profiles_r13.profile0x0004) {
      v_HeaderCompression.rohc.profiles_r13.profile0x0004 := true;
    } else if (p_PDCP_Parameters.supportedROHC_Profiles_r13.profile0x0003) {
      v_HeaderCompression.rohc.profiles_r13.profile0x0003 := true;
    } else if (p_PDCP_Parameters.supportedROHC_Profiles_r13.profile0x0002) {
      v_HeaderCompression.rohc.profiles_r13.profile0x0002 := true;
    } else {
      f_SetVerdictInconc(__FILE__, __LINE__, "UE does not support any ROHC profile");
    }

    /* maxCID-r13 set to value of maxNumberROHC-ContextSessions parameter as indicated by the UE in UECapabilityInformation (@sic R5-185021 sic@) */
    v_HeaderCompression.rohc.maxCID_r13 := 2;     // maxNumberROHC-ContextSessions-r13 DEFAULT cs2
    if (ispresent(p_PDCP_Parameters.maxNumberROHC_ContextSessions_r13)) {
      select (p_PDCP_Parameters.maxNumberROHC_ContextSessions_r13) {
        case (cs2)  { v_HeaderCompression.rohc.maxCID_r13 := 2; }
        case (cs4)  { v_HeaderCompression.rohc.maxCID_r13 := 4; }
        case (cs8)  { v_HeaderCompression.rohc.maxCID_r13 := 8; }
        case (cs12) { v_HeaderCompression.rohc.maxCID_r13 := 12; }
      }
    }
    return v_HeaderCompression;
  }

  /*
   * @desc      REFERENCE TS 36.523-3 clause 22.3.3.5
   * @status    APPROVED (NBIOT)
   */
  function f_TC_22_3_3_5_NBIOT() runs on NBIOT_PTC
  {
    var NBIOT_CellId_Type v_CellId := nbiot_Cell1;
    var RRCConnectionResume_NB_r13_IEs.drb_ContinueROHC_r13 v_ContinueROHC := true_;
    var integer v_SequenceNumberTX;
    var integer v_SequenceNumberRX;
    var charstring v_SourceAddr := f_LoopbackModeB_IP_Address_UE();
    var UE_Capability_NB_r13 v_NBIOT_Cap;
    var template (value) DL_DCCH_Message_NB v_RRCConnectionResume;
    var template (omit) PDCP_Config_NB_r13 v_PDCP_Config_NB;
    var template (value) DRB_ToAddMod_NB_r13 v_DRB_ToAddMod;
    var template (value) DRB_ToAddModList_NB_r13 v_DRB_ToAddModList;
    var template (value) NB_RadioBearer_Type v_NB_DRB_ConfigRoHC;
    var template (value) PDCP_SDU_Type v_PDCP_SDU;
    var template (value) PDCP_SDUList_Type v_PDCP_SDUList := {
      f_IPv4IPv6_IcmpEchoReply(v_SourceAddr, -, 1),
      f_IPv4IPv6_IcmpEchoReply(v_SourceAddr, -, 2),
      f_IPv4IPv6_IcmpEchoReply(v_SourceAddr, -, 3)
    };
    
    f_NBIOT_Init(c1, USER_PLANE);      /* @sic R5s170772 Change 1.1: USER_PLANE sic@ */
    
    // Create and configure all cells
    f_NBIOT_CellConfig_Def(v_CellId, USER_PLANE);
    
    // Bring UE to idle state
    f_NBIOT_Preamble(v_CellId, USER_PLANE, STATE3A_NB_IDLEUPDATED_TESTLOOP_ModeB);  /* @sic R5s180477 change 2.1: testloop mode B sic@ */
    

    v_NBIOT_Cap := f_NBIOT_MobileInfo_GetUECapability();    /* @sic R5-185021: Header compression needs to be configured depending on UE capability sic@ */
    v_PDCP_Config_NB := cs_NB_PDCP_Config_DRB(-, fl_TC_22_3_3_5_PDCP_HeaderCompression(v_NBIOT_Cap.pdcp_Parameters_r13));  /* @sic R5-185021: fl_TC_22_3_3_5_PDCP_HeaderCompression instead of cs_NB_PDCP_HeaderCompression_ROHC sic@ */
    v_DRB_ToAddMod := cs_NB_DRB_ToAddMod_Common(tsc_DRB1, v_PDCP_Config_NB);
    v_NB_DRB_ConfigRoHC := cs_NB_DRB_Config(tsc_DRB1, valueof(v_PDCP_Config_NB)); /* @sic R5-176942: PDCP using ROHC but no PDCP Test mode sic@ */

    // Set null AS ciphering algorithm
    f_NBIOT_AS_CipheringAlgorithm_Set(eea0);

    // Enter connected mode with null AS ciphering algorithm
    f_NBIOT_GenericRbEst(v_CellId, -, -, v_DRB_ToAddMod);
    
    // Reconfigure DRB locally to set the required RRC test mode with RoHC enabled
    f_NBIOT_SS_CommonRadioBearerConfig_SingleDRB(v_CellId, v_NB_DRB_ConfigRoHC);   /*  @sic R5-176942: no PDCP test mode but RoHC being configured sic@ */
    
    // Close testloop mode
    f_NBIOT_CloseUE_TestLoopModeB(v_CellId);  /* @sic R5s180477 change 2.1: testloop mode B sic@ */

    f_NBIOT_TestBody_Set(true, layer2);
    
    //@siclog "Step 2 .. 3" siclog@
    for (v_SequenceNumberTX := 0; v_SequenceNumberTX < 2; v_SequenceNumberTX := v_SequenceNumberTX + 1) {
      //@siclog "Step 1 - 2" siclog@
      v_PDCP_SDU := v_PDCP_SDUList[v_SequenceNumberTX];
      v_SequenceNumberRX := v_SequenceNumberTX;
      fl_TC_22_3_3_5_SendRecv(v_CellId, v_SequenceNumberTX, v_SequenceNumberRX, v_PDCP_SDU);    // @sic R5-176942: modified for RRC Test Model sic@
    }
    
    //@siclog "Step 4" siclog@
    f_NBIOT_RRCConnectionSuspend(v_CellId);                                                     /* suspend RRC connection, reestablish security and set msg 4 to RRCConnectionResume for the same cell
                                                                                                   @sic R5-182302 change 4, R5w180105 sic@ */
    //@siclog "Step 8 (preconfigured at the SS" siclog@
    v_PDCP_Config_NB := omit;
    v_DRB_ToAddModList := { cs_NB_DRB_ToAddMod_Common(tsc_DRB1, v_PDCP_Config_NB) };
    v_RRCConnectionResume := cs_RRCConnectionResume_NB(-, cs_RadioResourceConfigDedicated_NB_DrbConfig(v_DRB_ToAddModList), v_ContinueROHC);   /* @sic R5-186800: PDCP_Config not present sic@ */
    f_NBIOT_SS_ConfigDRB1AndRachProcedureMsg4_RRCConnResume(v_CellId, v_RRCConnectionResume, v_NB_DRB_ConfigRoHC);   /* configure Msg4 of the RACH procedure according to 36.523-3 clause 7A.8:
                                                                                                                        reestablish security and set msg 4 to RRCConnectionResume;
                                                                                                                        @sic R5s170772 Change 1.2: reconfigure DRB1 as being released by f_NBIOT_RRCConnectionSuspend sic@
                                                                                                                        @sic R5-182302 change 4, R5w180105 sic@
                                                                                                                        @sic R5s180469 additional change 2: establishment of DRB1 moved inside function sic@ */
    //@siclog "Step 5" siclog@
    f_Delay(10.0);

    //@siclog "Step 6" siclog@
    f_NBIOT_UE_Page(v_CellId);

    //@siclog "Step 7 - 9" siclog@
    f_NBIOT_RRCConnectionResume(v_CellId);
    
    //@siclog "Step 10 - 11" siclog@
    // Void  (@sic R5-185021 sic@)

    //@siclog "Step 12 - 13" siclog@
    v_PDCP_SDU := v_PDCP_SDUList[v_SequenceNumberTX];
    v_SequenceNumberRX := 0;          /* @sic R5s170772 Change 1.3: PDCP SN = 0 in UL sic@ */
    v_SequenceNumberTX := 0;          /* @sic R5s180477 change 2.2 sic@ */
    fl_TC_22_3_3_5_SendRecv(v_CellId, v_SequenceNumberTX, v_SequenceNumberRX, v_PDCP_SDU); // @sic R5-176942: modified for RRC Test Model sic@
    f_NBIOT_PreliminaryPass(__FILE__, __LINE__, "Step 13");
    
    f_NBIOT_TestBody_Set(false);
    
    //Switch/power off UE
    f_NBIOT_Postamble(v_CellId, USER_PLANE, N3_TESTMODE);
  }

  /*
   * @desc      REFERENCE TS 36.523-1 clause 22.3.3.6
   * @status    APPROVED (NBIOT)
   */
  function f_TC_22_3_3_6_NBIOT() runs on NBIOT_PTC
  {
    var NBIOT_CellId_Type v_CellId := nbiot_Cell1;
    var SubFrameTiming_Type v_NextSearchSpace;
    var template (value) TimingInfo_Type v_TimingInfo;
    var integer v_SequenceNumber := 0;
    var template (value) PDCP_DataPdu_ShortSN_Type v_PDCP_PDU_TX;
    var template (present) PDCP_DataPdu_ShortSN_Type v_PDCP_PDU_RX;
    var template (value) PDCP_SDUList_Type v_PDCP_SDUList := {
      f_GetN_OctetsFromPRBS(0,   32),
      f_GetN_OctetsFromPRBS(32,  32),
      f_GetN_OctetsFromPRBS(64,  32),
      f_GetN_OctetsFromPRBS(96,  32),
      f_GetN_OctetsFromPRBS(128, 32)
    };
    var template (value) DRB_ToAddMod_NB_r13 v_DRB_ToAddMod := cs_NB_DRB_ToAddMod_Common(tsc_DRB1, cs_NB_PDCP_Config_DRB(ms5120));
    var template (value) NB_DciUlInfo_Type v_DciUlInfo;

    f_NBIOT_Init(c1, USER_PLANE);                               // @sic R5s170534 change 1.2: USER_PLANE sic@

    // Create and configure all cells
    f_NBIOT_CellConfig_Def(v_CellId, USER_PLANE);

    // Bring UE to idle state
    f_NBIOT_Preamble(v_CellId, USER_PLANE, STATE3A_NB_IDLEUPDATED_TESTLOOP_ModeA);

    // Set null AS ciphering algorithm
    f_NBIOT_AS_CipheringAlgorithm_Set(eea0);

    // Enter connected mode with null AS ciphering algorithm
    f_NBIOT_GenericRbEst(v_CellId, -, tsc_DRB1, v_DRB_ToAddMod);

    // Reconfigure DRB locally to set the required PDCP test mode
    f_NBIOT_SS_CommonRadioBearerConfig_SingleDRB(v_CellId, cs_NB_DRB1_ConfigAM_PDCP_Mode);

    // Close testloop mode
    f_NBIOT_CloseUE_TestLoopModeA(v_CellId);

    f_NBIOT_TestBody_Set(true, layer2);

    f_NBIOT_StopULGrantTransmission(v_CellId, delay500ms);      // @sic R5s170967 additional change: delay500ms sic@

    v_NextSearchSpace := f_NBIOT_GetNextSearchSpace(v_CellId);
    
    while (v_SequenceNumber < 5) {                              // @sic R5s170534 change 1.1: 5 instead of 3 sic@
      v_TimingInfo := cs_TimingInfo_SubFrameFull(v_NextSearchSpace);
      //@siclog "Step 1" siclog@
      v_PDCP_PDU_TX := cs_NB_PDCP_DataPdu(v_SequenceNumber, v_PDCP_SDUList[v_SequenceNumber]);
      //@siclog "Step 2, 4" siclog@
      L2DATA.send(cas_NB_L2_DATA_REQ(cs_NB_ReqAspCommonPart_RB(v_CellId, tsc_NB_RbId_DRB1, v_TimingInfo),
                                     cs_L2Data_Request_PdcpPdu(v_PDCP_PDU_TX)));
      v_SequenceNumber := v_SequenceNumber + 1;
      if (v_SequenceNumber != 3) {
        //@siclog "Step 3" siclog@
        v_NextSearchSpace := f_NBIOT_IncrementSearchSpace(v_NextSearchSpace);
      } else {
        v_NextSearchSpace := f_NBIOT_IncrementSearchSpace(v_NextSearchSpace, int2float(5120 / f_NBIOT_SearchSpace_GetPdcchPeriod()) * 1.1);   // (Discard timer / NPDCCH period) + 10%
      }
    }

    //@siclog "Step 5" siclog@
    v_DciUlInfo := cs_NB_DciInfo_CcchDcchDtchUL(1, 9);          // @sic R5-174477, R5s170534 change 1.3: UL Grant of 296 bits sic@
    f_NBIOT_ULGrantTransmission(v_CellId, cs_NB_UL_GrantScheduling_Start(cs_NB_ContinuousGrant(v_DciUlInfo)), cs_TimingInfo_SubFrameFull(v_NextSearchSpace));

    //@siclog "Step 6, 7" siclog@
    for (v_SequenceNumber := 3; v_SequenceNumber < 5; v_SequenceNumber := v_SequenceNumber + 1) {
      v_PDCP_PDU_RX := cr_NB_PDCP_DataPdu(-, v_PDCP_SDUList[v_SequenceNumber]);     // @sic R5s170973, R5-181156: sequence number shall not be checked in accordance to R5-141127 sic@
      L2DATA.receive(car_NB_L2_DATA_IND(cr_NB_IndAspCommonPart_RB(v_CellId, tsc_NB_RbId_DRB1), cr_L2Data_Indication_PdcpPdu(v_PDCP_PDU_RX)));
      f_NBIOT_PreliminaryPass(__FILE__, __LINE__, "Step 6/7");
    }

    f_NBIOT_TestBody_Set(false);
    
    f_NBIOT_ULGrantTransmission(v_CellId, cs_NB_UL_GrantScheduling_Start);          // @sic R5s170534 change 1.4: change to default UL grant configuration sic@
    
    //Switch/power off UE
    f_NBIOT_Postamble(v_CellId, USER_PLANE, N3_TESTMODE);
  }

}
