/******************************************************************************/
// @copyright   Copyright Notification
//   No part may be reproduced except as authorized by written permission.
//   The copyright and the foregoing restriction extend to reproduction in all media.
//   Trademark 2019, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).
//   All rights reserved.
// @version: 36.523-3 v15.3.0
// $Date: 2018-12-04 11:03:21 +0100 (Tue, 04 Dec 2018) $
// $Rev: 23296 $
/******************************************************************************/

module NBIOT_LoopBack {

  import from Common4G5G_LoopBack all;
  import from Common4G5G_Templates all;
  import from CommonAspDefs all;
  import from CommonDefs all;
  import from EPS_NAS_LoopBack_Templates all;
  import from EPS_NAS_LoopBack_TypeDefs all;
  import from EPS_NAS_MsgContainers all;
  import from EPS_NAS_Templates all;
  import from NAS_CommonTemplates all;
  import from NBIOT_CommonDefs all;
  import from NBIOT_Component all;
  import from NBIOT_SRB_DRB_Templates all;

  const UE_TestLoopMode_Type tsc_UE_TestLoopMode_TypeI   := '08'O;      // @status    APPROVED (NBIOT)

  template (value) NAS_DL_Message_Type cs_CLOSE_UE_TEST_LOOP_ModeI :=
  { /* @status    APPROVED (NBIOT) */
    cLOSE_UE_TEST_LOOP:= {
      skipIndicator             := tsc_Gen_SkipIndicator,
      protocolDiscriminator     := tsc_LB_ProtocolDiscriminator,
      messageType               := tsc_MsgType_CloseUE_TestLoop,
      ueTestLoopMode            := tsc_UE_TestLoopMode_TypeI,
      ueTestLoopModeA_LB_Setup  := omit,
      ueTestLoopModeB_LB_Setup  := omit,
      ueTestLoopModeC_LB_Setup  := omit,
      ueTestLoopModeD_LB_Setup  := omit,
      ueTestLoopModeE_LB_Setup  := omit,
      ueTestLoopModeF_LB_Setup  := omit,
      ueTestLoopModeGH_LB_Setup := omit
    }
  };

  /*
   * @desc      return testloop mode for the respective test state
   * @param     p_TestLoopMode
   * @return    UE_TestLoopMode_Type
   * @status    APPROVED (NBIOT)
   */
  function f_NBIOT_UE_TestLoopMode_Type(NBIOT_IDLEUPDATED_STATE_Type p_TestLoopMode) return UE_TestLoopMode_Type
  {
    var UE_TestLoopMode_Type v_UE_TestLoopMode;

    select (p_TestLoopMode) {
      case (STATE2A_NB_TESTLOOP_ModeA, STATE3A_NB_IDLEUPDATED_TESTLOOP_ModeA) {
        v_UE_TestLoopMode := tsc_UE_TestLoopMode_TypeA;
      }
      case (STATE2A_NB_TESTLOOP_ModeB, STATE3A_NB_IDLEUPDATED_TESTLOOP_ModeB) {
        v_UE_TestLoopMode := tsc_UE_TestLoopMode_TypeB;
      }
      case (STATE2A_NB_TESTLOOP_ModeF, STATE3A_NB_IDLEUPDATED_TESTLOOP_ModeF) { // @sic R5-185113 sic@
        v_UE_TestLoopMode := tsc_UE_TestLoopMode_TypeF;
      }
      case (STATE2A_NB_TESTLOOP_ModeG, STATE3A_NB_IDLEUPDATED_TESTLOOP_ModeG) {
        v_UE_TestLoopMode := tsc_UE_TestLoopMode_TypeG;
      }
      case (STATE2A_NB_TESTLOOP_ModeH, STATE3A_NB_IDLEUPDATED_TESTLOOP_ModeH) {
        v_UE_TestLoopMode := tsc_UE_TestLoopMode_TypeH;
      }
      case (STATE2A_NB_TESTLOOP_ModeI, STATE3A_NB_IDLEUPDATED_TESTLOOP_ModeI) { // @sic R5-172854 sic@
        v_UE_TestLoopMode := tsc_UE_TestLoopMode_TypeI;
      }
      case else {
        FatalError(__FILE__, __LINE__, "invalide loopback mode");
      }
    }
    return v_UE_TestLoopMode;
  }

  /*
   * @desc      activate test mode at the UE side
   * @param     p_CellId
   * @param     p_UE_TestLoopMode
   * @status    APPROVED (NBIOT)
   */
  function f_NBIOT_Activate_TestMode(NBIOT_CellId_Type p_CellId,
                                     UE_TestLoopMode_Type p_UE_TestLoopMode) runs on NBIOT_PTC
  {
    SRB.send(cas_NB_SRB_NasPdu_REQ(p_CellId,
                                   tsc_SRB1bis,
                                   cs_TimingInfo_Now,
                                   cs_NAS_Request(tsc_SHT_IntegrityProtected_Ciphered,
                                                  cs_ACTIVATE_TEST_MODE(p_UE_TestLoopMode))));
    
    SRB.receive(car_NB_SRB_NasPdu_IND(p_CellId,
                                      tsc_SRB1bis,
                                      cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered,
                                                        cr_ACTIVATE_TEST_MODE_COMPLETE)));
  }

  /*
   * @desc      deactivate test mode
   * @param     p_CellId
   * @param     p_SRB
   * @status    APPROVED (NBIOT)
   */
  function f_NBIOT_Deactivate_TestMode(NBIOT_CellId_Type p_CellId,
                                       NB_SRB_Identity_Type p_SRB) runs on NBIOT_PTC
  {
    SRB.send(cas_NB_SRB_NasPdu_REQ(p_CellId,
                                   p_SRB,
                                   cs_TimingInfo_Now,
                                   cs_NAS_Request(tsc_SHT_IntegrityProtected_Ciphered,
                                                  cs_DEACTIVATE_TEST_MODE)));
    
    SRB.receive(car_NB_SRB_NasPdu_IND(p_CellId,
                                      p_SRB,
                                      cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered,
                                                        cr_DEACTIVATE_TEST_MODE_COMPLETE)));
  }

  /*
   * @desc      open test loop at the UE
   * @param     p_CellId
   * @param     p_SRB
   * @status    APPROVED (NBIOT)
   */
  function f_NBIOT_OpenUE_TestLoopMode(NBIOT_CellId_Type p_CellId,
                                       NB_SRB_Identity_Type p_SRB) runs on NBIOT_PTC
  {
    SRB.send(cas_NB_SRB_NasPdu_REQ(p_CellId,
                                   p_SRB,
                                   cs_TimingInfo_Now,
                                   cs_NAS_Request(tsc_SHT_IntegrityProtected_Ciphered,
                                                  cs_OPEN_UE_TEST_LOOP)));
    
    SRB.receive(car_NB_SRB_NasPdu_IND(p_CellId,
                                      p_SRB,
                                      cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered,
                                                        cr_OPEN_UE_TEST_LOOP_COMPLETE)));
  }

  /*
   * @desc      open test loop and deactivate test mode
   * @param     p_CellId
   * @param     p_SRB
   * @status    APPROVED (NBIOT)
   */
  function f_NBIOT_OpenUE_TestLoopMode_Deactivate_TestMode(NBIOT_CellId_Type p_CellId,
                                                           NB_SRB_Identity_Type p_SRB)
    runs on NBIOT_PTC
  {
    f_NBIOT_OpenUE_TestLoopMode(p_CellId, p_SRB);
    f_NBIOT_Deactivate_TestMode(p_CellId, p_SRB);
  }

  /*
   * @desc      close test loop for NBIOT
   * @param     p_CellId
   * @param     p_SRB
   * @param     p_CLOSE_UE_TEST_LOOP_Mode
   * @status    APPROVED (NBIOT)
   */
  function fl_NBIOT_CloseUE_TestLoopMode(NBIOT_CellId_Type p_CellId,
                                         NB_SRB_Identity_Type p_SRB,
                                         template (value) NAS_DL_Message_Type p_CLOSE_UE_TEST_LOOP_Mode)
    runs on NBIOT_PTC
  {
    SRB.send(cas_NB_SRB_NasPdu_REQ(p_CellId,
                                   p_SRB,
                                   cs_TimingInfo_Now,
                                   cs_NAS_Request(tsc_SHT_IntegrityProtected_Ciphered, p_CLOSE_UE_TEST_LOOP_Mode)));
    SRB.receive(car_NB_SRB_NasPdu_IND(p_CellId,
                                      p_SRB,
                                      cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered, cr_CLOSE_UE_TEST_LOOP_COMPLETE)));
  }

  /*
   * @desc      function to close test loop mode A
   * @param     p_CellId
   * @param     p_UE_TestLoopModeA_LB_Setup (default value: cs_UE_TestLoopModeA_LB_Setup_NoScaling)
   * @status    APPROVED (NBIOT)
   */
  function f_NBIOT_CloseUE_TestLoopModeA(NBIOT_CellId_Type p_CellId,
                                         template (value) UE_TestLoopModeA_LB_Setup_Type p_UE_TestLoopModeA_LB_Setup := cs_UE_TestLoopModeA_LB_Setup_NoScaling)
    runs on NBIOT_PTC
  {
    var template (value) NAS_DL_Message_Type v_CLOSE_UE_TEST_LOOP_Mode := cs_CLOSE_UE_TEST_LOOP_ModeA(p_UE_TestLoopModeA_LB_Setup);
    fl_NBIOT_CloseUE_TestLoopMode(p_CellId, tsc_SRB1, v_CLOSE_UE_TEST_LOOP_Mode);
  }

  /*
   * @desc      function to close test loop mode B
   * @param     p_CellId
   * @param     p_IpPduDelayTime    (default value: '00'O)
   * @status    APPROVED (NBIOT)
   */
  function f_NBIOT_CloseUE_TestLoopModeB(NBIOT_CellId_Type p_CellId,
                                         UE_TestLoopModeB_LB_Setup_Type p_IpPduDelayTime := '00'O)
    runs on NBIOT_PTC
  {
    var template (value) NAS_DL_Message_Type v_CLOSE_UE_TEST_LOOP_Mode := cs_CLOSE_UE_TEST_LOOP_ModeB(p_IpPduDelayTime);
    fl_NBIOT_CloseUE_TestLoopMode(p_CellId, tsc_SRB1, v_CLOSE_UE_TEST_LOOP_Mode);
  }

  /*
   * @desc      function to close test loop mode I
   * @param     p_CellId
   * @status    APPROVED (NBIOT)
   */
  function f_NBIOT_CloseUE_TestLoopModeI(NBIOT_CellId_Type p_CellId)
    runs on NBIOT_PTC
  {
    var template (value) NAS_DL_Message_Type v_CLOSE_UE_TEST_LOOP_Mode := cs_CLOSE_UE_TEST_LOOP_ModeI;
    fl_NBIOT_CloseUE_TestLoopMode(p_CellId, tsc_SRB1bis, v_CLOSE_UE_TEST_LOOP_Mode);
  }

  /*
   * @desc      function to close test loop mode G/H
   * @param     p_CellId
   * @param     p_TestLoopMode
   * @param     p_UplinkMode        (default value: tsc_TestLoopModeGH_UplinkMode_RLC)
   * @param     p_Repetitions       (default value: 1)
   * @param     p_UplinkDataDelay   (default value: 0)
   * @status    APPROVED (NBIOT)
   */
  function f_NBIOT_CloseUE_TestLoopModeGH(NBIOT_CellId_Type p_CellId,
                                          UE_TestLoopMode_Type p_TestLoopMode,
                                          B1_Type p_UplinkMode := tsc_TestLoopModeGH_UplinkMode_RLC,
                                          integer p_Repetitions := 1,
                                          integer p_UplinkDataDelay := 0) runs on NBIOT_PTC
  {
    var template (value) UE_TestLoopModeGH_LB_Setup_Type v_TestLoopModeGH_Setup := cs_NBIOT_TestLoopModeGH_LB_Setup(p_UplinkMode, p_Repetitions, p_UplinkDataDelay);
    var template (value) NAS_DL_Message_Type v_CLOSE_UE_TEST_LOOP_Mode := cs_CLOSE_UE_TEST_LOOP_ModeGH(p_TestLoopMode, v_TestLoopModeGH_Setup);
    fl_NBIOT_CloseUE_TestLoopMode(p_CellId, tsc_SRB1bis, v_CLOSE_UE_TEST_LOOP_Mode);
  }

}
