/******************************************************************************/
// @copyright   Copyright Notification
//   No part may be reproduced except as authorized by written permission.
//   The copyright and the foregoing restriction extend to reproduction in all media.
//   Trademark 2019, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).
//   All rights reserved.
// @version: 36.523-3 v15.3.0
// $Date: 2019-03-16 08:40:40 +0100 (Sat, 16 Mar 2019) $
// $Rev: 24088 $
/******************************************************************************/
module NBIOT_RLC_Testcases {

  import from NBIOT_RRC_ASN1_Definitions language "ASN.1:2002" all with {encode "UNALIGNED_PER_OctetAligned"};
  import from Common4G5G_Templates all;
  import from Common4G5G_Timing all;
  import from CommonAspDefs all;
  import from CommonDefs all;
  import from EPS_NAS_MsgContainers all;
  import from EUTRA_NB_ASP_L2DataDefs all;
  import from EUTRA_NB_CommonL2 all;
  import from EUTRA_NB_CommonRLC all;
  import from L2_Common4G5G all;
  import from NBIOT_ASP_L2DataDefs all;
  import from NBIOT_ASP_TypeDefs all;
  import from NBIOT_CellCfg_Templates all;
  import from NBIOT_CellInfo all;
  import from NBIOT_CommonDefs all;
  import from NBIOT_CommonProcedures all;
  import from NBIOT_Component all;
  import from NBIOT_ConfigurationSteps all;
  import from NBIOT_L2_Common all;
  import from NBIOT_NASSteps all;
  import from NBIOT_RLC_Common all;
  import from NBIOT_RRCSteps all;
  import from NBIOT_RRC_Templates all;
  import from NBIOT_SRB_DRB_Templates all;
  import from NBIOT_Timing all;

  /*
   * @desc      Transmission of one AMD PDU
   * @param     p_RLC_Rec           (by reference)
   * @param     p_TimingInfo
   * @param     p_Poll
   * @param     p_FramingInfo
   * @param     p_RLC_Data
   * @status    APPROVED (NBIOT)
   */
  function f_NB_TxAMD_OnePDU (inout RLC_SS_State p_RLC_Rec,
                              template (value) TimingInfo_Type p_TimingInfo,
                              B1_Type p_Poll,
                              RLC_FramingInfo_Type p_FramingInfo,
                              RLC_DataField_Type p_RLC_Data)
    runs on NBIOT_PTC
  { //  build PDU constraint, can be simplified !
    p_RLC_Rec.AMD_PDU := valueof(cs_AMD_PDU_NoLIs(p_RLC_Rec.AM_VTS,             // Note: valueof cannot be avoided here
                                                  p_Poll,
                                                  p_FramingInfo,
                                                  p_RLC_Data));
    //  send PDU
    L2DATA.send (cas_NB_SRB1bis_RLCAmDataReq(nbiot_Cell1,
                                             p_TimingInfo,
                                             p_RLC_Rec.AMD_PDU));
    p_RLC_Rec.AM_VTS := (p_RLC_Rec.AM_VTS + 1) mod 1024;
  }

  /*
   * @desc      Transmission of an AMD PDU List
   * @param     p_RLC_Rec           (by reference)
   * @param     p_TimingInfo
   * @param     p_Poll
   * @param     p_FramingInfo
   * @param     p_RLC_Data
   * @param     p_LI_Error          (default value: tsc_NoLI_Error)
   * @status    APPROVED (NBIOT)
   */
  function f_NB_TxAMD_PDU_List(inout RLC_SS_State p_RLC_Rec,
                               template (value) TimingInfo_Type p_TimingInfo,
                               B1_Type p_Poll,
                               RLC_FramingInfo_Type p_FramingInfo,
                               RLC_DataFieldList_Type p_RLC_Data,
                               boolean p_LI_Error := tsc_NoLI_Error)
    runs on NBIOT_PTC
  {
    var integer v_LI1;
    var integer v_LI2;
  
    select (lengthof(p_RLC_Data)) {
      case (2) {
        v_LI1 := lengthof (p_RLC_Data[0]);
        if ( p_LI_Error ) { // LI error needs to be generated
          // 2 octets for PDCP header + 1 octet for LI error
          v_LI1 := v_LI1 + lengthof (p_RLC_Data[1]) + 1;
          // check that AM SN size is respected
          if (v_LI1 > 1023) {
            FatalError(__FILE__, __LINE__, "LI error calculation incorrect");
          }
        }
        p_RLC_Rec.AMD_PDU := valueof (cs_AMD_PDU_LIs (p_RLC_Rec.AM_VTS,             // Note: valueof cannot be avoided here
                                                      p_Poll,
                                                      p_FramingInfo,
                                                      cs_FlexPart_1LI(v_LI1),
                                                      p_RLC_Data));
      }
      case (3) {
        v_LI1 := lengthof (p_RLC_Data[0]);
        v_LI2 := lengthof (p_RLC_Data[1]);
        p_RLC_Rec.AMD_PDU := valueof (cs_AMD_PDU_LIs (p_RLC_Rec.AM_VTS,             // Note: valueof cannot be avoided here
                                                      p_Poll,
                                                      p_FramingInfo,
                                                      cs_FlexPart_2LIs(v_LI1, v_LI2),
                                                      p_RLC_Data));
      }
      case else {
        FatalError(__FILE__, __LINE__, "Function used in a currently unforeseen way");
      }
    } // end select
    //  send PDU
    L2DATA.send (cas_NB_SRB1bis_RLCAmDataReq (nbiot_Cell1,
                                              p_TimingInfo,
                                              p_RLC_Rec.AMD_PDU));
    p_RLC_Rec.AM_VTS := (p_RLC_Rec.AM_VTS + 1) mod 1024;
  }

  /*
   * @desc      Transmission of one AMD PDU segment
   * @param     p_RLC_Rec           (by reference)
   * @param     p_TimingInfo
   * @param     p_Poll
   * @param     p_FramingInfo
   * @param     p_LSF
   * @param     p_SegOffset
   * @param     p_RLC_Data
   * @status    APPROVED (NBIOT)
   */
  function f_NB_TxAMD_PDU_OneSeg(inout RLC_SS_State p_RLC_Rec,
                                 template (value) TimingInfo_Type p_TimingInfo,
                                 B1_Type p_Poll,
                                 RLC_FramingInfo_Type p_FramingInfo,
                                 B1_Type p_LSF,
                                 integer p_SegOffset,
                                 RLC_DataField_Type p_RLC_Data)
    runs on NBIOT_PTC
  {
    p_RLC_Rec.AMD_PDU := valueof(cs_AMD_PDU_seg_NoLIs (p_RLC_Rec.AM_VTS,             // Note: valueof cannot be avoided here
                                                       p_Poll,
                                                       p_FramingInfo,
                                                       p_LSF,
                                                       p_SegOffset,
                                                       p_RLC_Data));
    //  send PDU
    L2DATA.send (cas_NB_SRB1bis_RLCAmDataReq (nbiot_Cell1,
                                              p_TimingInfo,
                                              p_RLC_Rec.AMD_PDU));
    // VTS is not updated by this function: must be administered by the user of this function
  }

  /*
   * @desc      Transmission of one AMD PDU segment list
   * @param     p_RLC_Rec           (by reference)
   * @param     p_TimingInfo
   * @param     p_Poll
   * @param     p_FramingInfo
   * @param     p_LastSegmentFlag
   * @param     p_SegOffset
   * @param     p_RLC_Data
   * @status    APPROVED (NBIOT)
   */
  function f_NB_TxAMD_SegList(inout RLC_SS_State p_RLC_Rec,
                              template (value) TimingInfo_Type p_TimingInfo,
                              B1_Type p_Poll,
                              RLC_FramingInfo_Type p_FramingInfo,
                              B1_Type p_LastSegmentFlag,
                              integer p_SegOffset,
                              RLC_DataFieldList_Type p_RLC_Data)
    runs on NBIOT_PTC
  {
    var integer v_LI1;
    var integer v_LI2;
  
    select (lengthof(p_RLC_Data)) {
      case (2) {
        v_LI1 := lengthof (p_RLC_Data[0]);
        p_RLC_Rec.AMD_PDU := valueof(cs_AMD_PDU_seg_LIs (p_RLC_Rec.AM_VTS,             // Note: valueof cannot be avoided here
                                                         p_Poll,
                                                         p_FramingInfo,
                                                         p_LastSegmentFlag,
                                                         p_SegOffset,
                                                         cs_FlexPart_1LI(v_LI1),
                                                         p_RLC_Data));
      }
      case (3) {
        v_LI1 := lengthof (p_RLC_Data[0]);
        v_LI2 := lengthof (p_RLC_Data[1]);
        p_RLC_Rec.AMD_PDU := valueof(cs_AMD_PDU_seg_LIs (p_RLC_Rec.AM_VTS,             // Note: valueof cannot be avoided here
                                                         p_Poll,
                                                         p_FramingInfo,
                                                         p_LastSegmentFlag,
                                                         p_SegOffset,
                                                         cs_FlexPart_2LIs(v_LI1, v_LI2),
                                                         p_RLC_Data));
      }
      case else {
        FatalError(__FILE__, __LINE__, "Function used in a currently unforeseen way");
      }
    } // end select
    //  send PDU
    L2DATA.send (cas_NB_SRB1bis_RLCAmDataReq (nbiot_Cell1,
                                              p_TimingInfo,
                                              p_RLC_Rec.AMD_PDU));
    // VTS is not updated by this function: must be administered by the user of this function
  }

  /*
   * @desc      Transmission of one AMD SDU
   * @param     p_RLC_Rec           (by reference)
   * @param     p_TimingInfo
   * @param     p_Poll
   * @param     p_SDU_Num
   * @status    APPROVED (NBIOT)
   */
  function f_NB_TxAMD_SDU(inout RLC_SS_State p_RLC_Rec,
                          template (value) TimingInfo_Type p_TimingInfo,
                          B1_Type p_Poll,
                          integer p_SDU_Num)
    runs on NBIOT_PTC
  { //  build PDU constraint, can be simplified !
    p_RLC_Rec.AMD_PDU := valueof(cs_AMD_PDUoneSDU(p_RLC_Rec.AM_VTS,             // Note: valueof cannot be avoided here
                                                  p_Poll,
                                                  p_RLC_Rec.RLC_DataList[p_SDU_Num]));
    //  send PDU containing SDU
    L2DATA.send (cas_NB_SRB1bis_RLCAmDataReq (nbiot_Cell1,
                                              p_TimingInfo,
                                              p_RLC_Rec.AMD_PDU));
    p_RLC_Rec.AM_VTS := (p_RLC_Rec.AM_VTS + 1) mod 1024;
  }

  /*
   * @desc      Reception of one AMD SDU
   * @param     p_RLC_Rec           (by reference)
   * @param     p_Poll
   * @param     p_SDU_Num
   * @status    APPROVED (NBIOT)
   */
  function f_NB_RxAMD_SDU(inout RLC_SS_State p_RLC_Rec,
                          B1_Type p_Poll,
                          integer p_SDU_Num)
    runs on NBIOT_PTC
  {
    var  NB_L2_DATA_IND v_ReceivedAsp;

    L2DATA.receive (car_NB_SRB1bis_RLCAmDataInd(nbiot_Cell1,
                                                cr_AMD_PDUoneSDU(p_RLC_Rec.AM_VRR,
                                                                 p_Poll,
                                                                 {p_RLC_Rec.RLC_UL_DataList[p_SDU_Num]} ))) -> value v_ReceivedAsp;
    p_RLC_Rec.AM_VRR := (p_RLC_Rec.AM_VRR + 1) mod 1024;
    p_RLC_Rec.TimeStampLastReceivedPDU := v_ReceivedAsp.Common.TimingInfo.SubFrame;
  }

  /*
   * @desc      Reception of one AMD PDU
   * @param     p_RLC_Rec           (by reference)
   * @param     p_Poll
   * @param     p_FramingInfo
   * @param     p_Header_FlexPart
   * @param     p_Data
   * @status    APPROVED (NBIOT)
   */
  function f_NB_RxAMD_PDU (inout RLC_SS_State p_RLC_Rec,
                           B1_Type p_Poll,
                           RLC_FramingInfo_Type p_FramingInfo,
                           template (present) RLC_PDU_Header_FlexPart_Type p_Header_FlexPart,
                           RLC_DataFieldList_Type p_Data )
    runs on NBIOT_PTC
  {
    var  NB_L2_DATA_IND v_ReceivedAsp;

    L2DATA.receive (car_NB_SRB1bis_RLCAmDataInd (nbiot_Cell1,
                                                 cr_AMD_PDU_LIs (p_RLC_Rec.AM_VRR,
                                                                 p_Poll,
                                                                 p_FramingInfo,
                                                                 p_Header_FlexPart,
                                                                 p_Data))) -> value v_ReceivedAsp;
    p_RLC_Rec.AM_VRR := (p_RLC_Rec.AM_VRR + 1) mod 1024;
    p_RLC_Rec.TimeStampLastReceivedPDU := v_ReceivedAsp.Common.TimingInfo.SubFrame;
  }

  /*
   * @desc      Reception of one expected STATUS PDU
   * @param     p_RLC_Rec
   * @status    APPROVED (NBIOT)
   */
  function f_NB_RxSTATUS_PDU_ACK(RLC_SS_State p_RLC_Rec)
    runs on NBIOT_PTC
  {
    L2DATA.receive(car_NB_SRB1bis_RLCStatusInd(nbiot_Cell1,
                                               cr_RLC_AM_StatusPDU_ACK_SN(p_RLC_Rec.AM_VTA)));
  }

  /*
   * @desc      Reception of one expected STATUS PDU with a NACK LIST
   * @param     p_RLC_Rec           (by reference)
   * @param     p_NACK_List
   * @param     p_Padding
   * @status    APPROVED (NBIOT)
   */
  function f_NB_RxSTATUS_PDU_NACK(inout RLC_SS_State p_RLC_Rec,
                                  template (present) RLC_Status_NACK_List_Type p_NACK_List,
                                  template (present) RLC_Status_Padding_Type p_Padding)
    runs on NBIOT_PTC
  {
    var  NB_L2_DATA_IND v_ReceivedAsp;

    L2DATA.receive(car_NB_SRB1bis_RLCStatusInd(nbiot_Cell1,
                                               cr_STATUS_PDU_Nack(p_RLC_Rec.AM_VTA,
                                                                  p_NACK_List,
                                                                  p_Padding))) -> value v_ReceivedAsp;
    p_RLC_Rec.AM_VTA := (p_RLC_Rec.AM_VTA + 1) mod 1024;
    p_RLC_Rec.TimeStampLastReceivedPDU := v_ReceivedAsp.Common.TimingInfo.SubFrame;
  }

  /*
   * @desc      Transmission of a STATUS PDU with ACK_SN only
   * @param     p_RLC_Rec           (by reference)
   * @status    APPROVED (NBIOT)
   */
  function f_NB_TxSTATUS_PDU(inout RLC_SS_State p_RLC_Rec) runs on NBIOT_PTC
  {
    p_RLC_Rec.StatusPDU := valueof(cs_RLC_AM_StatusPDU_ACK_SN(p_RLC_Rec.AM_VRR));
    //  send STATUS PDU
    L2DATA.send(cas_NB_SRB1bis_RLCStatusReq(nbiot_Cell1,
                                            cs_TimingInfo_Now,
                                            p_RLC_Rec.StatusPDU));
  }

  /*
   * @desc      Transmission of a STATUS PDU with ACK_SN and NACK LIST
   * @param     p_RLC_Rec           (by reference)
   * @param     p_NACK_List
   * @param     p_Padding
   * @param     p_TimingInfo        (default value: cs_TimingInfo_Now)
   * @status    APPROVED (NBIOT)
   */
  function f_NB_TxSTATUS_PDU_NACK(inout RLC_SS_State p_RLC_Rec,
                                  template (value) RLC_Status_NACK_List_Type p_NACK_List,
                                  RLC_Status_Padding_Type p_Padding,
                                  template (value) TimingInfo_Type p_TimingInfo := cs_TimingInfo_Now)
    runs on NBIOT_PTC
  {
    p_RLC_Rec.StatusPDU := valueof(cs_STATUS_PDU_Nack(p_RLC_Rec.AM_VRR,             // Note: valueof cannot be avoided here
                                                      p_NACK_List,
                                                      p_Padding));
    //  send STATUS PDU
    L2DATA.send (cas_NB_SRB1bis_RLCStatusReq (nbiot_Cell1,
                                              p_TimingInfo,
                                              p_RLC_Rec.StatusPDU));
  }

  /*
   * @desc      Reception of one AMD PDU and one STATUS PDU (STATUS PDU first)
   * @param     p_RLC_Rec           (by reference)
   * @param     p_Poll
   * @param     p_FramingInfo
   * @param     p_Header_FlexPart
   * @param     p_Data
   * @param     p_RLC_AM_StatusPDU_Type
   * @status    APPROVED (NBIOT)
   */
  function f_NB_RxAMD_STATUS_PDU(inout RLC_SS_State p_RLC_Rec,
                                 B1_Type p_Poll,
                                 RLC_FramingInfo_Type p_FramingInfo,
                                 template (present) RLC_PDU_Header_FlexPart_Type p_Header_FlexPart,
                                 RLC_DataFieldList_Type p_Data,
                                 template (present) RLC_AM_StatusPDU_Type p_RLC_AM_StatusPDU_Type)
    runs on NBIOT_PTC
  {
    var  NB_L2_DATA_IND v_ReceivedAsp;

    L2DATA.receive (car_NB_SRB1bis_RLCAmDataStatusInd(nbiot_Cell1,
                                                      cr_AMD_PDU_LIs (p_RLC_Rec.AM_VRR,
                                                                      p_Poll,
                                                                      p_FramingInfo,
                                                                      p_Header_FlexPart,
                                                                      p_Data),
                                                      p_RLC_AM_StatusPDU_Type)) -> value v_ReceivedAsp;
    p_RLC_Rec.AM_VRR := (p_RLC_Rec.AM_VRR + 1) mod 1024;
    p_RLC_Rec.AM_VTA := (p_RLC_Rec.AM_VTA + 1) mod 1024;
    p_RLC_Rec.TimeStampLastReceivedPDU := v_ReceivedAsp.Common.TimingInfo.SubFrame;
  }

  /*
   * @desc      Reception of one AMD SDU and one STATUS PDU (STATUS PDU first)
   * @param     p_RLC_Rec           (by reference)
   * @param     p_Poll
   * @param     p_SDU_Num
   * @param     p_RLC_AM_StatusPDU_Type
   * @status    APPROVED (NBIOT)
   */
  function f_NB_RxAMD_STATUS_OneSDU(inout RLC_SS_State p_RLC_Rec,
                                    B1_Type p_Poll,
                                    integer p_SDU_Num,
                                    template (present) RLC_AM_StatusPDU_Type p_RLC_AM_StatusPDU_Type)
    runs on NBIOT_PTC
  {
    var  NB_L2_DATA_IND v_ReceivedAsp;
    
    L2DATA.receive (car_NB_SRB1bis_RLCAmDataStatusInd(nbiot_Cell1,
                                                      cr_AMD_PDUoneSDU(p_RLC_Rec.AM_VRR,
                                                                       p_Poll,
                                                                       {p_RLC_Rec.RLC_UL_DataList[p_SDU_Num]}),
                                                      p_RLC_AM_StatusPDU_Type)) -> value v_ReceivedAsp;
    p_RLC_Rec.AM_VRR := (p_RLC_Rec.AM_VRR + 1) mod 1024;
    p_RLC_Rec.AM_VTA := (p_RLC_Rec.AM_VTA + 1) mod 1024;
    p_RLC_Rec.TimeStampLastReceivedPDU := v_ReceivedAsp.Common.TimingInfo.SubFrame;
  }

  /*
   * @desc      Generate RLC SDUs and store them in the RLC record
   *            Different sizes in DL and UL !
   *            RLC_DataList containing the DL RLC SDUs
   *            RLC_UL_DataList containing the UL RLC SDUs being just the looped back PRBS
   * @param     p_RLC_Rec           (by reference)
   * @param     p_Number            Number of RLC SDUs to be generated
   * @param     p_NoOctets          Number of looped back octets (PRBS)
   * @param     p_StartIndex        (default value: 0)
   *                                Index to start the loop (to be used in case there is are SDUs of different lengths to be produced
   * @param     p_TestLoopMode      (default value: STATE2A_NB_TESTLOOP_ModeG)
   *                                TL Mode G, otherwise TL Mode H
   * @return    integer
   * @status    APPROVED (NBIOT)
   */
  function f_NBIOT_Generate_RLC_SDUs(inout RLC_SS_State p_RLC_Rec,
                                     integer p_Number,
                                     integer p_NoOctets,
                                     integer p_StartIndex := 0,
                                     NBIOT_IDLEUPDATED_STATE_Type p_TestLoopMode := STATE2A_NB_TESTLOOP_ModeG)
    runs on NBIOT_PTC return integer
  {
    var integer i;
    var template (value) NAS_MSG_Request_Type v_NasPduFromTC;
    var octetstring v_EncodedL3Msg;
    
    for (i := p_StartIndex; i < (p_StartIndex + p_Number); i:= i + 1) {
      // 1. get random data
      p_RLC_Rec.TxDataSize := p_NoOctets;
      f_GetTxAM_PRBS (p_RLC_Rec);  // sets p_RLC_Rec.RLC_Data

      // 2. build Container
      p_RLC_Rec.RLC_UL_DataList[i] := p_RLC_Rec.RLC_Data; // store the random data in the RLC record
      v_NasPduFromTC := f_NBIOT_L2_CPMode_DL_NAS_Message(p_TestLoopMode, p_RLC_Rec.RLC_UL_DataList[i]);

      //  3. encode and cipher ESM DATA TRANSPORT
      v_EncodedL3Msg := f_NBIOT_L2_CPMode_EncodeL3Message(v_NasPduFromTC); // to be made dependent on ESM Data Transport/ SMS TPDU if required
      p_RLC_Rec.RLC_DataList[i] := v_EncodedL3Msg;  // all list elements will have the same length
    }
    // calculate length in octets to do allow doing the segmentation correctly
    return (lengthof (p_RLC_Rec.RLC_DataList[i-1])); //@sic R5s170235 Change 4 sic@
  }

  /*
   * @desc      To bring UE into state 2B-NB: Test loop mode closed with specific RLC requirements
   * @param     p_RLC_Rec           (by reference)
   * @param     p_CellId
   * @param     p_TestLoopMode
   * @param     p_RrcConnSetup      (default value: omit)
   * @param     p_ProcessNumber     (default value: omit)
   * @status    APPROVED (NBIOT)
   */
  function f_NBIOT_RLC_Preamble_State2B_NB(inout RLC_SS_State p_RLC_Rec,
                                           NBIOT_CellId_Type p_CellId,
                                           NBIOT_IDLEUPDATED_STATE_Type p_TestLoopMode,
                                           template (omit) DL_CCCH_Message_NB p_RrcConnSetup := omit,
                                           template (omit) integer p_ProcessNumber := omit) runs on NBIOT_PTC // @sic R5s190043 sic@
  {
    var NB_RLC_CountsInfoList_Type v_RLC_CountsInfoListByRef;

    f_NBIOT_L2_Preamble_State2B_NB(v_RLC_CountsInfoListByRef, p_CellId, TransparentMode_RLC_Only, p_TestLoopMode, p_RrcConnSetup, -, -,  p_ProcessNumber);

    p_RLC_Rec.AM_VTS := v_RLC_CountsInfoListByRef.AM_VTS;
    p_RLC_Rec.AM_VRR := v_RLC_CountsInfoListByRef.AM_VRR;
  }

  /*
   * @desc      REFERENCE TS 36.523-1 clause 22.3.2.1
   * @status    APPROVED (NBIOT)
   */
  function f_TC_22_3_2_1_NBIOT() runs on NBIOT_PTC
  { /* NB-IoT / AM RLC / Correct use of sequence numbering / Concatenation and reassembly / Polling for status */
    var RLC_SS_State v_RLC_Rec;
    var template (value) DL_CCCH_Message_NB v_RrcConnSetup;
    var T_PollRetransmit_NB_r13 v_T_PollRetransmit_NB_r13;
    var UL_AM_RLC_NB_r13.maxRetxThreshold_r13 v_MaxRetxThreshold_r13;
    var template (value) SRB_ToAddModList_NB_r13 v_SRB_ToAddModList_NB_r13;
  
    //RLC global initialisation
    f_InitRLC_Record(v_RLC_Rec, AM_Mode);
    v_RLC_Rec.t_PollRetransmit_r13 := 4.0; // t_PollRetransmit_r13 set to 4000 ms @sic R5-171409 sic@
    v_RLC_Rec.maxRetxThreshold_r13 := 4; // maxRetxThreshold_r13 set to 4 (=t4)
    v_RLC_Rec.enableStatusReportSN_Gap_r13 := false; // enableStatusReportSN-Gap-r13 set to false

    //UE RLC settings
    v_T_PollRetransmit_NB_r13 := ms4000; // @sic R5-171409 sic@
    v_MaxRetxThreshold_r13 := t4; // @sic R5s170242 sic@
    v_SRB_ToAddModList_NB_r13 := {cs_SRB_ToAddMod_NB_RLC_Config (cs_UL_AM_RLC_NB_r13 (v_T_PollRetransmit_NB_r13, v_MaxRetxThreshold_r13), cs_DL_AM_RLC_NB_r13_NoGapReport)}; // @sic R5s170242 sic@
    v_RrcConnSetup := f_NBIOT_508_RRCConnectionSetup(-, v_SRB_ToAddModList_NB_r13);
  
    // perform NBIOT specific preamble for RLC
    f_NBIOT_RLC_Preamble_State2B_NB(v_RLC_Rec,
                                    nbiot_Cell1,
                                    STATE2A_NB_TESTLOOP_ModeG, // @sic R5-174405 sic@
                                    v_RrcConnSetup);
  
    f_NBIOT_TestBody_Set(true, layer2);
    f_NBIOT_HarqErrorHandling_Set(raiseInconc);

    fl_TC_22_3_2_1_TestBody (v_RLC_Rec);

    f_NBIOT_HarqErrorHandling_Set(ignore);
    f_NBIOT_TestBody_Set(false);
  
    // cleanup after the test body and reaching state 1-NB
    f_NBIOT_L2_Postamble_State2B_NB(nbiot_Cell1, v_RLC_Rec.AM_VTS, v_RLC_Rec.AM_VRR);
  }

  /*
   * @desc      test body of TC_NBIOT_22_3_2_1
   * @param     p_RLC_Rec           (by reference)
   * @status    APPROVED (NBIOT)
   */
  function fl_TC_22_3_2_1_TestBody(inout RLC_SS_State p_RLC_Rec) runs on NBIOT_PTC
  {
    var integer v_Duration;
    var  NB_L2_DATA_IND v_ReceivedAsp;
    var integer v_RLC_DL_SDU_Length;
    var integer v_RLC_UL_SDU_Length;
    var integer v_VRR_Offset := p_RLC_Rec.AM_VRR; // VRR at the beginning of the testbody, used for offset calculations (<< 1024 assumed)
    var SubFrameTiming_Type v_SubFrameTiming_Ta;
    var SubFrameTiming_Type v_SubFrameTiming_Tb;
    var SubFrameTiming_Type v_TimingStart;
    var template (value) TimingInfo_Type v_TimingInfo;
    var template (value) TimingInfo_Type v_TimingInfo1;
    var template (value) TimingInfo_Type v_TimingInfo2;
    var template (value) TimingInfo_Type v_TimingInfo3;
    var template (value) NB_DciUlInfo_Type v_DciUlInfo;
    var RLC_DataField_Type v_RLC_Data1;
    var RLC_DataField_Type v_RLC_Data2;
    var RLC_DataField_Type v_RLC_Data3;
    timer t_WatchDog;
    
    // establish RLC SDUs (DL and UL) and obtain the length of the DL RLC SDU
    // 1. generate SDUs 1-4 with PRBS size 36 octets
    v_RLC_DL_SDU_Length := f_NBIOT_Generate_RLC_SDUs (p_RLC_Rec, 4, 36, 0); // @sic R5s170242 sic@
    // 2. generate SDUs 5-6 with PRBS size 20 octets
    v_RLC_DL_SDU_Length := f_NBIOT_Generate_RLC_SDUs (p_RLC_Rec, 2, 20, 4); // L1 in the steps below
    // 3. generate SDUs 7-9 with PRBS size 10 octets
    v_RLC_DL_SDU_Length := f_NBIOT_Generate_RLC_SDUs (p_RLC_Rec, 3, 10, 6); // L2 in the steps below
    
    //@siclog "Step 1" siclog@
    // The SS does not respond to PRACH preambles transmitted by UE for Uplink transmission, but instead allocates the UL C-RNTI grant on NPDCCH  when specified in the test sequence
    
    //@siclog "Step 2" siclog@
    // The SS transmits 4 AMD PDUs such that 1 AMD PDU is sent every NPDCCH period onwards, each containing an RLC DL SDU including a PRBS of 288  bits.
    // Note that VTS and VRR have been "initialized" in the preamble when the SS was configured from AM to TM
    // PDUs containing Full SDUs, scheduled in subsequent search spaces
    v_TimingStart := f_NBIOT_GetNextSearchSpace(nbiot_Cell1);
    v_TimingInfo := cs_TimingInfo_SubFrameFull(f_NBIOT_IncrementSearchSpace(v_TimingStart, 1.0));
    v_TimingInfo1 := cs_TimingInfo_SubFrameFull(f_NBIOT_IncrementSearchSpace(v_TimingStart, 2.0));
    v_TimingInfo2 := cs_TimingInfo_SubFrameFull(f_NBIOT_IncrementSearchSpace(v_TimingStart, 3.0));
    v_TimingInfo3 := cs_TimingInfo_SubFrameFull(f_NBIOT_IncrementSearchSpace(v_TimingStart, 4.0));
    f_NB_TxAMD_SDU(p_RLC_Rec, v_TimingInfo, tsc_P_NoPoll, tsc_RLC_SDU1);
    f_NB_TxAMD_SDU(p_RLC_Rec, v_TimingInfo1, tsc_P_NoPoll, tsc_RLC_SDU2);
    f_NB_TxAMD_SDU(p_RLC_Rec, v_TimingInfo2, tsc_P_NoPoll, tsc_RLC_SDU3);
    f_NB_TxAMD_SDU(p_RLC_Rec, v_TimingInfo3, tsc_P_NoPoll, tsc_RLC_SDU4);
    
    //@siclog "Step 2A" siclog@
    // In the search space of the fourth NPDCCH period after the first transmission at  step 2 the SS schedules 4 consecutive UL grants of size 328 bits  (Note 1).
    v_TimingInfo := cs_TimingInfo_SubFrameFull(f_NBIOT_IncrementSearchSpace(v_TimingStart, 5.0));
    v_DciUlInfo := cs_NB_DciInfo_CcchDcchDtchUL (1,10);  // UL Grant of 328 bits
    f_NBIOT_ULGrantTransmission(nbiot_Cell1, cs_NB_UL_GrantScheduling_Start(cs_NB_PeriodicGrant(v_DciUlInfo, 4)), v_TimingInfo);
    
    //@siclog "Step 2B" siclog@
    // Check: Does the UE transmit 4 AMD PDUs, with only the last one having the poll bit set ? Record time TA when the PDU with the poll bit set is received at the SS.
    // PDUs containing Full SDUs received one per search space
    f_NB_RxAMD_SDU(p_RLC_Rec, tsc_P_NoPoll, tsc_RLC_SDU1);
    f_NB_RxAMD_SDU(p_RLC_Rec, tsc_P_NoPoll, tsc_RLC_SDU2);
    f_NB_RxAMD_SDU(p_RLC_Rec, tsc_P_NoPoll, tsc_RLC_SDU3);
    f_NB_RxAMD_SDU(p_RLC_Rec, tsc_P_Poll, tsc_RLC_SDU4);
    // Record time TA when the PDU with the poll bit set is received at the SS.
    v_SubFrameTiming_Ta := p_RLC_Rec.TimeStampLastReceivedPDU;
    f_NBIOT_PreliminaryPass(__FILE__, __LINE__, "Step 2B");
    
    //@siclog "Step 3" siclog@
    // In the search space of the 55th NPDCCH period after the first transmission at  step 2 the SS schedules continuous UL grants of size 328 bits  (Note 1).
    v_TimingInfo := cs_TimingInfo_SubFrameFull(f_NBIOT_IncrementSearchSpace(v_TimingStart, 56.0)); // wait for 55 search spaces (roughly 3500 ms)  // @sic R5s170242 sic@
    v_DciUlInfo := cs_NB_DciInfo_CcchDcchDtchUL (1,10);  // UL Grant of 328 bits
    f_NBIOT_ULGrantTransmission(nbiot_Cell1, cs_NB_UL_GrantScheduling_Start(cs_NB_ContinuousGrant(v_DciUlInfo, 1)), v_TimingInfo);
    
    //@siclog "Step 4" siclog@
    // Check 1: Does the UE transmit an AMD PDU with a SN in range 0 to 3 and P=1?
    // Record time TB.
    // Check 2: Is (TB - TA) = t-PollRetransmit-r13?
    L2DATA.receive (car_NB_SRB1bis_RLCAmDataInd(nbiot_Cell1,
                                                cr_AMD_PDUoneSDU_AnySN((int2bit (v_VRR_Offset, tsc_AM_SN_Size),
                                                                        int2bit ((v_VRR_Offset + 1) mod 1024, tsc_AM_SN_Size),
                                                                        int2bit ((v_VRR_Offset + 2) mod 1024, tsc_AM_SN_Size),
                                                                        int2bit ((v_VRR_Offset + 3) mod 1024, tsc_AM_SN_Size)),
                                                                       tsc_P_Poll,
                                                                       ? ))) -> value v_ReceivedAsp;
    // Record time TB when the PDU with the poll bit set is received at the SS.
    v_SubFrameTiming_Tb := v_ReceivedAsp.Common.TimingInfo.SubFrame;
    f_NBIOT_PreliminaryPass(__FILE__, __LINE__, "Step 4 - AMD PDU ok");
    v_Duration := f_SubFrameTiming_Duration(v_SubFrameTiming_Ta, v_SubFrameTiming_Tb);
    if (not (f_NBIOT_SubFrameTimingCheckDuration(l2Timer, v_Duration, float2int(p_RLC_Rec.t_PollRetransmit_r13 * 1000.0)))) {
      f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, "Step 4 - duration t-PollRetransmit not ok");
    }
    
    //@siclog "Step 5" siclog@
    // Upon receiving the Poll, the SS transmits an RLC Status Report.
    f_NB_TxSTATUS_PDU (p_RLC_Rec);
    
    //@siclog "Step 6" siclog@
    // Check: Does the UE retransmit an AMD PDU within 5 sec?
    t_WatchDog.start(5.0); // @sic R5s170242 sic@
    alt {
      [] t_WatchDog.timeout
        {
        }
      [] L2DATA.receive (car_NB_SRB1bis_RLCAmDataInd(nbiot_Cell1, ?)) // catches any SDU, not only SDU4
        {
          f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, "Step 6");
        }
    }
    
    //@siclog "Step 7" siclog@
    // SS stops periodic grant allocation
    f_NBIOT_ULGrantTransmission(nbiot_Cell1, cs_NB_UL_GrantScheduling_Stop);
    
    //@siclog "Step 8" siclog@
    //The SS transmits an AMD PDU including two RLC DL SDUs of size L1 bytes each with poll bit set to "0". The RLC DL SDUs include a PRBS of 160 bits.
    v_TimingStart := f_NBIOT_GetNextSearchSpace(nbiot_Cell1);
    v_TimingInfo := cs_TimingInfo_SubFrameFull(f_NBIOT_IncrementSearchSpace(v_TimingStart, 1.0));
    v_TimingInfo1 := cs_TimingInfo_SubFrameFull(f_NBIOT_IncrementSearchSpace(v_TimingStart, 4.0));
    v_RLC_Data1 := p_RLC_Rec.RLC_DataList[tsc_RLC_SDU5];
    v_RLC_Data2 := p_RLC_Rec.RLC_DataList[tsc_RLC_SDU6];
    f_NB_TxAMD_PDU_List(p_RLC_Rec,
                        v_TimingInfo,
                        tsc_P_NoPoll,
                        tsc_FI_FullSDU,
                        {v_RLC_Data1, v_RLC_Data2});
    
    //@siclog "Step 9" siclog@
    // In the search space of the third NPDCCH period after the transmission at step 8 the SS allocates an UL grant of size 456 bits (Note 2).
    v_DciUlInfo := cs_NB_DciInfo_CcchDcchDtchUL(2, 9);
    f_NBIOT_ULGrantTransmission(nbiot_Cell1, cs_NB_UL_GrantScheduling_Start(cs_NB_SingleGrant(v_DciUlInfo)), v_TimingInfo1);
    
    //@siclog "Step 10" siclog@
    // Check: Does the UE transmit two RLC UL SDUs within an AMD PDU with FI field set to '00', first E field in the fixed part set to '1',
    // first E field in the extension part set to '0', first LI field set to 20 bytes?
    v_RLC_Data1 := p_RLC_Rec.RLC_UL_DataList[tsc_RLC_SDU5];
    v_RLC_Data2 := p_RLC_Rec.RLC_UL_DataList[tsc_RLC_SDU6];
    v_RLC_UL_SDU_Length := lengthof(v_RLC_Data1);
    L2DATA.receive (car_NB_SRB1bis_RLCAmDataInd(nbiot_Cell1,
                                                ?)) -> value v_ReceivedAsp; // @sic R5s170242 sic@
    if (match (v_ReceivedAsp.L2Data.SubframeData.PduSduList.RlcPdu[0].AMD,
               cr_AMD_PDU_LIs (p_RLC_Rec.AM_VRR,
                               tsc_P_Poll,
                               tsc_FI_FullSDU,
                               cr_FlexPart_1LI (v_RLC_UL_SDU_Length),
                               {v_RLC_Data1, v_RLC_Data2}))) {
      f_NBIOT_PreliminaryPass(__FILE__, __LINE__, "Step 10");
    }
    else {
      f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, "Step 10");
    }
    p_RLC_Rec.AM_VRR := v_VRR_Offset + 5;
    
    //@siclog "Step 11" siclog@
    // The SS transmits a STATUS PDU.
    f_NB_TxSTATUS_PDU(p_RLC_Rec);
    
    //@siclog "Step 12" siclog@
    // In the search space of the 9th NPDCCH period after the transmission at step 11 the SS transmits an AMD PDU including three RLC DL SDU of size L2 bytes with P field set to "0".
    // The RLC DL SDUs include a PRBS of 80 bits.
    v_TimingStart := f_NBIOT_GetNextSearchSpace(nbiot_Cell1, 500); // 500 ms implies the 9th NPDCCH period
    v_TimingInfo := cs_TimingInfo_SubFrameFull(v_TimingStart);
    v_TimingInfo1 := cs_TimingInfo_SubFrameFull(f_NBIOT_IncrementSearchSpace(v_TimingStart, 3.0));
    v_RLC_Data1 := p_RLC_Rec.RLC_DataList[tsc_RLC_SDU7];
    v_RLC_Data2 := p_RLC_Rec.RLC_DataList[tsc_RLC_SDU8];
    v_RLC_Data3 := p_RLC_Rec.RLC_DataList[tsc_RLC_SDU9];
    f_NB_TxAMD_PDU_List(p_RLC_Rec,
                        v_TimingInfo,
                        tsc_P_NoPoll, // @sic R5s170242 sic@
                        tsc_FI_FullSDU,
                        {v_RLC_Data1, v_RLC_Data2, v_RLC_Data3});
    
    //@siclog "Step 13" siclog@
    // In the search space of the third NPDCCH period after the transmission at step 12 the SS schedules an UL grant of size 440 bits. (Note3).
    v_DciUlInfo := cs_NB_DciInfo_CcchDcchDtchUL (6, 3);
    f_NBIOT_ULGrantTransmission(nbiot_Cell1, cs_NB_UL_GrantScheduling_Start(cs_NB_SingleGrant(v_DciUlInfo)), v_TimingInfo1);
   
    //@siclog "Step 14" siclog@
    // Check: Does the UE transmit three RLC UL SDUs within an AMD PDU with FI field set to '00', first E field in the fixed part set to '1',
    // first E field in the extension part set to '1', first LI field set to 10 bytes, second E field in the extension part set to '0', second LI field set to 10 bytes and P field set to '1'?
    v_RLC_Data1 := p_RLC_Rec.RLC_UL_DataList[tsc_RLC_SDU7];
    v_RLC_Data2 := p_RLC_Rec.RLC_UL_DataList[tsc_RLC_SDU8];
    v_RLC_Data3 := p_RLC_Rec.RLC_UL_DataList[tsc_RLC_SDU9];
    v_RLC_UL_SDU_Length := lengthof(v_RLC_Data1);
    L2DATA.receive (car_NB_SRB1bis_RLCAmDataInd (nbiot_Cell1,
                                                 ?)) -> value v_ReceivedAsp; // @sic R5s170242 sic@
    if (match (v_ReceivedAsp.L2Data.SubframeData.PduSduList.RlcPdu[0].AMD,
               cr_AMD_PDU_LIs (p_RLC_Rec.AM_VRR,
                               tsc_P_Poll,
                               tsc_FI_FullSDU,
                               cr_FlexPart_2LIs (v_RLC_UL_SDU_Length, v_RLC_UL_SDU_Length),
                               {v_RLC_Data1, v_RLC_Data2, v_RLC_Data3} ))) {
      f_NBIOT_PreliminaryPass(__FILE__, __LINE__, "Step 14");
    }
    else {
      f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, "Step 14");
    }
    p_RLC_Rec.AM_VRR := v_VRR_Offset + 6;
    
    //@siclog "Step 15" siclog@
    // The SS transmits a STATUS PDU.
    f_NB_TxSTATUS_PDU(p_RLC_Rec);
  }

  /*
   * @desc      REFERENCE TS 36.523-1 clause 22.3.2.2
   * @status    APPROVED (NBIOT)
   */
  function f_TC_22_3_2_2_NBIOT() runs on NBIOT_PTC
  { /* NB-IoT / AM RLC / Receiver status triggers */
    var RLC_SS_State v_RLC_Rec;
    var template (value) DL_CCCH_Message_NB v_RrcConnSetup;
    var T_PollRetransmit_NB_r13 v_T_PollRetransmit_NB_r13;
    var UL_AM_RLC_NB_r13.maxRetxThreshold_r13 v_MaxRetxThreshold_r13;
    var template (value) SRB_ToAddModList_NB_r13 v_SRB_ToAddModList_NB_r13;
  
    //RLC global initialisation
    f_InitRLC_Record(v_RLC_Rec, AM_Mode);
    v_RLC_Rec.t_PollRetransmit_r13 := 4.0; // t_PollRetransmit_r13 set to 4000 ms @sic R5-171410 sic@
    v_RLC_Rec.maxRetxThreshold_r13 := 4; // maxRetxThreshold_r13 set to 4 (=t4)
    v_RLC_Rec.enableStatusReportSN_Gap_r13 := true; // enableStatusReportSN-Gap-r13 set to true

    //UE RLC settings
    v_T_PollRetransmit_NB_r13 := ms4000; // @sic R5-171410 sic@
    v_MaxRetxThreshold_r13 := t4; // @sic R5s170244 sic@
    v_SRB_ToAddModList_NB_r13 := {cs_SRB_ToAddMod_NB_RLC_Config (cs_UL_AM_RLC_NB_r13 (v_T_PollRetransmit_NB_r13, v_MaxRetxThreshold_r13), cs_DL_AM_RLC_NB_r13_GapReport)}; // @sic R5s170244 sic@
  
    v_RrcConnSetup := f_NBIOT_508_RRCConnectionSetup(-, v_SRB_ToAddModList_NB_r13);
  
    // perform NBIOT specific preamble for RLC
    f_NBIOT_RLC_Preamble_State2B_NB(v_RLC_Rec,
                                    nbiot_Cell1,
                                    STATE2A_NB_TESTLOOP_ModeG, // @sic R5-174405 sic@
                                    v_RrcConnSetup);
  
    f_NBIOT_TestBody_Set(true, layer2);
    f_NBIOT_HarqErrorHandling_Set(raiseInconc);

    fl_TC_22_3_2_2_TestBody (v_RLC_Rec);

    f_NBIOT_HarqErrorHandling_Set(ignore);
    f_NBIOT_TestBody_Set(false);
  
    f_NBIOT_L2_Postamble_State2B_NB(nbiot_Cell1, v_RLC_Rec.AM_VTS, v_RLC_Rec.AM_VRR);
  }

  /*
   * @desc      test body of TC_NBIOT_22_3_2_2
   * @param     p_RLC_Rec           (by reference)
   * @status    APPROVED (NBIOT)
   */
  function fl_TC_22_3_2_2_TestBody(inout RLC_SS_State p_RLC_Rec) runs on NBIOT_PTC
  {
    var integer v_RLC_DL_SDU_Length;
    var integer v_RLC_UL_SDU_Length := 36; // PRBS
    var integer v_L;
    var template (value) TimingInfo_Type v_TimingInfo;
    var template (value) TimingInfo_Type v_TimingInfo1;
    var template (value) TimingInfo_Type v_TimingInfo2;
    var template (value) TimingInfo_Type v_TimingInfo3;
    var template (present) RLC_Status_NACK_List_Type v_NACK_List;
    var template (present) RLC_Status_NACK_List_Type v_NACK_List_1;
    var template (present) RLC_Status_NACK_List_Type v_NACK_List_2;
    var template (present) RLC_Status_Padding_Type v_Padding_Any := ?;
    var template (value) NB_DciUlInfo_Type v_DciUlInfo;
    var RLC_DataField_Type v_RLC_Data1;
    var RLC_DataField_Type v_RLC_Data2;
    var RLC_DataField_Type v_RLC_Data3;
    var RLC_DataField_Type v_RLC_Data4;
    var integer v_VTS_Offset := p_RLC_Rec.AM_VTS; // @sic R5s170244 sic@
    var SubFrameTiming_Type v_TimingStart;
 
    // establish RLC SDUs (DL and UL) and obtain the length of the DL RLC SDU
    // generate SDUs for SDU#1-6 with PRBS size 36 octets
    v_RLC_DL_SDU_Length := f_NBIOT_Generate_RLC_SDUs (p_RLC_Rec, 6, v_RLC_UL_SDU_Length, 0); // @sic R5s170244 sic@
    v_L := v_RLC_DL_SDU_Length - v_RLC_UL_SDU_Length; // RLC DL SDU length - RLC UL SDU length, Length difference is the NAS and RRC  overhead

    //@siclog "Step 1" siclog@
    //The SS transmits 3 AMD PDUs with SN=0, 1, 2. The SS sets the P field of all the AMD PDUs to 0.
    v_TimingStart := f_NBIOT_GetNextSearchSpace(nbiot_Cell1);
    v_TimingInfo := cs_TimingInfo_SubFrameFull(f_NBIOT_IncrementSearchSpace(v_TimingStart, 1.0));
    v_TimingInfo1 := cs_TimingInfo_SubFrameFull(f_NBIOT_IncrementSearchSpace(v_TimingStart, 2.0));
    v_TimingInfo2 := cs_TimingInfo_SubFrameFull(f_NBIOT_IncrementSearchSpace(v_TimingStart, 3.0));
    f_NB_TxAMD_SDU(p_RLC_Rec, v_TimingInfo, tsc_P_NoPoll, tsc_RLC_SDU1);
    f_NB_TxAMD_SDU(p_RLC_Rec, v_TimingInfo1, tsc_P_NoPoll, tsc_RLC_SDU2);
    f_NB_TxAMD_SDU(p_RLC_Rec, v_TimingInfo2, tsc_P_NoPoll, tsc_RLC_SDU3);

    //@siclog "Step 2" siclog@
    //In the search space of the fourth NPDCCH period after the first transmission at  step 1
    //the SS schedules 3 consecutive UL grants with a time spacing of 3 NPDCCH cycles of size 328 bits.
    v_TimingInfo := cs_TimingInfo_SubFrameFull(f_NBIOT_IncrementSearchSpace(v_TimingStart, 5.0));
    v_DciUlInfo := cs_NB_DciInfo_CcchDcchDtchUL (1,10);  // UL Grant of 328 bits
    f_NBIOT_ULGrantTransmission(nbiot_Cell1, cs_NB_UL_GrantScheduling_Start(cs_NB_PeriodicGrant(v_DciUlInfo, 3, 3)), v_TimingInfo);

    //@siclog "Step 2A" siclog@
    //The UE transmits RLC UL SDU#1.
    f_NB_RxAMD_SDU(p_RLC_Rec, tsc_P_NoPoll, tsc_RLC_SDU1);
   
    //@siclog "Step 2B" siclog@
    //The UE transmits RLC UL SDU#2.
    f_NB_RxAMD_SDU(p_RLC_Rec, tsc_P_NoPoll, tsc_RLC_SDU2);

    //@siclog "Step 2C" siclog@
    //The UE transmits RLC UL SDU#3.
    f_NB_RxAMD_SDU(p_RLC_Rec, tsc_P_Poll, tsc_RLC_SDU3);

    //@siclog "Step 3" siclog@
    //The SS transmits a STATUS PDU
    f_NB_TxSTATUS_PDU (p_RLC_Rec);

    //@siclog "Step 5" siclog@
    //The SS starts the UL periodic grant transmission of size 40 bits. (Note 2)
    v_TimingStart := f_NBIOT_GetNextSearchSpace(nbiot_Cell1);
    v_TimingInfo2 := cs_TimingInfo_SubFrameFull(f_NBIOT_IncrementSearchSpace(v_TimingStart, 1.0));
    v_DciUlInfo := cs_NB_DciInfo_CcchDcchDtchUL (0,3);
    f_NBIOT_ULGrantTransmission(nbiot_Cell1, cs_NB_UL_GrantScheduling_Start(cs_NB_ContinuousGrant(v_DciUlInfo)), v_TimingInfo2);

    //@siclog "Step 6" siclog@
    //The SS transmits 1 AMD PDUs with SN= 4. The SS sets the P field to 0.
    v_TimingInfo := cs_TimingInfo_SubFrameFull(f_NBIOT_IncrementSearchSpace(v_TimingStart, 2.0));
    p_RLC_Rec.AM_VTS := v_VTS_Offset + 4;
    f_NB_TxAMD_SDU(p_RLC_Rec, v_TimingInfo, tsc_P_NoPoll, tsc_RLC_SDU5);

    //@siclog "Step 7" siclog@
    //Check: Does the UE transmit a Status Report with NACK_SN=3 and ACK_SN=5?.
    p_RLC_Rec.AM_VTA := v_VTS_Offset + 5;
    v_NACK_List := cr_NACK_List(v_VTS_Offset + 3, tsc_E2_NoSO_Follows, omit);
    f_NB_RxSTATUS_PDU_NACK(p_RLC_Rec, v_NACK_List, v_Padding_Any);
    f_NBIOT_PreliminaryPass(__FILE__, __LINE__, "Step 7");

    //@siclog "Step 8" siclog@
    //SS stops to allocate any uplink grant.
    f_NBIOT_ULGrantTransmission(nbiot_Cell1, cs_NB_UL_GrantScheduling_Stop);
 
    //@siclog "Step 9" siclog@
    //In the search space of the 6th NPDCCH period after step 8.The SS sets the P field to 1.
    v_TimingStart := f_NBIOT_GetNextSearchSpace(nbiot_Cell1);
    v_TimingInfo := cs_TimingInfo_SubFrameFull(f_NBIOT_IncrementSearchSpace(v_TimingStart, 6.0));
    p_RLC_Rec.AM_VTS := v_VTS_Offset + 3;
    f_NB_TxAMD_SDU(p_RLC_Rec, v_TimingInfo, tsc_P_Poll, tsc_RLC_SDU4);

    //@siclog "Step 10" siclog@
    //In the search space of the third NPDCCH period after the transmission at  step 9
    //the SS schedules assigns 1 UL grant of size 40 bits. (Note 2).
    v_TimingInfo := cs_TimingInfo_SubFrameFull(f_NBIOT_IncrementSearchSpace(v_TimingStart, 9.0));
    f_NBIOT_ULGrantTransmission(nbiot_Cell1, cs_NB_UL_GrantScheduling_Start(cs_NB_SingleGrant(v_DciUlInfo)), v_TimingInfo);

    //@siclog "Step 12" siclog@
    //In the search space of the next NPDCCH period after the transmission at step 10 the SS schedules
    //2 UL grants of size 328 bits.
    //Executed before step 11 to allow proper scheduling of UL grants  @sic R5s170244 sic@
    v_TimingInfo := cs_TimingInfo_SubFrameFull(f_NBIOT_IncrementSearchSpace(v_TimingStart, 10.0)); //@sic R5-171410 sic@
    v_DciUlInfo := cs_NB_DciInfo_CcchDcchDtchUL (1,10);  // UL Grant of 328 bits
    f_NBIOT_ULGrantTransmission(nbiot_Cell1, cs_NB_UL_GrantScheduling_Start(cs_NB_PeriodicGrant(v_DciUlInfo, 2)), v_TimingInfo);

    //@siclog "Step 11" siclog@
    //Check: Does the UE transmit a Status Report with no NACK_SN and ACK_SN = 5?
    p_RLC_Rec.AM_VTA := v_VTS_Offset + 5; // @sic R5s170244 sic@
    f_NB_RxSTATUS_PDU_ACK(p_RLC_Rec);
    f_NBIOT_PreliminaryPass(__FILE__, __LINE__, "Step 11");

    //@siclog "Step 13" siclog@
    //The UE transmits RLC UL SDU#4.
    f_NB_RxAMD_SDU(p_RLC_Rec, tsc_P_NoPoll, tsc_RLC_SDU4);

    //@siclog "Step 14" siclog@
    //The UE transmits RLC UL SDU#5.
    f_NB_RxAMD_SDU(p_RLC_Rec, tsc_P_Poll, tsc_RLC_SDU5);

    //@siclog "Step 15" siclog@
    //The SS transmits a STATUS PDU
    f_NB_TxSTATUS_PDU (p_RLC_Rec);

    //@siclog "Step 16-23" siclog@
    //Void.  @sic R5-172992 sic@

    //@siclog "Step 24" siclog@
    //The SS transmits an AMD PDU with SN=5 and P=0, and an AMD PDU with SN=11 and P=1.
    //Segment 1 of 5 octets
    v_TimingStart := f_NBIOT_GetNextSearchSpace(nbiot_Cell1); // @sic R5s170244 sic@
    v_TimingInfo := cs_TimingInfo_SubFrameFull(f_NBIOT_IncrementSearchSpace(v_TimingStart, 1.0));
    v_TimingInfo1 := cs_TimingInfo_SubFrameFull(f_NBIOT_IncrementSearchSpace(v_TimingStart, 2.0));
    v_RLC_Data1 := substr(p_RLC_Rec.RLC_DataList[tsc_RLC_SDU6], 0, 5); // @sic R5-172992 sic@
    //Segment 7 of L - 6*5 octets
    v_RLC_Data2 := substr(p_RLC_Rec.RLC_DataList[tsc_RLC_SDU6], 30, (v_L+6)); // @sic R5s170244, R5-172992 sic@
    p_RLC_Rec.AM_VTS := v_VTS_Offset + 5; // @sic R5-172992 sic@
    f_NB_TxAMD_OnePDU(p_RLC_Rec,
                      v_TimingInfo,
                      tsc_P_NoPoll,
                      tsc_FI_StartOfSDU,
                      v_RLC_Data1);
    p_RLC_Rec.AM_VTS := v_VTS_Offset + 11; // @sic R5-172992 sic@
    f_NB_TxAMD_OnePDU(p_RLC_Rec,
                      v_TimingInfo1,
                      tsc_P_Poll,
                      tsc_FI_EndOfSDU,
                      v_RLC_Data2);

    //@siclog "Step 25" siclog@
    //In the search space of the third NPDCCH period after the transmission at step 24.
     //the SS schedules an UL grant of size 72 bits. (Note 3)
    v_TimingInfo := cs_TimingInfo_SubFrameFull(f_NBIOT_IncrementSearchSpace(v_TimingStart, 5.0)); // @sic R5s170244 sic@
    v_DciUlInfo := cs_NB_DciInfo_CcchDcchDtchUL(1, 1); // Itbs=2, Iru=1 => Imcs=1 in table 16.5.1.2-1 of TS 36.213
    f_NBIOT_ULGrantTransmission(nbiot_Cell1, cs_NB_UL_GrantScheduling_Start(cs_NB_SingleGrant(v_DciUlInfo)), v_TimingInfo);
    
    //@siclog "Step 26a1" siclog@
    //Check: Does the UE transmit a Status Report with ACK_SN=8 and 2 NACK_SNs: 6 and 7?
    v_NACK_List_1 := cr_NACK_List_2NACKs(v_VTS_Offset + 6, // @sic R5s170244, R5-172992 sic@
                                         tsc_E2_NoSO_Follows,
                                         omit,
                                         v_VTS_Offset + 7,
                                         tsc_E2_NoSO_Follows,
                                         omit);
    //@siclog "Step 26b1" siclog@
    //Check: Does the UE transmit a Status Report with ACK_SN=10 and 4 NACK_SNs: 6, 7, 8 and 9?
    v_NACK_List_2 := cr_NACK_List_4NACKs_NoSOs(v_VTS_Offset + 6, v_VTS_Offset + 7, v_VTS_Offset + 8, v_VTS_Offset + 9); // @sic R5s170244, R5-172992 sic@
    
    alt {
      [] L2DATA.receive(car_NB_SRB1bis_RLCStatusInd(nbiot_Cell1,
                                                    cr_STATUS_PDU_Nack(v_VTS_Offset + 8, // @sic R5s170244, R5-172992 sic@
                                                                       v_NACK_List_1,
                                                                       ?)))
        {
          p_RLC_Rec.AM_VTA := v_VTS_Offset + 8;
          f_NBIOT_PreliminaryPass(__FILE__, __LINE__, "Step 26b1");
        }
      
      []L2DATA.receive(car_NB_SRB1bis_RLCStatusInd(nbiot_Cell1,
                                                   cr_STATUS_PDU_Nack(v_VTS_Offset + 10, // @sic R5s170244, R5-172992 sic@
                                                                      v_NACK_List_2,
                                                                      ?)))
        {
          p_RLC_Rec.AM_VTA := v_VTS_Offset + 10;
          f_NBIOT_PreliminaryPass(__FILE__, __LINE__, "Step 26b2");
        }
    };

    //@siclog "Step 27" siclog@
    //In the search space of the 6th NPDCCH period the SS transmits an AMD PDU with SN=6 and P=1.
    //Segment 2 of 5 octets
    v_TimingInfo := cs_TimingInfo_SubFrameFull(f_NBIOT_IncrementSearchSpace(v_TimingStart, 11.0)); // @sic R5s170244 sic@
    v_RLC_Data1 := substr(p_RLC_Rec.RLC_DataList[tsc_RLC_SDU6], 5, 5);
    p_RLC_Rec.AM_VTS := v_VTS_Offset + 6; // @sic R5-172992 sic@
    f_NB_TxAMD_OnePDU(p_RLC_Rec,
                      v_TimingInfo,
                      tsc_P_Poll,
                      tsc_FI_MiddleOfSDU,
                      v_RLC_Data1);

    //@siclog "Step 28" siclog@
    //In the search space of the 3rd NPDCCH period after step 27 the SS schedules an UL grant of size 72 bits. (Note 4)
    v_TimingInfo := cs_TimingInfo_SubFrameFull(f_NBIOT_IncrementSearchSpace(v_TimingStart, 14.0)); //@sic R5-171410 sic@ @sic R5s170244 sic@
    v_DciUlInfo := cs_NB_DciInfo_CcchDcchDtchUL (1,1); // Itbs=2, Iru=1 => Imcs=1 in table 16.5.1.2-1 of TS 36.213
    f_NBIOT_ULGrantTransmission(nbiot_Cell1, cs_NB_UL_GrantScheduling_Start(cs_NB_SingleGrant(v_DciUlInfo)), v_TimingInfo);
    
    //@siclog "Step 29" siclog@
    //Check: Does the UE transmit a Status Report with ACK_SN=12 and 4 NACK_SNs: 7, 8, 9 and 10?
    p_RLC_Rec.AM_VTA := v_VTS_Offset + 12; // @sic R5s170244, R5-172992 sic@
    v_NACK_List := cr_NACK_List_4NACKs_NoSOs(v_VTS_Offset + 7, v_VTS_Offset + 8, v_VTS_Offset + 9, v_VTS_Offset + 10); // @sic R5s170244, R5-172992 sic@
    f_NB_RxSTATUS_PDU_NACK(p_RLC_Rec, v_NACK_List, v_Padding_Any);
    f_NBIOT_PreliminaryPass(__FILE__, __LINE__, "Step 29");
    
    //@siclog "Step 30" siclog@
    //The SS transmits 4 AMD PDU with SN=7, 8, 9, 10. Note: AMD PDUs with SN 5 to 11 carry RLC SDU #6.
    //segments 3-6 of 5 octets
    v_TimingStart := f_NBIOT_GetNextSearchSpace(nbiot_Cell1); // @sic R5s170244 sic@
    v_TimingInfo := cs_TimingInfo_SubFrameFull(f_NBIOT_IncrementSearchSpace(v_TimingStart, 1.0));
    v_TimingInfo1 := cs_TimingInfo_SubFrameFull(f_NBIOT_IncrementSearchSpace(v_TimingStart, 2.0));
    v_TimingInfo2 := cs_TimingInfo_SubFrameFull(f_NBIOT_IncrementSearchSpace(v_TimingStart, 3.0));
    v_TimingInfo3 := cs_TimingInfo_SubFrameFull(f_NBIOT_IncrementSearchSpace(v_TimingStart, 4.0));
    v_RLC_Data1 := substr(p_RLC_Rec.RLC_DataList[tsc_RLC_SDU6], 10, 5); // @sic R5-172992 sic@
    v_RLC_Data2 := substr(p_RLC_Rec.RLC_DataList[tsc_RLC_SDU6], 15, 5); // @sic R5-172992 sic@
    v_RLC_Data3 := substr(p_RLC_Rec.RLC_DataList[tsc_RLC_SDU6], 20, 5); // @sic R5-172992 sic@
    v_RLC_Data4 := substr(p_RLC_Rec.RLC_DataList[tsc_RLC_SDU6], 25, 5); // @sic R5-172992 sic@
    p_RLC_Rec.AM_VTS := v_VTS_Offset + 7; // @sic R5-172992 sic@
    f_NB_TxAMD_OnePDU(p_RLC_Rec,
                      v_TimingInfo,
                      tsc_P_NoPoll,
                      tsc_FI_MiddleOfSDU,
                      v_RLC_Data1);
    f_NB_TxAMD_OnePDU(p_RLC_Rec,
                      v_TimingInfo1,
                      tsc_P_NoPoll,
                      tsc_FI_MiddleOfSDU,
                      v_RLC_Data2);
    f_NB_TxAMD_OnePDU(p_RLC_Rec,
                      v_TimingInfo2,
                      tsc_P_NoPoll,
                      tsc_FI_MiddleOfSDU,
                      v_RLC_Data3);
    f_NB_TxAMD_OnePDU(p_RLC_Rec,
                      v_TimingInfo3,
                      tsc_P_NoPoll,
                      tsc_FI_MiddleOfSDU,
                      v_RLC_Data4);

    //@siclog "Step 31" siclog@
    //In the search space of the 3rd NPDCCH period  after step 30 the SS schedules 1 UL grant of size 328 bits. (Note 1)
    v_TimingInfo := cs_TimingInfo_SubFrameFull(f_NBIOT_IncrementSearchSpace(v_TimingStart, 7.0));
    v_DciUlInfo := cs_NB_DciInfo_CcchDcchDtchUL (2,8); // @sic R5-177110  sic@
    f_NBIOT_ULGrantTransmission(nbiot_Cell1, cs_NB_UL_GrantScheduling_Start(cs_NB_SingleGrant(v_DciUlInfo)), v_TimingInfo);

    //@siclog "Step 32" siclog@
    //The UE loopbacks a STATUS PDU with SN_ACK=12 and the complete RLC UL SDU#6
    p_RLC_Rec.AM_VTA := v_VTS_Offset + 12;
    f_NB_RxAMD_STATUS_OneSDU(p_RLC_Rec, // @sic R5-177110  sic@
                             tsc_P_Poll,
                             tsc_RLC_SDU6,
                             cr_RLC_AM_StatusPDU_ACK_SN(p_RLC_Rec.AM_VTA));

    //@siclog "Step 33" siclog@
    //The SS transmits a STATUS PDU.
    f_NB_TxSTATUS_PDU(p_RLC_Rec);
    // update VTS: SN 11 (EndOfSDU) has already been transmitted in step 24
    p_RLC_Rec.AM_VTS := v_VTS_Offset + 12; // @sic R5s170244, R5-172992 sic@
  }

  /*
   * @desc      REFERENCE TS 36.523-1 clause 22.3.2.3
   * @status    APPROVED (NBIOT)
   */
  function f_TC_22_3_2_3_NBIOT() runs on NBIOT_PTC
  { /* NB-IoT / AM RLC / In sequence delivery of upper layers PDUs / Different numbers of length indicators */
    var RLC_SS_State v_RLC_Rec;
    var template (value) DL_CCCH_Message_NB v_RrcConnSetup;
    var T_PollRetransmit_NB_r13 v_T_PollRetransmit_NB_r13;
    var UL_AM_RLC_NB_r13.maxRetxThreshold_r13 v_MaxRetxThreshold_r13;
    var template (value) SRB_ToAddModList_NB_r13 v_SRB_ToAddModList_NB_r13;
  
    //RLC global initialisation
    f_InitRLC_Record(v_RLC_Rec, AM_Mode);
    v_RLC_Rec.t_PollRetransmit_r13 := 4.0; // t_PollRetransmit_r13 set to 4000 ms @sic R5-171411 sic@
    v_RLC_Rec.maxRetxThreshold_r13 := 4; // maxRetxThreshold_r13 set to 4 (=t4)
    v_RLC_Rec.enableStatusReportSN_Gap_r13 := true; // enableStatusReportSN-Gap-r13 set to true

    v_T_PollRetransmit_NB_r13 := ms4000; // @sic R5-171411 sic@
    v_MaxRetxThreshold_r13 := t4; // @sic R5s170248 sic@
    v_SRB_ToAddModList_NB_r13 := {cs_SRB_ToAddMod_NB_RLC_Config (cs_UL_AM_RLC_NB_r13 (v_T_PollRetransmit_NB_r13, v_MaxRetxThreshold_r13), cs_DL_AM_RLC_NB_r13_GapReport)}; // @sic R5s170248 sic@
    v_RrcConnSetup := f_NBIOT_508_RRCConnectionSetup(-, v_SRB_ToAddModList_NB_r13);
  
    // perform NBIOT specific preamble for RLC
    f_NBIOT_RLC_Preamble_State2B_NB(v_RLC_Rec,
                                    nbiot_Cell1,
                                    STATE2A_NB_TESTLOOP_ModeG, // @sic R5-174405 sic@
                                    v_RrcConnSetup);
  
    f_NBIOT_TestBody_Set(true, layer2);
    f_NBIOT_HarqErrorHandling_Set(raiseInconc);

    fl_TC_22_3_2_3_TestBody (v_RLC_Rec);

    f_NBIOT_HarqErrorHandling_Set(ignore);
    f_NBIOT_TestBody_Set(false);
  
    f_NBIOT_L2_Postamble_State2B_NB(nbiot_Cell1, v_RLC_Rec.AM_VTS, v_RLC_Rec.AM_VRR);
  }

  /*
   * @desc      test body of TC_NBIOT_22_3_2_3
   * @param     p_RLC_Rec           (by reference)
   * @status    APPROVED (NBIOT)
   */
  function fl_TC_22_3_2_3_TestBody(inout RLC_SS_State p_RLC_Rec) runs on NBIOT_PTC
  {
    var integer v_RLC_DL_SDU_Length1;
    var integer v_RLC_DL_SDU_Length2;
    var integer v_RLC_UL_SDU_Length1 := 32; // PRBS
    var integer v_RLC_UL_SDU_Length2 := 10; // PRBS
    var template (value) TimingInfo_Type v_TimingInfo;
    var template (value) RLC_Status_NACK_List_Type v_NACK_List;
    var template (value) NB_DciUlInfo_Type v_DciUlInfo;
    var RLC_DataField_Type v_RLC_Data1;
    var RLC_DataField_Type v_RLC_Data2;
    var RLC_DataField_Type v_RLC_Data3;
    var integer v_VTS_Offset := p_RLC_Rec.AM_VTS; // @sic R5s170248 sic@
    var SubFrameTiming_Type v_TimingStart;
    timer t_WatchDog := 0.5; // tolerance missing, value needed for f_Delay
    
    // establish RLC SDUs (DL and UL) and obtain the length of the DL RLC SDU
    // 1. generate SDUs for SDU#1-3 with PRBS size 32 octets
    v_RLC_DL_SDU_Length1 := f_NBIOT_Generate_RLC_SDUs (p_RLC_Rec, 3, v_RLC_UL_SDU_Length1, 0);
    // 2. generate SDU#4-16 with PRBS size 10 octets
    v_RLC_DL_SDU_Length2 := f_NBIOT_Generate_RLC_SDUs (p_RLC_Rec, 13, v_RLC_UL_SDU_Length2, 3);
       
    //@siclog "Step 1" siclog@
    //The SS transmits an AMD PDU to the UE. This PDU carries SDU#1 without LI field.
    v_TimingStart := f_NBIOT_GetNextSearchSpace(nbiot_Cell1);
    v_TimingInfo := cs_TimingInfo_SubFrameFull(f_NBIOT_IncrementSearchSpace(v_TimingStart, 1.0));
    f_NB_TxAMD_SDU(p_RLC_Rec, v_TimingInfo, tsc_P_NoPoll, tsc_RLC_SDU1);
 
    //@siclog "Step 2" siclog@
    //The SS transmits an AMD PDU to the UE. This PDU carries SDU#1 without LI field.
    v_TimingInfo := cs_TimingInfo_SubFrameFull(f_NBIOT_IncrementSearchSpace(v_TimingStart, 2.0));
    p_RLC_Rec.AM_VTS := v_VTS_Offset + 0; // SN to be used for the next PDU
    f_NB_TxAMD_SDU(p_RLC_Rec, v_TimingInfo, tsc_P_NoPoll, tsc_RLC_SDU1);
 
    //@siclog "Step 2A" siclog@
    //In the search space of the third NPDCCH period after the transmission at  step 2 the SS schedules an UL grant of size 296 bits
    v_TimingInfo := cs_TimingInfo_SubFrameFull(f_NBIOT_IncrementSearchSpace(v_TimingStart, 5.0));
    v_DciUlInfo := cs_NB_DciInfo_CcchDcchDtchUL (1,9);  // UL Grant of 296 bits
    f_NBIOT_ULGrantTransmission(nbiot_Cell1, cs_NB_UL_GrantScheduling_Start(cs_NB_SingleGrant(v_DciUlInfo)), v_TimingInfo);

    //@siclog "Step 3" siclog@
    //Check: Does the UE transmit RLC SDU#1?
    f_NB_RxAMD_SDU(p_RLC_Rec, tsc_P_Poll, tsc_RLC_SDU1);
    f_NBIOT_PreliminaryPass(__FILE__, __LINE__, "Step 3");
 
    //@siclog "Step 4" siclog@
    //The SS transmits a STATUS PDU.
    f_NB_TxSTATUS_PDU (p_RLC_Rec);
 
    //@siclog "Step 5" siclog@
    //The SS transmits an AMD PDU to the UE. This PDU contains SDU#2, and the 1st part of SDU#3.
    v_TimingStart := f_NBIOT_GetNextSearchSpace(nbiot_Cell1);
    v_TimingInfo := cs_TimingInfo_SubFrameFull(f_NBIOT_IncrementSearchSpace(v_TimingStart, 1.0));
    v_RLC_Data1 := p_RLC_Rec.RLC_DataList[tsc_RLC_SDU2];
    v_RLC_Data2 := substr(p_RLC_Rec.RLC_DataList[tsc_RLC_SDU3], 0, 16);
    f_NB_TxAMD_PDU_List( p_RLC_Rec,
                         v_TimingInfo,
                         tsc_P_NoPoll,
                         tsc_FI_StartOfSDU,
                         {v_RLC_Data1, v_RLC_Data2});
   
    //@siclog "Step 5A" siclog@
    // In the search space of the third NPDCCH period after the transmission at  step 5 the SS schedules an UL grant of size 296 bits.
    v_TimingInfo := cs_TimingInfo_SubFrameFull(f_NBIOT_IncrementSearchSpace(v_TimingStart, 4.0));
    v_DciUlInfo := cs_NB_DciInfo_CcchDcchDtchUL (1,9);  // UL Grant of 296 bits
    f_NBIOT_ULGrantTransmission(nbiot_Cell1, cs_NB_UL_GrantScheduling_Start(cs_NB_SingleGrant(v_DciUlInfo)), v_TimingInfo);

    //@siclog "Step 6" siclog@
    //Check: Does the UE transmit RLC UL SDU#2 with the poll bit set?
    f_NB_RxAMD_SDU(p_RLC_Rec, tsc_P_Poll, tsc_RLC_SDU2); // @sic R5s170248 sic@
    f_NBIOT_PreliminaryPass(__FILE__, __LINE__, "Step 6");
  
    //@siclog "Step 7" siclog@
    //The SS transmits a STATUS PDU
    f_NB_TxSTATUS_PDU (p_RLC_Rec);
  
    //@siclog "Step 8" siclog@
    //The SS transmits an AMD PDU to the UE. This PDU contains RLC DL SDU#2, and the 1st part of SDU#3.
    v_TimingStart := f_NBIOT_GetNextSearchSpace(nbiot_Cell1);
    v_TimingInfo := cs_TimingInfo_SubFrameFull(f_NBIOT_IncrementSearchSpace(v_TimingStart, 1.0));
    v_RLC_Data1 := p_RLC_Rec.RLC_DataList[tsc_RLC_SDU2];
    v_RLC_Data2 := substr(p_RLC_Rec.RLC_DataList[tsc_RLC_SDU3], 0, 16);
    p_RLC_Rec.AM_VTS := v_VTS_Offset + 1; // SN to be used for the next PDU
    f_NB_TxAMD_PDU_List( p_RLC_Rec,
                         v_TimingInfo,
                         tsc_P_NoPoll,
                         tsc_FI_StartOfSDU,
                         {v_RLC_Data1, v_RLC_Data2});
                         
    //@siclog "Step 8A" siclog@
    // In the search space of the third NPDCCH period after the transmission at  step 8 the SS schedules an UL grant of size 296 bits.
    v_TimingInfo := cs_TimingInfo_SubFrameFull(f_NBIOT_IncrementSearchSpace(v_TimingStart, 4.0));
    v_DciUlInfo := cs_NB_DciInfo_CcchDcchDtchUL (1,9);  // UL Grant of 296 bits
    f_NBIOT_ULGrantTransmission(nbiot_Cell1, cs_NB_UL_GrantScheduling_Start(cs_NB_SingleGrant(v_DciUlInfo)), v_TimingInfo);

    //@siclog "Step 9" siclog@
    //Check: Does the UE transmit RLC SDU#2?
    t_WatchDog.start;
    alt{
      [] L2DATA.receive (car_NB_SRB1bis_RLCAmDataInd (nbiot_Cell1,
                                                      cr_AMD_PDUoneSDU(p_RLC_Rec.AM_VRR,
                                                                       tsc_P_NoPoll,
                                                                       {p_RLC_Rec.RLC_UL_DataList[tsc_RLC_SDU2]} )))
        {
          f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, "Step 9");
        }
      [] t_WatchDog.timeout {}
    }
  
    //@siclog "Step 10" siclog@
    //The SS transmits an AMD PDU to the UE. This PDU contains the 2nd part of SDU#3.
    v_TimingStart := f_NBIOT_GetNextSearchSpace(nbiot_Cell1);
    v_TimingInfo := cs_TimingInfo_SubFrameFull(f_NBIOT_IncrementSearchSpace(v_TimingStart, 1.0));
    v_RLC_Data1 := substr(p_RLC_Rec.RLC_DataList[tsc_RLC_SDU3], 16, (v_RLC_DL_SDU_Length1-16)); // @sic R5s170248 sic@
    f_NB_TxAMD_OnePDU( p_RLC_Rec,
                       v_TimingInfo,
                       tsc_P_NoPoll,
                       tsc_FI_EndOfSDU,
                       v_RLC_Data1);

    //@siclog "Step 10A" siclog@
    //In the search space of the third NPDCCH period after the transmission at step 10 the SS schedules an UL grant of size 296 bits.
    v_TimingInfo := cs_TimingInfo_SubFrameFull(f_NBIOT_IncrementSearchSpace(v_TimingStart, 4.0));
    v_DciUlInfo := cs_NB_DciInfo_CcchDcchDtchUL (1,9);  // UL Grant of 296 bits
    f_NBIOT_ULGrantTransmission(nbiot_Cell1, cs_NB_UL_GrantScheduling_Start(cs_NB_SingleGrant(v_DciUlInfo)), v_TimingInfo);

    //@siclog "Step 11" siclog@
    //Check: Does the UE transmit RLC UL SDU#3?
    f_NB_RxAMD_SDU(p_RLC_Rec, tsc_P_Poll, tsc_RLC_SDU3);
    f_NBIOT_PreliminaryPass(__FILE__, __LINE__, "Step 11");
 
    //@siclog "Step 12" siclog@
    //The SS transmits a STATUS PDU.
    f_NB_TxSTATUS_PDU (p_RLC_Rec);
   
   //@siclog "Step 13" siclog@
    //The SS transmits an AMD PDU to the UE. This PDU contains the last part of RLC DL SDU#6.
    v_TimingStart := f_NBIOT_GetNextSearchSpace(nbiot_Cell1);
    v_TimingInfo := cs_TimingInfo_SubFrameFull(f_NBIOT_IncrementSearchSpace(v_TimingStart, 1.0));
    v_RLC_Data1 := substr(p_RLC_Rec.RLC_DataList[tsc_RLC_SDU6], 5, (v_RLC_DL_SDU_Length2-5)); // @sic R5s170248 sic@
    p_RLC_Rec.AM_VTS := v_VTS_Offset + 5; // SN to be used for the next PDU
    f_NB_TxAMD_OnePDU(p_RLC_Rec,
                      v_TimingInfo,
                      tsc_P_NoPoll,
                      tsc_FI_EndOfSDU,
                      v_RLC_Data1);

    //@siclog "Step 14" siclog@
    //The SS transmits an AMD PDU to the UE. This PDU contains the 2nd part of RLC DL SDU#5, and the 1st part of RLC DL SDU#6
    v_TimingInfo := cs_TimingInfo_SubFrameFull(f_NBIOT_IncrementSearchSpace(v_TimingStart, 2.0));
    v_RLC_Data1 := substr(p_RLC_Rec.RLC_DataList[tsc_RLC_SDU5], 5,(v_RLC_DL_SDU_Length2-5)); // @sic R5s170248 sic@
    v_RLC_Data2 := substr(p_RLC_Rec.RLC_DataList[tsc_RLC_SDU6], 0, 5);
    p_RLC_Rec.AM_VTS := v_VTS_Offset + 4; // SN to be used for the next PDU
    f_NB_TxAMD_PDU_List(p_RLC_Rec,
                        v_TimingInfo,
                        tsc_P_NoPoll,
                        tsc_FI_MiddleOfSDU,
                        {v_RLC_Data1, v_RLC_Data2});

    //@siclog "Step 15" siclog@
    //The SS does not allocate any uplink grant.
 
    //@siclog "Step 16" siclog@
    //The SS transmits an AMD PDU to the UE. This PDU carries RLC DL SDU#4 and the 1st part of RLC DL SDU#5
    v_TimingInfo := cs_TimingInfo_SubFrameFull(f_NBIOT_IncrementSearchSpace(v_TimingStart, 4.0));
    v_RLC_Data1 := p_RLC_Rec.RLC_DataList[tsc_RLC_SDU4];
    v_RLC_Data2 := substr(p_RLC_Rec.RLC_DataList[tsc_RLC_SDU5], 0, 5);
    p_RLC_Rec.AM_VTS := v_VTS_Offset + 3; // SN to be used for the next PDU
    f_NB_TxAMD_PDU_List( p_RLC_Rec,
                         v_TimingInfo,
                         tsc_P_NoPoll,
                         tsc_FI_StartOfSDU,
                         {v_RLC_Data1, v_RLC_Data2});

    //@siclog "Step 17" siclog@
    //In the search space of the third NPDCCH period after step 16 the SS schedules an UL grant of size 504 bits sufficient for
    //the UE to loopback the PRBS parts of RLC DL SDU#4, RLC DL SDU#5 and RLC DL SDU#6 and report RLC STATUS PDU.
    v_TimingInfo := cs_TimingInfo_SubFrameFull(f_NBIOT_IncrementSearchSpace(v_TimingStart, 7.0));
    v_DciUlInfo := cs_NB_DciInfo_CcchDcchDtchUL (2,10);  // UL Grant of 504 bits  @sic R5s170248 sic@
    f_NBIOT_ULGrantTransmission(nbiot_Cell1, cs_NB_UL_GrantScheduling_Start(cs_NB_SingleGrant(v_DciUlInfo)), v_TimingInfo);
  
    //@siclog "Step 18" siclog@
    //Check: Does the UE transmit RLC STATUS PDU ACK SN=6 and an AMD PDU containing RLC UL SDU#4, RLC UL SDU#5 and RLC UL SDU#6 in its data field
    v_RLC_Data1 := p_RLC_Rec.RLC_UL_DataList[tsc_RLC_SDU4];
    v_RLC_Data2 := p_RLC_Rec.RLC_UL_DataList[tsc_RLC_SDU5];
    v_RLC_Data3 := p_RLC_Rec.RLC_UL_DataList[tsc_RLC_SDU6];
    p_RLC_Rec.AM_VTA := v_VTS_Offset + 6; // @sic R5s170248 sic@
    f_NB_RxAMD_STATUS_PDU(p_RLC_Rec, // @sic R5s170248, R5-174475  sic@
                          tsc_P_Poll,
                          tsc_FI_FullSDU,
                          cr_FlexPart_2LIs (10, 10),
                          {v_RLC_Data1, v_RLC_Data2, v_RLC_Data3},
                          cr_RLC_AM_StatusPDU_ACK_SN(p_RLC_Rec.AM_VTA));
    f_NBIOT_PreliminaryPass(__FILE__, __LINE__, "Step 18");
  
    //@siclog "Step 19" siclog@
    //The SS transmits a STATUS PDU.
    f_NB_TxSTATUS_PDU (p_RLC_Rec);
  
    //@siclog "Step 20" siclog@
    //The SS transmits an AMD RLC PDU to the UE. This PDU contains the last part of RLC DL SDU#9.
    v_TimingStart := f_NBIOT_GetNextSearchSpace(nbiot_Cell1);
    v_TimingInfo := cs_TimingInfo_SubFrameFull(f_NBIOT_IncrementSearchSpace(v_TimingStart, 1.0));
    v_RLC_Data1 := substr(p_RLC_Rec.RLC_DataList[tsc_RLC_SDU9], 5, (v_RLC_DL_SDU_Length2-5)); // @sic R5s170248 sic@
    p_RLC_Rec.AM_VTS := v_VTS_Offset + 8; // SN to be used for the next PDU
    f_NB_TxAMD_OnePDU( p_RLC_Rec,
                       v_TimingInfo,
                       tsc_P_Poll,
                       tsc_FI_EndOfSDU,
                       v_RLC_Data1);

    //@siclog "Step 20A" siclog@
    //In the search space of the third NPDCCH period after step 20 the SS schedules an UL grant of size 88 bits.
    v_TimingInfo := cs_TimingInfo_SubFrameFull(f_NBIOT_IncrementSearchSpace(v_TimingStart, 4.0)); // wait for 1 search space
    v_DciUlInfo := cs_NB_DciInfo_CcchDcchDtchUL (0,6);  // UL Grant of 88 bits
    f_NBIOT_ULGrantTransmission(nbiot_Cell1, cs_NB_UL_GrantScheduling_Start(cs_NB_SingleGrant(v_DciUlInfo)), v_TimingInfo);

    //@siclog "Step 21" siclog@
    //Check: Does the UE transmit a STATUS PDU NACK_SN/E1/E2 fields set correctly to inform SS of missing PDUs #7, #8, (ACK_SN =9, NACK_SN = 6, NACK_SN = 7)?
    v_NACK_List := cr_NACK_List_2NACKs(v_VTS_Offset + 6,
                                       tsc_E2_NoSO_Follows,
                                       omit,
                                       v_VTS_Offset + 7,
                                       tsc_E2_NoSO_Follows,
                                       omit);
    p_RLC_Rec.AM_VTA := v_VTS_Offset + 9;
    f_NB_RxSTATUS_PDU_NACK(p_RLC_Rec, v_NACK_List, ?);
    f_NBIOT_PreliminaryPass(__FILE__, __LINE__, "Step 21");

    //@siclog "Step 22" siclog@
    //The SS transmits an AMD PDU to the UE. This PDU contains RLC DL SDU#8, and the 1st part of RLC DL SDU#9.
    v_TimingStart := f_NBIOT_GetNextSearchSpace(nbiot_Cell1);
    v_TimingInfo := cs_TimingInfo_SubFrameFull(f_NBIOT_IncrementSearchSpace(v_TimingStart, 1.0));
    v_RLC_Data1 := p_RLC_Rec.RLC_DataList[tsc_RLC_SDU8];
    v_RLC_Data2 := substr(p_RLC_Rec.RLC_DataList[tsc_RLC_SDU9], 0, 5);
    p_RLC_Rec.AM_VTS := v_VTS_Offset + 7; // SN to be used for the next PDU
    f_NB_TxAMD_PDU_List( p_RLC_Rec,
                         v_TimingInfo,
                         tsc_P_NoPoll,
                         tsc_FI_StartOfSDU,
                         {v_RLC_Data1, v_RLC_Data2});

    //@siclog "Step 23" siclog@
    //The SS does not allocate any uplink grant.
 
    //@siclog "Step 24" siclog@
    //The SS transmits an AMD PDU to the UE. This PDU carries RLC UL SDU#7.
    v_TimingInfo := cs_TimingInfo_SubFrameFull(f_NBIOT_IncrementSearchSpace(v_TimingStart, 2.0));
    p_RLC_Rec.AM_VTS := v_VTS_Offset + 6; // SN to be used for the next PDU
    f_NB_TxAMD_SDU(p_RLC_Rec, v_TimingInfo, tsc_P_NoPoll, tsc_RLC_SDU7);

    //@siclog "Step 24A" siclog@
    //In the search space of the third NPDCCH period after step 24 the SS schedules an UL grant of size 328 bits sufficient for
    //the UE to loopback the PRBS parts of RLC DL SDU#7, RLC DL SDU#8 and RLC DL SDU#9 and report RLC STATUS PDU.
    v_TimingInfo := cs_TimingInfo_SubFrameFull(f_NBIOT_IncrementSearchSpace(v_TimingStart, 5.0));
    v_DciUlInfo := cs_NB_DciInfo_CcchDcchDtchUL (1,10);  // 3 UL Grant of 328 bits
    f_NBIOT_ULGrantTransmission(nbiot_Cell1, cs_NB_UL_GrantScheduling_Start(cs_NB_SingleGrant(v_DciUlInfo)), v_TimingInfo);
  
    //@siclog "Step 25" siclog@
    //Check: Does the UE transmit RLC STATUS PDU with NACK SN=3 and ACK SN=6 and an AMD PDU containing RLC UL SDU#7, RLC UL SDU#8 and RLC UL SDU#9 in its data field?
    v_RLC_Data1 := p_RLC_Rec.RLC_UL_DataList[tsc_RLC_SDU7];
    v_RLC_Data2 := p_RLC_Rec.RLC_UL_DataList[tsc_RLC_SDU8];
    v_RLC_Data3 := p_RLC_Rec.RLC_UL_DataList[tsc_RLC_SDU9];
    p_RLC_Rec.AM_VTA := v_VTS_Offset + 9; // @sic R5s170248 sic@
    f_NB_RxAMD_STATUS_PDU(p_RLC_Rec, // @sic R5s170248 sic@
                          tsc_P_Poll,
                          tsc_FI_FullSDU,
                          cr_FlexPart_2LIs (10, 10),
                          {v_RLC_Data1, v_RLC_Data2, v_RLC_Data3},
                          cr_RLC_AM_StatusPDU_ACK_SN(p_RLC_Rec.AM_VTA));
    f_NBIOT_PreliminaryPass(__FILE__, __LINE__, "Step 25");
 
    //@siclog "Step 26" siclog@
    //The SS transmits a STATUS PDU.
    f_NB_TxSTATUS_PDU (p_RLC_Rec);
 
    //@siclog "Step 27" siclog@
    //The SS transmits an AMD PDU to the UE. This PDU contains RLC UL SDU#10, RLC UL SDU#11 and RLC UL SDU#12 with two LI fields.
    v_TimingStart := f_NBIOT_GetNextSearchSpace(nbiot_Cell1);
    v_TimingInfo := cs_TimingInfo_SubFrameFull(f_NBIOT_IncrementSearchSpace(v_TimingStart, 1.0));
    v_RLC_Data1 := p_RLC_Rec.RLC_DataList[tsc_RLC_SDU10];
    v_RLC_Data2 := p_RLC_Rec.RLC_DataList[tsc_RLC_SDU11];
    v_RLC_Data3 := p_RLC_Rec.RLC_DataList[tsc_RLC_SDU12];
    p_RLC_Rec.AM_VTS := v_VTS_Offset + 9; // SN to be used for the next PDU
    f_NB_TxAMD_PDU_List(p_RLC_Rec,
                        v_TimingInfo,
                        tsc_P_NoPoll,
                        tsc_FI_FullSDU,
                        {v_RLC_Data1, v_RLC_Data2,v_RLC_Data3});
   
    //@siclog "Step 28" siclog@
    //In the search space of the third NPDCCH period after step 27 the SS schedules an UL grant of size 328 bits sufficient for
    //the UE to loopback the PRBS parts of RLC DL the UE to loopback RLC DL SDU#10, RLC DL SDU#11 and RLC DL SDU#12.
    v_TimingInfo := cs_TimingInfo_SubFrameFull(f_NBIOT_IncrementSearchSpace(v_TimingStart, 4.0));
    v_DciUlInfo := cs_NB_DciInfo_CcchDcchDtchUL (1,10);  // UL Grant of 328 bits
    f_NBIOT_ULGrantTransmission(nbiot_Cell1, cs_NB_UL_GrantScheduling_Start(cs_NB_SingleGrant(v_DciUlInfo)), v_TimingInfo);
  
    //@siclog "Step 29" siclog@
    //Check: Does the UE transmit an AMD PDU containing RLC UL SDU#10, RLC UL SDU#11 and RLC UL SDU#12 in its data field?
    v_RLC_Data1 := p_RLC_Rec.RLC_UL_DataList[tsc_RLC_SDU10];
    v_RLC_Data2 := p_RLC_Rec.RLC_UL_DataList[tsc_RLC_SDU11];
    v_RLC_Data3 := p_RLC_Rec.RLC_UL_DataList[tsc_RLC_SDU12];
    f_NB_RxAMD_PDU(p_RLC_Rec,
                   tsc_P_Poll,
                   tsc_FI_FullSDU,
                   cr_FlexPart_2LIs (10, 10),
                   {v_RLC_Data1, v_RLC_Data2, v_RLC_Data3});
    f_NBIOT_PreliminaryPass(__FILE__, __LINE__, "Step 29");
 
    //@siclog "Step 30" siclog@
    //The SS transmits a STATUS PDU.
    f_NB_TxSTATUS_PDU (p_RLC_Rec);
 
    //@siclog "Step 31" siclog@
    //The t-PollRetransmit-r13 timer for AMD PDU#11 expires and SS assumes that the transmission of AMD PDU#11 containing RLC DL SDU#13, RLC DL SDU#14, RLC DL SDU#15 and
    //RLC DL SDU#16 is failed and considers AMD PDU#11 for re-transmission. (500ms aprox 8 search spaces)
    // timer t_Poll_Retransmit needs to be started
    f_Delay(p_RLC_Rec.t_PollRetransmit_r13); // @sic R5s170248 sic@
    
    //@siclog "Step 32" siclog@
    //The SS transmits an AMD PDU segment to the UE. This PDU segment contains RLC DL SDU#13 without LI field.
    v_TimingStart := f_NBIOT_GetNextSearchSpace(nbiot_Cell1); // @sic R5s170248 sic@
    v_TimingInfo := cs_TimingInfo_SubFrameFull(f_NBIOT_IncrementSearchSpace(v_TimingStart, 1.0));
    v_RLC_Data1 := p_RLC_Rec.RLC_DataList[tsc_RLC_SDU13];
    f_NB_TxAMD_PDU_OneSeg(p_RLC_Rec,
                          v_TimingInfo,
                          tsc_P_NoPoll,
                          tsc_FI_FullSDU,
                          tsc_LSF_NotLast, // @sic R5s170248 sic@
                          0,
                          v_RLC_Data1);
  
    //@siclog "Step 33" siclog@
    //In the search space of the third NPDCCH period after step 32 the SS schedules an uplink grant
    //size of 208 bits allowing the UE to transmit 1 RLC UL SDU.
    v_TimingInfo := cs_TimingInfo_SubFrameFull(f_NBIOT_IncrementSearchSpace(v_TimingStart, 4.0));
    v_DciUlInfo := cs_NB_DciInfo_CcchDcchDtchUL (2,4);  // UL Grant of 208 bits
    f_NBIOT_ULGrantTransmission(nbiot_Cell1, cs_NB_UL_GrantScheduling_Start(cs_NB_SingleGrant(v_DciUlInfo)), v_TimingInfo);
  
    //@siclog "Step 34" siclog@
    // Check: Does the UE transmit a STATUS PDU with NACK_SN=10, SOStart, SOEnd and ACK_SN=11 and an AMD PDU containing RLC UL SDU#13 in its data field?
    p_RLC_Rec.AM_VTA := v_VTS_Offset + 11;
    v_NACK_List := cr_NACK_List(v_VTS_Offset + 10,  // @sic R5-176043  sic@
                                tsc_E2_SO_Follows,
                                cr_Status_SO(int2bit(v_RLC_DL_SDU_Length2, tsc_AM_SO_Size), tsc_SO_Special));
    f_NB_RxAMD_STATUS_OneSDU(p_RLC_Rec, // @sic R5-176043  sic@
                             tsc_P_Poll,
                             tsc_RLC_SDU13,
                             cr_RLC_AM_StatusPDU_ACK_SN_NACK(p_RLC_Rec.AM_VTA,
                                                             v_NACK_List));
    f_NBIOT_PreliminaryPass(__FILE__, __LINE__, "Step 34");
 
    //@siclog "Step 35" siclog@
    // The SS transmits a STATUS PDU.
    f_NB_TxSTATUS_PDU (p_RLC_Rec);
 
    //@siclog "Step 36" siclog@
    // The SS transmits AMD PDU segment to the UE. This PDU segment contains SDU#14, SDU#15 and SDU#16 with two LI fields
    v_TimingStart := f_NBIOT_GetNextSearchSpace(nbiot_Cell1);
    v_TimingInfo := cs_TimingInfo_SubFrameFull(f_NBIOT_IncrementSearchSpace(v_TimingStart, 1.0));
    v_RLC_Data1 := p_RLC_Rec.RLC_DataList[tsc_RLC_SDU14];
    v_RLC_Data2 := p_RLC_Rec.RLC_DataList[tsc_RLC_SDU15];
    v_RLC_Data3 := p_RLC_Rec.RLC_DataList[tsc_RLC_SDU16]; // @sic R5s170248 sic@
    f_NB_TxAMD_SegList(p_RLC_Rec, // @sic R5s170248 sic@
                       v_TimingInfo,
                       tsc_P_NoPoll,
                       tsc_FI_FullSDU,
                       tsc_LSF_Last,
                       v_RLC_DL_SDU_Length2,
                       {v_RLC_Data1, v_RLC_Data2, v_RLC_Data3});
    p_RLC_Rec.AM_VTS := (p_RLC_Rec.AM_VTS+1) mod 1024; // update VTS after transmission of segments @sic R5s170248 sic@

    //@siclog "Step 37" siclog@
    // In the search space of the third NPDCCH period after step 32 the SS schedules an UL grant size of 328 bits
    //sufficient for the UE to loopback loopback the PRBS parts of RLC DL SDU#14, RLC DL SDU#15 and RLC DL SDU#16.
    v_TimingInfo := cs_TimingInfo_SubFrameFull(f_NBIOT_IncrementSearchSpace(v_TimingStart, 4.0));
    v_DciUlInfo := cs_NB_DciInfo_CcchDcchDtchUL (1,10);  // UL Grant of 328 bits
    f_NBIOT_ULGrantTransmission(nbiot_Cell1, cs_NB_UL_GrantScheduling_Start(cs_NB_SingleGrant(v_DciUlInfo)), v_TimingInfo);
 
    //@siclog "Step 38" siclog@
    //Check: Does the UE transmit an AMD PDU containing RLC UL SDU#14, RLC UL SDU#15 and RLC UL SDU#16 in its data field?
    v_RLC_Data1 := p_RLC_Rec.RLC_UL_DataList[tsc_RLC_SDU14];
    v_RLC_Data2 := p_RLC_Rec.RLC_UL_DataList[tsc_RLC_SDU15];
    v_RLC_Data3 := p_RLC_Rec.RLC_UL_DataList[tsc_RLC_SDU16];
    f_NB_RxAMD_PDU(p_RLC_Rec,
                   tsc_P_Poll,
                   tsc_FI_FullSDU,
                   cr_FlexPart_2LIs (10, 10),
                   {v_RLC_Data1, v_RLC_Data2, v_RLC_Data3});
    f_NBIOT_PreliminaryPass(__FILE__, __LINE__, "Step 38");
 
    //@siclog "Step 39" siclog@
    // The SS transmits a STATUS PDU.
    f_NB_TxSTATUS_PDU (p_RLC_Rec);
  }

  /*
   * @desc      REFERENCE TS 36.523-3 clause 22.3.2.4
   * @status    APPROVED (NBIOT)
   */
  function f_TC_22_3_2_4_NBIOT() runs on NBIOT_PTC
  { /* NB-IoT / AM RLC / Re-segmentation RLC PDU / SO, FI, LSF / Re-transmission of RLC PDU */
    var RLC_SS_State v_RLC_Rec;
    var template (value) DL_CCCH_Message_NB v_RrcConnSetup;
    var T_PollRetransmit_NB_r13 v_T_PollRetransmit_NB_r13;
    var template (value) SRB_ToAddModList_NB_r13 v_SRB_ToAddModList_NB_r13;
    var UL_AM_RLC_NB_r13.maxRetxThreshold_r13 v_MaxRetxThreshold_r13 := t8; // @sic R5s180016 sic@
    var NB_RLC_CountsInfoList_Type v_RLC_CountsInfoListByRef;
    
    //RLC global initialisation
    f_InitRLC_Record(v_RLC_Rec, AM_Mode);
    v_RLC_Rec.t_PollRetransmit_r13 := 4.0; // t_PollRetransmit_r13 set to 4000 ms @sic R5-171412 sic@
    v_RLC_Rec.maxRetxThreshold_r13 := 8; // maxRetxThreshold_r13 set to 8 (=t8)   @sic R5s170741 sic@
    v_RLC_Rec.enableStatusReportSN_Gap_r13 := false; // enableStatusReportSN-Gap-r13 set to false
    
    //UE RLC settings
    v_T_PollRetransmit_NB_r13 := ms4000; // @sic R5-171412 sic@
    v_SRB_ToAddModList_NB_r13 := {cs_SRB_ToAddMod_NB_RLC_Config(cs_UL_AM_RLC_NB_r13(v_T_PollRetransmit_NB_r13, v_MaxRetxThreshold_r13), cs_DL_AM_RLC_NB_r13_NoGapReport)};
    v_RrcConnSetup := f_NBIOT_508_RRCConnectionSetup(-, v_SRB_ToAddModList_NB_r13);

    // perform NBIOT specific preamble for RLC
    f_NBIOT_Init(c2); // @sic R5-181158 sic@

    f_NBIOT_CellInfo_InitMaxReferencePower(nbiot_Cell11, -79); // @sic R5-181158 sic@

    //Create and configure all cells
    f_NBIOT_CellConfig_Def(nbiot_Cell1, CONTROL_PLANE);
    f_NBIOT_CellConfig_Def(nbiot_Cell11, CONTROL_PLANE); // @sic R5-181158 sic@

    f_NBIOT_SS_ConfigRachProcedureMsg4(nbiot_Cell1, valueof(v_RrcConnSetup));

    f_NBIOT_L2_Enter_State2B_NB(v_RLC_CountsInfoListByRef, nbiot_Cell1, TransparentMode_RLC_Only, STATE2A_NB_TESTLOOP_ModeG);

    v_RLC_Rec.AM_VTS := v_RLC_CountsInfoListByRef.AM_VTS;
    v_RLC_Rec.AM_VRR := v_RLC_CountsInfoListByRef.AM_VRR;
  
    f_NBIOT_TestBody_Set(true, layer2);
    f_NBIOT_HarqErrorHandling_Set(raiseInconc);
    
    fl_TC_22_3_2_4_Body(v_RLC_Rec);
    
    f_NBIOT_HarqErrorHandling_Set(ignore);
    f_NBIOT_TestBody_Set(false);
    
    // postamble only, cleaning up has happened already
    f_NBIOT_Postamble(nbiot_Cell11, CONTROL_PLANE, N1_IDLE); // @sic R5-181158 sic@
  }

  /*
   * @desc      test body of TC_NBIOT_22_3_2_4
   * @param     p_RLC_Rec           (by reference)
   * @status    APPROVED (NBIOT)
   */
  function fl_TC_22_3_2_4_Body(inout RLC_SS_State p_RLC_Rec) runs on NBIOT_PTC
  {
    var integer i;
    var  NB_L2_DATA_IND v_ReceivedAsp;
    var integer v_RLC_DL_SDU_Length;
    var integer v_Length_Seg1;
    var integer v_Length_Seg2;
    var SubFrameTiming_Type v_TimingStart;
    var template (value) TimingInfo_Type v_TimingInfo;
    var template (value) TimingInfo_Type v_TimingInfo1;
    var template (value) TimingInfo_Type v_TimingInfo2;
    var template (value) TimingInfo_Type v_TimingInfo3;
    var template (value) NB_DciUlInfo_Type v_DciUlInfo;
    var RLC_DataField_Type v_RLC_UL_Data;
    var RLC_DataField_Type v_RLC_Data1;
    var RLC_DataField_Type v_RLC_Data2;
    var template (value) RLC_Status_NACK_List_Type v_NACK_List;
    var RLC_Status_Padding_Type v_Padding_5bits := '00000'B;
    var RLC_Status_Padding_Type v_Padding_7bits := '0000000'B;
    var integer v_VRR_Offset := p_RLC_Rec.AM_VRR;
    var template (value) NB_CellPowerList_Type v_CellPowerList_AtT1;

    v_CellPowerList_AtT1 := {
      cs_NB_CellPower(nbiot_Cell1, -85),
      cs_NB_CellPower(nbiot_Cell11, -79)
    };

    // establish RLC SDUs (DL and UL) and obtain the length of the DL RLC SDU
    // generate SDUs 1-3 with PRBS size 50 octets
    v_RLC_DL_SDU_Length := f_NBIOT_Generate_RLC_SDUs (p_RLC_Rec, 3, 50, 0);
    
    //@siclog "Step 0" siclog@
    // The SS does not respond to PRACH preambles transmitted by UE for Uplink transmission, but instead allocates the UL C-RNTI grant on NPDCCH  when specified in the test sequence

    // Scheduling of steps 1-6
    v_TimingStart := f_NBIOT_GetNextSearchSpace(nbiot_Cell1);
    v_TimingInfo := cs_TimingInfo_SubFrameFull(f_NBIOT_IncrementSearchSpace(v_TimingStart, 1.0));
    v_TimingInfo1 := cs_TimingInfo_SubFrameFull(f_NBIOT_IncrementSearchSpace(v_TimingStart, 4.0));
    v_TimingInfo2 := cs_TimingInfo_SubFrameFull(f_NBIOT_IncrementSearchSpace(v_TimingStart, 6.0)); // @sic R5s170925 sic@
    v_TimingInfo3 := cs_TimingInfo_SubFrameFull(f_NBIOT_IncrementSearchSpace(v_TimingStart, 9.0)); // @sic R5s170925 sic@

    //@siclog "Step 1" siclog@
    // The SS transmits one AMD PDU containing RLC DL SDU#1 in its data field. The SDU includes a PRBS of 400 bits.
    f_NB_TxAMD_SDU(p_RLC_Rec, v_TimingInfo, tsc_P_NoPoll, tsc_RLC_SDU1);

    //@siclog "Step 2" siclog@
    // In the search space of the third NPDCCH period after the first transmission at step 1 the SS schedules one UL grant (Note 6).
    v_DciUlInfo := cs_NB_DciInfo_CcchDcchDtchUL (6, 3);
    f_NBIOT_ULGrantTransmission(nbiot_Cell1, cs_NB_UL_GrantScheduling_Start(cs_NB_SingleGrant(v_DciUlInfo)), v_TimingInfo1);

    //@siclog "Step 3" siclog@
    // The UE transmits an AMD PDU with the same data contents as received in the corresponding PRBS part of DL PDU#1?
    f_NB_RxAMD_SDU(p_RLC_Rec, tsc_P_Poll, tsc_RLC_SDU1);

    //@siclog "Step 4" siclog@
    // In the fourth NPDCCH period after the transmission at step 1 the SS transmits one AMD PDU containing RLC DL SDU#2 in its data field. The SDU includes a PRBS of 400 bits.
    f_NB_TxAMD_SDU(p_RLC_Rec, v_TimingInfo2, tsc_P_NoPoll, tsc_RLC_SDU2);
    
    //@siclog "Step 5" siclog@
    // In the search space of the seventh NPDCCH period after the first transmission at step 1 the SS schedules one UL grant  (Note 6).
    v_DciUlInfo := cs_NB_DciInfo_CcchDcchDtchUL (6, 3);
    f_NBIOT_ULGrantTransmission(nbiot_Cell1, cs_NB_UL_GrantScheduling_Start(cs_NB_SingleGrant(v_DciUlInfo)), v_TimingInfo3);

    //@siclog "Step 6" siclog@
    // The UE transmits an AMD PDU with the same data contents as received in the corresponding PRBS part of DL PDU#2.
    f_NB_RxAMD_SDU(p_RLC_Rec, tsc_P_Poll, tsc_RLC_SDU2);

    //@siclog "Step 7" siclog@
    // The SS transmits a STATUS PDU. This PDU nacks the AMD PDU with SN=0. NACK_SN=0 and ACK_SN=2.
    v_NACK_List := cs_NACK_List (v_VRR_Offset, tsc_E2_NoSO_Follows, omit);
    f_NB_TxSTATUS_PDU_NACK( p_RLC_Rec, v_NACK_List, v_Padding_5bits);
    
    // Scheduling of steps 8-15
    v_TimingStart := f_NBIOT_GetNextSearchSpace(nbiot_Cell1);
    v_TimingInfo := cs_TimingInfo_SubFrameFull(f_NBIOT_IncrementSearchSpace(v_TimingStart, 2.0));
    v_TimingInfo1 := cs_TimingInfo_SubFrameFull(f_NBIOT_IncrementSearchSpace(v_TimingStart, 7.0));

    //@siclog "Step 8" siclog@
    // In the 3rd and 4th NPDCCH period after the transmission at step 7 the SS schedules 1 UL grant of size 296 bits (Note 1, Note 4).
    v_DciUlInfo := cs_NB_DciInfo_CcchDcchDtchUL (1, 9);
    f_NBIOT_ULGrantTransmission(nbiot_Cell1, cs_NB_UL_GrantScheduling_Start(cs_NB_PeriodicGrant(v_DciUlInfo, 2)), v_TimingInfo);

    //@siclog "Step 9" siclog@
    // Check: Does the UE transmit an AMD PDU segment with SO=0, LSF=0 and the same data contents at the corresponding received positions as in the original AMD PDU?
    L2DATA.receive (car_NB_SRB1bis_RLCAmDataInd (nbiot_Cell1,
                                                 cr_AMD_PDU_seg_NoLIs (v_VRR_Offset,
                                                                       '?'B,
                                                                       tsc_FI_StartOfSDU,
                                                                       tsc_LSF_NotLast,
                                                                       0,
                                                                       ?))) -> value v_ReceivedAsp;
    v_RLC_Data1 := v_ReceivedAsp.L2Data.SubframeData.PduSduList.RlcPdu[0].AMD.Data[0];
    v_Length_Seg1 := lengthof (v_RLC_Data1);
    f_NBIOT_PreliminaryPass(__FILE__, __LINE__, "Step 9");

    //@siclog "Step 10" siclog@
    // Check: Does the UE transmit an AMD PDU segment with SO=<x>, LSF=1 and the same data contents at the corresponding received positions as in the original AMD PDU? (Note 3)
    L2DATA.receive (car_NB_SRB1bis_RLCAmDataInd (nbiot_Cell1,
                                                 cr_AMD_PDU_seg_NoLIs (v_VRR_Offset,
                                                                       '?'B,
                                                                       tsc_FI_EndOfSDU,
                                                                       tsc_LSF_Last,
                                                                       v_Length_Seg1,
                                                                       ?))) -> value v_ReceivedAsp;
    v_RLC_Data2 := v_ReceivedAsp.L2Data.SubframeData.PduSduList.RlcPdu[0].AMD.Data[0];
    v_RLC_UL_Data := v_RLC_Data1 & v_RLC_Data2;
    if (v_RLC_UL_Data == p_RLC_Rec.RLC_UL_DataList[tsc_RLC_SDU1]) {
      f_NBIOT_PreliminaryPass(__FILE__, __LINE__, "Step 10");
    }
    else {
      f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, "Step 10");
    }

    //@siclog "Step 11" siclog@
    // The SS transmits a STATUS PDU. This PDU nacks the AMD PDU with SN=0. NACK_SN=0, SOStart=0, SOEnd=<x-1> and ACK_SN=2. (Note 3, Note 5).
    v_NACK_List := cs_NACK_List(v_VRR_Offset,
                                tsc_E2_SO_Follows,
                                cs_Status_SO(int2bit(0, tsc_AM_SO_Size), int2bit((v_Length_Seg1 -1), tsc_AM_SO_Size)));
    f_NB_TxSTATUS_PDU_NACK(p_RLC_Rec,
                           v_NACK_List,
                           v_Padding_7bits);
    
    //@siclog "Step 12" siclog@
    // In the 3rd and 4th NPDCCH period after the transmission at step 11 the SS schedules 1 UL grant of size 208 bits (Note 2) (Note 4).
    v_DciUlInfo := cs_NB_DciInfo_CcchDcchDtchUL (2, 4);
    f_NBIOT_ULGrantTransmission(nbiot_Cell1, cs_NB_UL_GrantScheduling_Start(cs_NB_PeriodicGrant(v_DciUlInfo, 2)), v_TimingInfo1);
    
    //@siclog "Step 13" siclog@
    // Check: Does the UE transmit an AMD PDU segment with SO=0, LSF=0 and the same data contents at the corresponding received positions as in the original AMD PDU?
    L2DATA.receive (car_NB_SRB1bis_RLCAmDataInd (nbiot_Cell1,
                                                 cr_AMD_PDU_seg_NoLIs (v_VRR_Offset,
                                                                       '?'B,
                                                                       tsc_FI_StartOfSDU,
                                                                       tsc_LSF_NotLast,
                                                                       0,
                                                                       ?))) -> value v_ReceivedAsp;
    v_RLC_Data1 := v_ReceivedAsp.L2Data.SubframeData.PduSduList.RlcPdu[0].AMD.Data[0];
    v_Length_Seg2 := lengthof (v_RLC_Data1);
    f_NBIOT_PreliminaryPass(__FILE__, __LINE__, "Step 13");

    //@siclog "Step 14" siclog@
    // Check: Does the UE transmit an AMD PDU segment with SO=<y>, LSF=0 and the same data contents at the corresponding received positions as in the original AMD PDU? (Note 3)
    L2DATA.receive (car_NB_SRB1bis_RLCAmDataInd (nbiot_Cell1,
                                                 cr_AMD_PDU_seg_NoLIs (v_VRR_Offset,
                                                                       '?'B,
                                                                       tsc_FI_MiddleOfSDU,
                                                                       tsc_LSF_NotLast,
                                                                       v_Length_Seg2,
                                                                       ?))) -> value v_ReceivedAsp;
    v_RLC_Data2 := v_ReceivedAsp.L2Data.SubframeData.PduSduList.RlcPdu[0].AMD.Data[0];
    v_RLC_UL_Data := v_RLC_Data1 & v_RLC_Data2;
    if (v_RLC_UL_Data == (substr (p_RLC_Rec.RLC_UL_DataList[tsc_RLC_SDU1], 0, v_Length_Seg1))) {
      f_NBIOT_PreliminaryPass(__FILE__, __LINE__, "Step 14");
    }
    else {
      f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, "Step 14");
    }

    //@siclog "Step 15" siclog@
    // The SS transmits a STATUS PDU. This PDU acks the AMD PDUs with SN=0 and SN=1. ACK_SN=2.
    f_NB_TxSTATUS_PDU (p_RLC_Rec);
    
    // Scheduling of steps 16-21
    v_TimingStart := f_NBIOT_GetNextSearchSpace(nbiot_Cell1);
    v_TimingInfo := cs_TimingInfo_SubFrameFull(f_NBIOT_IncrementSearchSpace(v_TimingStart, 1.0));
    v_TimingInfo1 := cs_TimingInfo_SubFrameFull(f_NBIOT_IncrementSearchSpace(v_TimingStart, 6.0)); // @sic R5s170741, R5-176314 sic@
    // v_TimingInfo1 will be incremented by 5 in the loop containing steps 19 and 20

    //@siclog "Step 16" siclog@
    // The SS transmits one AMD PDU containing RLC DL SDU#3 in its data field. The SDU includes a PRBS of 400 bits.
    f_NB_TxAMD_SDU(p_RLC_Rec, v_TimingInfo, tsc_P_NoPoll, tsc_RLC_SDU3);
    
    //@siclog "Step 17" siclog@
    // In the search space of the 5th NPDCCH period after the transmission at step 16 the SS schedules one UL grant  (Note 6).
    v_DciUlInfo := cs_NB_DciInfo_CcchDcchDtchUL (6, 3);
    f_NBIOT_ULGrantTransmission(nbiot_Cell1, cs_NB_UL_GrantScheduling_Start(cs_NB_SingleGrant(v_DciUlInfo)), v_TimingInfo1);
    
    //@siclog "Step 18" siclog@
    // The UE transmits an AMD PDU containing the corresponding PRBS part of DL PDU#3 in its data field.
    f_NB_RxAMD_SDU(p_RLC_Rec, tsc_P_Poll, tsc_RLC_SDU3);
    
    // EXCEPTION: Step 19 to 20 shall be repeated maxRetxThreshold times (let i be the loop counter, i=1,...,maxRetxThreshold)

    for (i:=1; i<=p_RLC_Rec.maxRetxThreshold_r13; i:=i+1) { // @sic R5s170741, R5-176314  sic@
      //@siclog "Step 19" siclog@
      // The SS transmits an RLC STATUS PDU. ACK_SN=3 and NACK_SN=2.
      v_NACK_List := cs_NACK_List (v_VRR_Offset+2, tsc_E2_NoSO_Follows, omit);
      f_NB_TxSTATUS_PDU_NACK( p_RLC_Rec, v_NACK_List, v_Padding_5bits);
    
      //@siclog "Step 19A" siclog@
      // In the search space of the ((i+1) * 5)th NPDCCH period after the transmission at step 16 the SS schedules one UL grant (Note 6).
      v_TimingInfo1 := cs_TimingInfo_SubFrameFull(f_NBIOT_IncrementSearchSpace(v_TimingStart, 5.0 * int2float(i+1))); // @sic R5s170741, R5-176314  sic@
      v_DciUlInfo := cs_NB_DciInfo_CcchDcchDtchUL (6, 3);
      f_NBIOT_ULGrantTransmission(nbiot_Cell1, cs_NB_UL_GrantScheduling_Start(cs_NB_SingleGrant(v_DciUlInfo)), v_TimingInfo1);
    
      //@siclog "Step 20" siclog@
      // Check: Does the UE retransmit the AMD PDU not yet acknowledged?
      p_RLC_Rec.AM_VRR := v_VRR_Offset+2;
      f_NB_RxAMD_SDU(p_RLC_Rec, tsc_P_Poll, tsc_RLC_SDU3);
      f_NBIOT_PreliminaryPass(__FILE__, __LINE__, "Step 20");
    }

    //@siclog "Step 21" siclog@
    // The SS transmits an RLC STATUS PDU. ACK_SN=3 and NACK_SN=2.
    v_NACK_List := cs_NACK_List (v_VRR_Offset+2, tsc_E2_NoSO_Follows, omit);
    f_NB_TxSTATUS_PDU_NACK( p_RLC_Rec, v_NACK_List, v_Padding_5bits);
    //Delay of 100 msec to ensure Status PDU is sent before the SRB release
    f_Delay(0.5); // @sic R5s180413 sic@
    f_NBIOT_SS_SRBs_DRBs_Release (nbiot_Cell1, CONTROL_PLANE);
    f_NBIOT_SS_SRBs_DRBs_Config(nbiot_Cell11, CONTROL_PLANE, -, omit);

    //@siclog "Step 21A" siclog@
    // The SS changes Ncell 11 levels according to row "T1" in Table 22.3.2.4.3.2-0
    f_NBIOT_SetCellPowerList(v_CellPowerList_AtT1);

    //@siclog "Step 22" siclog@
    // Check: Does the UE transmit an RRCConnectionRequest-NB message?
    SRB.check(receive(car_NB_SRB0_RrcPdu_IND(nbiot_Cell11, cr_RRCConnectionRequest_NB(cr_EstablishmentCause_NB_Any, ?)))); // @sic R5-181158 sic@
    f_NBIOT_PreliminaryPass(__FILE__, __LINE__, "Step 22");

    //@siclog "Step 23-26" siclog@
    // UE performs TAU procedure based on steps 2 to 5 of Generic test procedure in TS 36.508 subclause 8.1.5A.5 to takes place on Ncell 11.
    f_NBIOT_TrackingAreaUpdate_Step1_5(nbiot_Cell11, CONTROL_PLANE);  // @sic R5-181158 sic@

    //@siclog "Step 27" siclog@
    // The SS transmits an RRCConnectionRelease-NB message.
    f_NBIOT_RRC_ConnectionRelease(nbiot_Cell11);  // @sic R5-181158 sic@
  }

  /*
   * @desc      REFERENCE TS 36.523-1 clause 22.3.2.5
   * @status    APPROVED (NBIOT)
   */
  function f_TC_22_3_2_5_NBIOT() runs on NBIOT_PTC
  { /* NB-IoT / AM RLC / Segmentation and Reassembly / AMD PDU reassembly from AMD PDU segments / Re-ordering of RLC PDU segments */
    var RLC_SS_State v_RLC_Rec;
    var template (value) DL_CCCH_Message_NB v_RrcConnSetup;
    var T_PollRetransmit_NB_r13 v_T_PollRetransmit_NB_r13;
    var template (value) SRB_ToAddModList_NB_r13 v_SRB_ToAddModList_NB_r13;
    var UL_AM_RLC_NB_r13.maxRetxThreshold_r13 v_MaxRetxThreshold_r13 := t4; // @sic R5s170494 sic@
  
    //RLC global initialisation
    f_InitRLC_Record(v_RLC_Rec, AM_Mode);
    v_RLC_Rec.t_PollRetransmit_r13 := 4.0; // t_PollRetransmit_r13 set to 4000 ms @sic R5-171413 sic@
    v_RLC_Rec.maxRetxThreshold_r13 := 4; // maxRetxThreshold_r13 set to 4 (=t4)
    v_RLC_Rec.enableStatusReportSN_Gap_r13 := false; // enableStatusReportSN-Gap-r13 set to false

    //UE RLC settings
    v_T_PollRetransmit_NB_r13 := ms4000; // @sic R5-171413 sic@
    v_SRB_ToAddModList_NB_r13 := {cs_SRB_ToAddMod_NB_RLC_Config (cs_UL_AM_RLC_NB_r13 (v_T_PollRetransmit_NB_r13, v_MaxRetxThreshold_r13), cs_DL_AM_RLC_NB_r13_GapReport)};  // @sic R5s170494 sic@
    v_RrcConnSetup := f_NBIOT_508_RRCConnectionSetup(-, v_SRB_ToAddModList_NB_r13);
    
    // perform NBIOT specific preamble for RLC
    f_NBIOT_RLC_Preamble_State2B_NB(v_RLC_Rec,
                                    nbiot_Cell1,
                                    STATE2A_NB_TESTLOOP_ModeG, // @sic R5-174405 sic@
                                    v_RrcConnSetup);
    
    f_NBIOT_TestBody_Set(true, layer2);
    f_NBIOT_HarqErrorHandling_Set(raiseInconc);
    
    fl_TC_22_3_2_5_TestBody (v_RLC_Rec);
    
    f_NBIOT_HarqErrorHandling_Set(ignore);
    f_NBIOT_TestBody_Set(false);
    
    f_NBIOT_L2_Postamble_State2B_NB(nbiot_Cell1, v_RLC_Rec.AM_VTS, v_RLC_Rec.AM_VRR); // @sic R5s170494 sic@
  }

  /*
   * @desc      test body of TC_NBIOT_22_3_2_5
   * @param     p_RLC_Rec           (by reference)
   * @status    APPROVED (NBIOT)
   */
  function fl_TC_22_3_2_5_TestBody(inout RLC_SS_State p_RLC_Rec) runs on NBIOT_PTC
  {
    var integer v_RLC_UL_SDU_Length1;
    var integer v_RLC_UL_SDU_Length2;
    var integer v_RLC_UL_SDU_Length3;
    var integer v_RLC_UL_SDU_Length4; // RLC DL SDU sizes calculated
    var integer v_RLC_DL_SDU_Length1;
    var integer v_RLC_DL_SDU_Length2;
    var integer v_RLC_DL_SDU_Length3;
    var integer v_RLC_DL_SDU_Length4; // RLC DL SDU sizes calculated
    var integer v_L; // RLC DL SDU length - RLC UL SDU length, Length difference is the NAS and RRC  overhead
    var SubFrameTiming_Type v_TimingStart;
    var template (value) TimingInfo_Type v_TimingInfo;
    var template (value) TimingInfo_Type v_TimingInfo1;
    var template (value) TimingInfo_Type v_TimingInfo2;
    var template (value) TimingInfo_Type v_TimingInfo3;
    var template (value) TimingInfo_Type v_TimingInfo4;
    var template (value) TimingInfo_Type v_TimingInfo5;
    var template (value) TimingInfo_Type v_TimingInfo6;
    var template (value) TimingInfo_Type v_TimingInfo7;
    var template (value) TimingInfo_Type v_TimingInfo8;
    var template (value) TimingInfo_Type v_TimingInfo9;
    var template (value) TimingInfo_Type v_TimingInfo10;
    var template (value) TimingInfo_Type v_TimingInfo11;
    var template (value) TimingInfo_Type v_TimingInfo12; // @sic R5s170494 sic@
    var template (value) NB_DciUlInfo_Type v_DciUlInfo;
    var RLC_DataField_Type v_RLC_Data1;
    var RLC_DataField_Type v_RLC_Data2;
    var RLC_DataField_Type v_RLC_Data3;
    var template (value) RLC_Status_NACK_List_Type v_NACK_List;
    var template (value) RLC_Status_NACK_List_Type v_NACK_List1;
    var template (present) RLC_Status_Padding_Type v_Padding_1bit_Any := '?'B;
    var template (present) RLC_Status_Padding_Type v_Padding_3bits_Any := '???'B;
    var template (present) RLC_Status_Padding_Type v_Padding_5bits_Any := '?????'B;
    var template (present) RLC_Status_Padding_Type v_Padding_7bits_Any := '???????'B;
    var integer v_VTS_Offset := p_RLC_Rec.AM_VTS;

    // establish RLC SDUs (DL and UL) and obtain the length of the DL RLC SDU
    v_RLC_UL_SDU_Length1 := 33;
    v_RLC_UL_SDU_Length2 := 16;
    v_RLC_UL_SDU_Length3 := 10;
    v_RLC_UL_SDU_Length4 := 32;
    // 1. generate SDUs for SDU#1-4 with PRBS size v_RLC_UL_SDU_Length1 octets
    v_RLC_DL_SDU_Length1 := f_NBIOT_Generate_RLC_SDUs (p_RLC_Rec, 4, v_RLC_UL_SDU_Length1, 0);
    // 2. generate SDU#5-11 with PRBS size v_RLC_UL_SDU_Length2 octets
    v_RLC_DL_SDU_Length2 := f_NBIOT_Generate_RLC_SDUs (p_RLC_Rec, 7, v_RLC_UL_SDU_Length2, 4);
    // 3. generate SDU#12-14 with PRBS size v_RLC_UL_SDU_Length3 octets
    v_RLC_DL_SDU_Length3 := f_NBIOT_Generate_RLC_SDUs (p_RLC_Rec, 3, v_RLC_UL_SDU_Length3, 11);
    // 4. generate SDU#15-22 with PRBS size v_RLC_UL_SDU_Length4 octets
    v_RLC_DL_SDU_Length4 := f_NBIOT_Generate_RLC_SDUs (p_RLC_Rec, 8, v_RLC_UL_SDU_Length4, 14);
    
    //Note: In steps 0 to 17 the size of the RLC SDUs used in uplink will be 33 octets
    v_L := v_RLC_DL_SDU_Length1 - v_RLC_UL_SDU_Length1; // RLC DL SDU length - RLC UL SDU length, Length difference is the NAS and RRC  overhead
    
    //@siclog "Step 0" siclog@
    // The SS does not respond to PRACH preambles transmitted by UE for Uplink transmission, but instead allocates the UL C-RNTI grant on NPDCCH  when specified in the test sequence

    v_TimingStart := f_NBIOT_GetNextSearchSpace(nbiot_Cell1);
    v_TimingInfo := cs_TimingInfo_SubFrameFull(f_NBIOT_IncrementSearchSpace(v_TimingStart, 1.0));
    v_TimingInfo1 := cs_TimingInfo_SubFrameFull(f_NBIOT_IncrementSearchSpace(v_TimingStart, 4.0)); // @sic R5s170494 sic@
    
    //@siclog "Step 1" siclog@
    // The SS transmits AMD PDU#1 containing a complete RLC DL SDU#1 (FI field = 00).
    f_NB_TxAMD_SDU(p_RLC_Rec, v_TimingInfo, tsc_P_NoPoll, tsc_RLC_SDU1);
    
    //@siclog "Step 1A" siclog@
    // In the search space of the 3rd NPDCCH period after the transmission at step 1 the SS schedules one UL Grant of size 328 bits, sufficient for one RLC UL SDU to be looped back.
    v_DciUlInfo := cs_NB_DciInfo_CcchDcchDtchUL (1, 10); // TBS size = 328 bits @sic R5s170494 sic@
    f_NBIOT_ULGrantTransmission(nbiot_Cell1, cs_NB_UL_GrantScheduling_Start(cs_NB_SingleGrant(v_DciUlInfo)), v_TimingInfo1);
    
    //@siclog "Step 2" siclog@
    // Check: Does the UE transmit RLC UL SDU#1?
    f_NB_RxAMD_SDU(p_RLC_Rec, tsc_P_Poll, tsc_RLC_SDU1);
    f_NBIOT_PreliminaryPass(__FILE__, __LINE__, "Step 2");
    
    //@siclog "Step 3" siclog@
    // The SS transmits a STATUS PDU.
    f_NB_TxSTATUS_PDU (p_RLC_Rec);
    
    v_TimingStart := f_NBIOT_GetNextSearchSpace(nbiot_Cell1);
    v_TimingInfo := cs_TimingInfo_SubFrameFull(f_NBIOT_IncrementSearchSpace(v_TimingStart, 1.0));
    v_TimingInfo1 := cs_TimingInfo_SubFrameFull(f_NBIOT_IncrementSearchSpace(v_TimingStart, 2.0));
    v_TimingInfo2 := cs_TimingInfo_SubFrameFull(f_NBIOT_IncrementSearchSpace(v_TimingStart, 3.0));
    v_TimingInfo3 := cs_TimingInfo_SubFrameFull(f_NBIOT_IncrementSearchSpace(v_TimingStart, 6.0)); // @sic R5s170494 sic@
    
    //@siclog "Step 4" siclog@
    // The SS transmits AMD PDU#2 containing the first segment of RLC DL SDU#2 (FI field = 01).
    //  *** segment of 14 octets
    v_RLC_Data1 := substr(p_RLC_Rec.RLC_DataList[tsc_RLC_SDU2], 0, 14);
    f_NB_TxAMD_OnePDU(p_RLC_Rec,
                      v_TimingInfo,
                      tsc_P_NoPoll,
                      tsc_FI_StartOfSDU,
                      v_RLC_Data1);
    
    //@siclog "Step 5" siclog@
    // The SS transmits AMD PDU#3 containing the second segment of RLC DL SDU#2 (FI field = 11).
    //  *** segment of 10 octets
    v_RLC_Data1 := substr(p_RLC_Rec.RLC_DataList[tsc_RLC_SDU2], 14, 10);
    f_NB_TxAMD_OnePDU(p_RLC_Rec,
                      v_TimingInfo1,
                      tsc_P_NoPoll,
                      tsc_FI_MiddleOfSDU,
                      v_RLC_Data1);
    
    //@siclog "Step 6" siclog@
    // The SS transmits AMD PDU#4 containing the last segment of RLC DL SDU#2 (FI field = 10).
    //  *** segment of 9 + L - 33  octets
    v_RLC_Data1 := substr(p_RLC_Rec.RLC_DataList[tsc_RLC_SDU2], 24, (9 + v_L));
    f_NB_TxAMD_OnePDU(p_RLC_Rec,
                      v_TimingInfo2,
                      tsc_P_NoPoll,
                      tsc_FI_EndOfSDU,
                      v_RLC_Data1);
    
    //@siclog "Step 6A" siclog@
    // In the search space of the 3rd NPDCCH period after the transmission at step 6 the SS schedules one UL Grant of size 328 bits, sufficient for one RLC UL SDU to be looped back.
    v_DciUlInfo := cs_NB_DciInfo_CcchDcchDtchUL (1, 10); // TBS size = 328 bits @sic R5s170494 sic@
    f_NBIOT_ULGrantTransmission(nbiot_Cell1, cs_NB_UL_GrantScheduling_Start(cs_NB_SingleGrant(v_DciUlInfo)), v_TimingInfo3);
    
    //@siclog "Step 7" siclog@
    // Check: Does the UE transmit RLC UL SDU#2?
    f_NB_RxAMD_SDU(p_RLC_Rec, tsc_P_Poll, tsc_RLC_SDU2);
    f_NBIOT_PreliminaryPass(__FILE__, __LINE__, "Step 7");
    
    //@siclog "Step 8" siclog@
    // The SS transmits a STATUS PDU.
    f_NB_TxSTATUS_PDU (p_RLC_Rec);
    
    //@siclog "Step 9" siclog@
    // The t-PollRetransmit-r13 timer for RLC DL PDU#5 expires and SS assumes that the transmission of AMD PDU#5 containing a complete RLC DL SDU#3 and a complete RLC DL SDU#4 is failed and consider RLC DL PDU#5 for re-transmission
    // and a complete RLC DL SDU#4 is failed and consider RLC DL PDU#5 for re-transmission.
    f_Delay(p_RLC_Rec.t_PollRetransmit_r13);
    
    v_TimingStart := f_NBIOT_GetNextSearchSpace(nbiot_Cell1);
    v_TimingInfo := cs_TimingInfo_SubFrameFull(f_NBIOT_IncrementSearchSpace(v_TimingStart, 1.0));
    v_TimingInfo1 := cs_TimingInfo_SubFrameFull(f_NBIOT_IncrementSearchSpace(v_TimingStart, 4.0)); // @sic R5s170494 sic@
    
    //@siclog "Step 10" siclog@
    // The SS transmits AMD PDU segment containing a complete RLC DL SDU#3 (FI field = 00).
    v_RLC_Data1 := p_RLC_Rec.RLC_DataList[tsc_RLC_SDU3];
    f_NB_TxAMD_PDU_OneSeg(p_RLC_Rec,
                          v_TimingInfo,
                          tsc_P_NoPoll,
                          tsc_FI_FullSDU,
                          tsc_LSF_NotLast,
                          0,
                          v_RLC_Data1);
    
    //@siclog "Step 10A" siclog@
    // In the search space of the 3rd NPDCCH period after the transmission at step 10 the SS schedules one UL Grant of size 392 bits, sufficient for one STATUS PDU and one RLC UL SDU to be looped back.
    v_DciUlInfo := cs_NB_DciInfo_CcchDcchDtchUL (2, 8); // TBS size = 392 bits @sic R5s170494, R5-183204 sic@
    f_NBIOT_ULGrantTransmission(nbiot_Cell1, cs_NB_UL_GrantScheduling_Start(cs_NB_SingleGrant(v_DciUlInfo)), v_TimingInfo1);
    
    //@siclog "Step 11" siclog@
    // Check: Does the UE transmit a STATUS PDU with NACK_SN=4 with SOStart=L and SOEnd=32767 (special SOEnd value) and ACK_SN=5 and an AMD PDU containing RLC SDU#3?
    p_RLC_Rec.AM_VTA := v_VTS_Offset + 5;
    v_NACK_List := cr_NACK_List(v_VTS_Offset + 4,
                                tsc_E2_SO_Follows,
                                cr_Status_SO(int2bit(v_RLC_DL_SDU_Length1, tsc_AM_SO_Size), tsc_SO_Special)); // @sic R5-183204  sic@
    f_NB_RxAMD_STATUS_OneSDU(p_RLC_Rec,  // @sic R5-183204  sic@
                             tsc_P_Poll,
                             tsc_RLC_SDU3,
                             cr_RLC_AM_StatusPDU_ACK_SN_NACK(p_RLC_Rec.AM_VTA,
                                                             v_NACK_List));
    f_NBIOT_PreliminaryPass(__FILE__, __LINE__, "Step 11");
    
    //@siclog "Step 12" siclog@
    // The SS transmits a STATUS PDU.
    f_NB_TxSTATUS_PDU (p_RLC_Rec);
    
    v_TimingStart := f_NBIOT_GetNextSearchSpace(nbiot_Cell1);
    v_TimingInfo := cs_TimingInfo_SubFrameFull(f_NBIOT_IncrementSearchSpace(v_TimingStart, 1.0));
    v_TimingInfo1 := cs_TimingInfo_SubFrameFull(f_NBIOT_IncrementSearchSpace(v_TimingStart, 2.0));
    v_TimingInfo2 := cs_TimingInfo_SubFrameFull(f_NBIOT_IncrementSearchSpace(v_TimingStart, 3.0));
    v_TimingInfo3 := cs_TimingInfo_SubFrameFull(f_NBIOT_IncrementSearchSpace(v_TimingStart, 6.0)); // @sic R5s170494 sic@
    
    //@siclog "Step 13" siclog@
    // The SS transmits AMD PDU segment containing the first segment of RLC DL SDU#4 (FI field = 01).
    //  *** segment of 5 octets
    v_RLC_Data1 := substr(p_RLC_Rec.RLC_DataList[tsc_RLC_SDU4], 0, 5);
    f_NB_TxAMD_PDU_OneSeg(p_RLC_Rec,
                          v_TimingInfo,
                          tsc_P_NoPoll,
                          tsc_FI_StartOfSDU,
                          tsc_LSF_NotLast,
                          v_RLC_DL_SDU_Length1,
                          v_RLC_Data1);
    
    //@siclog "Step 14" siclog@
    // The SS transmits AMD PDU segment containing the second segment of RLC DL SDU#4 (FI field = 11).
    //  *** segment of 12 octets
    v_RLC_Data1 := substr(p_RLC_Rec.RLC_DataList[tsc_RLC_SDU4], 5, 12);
    f_NB_TxAMD_PDU_OneSeg(p_RLC_Rec,
                          v_TimingInfo1,
                          tsc_P_NoPoll,
                          tsc_FI_MiddleOfSDU,
                          tsc_LSF_NotLast,
                          v_RLC_DL_SDU_Length1+5,
                          v_RLC_Data1);
    
    //@siclog "Step 15" siclog@
    // The SS transmits AMD PDU segment containing the last segment of RLC DL SDU#4 (FI field = 10).
    //  *** segment of 16 + L - 33  octets
    v_RLC_Data1 := substr(p_RLC_Rec.RLC_DataList[tsc_RLC_SDU4], 17, (16 + v_L));
    f_NB_TxAMD_PDU_OneSeg(p_RLC_Rec,
                          v_TimingInfo2,
                          tsc_P_NoPoll,
                          tsc_FI_EndOfSDU,
                          tsc_LSF_Last,
                          v_RLC_DL_SDU_Length1+17,
                          v_RLC_Data1);
    
    //@siclog "Step 15A" siclog@
    // In the search space of the 3rd NPDCCH period after the transmission at step 15 the SS schedules one UL Grant of size 392 bits, sufficient for one STATUS PDU and one RLC UL SDU to be looped back.
    v_DciUlInfo := cs_NB_DciInfo_CcchDcchDtchUL (2, 8); // TBS size = 392 bits @sic R5s170494, R5-183204 sic@
    f_NBIOT_ULGrantTransmission(nbiot_Cell1, cs_NB_UL_GrantScheduling_Start(cs_NB_SingleGrant(v_DciUlInfo)), v_TimingInfo3);
    
    //@siclog "Step 16" siclog@
    // Check: Does the UE transmit a STATUS PDU with ACK_SN=5 and an AMD PDU containing RLC UL SDU#4?
    p_RLC_Rec.AM_VTA := v_VTS_Offset + 5;
    f_NB_RxAMD_STATUS_OneSDU(p_RLC_Rec, // @sic R5-183204  sic@
                             tsc_P_Poll,
                             tsc_RLC_SDU4,
                             cr_RLC_AM_StatusPDU_ACK_SN(p_RLC_Rec.AM_VTA)); // @sic R5-183204  sic@
    f_NBIOT_PreliminaryPass(__FILE__, __LINE__, "Step 16");
    
    //@siclog "Step 17" siclog@
    // The SS transmits a STATUS PDU.
    f_NB_TxSTATUS_PDU (p_RLC_Rec);
    
    //Note: In steps 18 to 51 the size of the RLC SDUs used in uplink will be 16 octets. The size of the RLC SDUs used in downlink is L.
    v_L := v_RLC_DL_SDU_Length2 - v_RLC_UL_SDU_Length2; // RLC DL SDU length - RLC UL SDU length, Length difference is the NAS and RRC  overhead
    
    v_TimingStart := f_NBIOT_GetNextSearchSpace(nbiot_Cell1);
    v_TimingInfo := cs_TimingInfo_SubFrameFull(f_NBIOT_IncrementSearchSpace(v_TimingStart, 1.0));
    v_TimingInfo1 := cs_TimingInfo_SubFrameFull(f_NBIOT_IncrementSearchSpace(v_TimingStart, 2.0));
    v_TimingInfo2 := cs_TimingInfo_SubFrameFull(f_NBIOT_IncrementSearchSpace(v_TimingStart, 5.0)); // @sic R5s170494 sic@
    v_TimingInfo3 := cs_TimingInfo_SubFrameFull(f_NBIOT_IncrementSearchSpace(v_TimingStart, 6.0));
    v_TimingInfo4 := cs_TimingInfo_SubFrameFull(f_NBIOT_IncrementSearchSpace(v_TimingStart, 7.0));
    v_TimingInfo5 := cs_TimingInfo_SubFrameFull(f_NBIOT_IncrementSearchSpace(v_TimingStart, 10.0));
    v_TimingInfo6 := cs_TimingInfo_SubFrameFull(f_NBIOT_IncrementSearchSpace(v_TimingStart, 11.0));
    
    //@siclog "Step 18" siclog@
    // The SS transmits an AMD PDU containing the first part (8 bytes) of RLC DL SDU#5 in its data field. This PDU is in error (SN falls outside of the receiving window) and is to be discarded by the UE.
    p_RLC_Rec.AM_VTS := p_RLC_Rec.AM_VTS + tsc_AM_Window_Size + 3;
    v_RLC_Data1 := substr (p_RLC_Rec.RLC_DataList[tsc_RLC_SDU5], 0, 8);
    f_NB_TxAMD_OnePDU (p_RLC_Rec,
                       v_TimingInfo,
                       tsc_P_NoPoll,
                       tsc_FI_StartOfSDU,
                       v_RLC_Data1);

    //@siclog "Step 19" siclog@
    // The SS transmits an AMD PDU containing RLC DL SDU#6 (L bytes) in its data field with the P-bit set.
    p_RLC_Rec.AM_VTS := v_VTS_Offset + 6;
    f_NB_TxAMD_SDU(p_RLC_Rec, v_TimingInfo1, tsc_P_Poll, tsc_RLC_SDU6); // @sic R5s170494 sic@
  
    //@siclog "Step 20" siclog@
    // In the search space of the 3rd NPDCCH period after the transmission at step 19 the SS schedules one UL Grant of size 72 bits, sufficient for one RLC STATUS PDU.
    v_DciUlInfo := cs_NB_DciInfo_CcchDcchDtchUL (2, 2); // TBS size = 72 bits
    f_NBIOT_ULGrantTransmission(nbiot_Cell1, cs_NB_UL_GrantScheduling_Start(cs_NB_SingleGrant(v_DciUlInfo)), v_TimingInfo2); // @sic R5s170494 sic@

    //@siclog "Step 21" siclog@
    // The UE transmits a STATUS PDU with NACK_SN field indicating missing PDU#5. ACK_SN=7, NACK_SN=5.
    p_RLC_Rec.AM_VTA := v_VTS_Offset + 7; // @sic R5s170494 sic@
    v_NACK_List := cr_NACK_List (v_VTS_Offset + 5, tsc_E2_NoSO_Follows, omit); // @sic R5s170494 sic@
    f_NB_RxSTATUS_PDU_NACK(p_RLC_Rec, v_NACK_List, v_Padding_5bits_Any);

    //@siclog "Step 22" siclog@
    // The SS transmits an AMD PDU segment of AMD PDU#6 (AMD PDU#6 carries RLC DL SDU#5) containing the first 8 bytes of RLC DL SDU#5 in its data field. SO=0 and LSF=0. No header extension part is provided.
    p_RLC_Rec.AM_VTS := v_VTS_Offset + 5;
    v_RLC_Data1 := substr (p_RLC_Rec.RLC_DataList[tsc_RLC_SDU5], 0, 8);
    f_NB_TxAMD_PDU_OneSeg (p_RLC_Rec,
                           v_TimingInfo3, // @sic R5s170494 sic@
                           tsc_P_NoPoll,
                           tsc_FI_StartOfSDU,
                           tsc_LSF_NotLast,
                           0,
                           v_RLC_Data1);

    //@siclog "Step 23" siclog@
    // The SS transmits an AMD PDU segment of AMD PDU#6 (AMD PDU#6 carries RLC DL SDU#5) containing the last L-8 bytes of RLC DL SDU#5 in its data field with the P-bit set. SO=8 and LSF=1. No header extension part is provided.
    v_RLC_Data1 := substr (p_RLC_Rec.RLC_DataList[tsc_RLC_SDU5], 8, (8 + v_L));
    f_NB_TxAMD_PDU_OneSeg (p_RLC_Rec,
                           v_TimingInfo4, // @sic R5s170494 sic@
                           tsc_P_Poll,
                           tsc_FI_EndOfSDU,
                           tsc_LSF_Last,
                           8,
                           v_RLC_Data1);

    //@siclog "Step 24" siclog@
    // In the search space of the 3rd NPDCCH period after the transmission at step 23 the SS schedules one UL Grant of size 56 bits, sufficient for one RLC STATUS PDU.
    v_DciUlInfo := cs_NB_DciInfo_CcchDcchDtchUL (1, 2); // TBS size = 56 bits
    f_NBIOT_ULGrantTransmission(nbiot_Cell1, cs_NB_UL_GrantScheduling_Start(cs_NB_SingleGrant(v_DciUlInfo)), v_TimingInfo5); // @sic R5s170494 sic@

    //@siclog "Step 25A" siclog@
    // In the search space of the next NPDCCH period after the transmission at step 24 the SS schedules one UL Grant of size 328 bits, sufficient for two RLC UL SDUs to be looped back.
    v_DciUlInfo := cs_NB_DciInfo_CcchDcchDtchUL (1, 10); // TBS size = 328 bits @sic R5s170494 sic@
    f_NBIOT_ULGrantTransmission(nbiot_Cell1, cs_NB_UL_GrantScheduling_Start(cs_NB_SingleGrant(v_DciUlInfo)), v_TimingInfo6); // @sic R5s170494 sic@
    
    //@siclog "Step 25" siclog@
    // Check: Does the UE transmit a STATUS PDU with ACK_SN=7, thus acknowledging the reception of PDUs with SN=5 and SN=6, and no NACK_SN provided?
    p_RLC_Rec.AM_VTA := v_VTS_Offset + 7; // @sic R5s170494 sic@
    f_NB_RxSTATUS_PDU_ACK(p_RLC_Rec);
    f_NBIOT_PreliminaryPass(__FILE__, __LINE__, "Step 25");
        
    //@siclog "Step 26" siclog@
    // Check: Does the UE transmit RLC UL SDU#5 and RLC UL SDU#6?
    v_RLC_Data1 := p_RLC_Rec.RLC_UL_DataList[tsc_RLC_SDU5];
    v_RLC_Data2 := p_RLC_Rec.RLC_UL_DataList[tsc_RLC_SDU6];
    f_NB_RxAMD_PDU (p_RLC_Rec,
                    tsc_P_Poll,
                    tsc_FI_FullSDU,
                    cr_FlexPart_1LI (v_RLC_UL_SDU_Length2),
                    {v_RLC_Data1, v_RLC_Data2});
    f_NBIOT_PreliminaryPass(__FILE__, __LINE__, "Step 26");

    //@siclog "Step 27" siclog@
    // The SS transmits a STATUS PDU.
    f_NB_TxSTATUS_PDU (p_RLC_Rec);

    v_TimingStart := f_NBIOT_GetNextSearchSpace(nbiot_Cell1);
    v_TimingInfo := cs_TimingInfo_SubFrameFull(f_NBIOT_IncrementSearchSpace(v_TimingStart, 1.0));
    v_TimingInfo1 := cs_TimingInfo_SubFrameFull(f_NBIOT_IncrementSearchSpace(v_TimingStart, 4.0)); // @sic R5s170494 sic@
    v_TimingInfo2 := cs_TimingInfo_SubFrameFull(f_NBIOT_IncrementSearchSpace(v_TimingStart, 5.0));
    v_TimingInfo3 := cs_TimingInfo_SubFrameFull(f_NBIOT_IncrementSearchSpace(v_TimingStart, 8.0));
    v_TimingInfo4 := cs_TimingInfo_SubFrameFull(f_NBIOT_IncrementSearchSpace(v_TimingStart, 9.0));

    //@siclog "Step 28" siclog@
    // The SS transmits an AMD PDU segment of AMD PDU#8 (AMD PDU#8 carries RLC DL SDU#7 and RLC DL SDU#8) containing the last L-8 bytes of RLC DL SDU#8 in its data field, with the P-bit set. FI=10, SO=(L+8) and LSF=1. No header extension part is provided.
    p_RLC_Rec.AM_VTS := v_VTS_Offset + 7;  // @sic R5s170494 sic@
    v_RLC_Data1 := substr(p_RLC_Rec.RLC_DataList[tsc_RLC_SDU8], 8, (8 + v_L));
    f_NB_TxAMD_PDU_OneSeg(p_RLC_Rec,
                          v_TimingInfo,
                          tsc_P_Poll,
                           tsc_FI_EndOfSDU,
                          tsc_LSF_Last,
                          v_RLC_DL_SDU_Length2 + 8,
                          v_RLC_Data1);

    //@siclog "Step 29" siclog@
    // In the search space of the 3rd NPDCCH period after the transmission at step 28 the SS schedules one UL Grant of size 104 bits, sufficient for one RLC STATUS PDU.
    v_DciUlInfo := cs_NB_DciInfo_CcchDcchDtchUL (1, 3); // TBS size = 104 bits
    f_NBIOT_ULGrantTransmission(nbiot_Cell1, cs_NB_UL_GrantScheduling_Start(cs_NB_SingleGrant(v_DciUlInfo)), v_TimingInfo1);

    //@siclog "Step 30" siclog@
    // The UE transmits a STATUS PDU NACK_SN field for receipt of PDU#8. ACK_SN=8, NACK_SN=7, SOStart=0/SOEnd=L+7.
    p_RLC_Rec.AM_VTA := v_VTS_Offset + 8; // @sic R5s170494 sic@
    v_NACK_List := cr_NACK_List(v_VTS_Offset + 7, // @sic R5s170494 sic@
                                tsc_E2_SO_Follows,
                                cr_Status_SO(int2bit(0, tsc_AM_SO_Size), int2bit((v_RLC_DL_SDU_Length2 + 7), tsc_AM_SO_Size)));
    f_NB_RxSTATUS_PDU_NACK(p_RLC_Rec, v_NACK_List, v_Padding_7bits_Any);

    //@siclog "Step 31" siclog@
    // The SS transmits an AMD PDU segment of AMD PDU#8 (AMD PDU#8 carries RLC DL SDU#7 and RLC DL SDU#8) containing RLC DL SDU#7 (L bytes) and the first 8 bytes of SDU#8 in its data field,
    // with the P-bit set. FI=01, SO=0 and LSF=0. Header extension part present: E in fixed part header=1, E in extension part header=0, LI=L.
    p_RLC_Rec.AM_VTS := v_VTS_Offset + 7; // @sic R5s170494 sic@
    v_RLC_Data1 := p_RLC_Rec.RLC_DataList[tsc_RLC_SDU7];
    v_RLC_Data2 := substr(p_RLC_Rec.RLC_DataList[tsc_RLC_SDU8], 0, 8);
    f_NB_TxAMD_SegList(p_RLC_Rec,
                       v_TimingInfo2,
                       tsc_P_Poll,
                       tsc_FI_StartOfSDU,
                       tsc_LSF_NotLast,
                       0,
                       {v_RLC_Data1, v_RLC_Data2});
    
    //@siclog "Step 32" siclog@
    // In the search space of the 3rd NPDCCH period after the transmission at step 31 the SS allocates one UL Grant of size 56 bits, sufficient for one RLC STATUS PDU .
    v_DciUlInfo := cs_NB_DciInfo_CcchDcchDtchUL (1, 2); // TBS size = 56 bits
    f_NBIOT_ULGrantTransmission(nbiot_Cell1, cs_NB_UL_GrantScheduling_Start(cs_NB_SingleGrant(v_DciUlInfo)), v_TimingInfo3);
    
    //@siclog "Step 33A" siclog@
    // In the search space of the next NPDCCH period after the transmission at step 32 the SS schedules one UL Grant of size 328 bits, sufficient for one RLC UL SDU to be looped back.
    v_DciUlInfo := cs_NB_DciInfo_CcchDcchDtchUL (1,10); // TBS size = 328 bits @sic R5s170494 sic@
    f_NBIOT_ULGrantTransmission(nbiot_Cell1, cs_NB_UL_GrantScheduling_Start(cs_NB_SingleGrant(v_DciUlInfo)), v_TimingInfo4);
    
    //@siclog "Step 33" siclog@
    // Check: Does the UE transmit a STATUS PDU with ACK_SN=8?
    p_RLC_Rec.AM_VTA := v_VTS_Offset + 8; // @sic R5s170494 sic@
    f_NB_RxSTATUS_PDU_ACK(p_RLC_Rec);
    f_NBIOT_PreliminaryPass(__FILE__, __LINE__, "Step 33");
    
    //@siclog "Step 34" siclog@
    // Check: Does the UE transmit RLC UL SDU#7 and RLC UL SDU#8?
    v_RLC_Data1 := p_RLC_Rec.RLC_UL_DataList[tsc_RLC_SDU7];
    v_RLC_Data2 := p_RLC_Rec.RLC_UL_DataList[tsc_RLC_SDU8];
    f_NB_RxAMD_PDU (p_RLC_Rec,
                    tsc_P_Poll,
                    tsc_FI_FullSDU,
                    cr_FlexPart_1LI (v_RLC_UL_SDU_Length2),
                    {v_RLC_Data1, v_RLC_Data2});
    f_NBIOT_PreliminaryPass(__FILE__, __LINE__, "Step 34");
    
    //@siclog "Step 35" siclog@
    // The SS transmits a STATUS PDU.
    f_NB_TxSTATUS_PDU(p_RLC_Rec);
    
    v_TimingStart := f_NBIOT_GetNextSearchSpace(nbiot_Cell1);
    v_TimingInfo := cs_TimingInfo_SubFrameFull(f_NBIOT_IncrementSearchSpace(v_TimingStart, 1.0));
    v_TimingInfo1 := cs_TimingInfo_SubFrameFull(f_NBIOT_IncrementSearchSpace(v_TimingStart, 2.0));
    v_TimingInfo2 := cs_TimingInfo_SubFrameFull(f_NBIOT_IncrementSearchSpace(v_TimingStart, 3.0)); // @sic R5s170494 sic@
    v_TimingInfo3 := cs_TimingInfo_SubFrameFull(f_NBIOT_IncrementSearchSpace(v_TimingStart, 6.0));
    v_TimingInfo4 := cs_TimingInfo_SubFrameFull(f_NBIOT_IncrementSearchSpace(v_TimingStart, 7.0));
    
    //@siclog "Step 36" siclog@
    // The SS transmits an AMD PDU segment of AMD PDU#9 (AMD PDU#9 carries RLC DL SDU#9) containing the first 8 bytes of RLC DL SDU#9 in its data field. SO=0 and LSF=0. No header extension part is provided.
    p_RLC_Rec.AM_VTS := v_VTS_Offset + 8; // @sic R5s170494 sic@
    v_RLC_Data1 := substr(p_RLC_Rec.RLC_DataList[tsc_RLC_SDU9], 0, 8);
    f_NB_TxAMD_PDU_OneSeg(p_RLC_Rec,
                          v_TimingInfo,
                          tsc_P_NoPoll,
                          tsc_FI_StartOfSDU,
                          tsc_LSF_NotLast,
                          0,
                          v_RLC_Data1);
    
    //@siclog "Step 37" siclog@
    // The SS transmits an AMD PDU segment of AMD PDU#9 (AMD PDU#9 carries RLC DL SDU#9) containing the first 8 bytes of RLC DL SDU#9 in its data field. SO=0 and LSF=0. No header extension part is provided.
    L2DATA.send (cas_NB_SRB1bis_RLCAmDataReq(nbiot_Cell1,
                                             v_TimingInfo1,
                                             p_RLC_Rec.AMD_PDU));
                                              
    //@siclog "Step 38" siclog@
    // The SS transmits an AMD PDU segment of AMD PDU#9 (AMD PDU#9 carries RLC DL SDU#9) containing the last L-8 bytes of RLC DL SDU#9 in its data field, with the P-bit set. SO=8 and LSF=1. No header extension part is provided.
    p_RLC_Rec.AM_VTS := v_VTS_Offset + 8; // @sic R5s170494 sic@
    v_RLC_Data1 := substr(p_RLC_Rec.RLC_DataList[tsc_RLC_SDU9], 8, (8 + v_L));
    f_NB_TxAMD_PDU_OneSeg(p_RLC_Rec,
                          v_TimingInfo2,
                          tsc_P_Poll,
                          tsc_FI_EndOfSDU,
                          tsc_LSF_Last,
                          8,
                          v_RLC_Data1);
    
    //@siclog "Step 39" siclog@
    // In the search space of the 3rd NPDCCH period after the transmission at step 38 the SS schedules one UL Grant of size 56 bits, sufficient for one RLC STATUS PDU.
    v_DciUlInfo := cs_NB_DciInfo_CcchDcchDtchUL (1, 2); // TBS size = 56 bits
    f_NBIOT_ULGrantTransmission(nbiot_Cell1, cs_NB_UL_GrantScheduling_Start(cs_NB_SingleGrant(v_DciUlInfo)), v_TimingInfo3);
    
    //@siclog "Step 40A" siclog@
    // In the search space of the next NPDCCH period after the transmission at step 39 the SS schedules one UL Grant of size 176 bits, sufficient for one RLC UL SDU to be looped back.
    v_DciUlInfo := cs_NB_DciInfo_CcchDcchDtchUL (4, 2); // TBS size = 176 bits
    f_NBIOT_ULGrantTransmission(nbiot_Cell1, cs_NB_UL_GrantScheduling_Start(cs_NB_SingleGrant(v_DciUlInfo)), v_TimingInfo4);
    
    //@siclog "Step 40" siclog@
    // Check: Does the UE transmit a STATUS PDU with ACK_SN=9, thus acknowledging the reception of PDUs with SN=4 to SN=8, and no NACK_SN provided?
    p_RLC_Rec.AM_VTA := v_VTS_Offset + 9; // @sic R5s170494 sic@
    f_NB_RxSTATUS_PDU_ACK(p_RLC_Rec);
    f_NBIOT_PreliminaryPass(__FILE__, __LINE__, "Step 40");
    
    //@siclog "Step 41" siclog@
    // Check: Does the UE transmit RLC UL SDU#9?
    f_NB_RxAMD_SDU(p_RLC_Rec, tsc_P_Poll, tsc_RLC_SDU9);
    f_NBIOT_PreliminaryPass(__FILE__, __LINE__, "Step 41");
    
    //@siclog "Step 42" siclog@
    // The SS transmits a STATUS PDU.
    f_NB_TxSTATUS_PDU (p_RLC_Rec);
    
    v_TimingStart := f_NBIOT_GetNextSearchSpace(nbiot_Cell1);
    v_TimingInfo := cs_TimingInfo_SubFrameFull(f_NBIOT_IncrementSearchSpace(v_TimingStart, 1.0));
    v_TimingInfo1 := cs_TimingInfo_SubFrameFull(f_NBIOT_IncrementSearchSpace(v_TimingStart, 4.0)); // @sic R5s170494 sic@
    v_TimingInfo2 := cs_TimingInfo_SubFrameFull(f_NBIOT_IncrementSearchSpace(v_TimingStart, 5.0));
    v_TimingInfo3 := cs_TimingInfo_SubFrameFull(f_NBIOT_IncrementSearchSpace(v_TimingStart, 6.0));
    v_TimingInfo4 := cs_TimingInfo_SubFrameFull(f_NBIOT_IncrementSearchSpace(v_TimingStart, 9.0));
    v_TimingInfo5 := cs_TimingInfo_SubFrameFull(f_NBIOT_IncrementSearchSpace(v_TimingStart, 10.0));
    
    //@siclog "Step 43" siclog@
    // The SS transmits an AMD PDU segment of AMD PDU#11 (AMD PDU#11 carries RLC DL SDU#11) containing the last L-8 bytes of RLC DL SDU#11 in its data field, with the P-bit set. This AMD PDU segment is sent with SN=10. SO=8 and LSF=1. No header extension part is provided.
    p_RLC_Rec.AM_VTS := v_VTS_Offset + 10; // @sic R5s170494 sic@
    v_RLC_Data1 := substr(p_RLC_Rec.RLC_DataList[tsc_RLC_SDU11], 8, (8 + v_L));
    f_NB_TxAMD_PDU_OneSeg(p_RLC_Rec,
                          v_TimingInfo,
                          tsc_P_Poll,
                          tsc_FI_EndOfSDU,
                          tsc_LSF_Last,
                          8,
                          v_RLC_Data1);
    
    //@siclog "Step 44" siclog@
    // In the search space of the 3rd NPDCCH period after the transmission at step 43 the SS schedules one UL Grant of size 144 bits, sufficient for one RLC STATUS PDU.
    v_DciUlInfo := cs_NB_DciInfo_CcchDcchDtchUL(1, 5); // TBS size = 144 bits @sic R5s170494 sic@
    f_NBIOT_ULGrantTransmission(nbiot_Cell1, cs_NB_UL_GrantScheduling_Start(cs_NB_SingleGrant(v_DciUlInfo)), v_TimingInfo1);
    
    //@siclog "Step 45" siclog@
    // Check: Does the UE transmit a STATUS PDU with ACK_SN=11, thus acknowledging the reception of PDUs with SN=4 to SN=10, and NACK_SN=9, E1/E2 field for receipt of PDU#9 and NACK_SN=10, SOStart=0/SOEnd=7 for segment 1 of PDU#11?
    p_RLC_Rec.AM_VTA := v_VTS_Offset + 11; // @sic R5s170494 sic@
    v_NACK_List := cr_NACK_List_2NACKs(v_VTS_Offset + 9, // @sic R5s170494 sic@
                                       tsc_E2_SO_Follows,
                                       cr_Status_SO(int2bit(0, tsc_AM_SO_Size), tsc_SO_Special),
                                       v_VTS_Offset + 10, // @sic R5s170494 sic@
                                       tsc_E2_SO_Follows,
                                       cr_Status_SO(int2bit(0, tsc_AM_SO_Size), int2bit(7, tsc_AM_SO_Size)));
    v_NACK_List1 := cr_NACK_List_2NACKs(v_VTS_Offset + 9, // @sic R5s170494 sic@
                                        tsc_E2_NoSO_Follows,
                                        omit,
                                        v_VTS_Offset + 10, // @sic R5s170494 sic@
                                        tsc_E2_SO_Follows,
                                        cr_Status_SO(int2bit(0, tsc_AM_SO_Size), int2bit(7, tsc_AM_SO_Size)));
    alt {
      [] L2DATA.receive(car_NB_SRB1bis_RLCStatusInd(nbiot_Cell1,
                                                    cr_STATUS_PDU_Nack(p_RLC_Rec.AM_VTA,
                                                                       v_NACK_List,
                                                                       v_Padding_5bits_Any)))
        {
          f_NBIOT_PreliminaryPass(__FILE__, __LINE__, "Step 45");
        }
      [] L2DATA.receive(car_NB_SRB1bis_RLCStatusInd(nbiot_Cell1,
                                                    cr_STATUS_PDU_Nack(p_RLC_Rec.AM_VTA,
                                                                       v_NACK_List1,
                                                                       v_Padding_3bits_Any)))
        {
          f_NBIOT_PreliminaryPass(__FILE__, __LINE__, "Step 45");
        }
    }
    
    //@siclog "Step 46" siclog@
    // The SS transmits an AMD PDU segment of AMD PDU#11 (AMD PDU#11 carries RLC DL SDU#11) containing the first 8 bytes of RLC DL SDU#11 in its data field. SO=0 and LSF=0. No header extension part is provided.
    p_RLC_Rec.AM_VTS := v_VTS_Offset + 10; // @sic R5s170494 sic@
    v_RLC_Data1 := substr(p_RLC_Rec.RLC_DataList[tsc_RLC_SDU11], 0, 8);
    f_NB_TxAMD_PDU_OneSeg(p_RLC_Rec,
                          v_TimingInfo2,
                          tsc_P_NoPoll,
                          tsc_FI_StartOfSDU,
                          tsc_LSF_NotLast,
                           0,
                          v_RLC_Data1);
    
    //@siclog "Step 47" siclog@
    // The SS transmits one AMD PDU containing RLC DL SDU#10 (L bytes) in its data field, with the P-bit set.
    p_RLC_Rec.AM_VTS := v_VTS_Offset + 9; // @sic R5s170494 sic@
    f_NB_TxAMD_SDU(p_RLC_Rec,
                   v_TimingInfo3,
                   tsc_P_Poll,
                   tsc_RLC_SDU10);
    
    //@siclog "Step 48" siclog@
    // In the search space of the 3rd NPDCCH period after the transmission at step 47 the SS schedules one UL Grant of size 56 bits, sufficient for one RLC STATUS PDU.
    v_DciUlInfo := cs_NB_DciInfo_CcchDcchDtchUL(1, 2); // TBS size = 56 bits
    f_NBIOT_ULGrantTransmission(nbiot_Cell1, cs_NB_UL_GrantScheduling_Start(cs_NB_SingleGrant(v_DciUlInfo)), v_TimingInfo4);
    
    //@siclog "Step 49A" siclog@
    // In the search space of the next NPDCCH period after the transmission at step 48 the SS schedules one UL Grant of size 328 bits, sufficient for two RLC UL SDUs to be looped back.
    v_DciUlInfo := cs_NB_DciInfo_CcchDcchDtchUL (1, 10); // TBS size = 328 bits @sic R5s170494 sic@
    f_NBIOT_ULGrantTransmission(nbiot_Cell1, cs_NB_UL_GrantScheduling_Start(cs_NB_SingleGrant(v_DciUlInfo)), v_TimingInfo5);

    //@siclog "Step 49" siclog@
    // The UE transmits a STATUS PDU with ACK_SN=11, thus acknowledging the reception of PDUs with SN=4 to SN=10, and no NACK_SN provided.
    p_RLC_Rec.AM_VTA := v_VTS_Offset + 11; // @sic R5s170494 sic@
    f_NB_RxSTATUS_PDU_ACK(p_RLC_Rec);
    f_NBIOT_PreliminaryPass(__FILE__, __LINE__, "Step 49");
    
    //@siclog "Step 50" siclog@
    // Check: Does the UE transmit RLC UL SDU#10 and RLC UL SDU#11?
    v_RLC_Data1 := p_RLC_Rec.RLC_UL_DataList[tsc_RLC_SDU10];
    v_RLC_Data2 := p_RLC_Rec.RLC_UL_DataList[tsc_RLC_SDU11];
    f_NB_RxAMD_PDU(p_RLC_Rec,
                   tsc_P_Poll,
                   tsc_FI_FullSDU,
                   cr_FlexPart_1LI (v_RLC_UL_SDU_Length2),
                   {v_RLC_Data1, v_RLC_Data2});
    f_NBIOT_PreliminaryPass(__FILE__, __LINE__, "Step 50");
    
    //@siclog "Step 51" siclog@
    // The SS transmits a STATUS PDU.
    f_NB_TxSTATUS_PDU (p_RLC_Rec);
    
    //Note: In steps 52 to 62 the size of the RLC SDUs used in uplink will be 10 octets. The size of the RLC SDUs used in downlink is L.
    v_L := v_RLC_DL_SDU_Length3 - v_RLC_UL_SDU_Length3; // RLC DL SDU length - RLC UL SDU length, Length difference is the NAS and RRC  overhead

    v_TimingStart := f_NBIOT_GetNextSearchSpace(nbiot_Cell1);
    v_TimingInfo := cs_TimingInfo_SubFrameFull(f_NBIOT_IncrementSearchSpace(v_TimingStart, 1.0));
    v_TimingInfo1 := cs_TimingInfo_SubFrameFull(f_NBIOT_IncrementSearchSpace(v_TimingStart, 4.0)); // @sic R5s170494 sic@
    v_TimingInfo2 := cs_TimingInfo_SubFrameFull(f_NBIOT_IncrementSearchSpace(v_TimingStart, 5.0));
    v_TimingInfo3 := cs_TimingInfo_SubFrameFull(f_NBIOT_IncrementSearchSpace(v_TimingStart, 8.0));
    v_TimingInfo4 := cs_TimingInfo_SubFrameFull(f_NBIOT_IncrementSearchSpace(v_TimingStart, 9.0));
    v_TimingInfo5 := cs_TimingInfo_SubFrameFull(f_NBIOT_IncrementSearchSpace(v_TimingStart, 12.0));
    v_TimingInfo6 := cs_TimingInfo_SubFrameFull(f_NBIOT_IncrementSearchSpace(v_TimingStart, 13.0));
    
    //@siclog "Step 52" siclog@
    // The SS transmits an AMD PDU segment of AMD PDU#12 (AMD PDU#12 carries RLC DL SDU#12, RLC DL SDU#13 and RLC DL SDU#14) containing the last L-6 bytes of RLC DL SDU#13 and the complete RLC DL SDU#14 (L bytes) in its data field,
    // with the P-bit set. FI=10, SO=L+6 and LSF=1. Header extension part present: E in fixed part header=1, E in extension part header=0, LI=L-6.
    p_RLC_Rec.AM_VTS := v_VTS_Offset + 11; // @sic R5s170494 sic@
    v_RLC_Data1 := substr(p_RLC_Rec.RLC_DataList[tsc_RLC_SDU13], 6, 4 + v_L);
    v_RLC_Data2 := p_RLC_Rec.RLC_DataList[tsc_RLC_SDU14];
    f_NB_TxAMD_SegList(p_RLC_Rec,
                       v_TimingInfo,
                       tsc_P_Poll,
                       tsc_FI_EndOfSDU,
                       tsc_LSF_Last,
                       v_RLC_DL_SDU_Length3 + 6,
                       {v_RLC_Data1, v_RLC_Data2});

    //@siclog "Step 53" siclog@
    // In the search space of the 3rd NPDCCH period after the transmission at step 52 the SS schedules one UL Grant of size 104 bits, sufficient for one RLC STATUS PDU.
    v_DciUlInfo := cs_NB_DciInfo_CcchDcchDtchUL(1, 3); // TBS size = 104 bits
    f_NBIOT_ULGrantTransmission(nbiot_Cell1, cs_NB_UL_GrantScheduling_Start(cs_NB_SingleGrant(v_DciUlInfo)), v_TimingInfo1);
    
    //@siclog "Step 54" siclog@
    // The UE transmits a STATUS PDU NACK_SN field for receipt of PDU#12. ACK_SN=12, NACK_SN=11, SOStart=0/SOEnd=L+5.
    p_RLC_Rec.AM_VTA := v_VTS_Offset + 12; // @sic R5s170494 sic@
    v_NACK_List := cr_NACK_List(v_VTS_Offset + 11, // @sic R5s170494 sic@
                                tsc_E2_SO_Follows,
                                cr_Status_SO(int2bit(0, tsc_AM_SO_Size), int2bit(v_RLC_DL_SDU_Length3 + 5, tsc_AM_SO_Size)));
    f_NB_RxSTATUS_PDU_NACK(p_RLC_Rec, v_NACK_List, v_Padding_7bits_Any);

    //@siclog "Step 55" siclog@
    // The SS transmits an AMD PDU segment of AMD PDU#12 (AMD PDU#12 carries RLC DL SDU#12, RLC DL SDU#13 and RLC DL SDU#14) containing the last L-6 bytes of RLC DL SDU#12 and the first 6 bytes of RLC DL SDU#13 in its data field,
    // with the P-bit set. FI=11, SO=6 and LSF=0. Header extension part present: E in fixed part header=1, E in extension part header=0, LI=L-6.
    p_RLC_Rec.AM_VTS := v_VTS_Offset + 11; // @sic R5s170494 sic@
    v_RLC_Data1 := substr(p_RLC_Rec.RLC_DataList[tsc_RLC_SDU12], 6, 4 + v_L);
    v_RLC_Data2 := substr(p_RLC_Rec.RLC_DataList[tsc_RLC_SDU13], 0, 6);
    f_NB_TxAMD_SegList(p_RLC_Rec,
                       v_TimingInfo2,
                       tsc_P_Poll,
                       tsc_FI_MiddleOfSDU,
                       tsc_LSF_NotLast,
                       6,
                       {v_RLC_Data1, v_RLC_Data2});
    
    //@siclog "Step 56" siclog@
    // In the search space of the 3rd NPDCCH period after the transmission at step 55 the SS schedules one UL Grant of size 104 bits, sufficient for one RLC STATUS PDU.
    v_DciUlInfo := cs_NB_DciInfo_CcchDcchDtchUL (1, 3); // TBS size = 104 bits
    f_NBIOT_ULGrantTransmission(nbiot_Cell1, cs_NB_UL_GrantScheduling_Start(cs_NB_SingleGrant(v_DciUlInfo)), v_TimingInfo3);
    
    //@siclog "Step 57" siclog@
    // The UE transmits a STATUS PDU NACK_SN field for receipt of PDU#12. ACK_SN=12, NACK_SN=11, SOStart=0/SOEnd=5.
    p_RLC_Rec.AM_VTA := v_VTS_Offset + 12; // @sic R5s170494 sic@
    v_NACK_List := cr_NACK_List(v_VTS_Offset + 11, // @sic R5s170494 sic@
                                tsc_E2_SO_Follows,
                                cr_Status_SO(int2bit(0, tsc_AM_SO_Size), int2bit(5, tsc_AM_SO_Size)));
    f_NB_RxSTATUS_PDU_NACK(p_RLC_Rec, v_NACK_List, v_Padding_7bits_Any);
    f_NBIOT_PreliminaryPass(__FILE__, __LINE__, "Step 57");
    
    //@siclog "Step 58" siclog@
    // The SS transmits an AMD PDU segment of AMD PDU#12 (AMD PDU#12 carries RLC DL SDU#12, RLC DL SDU#13 and SDU#14) containing the first 6 bytes of SDU#12 in its data field, with the P-bit set. FI=01, SO=0 and LSF=0. No header extension part is provided.
    p_RLC_Rec.AM_VTS := v_VTS_Offset + 11; // @sic R5s170494 sic@
    v_RLC_Data1 := substr(p_RLC_Rec.RLC_DataList[tsc_RLC_SDU12], 0, 6);
    f_NB_TxAMD_PDU_OneSeg(p_RLC_Rec,
                          v_TimingInfo4,
                          tsc_P_Poll,
                          tsc_FI_StartOfSDU,
                          tsc_LSF_NotLast,
                          0,
                          v_RLC_Data1);
    
    //@siclog "Step 59" siclog@
    // In the search space of the 3rd NPDCCH period after the transmission at step 58 the SS schedules one UL Grant of size 56 bits, sufficient for one RLC STATUS PDU.
    v_DciUlInfo := cs_NB_DciInfo_CcchDcchDtchUL(1, 2); // TBS size = 56 bits
    f_NBIOT_ULGrantTransmission(nbiot_Cell1, cs_NB_UL_GrantScheduling_Start(cs_NB_SingleGrant(v_DciUlInfo)), v_TimingInfo5);

    //@siclog "Step 60A" siclog@
    // In the search space of the next NPDCCH period after the transmission at step 59 the SS schedules one UL Grant of size 328 bits, sufficient for three RLC UL SDUs to be looped back.
    v_DciUlInfo := cs_NB_DciInfo_CcchDcchDtchUL (1,10); // TBS size = 328 bits @sic R5s170494 sic@
    f_NBIOT_ULGrantTransmission(nbiot_Cell1, cs_NB_UL_GrantScheduling_Start(cs_NB_SingleGrant(v_DciUlInfo)), v_TimingInfo6);
    
    //@siclog "Step 60" siclog@
    // Check: Does the UE transmit a STATUS PDU with ACK_SN=12, thus acknowledging the reception of PDUs with SN=4 to SN=11, and no NACK_SN provided?
    p_RLC_Rec.AM_VTA := v_VTS_Offset + 12; // @sic R5s170494 sic@
    f_NB_RxSTATUS_PDU_ACK(p_RLC_Rec);
    f_NBIOT_PreliminaryPass(__FILE__, __LINE__, "Step 60");

    //@siclog "Step 61" siclog@
    // Check: Does the UE transmit RLC UL SDU#12, RLC UL SDU#13 and RLC UL SDU#14?
    v_RLC_Data1 := p_RLC_Rec.RLC_UL_DataList[tsc_RLC_SDU12];
    v_RLC_Data2 := p_RLC_Rec.RLC_UL_DataList[tsc_RLC_SDU13];
    v_RLC_Data3 := p_RLC_Rec.RLC_UL_DataList[tsc_RLC_SDU14];
    f_NB_RxAMD_PDU(p_RLC_Rec,
                   tsc_P_Poll,
                   tsc_FI_FullSDU,
                   cr_FlexPart_2LIs (v_RLC_UL_SDU_Length3, v_RLC_UL_SDU_Length3),
                   {v_RLC_Data1, v_RLC_Data2, v_RLC_Data3});
    f_NBIOT_PreliminaryPass(__FILE__, __LINE__, "Step 61");
    
    //@siclog "Step 62" siclog@
    // The SS transmits a STATUS PDU.
    f_NB_TxSTATUS_PDU(p_RLC_Rec);

    //Note: In steps 63 to 93 the size of the RLC SDUs used in uplink will be 32 octets. The size of the RLC SDUs used in downlink is L.
    v_L := v_RLC_DL_SDU_Length4 - v_RLC_UL_SDU_Length4; // RLC DL SDU length - RLC UL SDU length, Length difference is the NAS and RRC  overhead

    v_TimingStart := f_NBIOT_GetNextSearchSpace(nbiot_Cell1);
    v_TimingInfo := cs_TimingInfo_SubFrameFull(f_NBIOT_IncrementSearchSpace(v_TimingStart, 1.0));
    v_TimingInfo1 := cs_TimingInfo_SubFrameFull(f_NBIOT_IncrementSearchSpace(v_TimingStart, 2.0));
    v_TimingInfo2 := cs_TimingInfo_SubFrameFull(f_NBIOT_IncrementSearchSpace(v_TimingStart, 3.0));
    v_TimingInfo3 := cs_TimingInfo_SubFrameFull(f_NBIOT_IncrementSearchSpace(v_TimingStart, 4.0));
    v_TimingInfo4 := cs_TimingInfo_SubFrameFull(f_NBIOT_IncrementSearchSpace(v_TimingStart, 5.0));
    v_TimingInfo5 := cs_TimingInfo_SubFrameFull(f_NBIOT_IncrementSearchSpace(v_TimingStart, 6.0));
    v_TimingInfo6 := cs_TimingInfo_SubFrameFull(f_NBIOT_IncrementSearchSpace(v_TimingStart, 7.0));
    v_TimingInfo7 := cs_TimingInfo_SubFrameFull(f_NBIOT_IncrementSearchSpace(v_TimingStart, 8.0));
    v_TimingInfo8 := cs_TimingInfo_SubFrameFull(f_NBIOT_IncrementSearchSpace(v_TimingStart, 9.0));
    v_TimingInfo9 := cs_TimingInfo_SubFrameFull(f_NBIOT_IncrementSearchSpace(v_TimingStart, 10.0));
    v_TimingInfo10 := cs_TimingInfo_SubFrameFull(f_NBIOT_IncrementSearchSpace(v_TimingStart, 11.0));
    v_TimingInfo11 := cs_TimingInfo_SubFrameFull(f_NBIOT_IncrementSearchSpace(v_TimingStart, 14.0)); // @sic R5s170494 sic@
    v_TimingInfo12 := cs_TimingInfo_SubFrameFull(f_NBIOT_IncrementSearchSpace(v_TimingStart, 15.0)); // @sic R5s170494 sic@

    //@siclog "Step 63" siclog@
    // The SS transmits one AMD PDU containing RLC DL SDU#22 (L bytes) in its data field to the UE. SN=19 indicates the loss of 7 PDUs.
    p_RLC_Rec.AM_VTS := v_VTS_Offset + 19; // @sic R5s170494 sic@
    f_NB_TxAMD_SDU(p_RLC_Rec, v_TimingInfo, tsc_P_NoPoll, tsc_RLC_SDU22);

    //@siclog "Step 64" siclog@
    // The SS transmits one AMD PDU segment containing 16 bytes of RLC DL SDU#15 in its data field to the UE. This AMD PDU segment carries part 1 of AMD PDU#13, which contained RLC DL SDU#15 (L bytes) in its data field. SO=0 and LSF=0.
    p_RLC_Rec.AM_VTS := v_VTS_Offset + 12; // @sic R5s170494 sic@
    v_RLC_Data1 := substr(p_RLC_Rec.RLC_DataList[tsc_RLC_SDU15], 0, 16);
    f_NB_TxAMD_PDU_OneSeg(p_RLC_Rec,
                          v_TimingInfo1,
                          tsc_P_NoPoll,
                          tsc_FI_StartOfSDU,
                          tsc_LSF_NotLast,
                          0,
                          v_RLC_Data1);
    
    //@siclog "Step 65" siclog@
    // The SS transmits one AMD PDU segment containing L-16 bytes of RLC DL SDU#16 in its data field to the UE. This AMD PDU segment carries part 2 of AMD PDU#14, which contained RLC DL SDU#16 (L  bytes) in its data field. SO=16 and LSF=1.
    p_RLC_Rec.AM_VTS := v_VTS_Offset + 13; // @sic R5s170494 sic@
    v_RLC_Data1 := substr(p_RLC_Rec.RLC_DataList[tsc_RLC_SDU16], 16, (16 + v_L));
    f_NB_TxAMD_PDU_OneSeg(p_RLC_Rec,
                          v_TimingInfo2,
                          tsc_P_NoPoll,
                          tsc_FI_EndOfSDU,
                          tsc_LSF_Last,
                          16,
                          v_RLC_Data1);
    
    //@siclog "Step 66" siclog@
    // The SS transmits one AMD PDU segment containing 16 bytes of RLC DL SDU#17 in its data field to the UE. This AMD PDU segment carries part 1 of AMD PDU#15, which contained RLC DL SDU#17 (L bytes) in its data field. SO=0 and LSF=0.
    p_RLC_Rec.AM_VTS := v_VTS_Offset + 14; // @sic R5s170494 sic@
    v_RLC_Data1 := substr(p_RLC_Rec.RLC_DataList[tsc_RLC_SDU17], 0, 16);
    f_NB_TxAMD_PDU_OneSeg(p_RLC_Rec,
                          v_TimingInfo3,
                          tsc_P_NoPoll,
                          tsc_FI_StartOfSDU,
                          tsc_LSF_NotLast,
                          0,
                          v_RLC_Data1);
    
    //@siclog "Step 67" siclog@
    // The SS transmits one AMD PDU segment containing L-16 bytes of RLC DL SDU#18 in its data field to the UE. This AMD PDU segment carries part 2 of AMD PDU#16, which contained RLC DL SDU#18 (L bytes) in its data field. SO=16 and LSF=1.
    p_RLC_Rec.AM_VTS := v_VTS_Offset + 15; // @sic R5s170494 sic@
    v_RLC_Data1 := substr(p_RLC_Rec.RLC_DataList[tsc_RLC_SDU18], 16, (16 + v_L));
    f_NB_TxAMD_PDU_OneSeg(p_RLC_Rec,
                          v_TimingInfo4,
                          tsc_P_NoPoll,
                          tsc_FI_EndOfSDU,
                          tsc_LSF_Last,
                          16,
                          v_RLC_Data1);
    
    //@siclog "Step 68" siclog@
    // The SS transmits one AMD PDU segment containing 16 bytes of RLC DL SDU#18 in its data field to the UE. This AMD PDU segment carries part 1of AMD PDU#16, which contained RLC DL SDU#18 (L bytes) in its data field. SO=0 and LSF=0.
    p_RLC_Rec.AM_VTS := v_VTS_Offset + 15; // @sic R5s170494 sic@
    v_RLC_Data1 := substr(p_RLC_Rec.RLC_DataList[tsc_RLC_SDU18], 0, 16);
    f_NB_TxAMD_PDU_OneSeg(p_RLC_Rec,
                          v_TimingInfo5,
                          tsc_P_NoPoll,
                          tsc_FI_StartOfSDU,
                          tsc_LSF_NotLast,
                          0,
                          v_RLC_Data1);

    //@siclog "Step 69" siclog@
    // The SS transmits one AMD PDU segment containing L-16 bytes of RLC DL SDU#15 in its data field to the UE. This AMD PDU segment carries part 2 of AMD PDU#13, which contained RLC DL SDU#15 (L bytes) in its data field. SO=16 and LSF=1.
    p_RLC_Rec.AM_VTS := v_VTS_Offset + 12; // @sic R5s170494 sic@
    v_RLC_Data1 := substr(p_RLC_Rec.RLC_DataList[tsc_RLC_SDU15], 16, (16 + v_L));
    f_NB_TxAMD_PDU_OneSeg(p_RLC_Rec,
                          v_TimingInfo6,
                          tsc_P_NoPoll,
                          tsc_FI_EndOfSDU,
                          tsc_LSF_Last,
                          16,
                          v_RLC_Data1);
    
    //@siclog "Step 70" siclog@
    // The SS transmits one AMD PDU segment containing 16 bytes of RLC DL SDU#16 in its data field to the UE. This AMD PDU segment carries part 1 of AMD PDU#14, which contained RLC DL SDU#16 (L bytes) in its data field. SO=0 and LSF=0.
    p_RLC_Rec.AM_VTS := v_VTS_Offset + 13; // @sic R5s170494 sic@
    v_RLC_Data1 := substr(p_RLC_Rec.RLC_DataList[tsc_RLC_SDU16], 0, 16);
    f_NB_TxAMD_PDU_OneSeg(p_RLC_Rec,
                          v_TimingInfo7,
                          tsc_P_NoPoll,
                          tsc_FI_StartOfSDU,
                          tsc_LSF_NotLast,
                           0,
                          v_RLC_Data1);
    
    //@siclog "Step 71" siclog@
    // The SS transmits one AMD PDU segment containing L-16 bytes of RLC DL SDU#17 in its data field to the UE. This AMD PDU segment carries part 2 of PDU#15, which contained RLC DL SDU#17 (L bytes) in its data field. SO=16 and LSF=1.
    p_RLC_Rec.AM_VTS := v_VTS_Offset + 14; // @sic R5s170494 sic@
    v_RLC_Data1 := substr(p_RLC_Rec.RLC_DataList[tsc_RLC_SDU17], 16, (16 + v_L));
    f_NB_TxAMD_PDU_OneSeg(p_RLC_Rec,
                          v_TimingInfo8,
                          tsc_P_NoPoll,
                          tsc_FI_EndOfSDU,
                          tsc_LSF_Last,
                          16,
                          v_RLC_Data1);
    
    //@siclog "Step 72" siclog@
    // The SS transmits one AMD PDU segment containing 16 bytes of RLC DL SDU#21 in its data field to the UE. This AMD PDU segment carries part  1 of PDU #19, which contained RLC DL SDU#21 (L bytes) in its data field. SO=0 and LSF=0.
    p_RLC_Rec.AM_VTS := v_VTS_Offset + 18; // @sic R5s170494 sic@
    v_RLC_Data1 := substr(p_RLC_Rec.RLC_DataList[tsc_RLC_SDU21], 0, 16);
    f_NB_TxAMD_PDU_OneSeg(p_RLC_Rec,
                          v_TimingInfo9,
                          tsc_P_NoPoll,
                          tsc_FI_StartOfSDU,
                          tsc_LSF_NotLast,
                          0,
                          v_RLC_Data1);
    
    //@siclog "Step 73" siclog@
    // The SS transmits one AMD PDU segment containing L-16 bytes of RLC DL SDU#20 in its data field to the UE. This AMD PDU segment carries segment 2 of AMD PDU#18, which contained RLC DL SDU#20 (L bytes) in its data field. SO=16 and LSF=1.
    p_RLC_Rec.AM_VTS := v_VTS_Offset + 17; // @sic R5s170494 sic@
    v_RLC_Data1 := substr(p_RLC_Rec.RLC_DataList[tsc_RLC_SDU20], 16, (16 + v_L));
    f_NB_TxAMD_PDU_OneSeg(p_RLC_Rec,
                          v_TimingInfo10,
                          tsc_P_NoPoll,
                          tsc_FI_EndOfSDU,
                          tsc_LSF_Last,
                          16,
                          v_RLC_Data1);
    
    //@siclog "Step 73A" siclog@
    // In the search space of the 3rd NPDCCH period after the transmission at step 73 the SS allocates one UL Grant of size 144 bits, sufficient for one RLC STATUS PDU.
    v_DciUlInfo := cs_NB_DciInfo_CcchDcchDtchUL (1, 5); // TBS size = 144 bits (13 octets + 5 octets overhead)
    f_NBIOT_ULGrantTransmission(nbiot_Cell1, cs_NB_UL_GrantScheduling_Start(cs_NB_SingleGrant(v_DciUlInfo)), v_TimingInfo11); // @sic R5s170494 sic@
    
    //@siclog "Step 74" siclog@
    // In the search space of the next NPDCCH period after the transmission at step 73A the SS schedules four UL Grants of size 296 bits, each one sufficient for one RLC UL SDU to be looped back.
    v_DciUlInfo := cs_NB_DciInfo_CcchDcchDtchUL (1,9);  // UL Grant of 296 bits
    f_NBIOT_ULGrantTransmission(nbiot_Cell1, cs_NB_UL_GrantScheduling_Start(cs_NB_PeriodicGrant(v_DciUlInfo, 4)), v_TimingInfo12);
    
    //@siclog "Step 73B" siclog@
    // Check: Does the UE transmit a Status Report with NACK_SN=16, NACK_SN=17 with SOStart=0 and SOEnd=15, and NACK_SN=18 with SOStart=16 and SOEnd=32767 (special SOEnd value), and ACK_SN=20?
    p_RLC_Rec.AM_VTA := v_VTS_Offset + 20;
    v_NACK_List := cr_NACK_List_3NACKs(v_VTS_Offset + 16,
                                       tsc_E2_NoSO_Follows,
                                       omit,
                                       v_VTS_Offset + 17,
                                       tsc_E2_SO_Follows,
                                       cr_Status_SO(int2bit(0, tsc_AM_SO_Size), int2bit(15, tsc_AM_SO_Size)),
                                       v_VTS_Offset + 18,
                                       tsc_E2_SO_Follows,
                                       cr_Status_SO(int2bit(16, tsc_AM_SO_Size), tsc_SO_Special));
    f_NB_RxSTATUS_PDU_NACK(p_RLC_Rec, v_NACK_List, v_Padding_1bit_Any);
    f_NBIOT_PreliminaryPass(__FILE__, __LINE__, "Step 73B"); // @sic R5s170494 sic@
    
    //@siclog "Step 75" siclog@
    // Check: Does the UE transmit an RLC UL SDU containing SDU#15 in its data field?
    f_NB_RxAMD_SDU(p_RLC_Rec, tsc_P_NoPoll, tsc_RLC_SDU15);
    f_NBIOT_PreliminaryPass(__FILE__, __LINE__, "Step 75");
    
    //@siclog "Step 76" siclog@
    // Check: Does the UE transmit an RLC UL SDU containing SDU#16 in its data field?
    f_NB_RxAMD_SDU(p_RLC_Rec, tsc_P_NoPoll, tsc_RLC_SDU16);
    f_NBIOT_PreliminaryPass(__FILE__, __LINE__, "Step 76");
    
    //@siclog "Step 77" siclog@
    // Check: Does the UE transmit an RLC UL SDU containing SDU#17 in its data field?
    f_NB_RxAMD_SDU(p_RLC_Rec, tsc_P_NoPoll, tsc_RLC_SDU17);
    f_NBIOT_PreliminaryPass(__FILE__, __LINE__, "Step 77");
    
    //@siclog "Step 78" siclog@
    // Check: Does the UE transmit an RLC UL SDU containing SDU#18 in its data field?
    f_NB_RxAMD_SDU(p_RLC_Rec, tsc_P_Poll, tsc_RLC_SDU18);
    f_NBIOT_PreliminaryPass(__FILE__, __LINE__, "Step 78");
    
    //@siclog "Step 79" siclog@
    // The SS transmits an RLC STATUS PDU to the UE. This PDU acks PDUs up to those including SDU#18. ACK_SN=13.
    f_NB_TxSTATUS_PDU (p_RLC_Rec);
    
    //@siclog "Step 80" siclog@
    // Void.
        
    //@siclog "Step 81" siclog@
    // Void.

    v_TimingStart := f_NBIOT_GetNextSearchSpace(nbiot_Cell1);
    v_TimingInfo := cs_TimingInfo_SubFrameFull(f_NBIOT_IncrementSearchSpace(v_TimingStart, 1.0));
    v_TimingInfo1 := cs_TimingInfo_SubFrameFull(f_NBIOT_IncrementSearchSpace(v_TimingStart, 2.0));
    v_TimingInfo2 := cs_TimingInfo_SubFrameFull(f_NBIOT_IncrementSearchSpace(v_TimingStart, 3.0));
    v_TimingInfo3 := cs_TimingInfo_SubFrameFull(f_NBIOT_IncrementSearchSpace(v_TimingStart, 6.0)); // @sic R5s170494 sic@
    v_TimingInfo4 := cs_TimingInfo_SubFrameFull(f_NBIOT_IncrementSearchSpace(v_TimingStart, 7.0));
    v_TimingInfo5 := cs_TimingInfo_SubFrameFull(f_NBIOT_IncrementSearchSpace(v_TimingStart, 10.0));
    
    //@siclog "Step 82" siclog@
    // The SS transmits one AMD PDU segment containing L-16 bytes of RLC DL SDU#21 in its data field to the UE. This AMD PDU segment carries part 2 of AMD PDU#19, which contained RLC DL SDU#21 (L bytes) in its data field. SO=16 and LSF=1.
    p_RLC_Rec.AM_VTS := v_VTS_Offset + 18; // @sic R5s170494 sic@
    v_RLC_Data1 := substr(p_RLC_Rec.RLC_DataList[tsc_RLC_SDU21], 16, (16 + v_L));
    f_NB_TxAMD_PDU_OneSeg(p_RLC_Rec,
                          v_TimingInfo, // @sic R5s170494 sic@
                          tsc_P_NoPoll,
                          tsc_FI_EndOfSDU,
                          tsc_LSF_Last,
                          16,
                          v_RLC_Data1);

    //@siclog "Step 83" siclog@
    // The SS transmits one AMD PDU segment containing 16 bytes of RLC DL SDU#20 in its data field to the UE. This AMD PDU segment carries part 1 of AMD PDU#18, which contained RLC DL SDU#20 (L bytes) in its data field. SO=0 and LSF=0.
    p_RLC_Rec.AM_VTS := v_VTS_Offset + 17; // @sic R5s170494 sic@
    v_RLC_Data1 := substr(p_RLC_Rec.RLC_DataList[tsc_RLC_SDU20], 0, 16);
    f_NB_TxAMD_PDU_OneSeg(p_RLC_Rec,
                          v_TimingInfo1, // @sic R5s170494 sic@
                          tsc_P_NoPoll,
                          tsc_FI_StartOfSDU,
                          tsc_LSF_NotLast,
                          0,
                          v_RLC_Data1);
    
    //@siclog "Step 84" siclog@
    // The SS transmits one AMD PDU segment containing 16 bytes of RLC DL SDU#19 in its data field to the UE. This AMD PDU segment carries part 1 of AMD PDU#17, which contained RLC DL SDU#19 (L  bytes) in its data field. SO=0 and LSF=0.
    p_RLC_Rec.AM_VTS := v_VTS_Offset + 16; // @sic R5s170494 sic@
    v_RLC_Data1 := substr(p_RLC_Rec.RLC_DataList[tsc_RLC_SDU19], 0, 16);
    f_NB_TxAMD_PDU_OneSeg(p_RLC_Rec,
                          v_TimingInfo2, // @sic R5s170494 sic@
                          tsc_P_NoPoll,
                          tsc_FI_StartOfSDU,
                          tsc_LSF_NotLast,
                          0,
                          v_RLC_Data1);
    
    //@siclog "Step 85" siclog@
    // In the search space of the 3rd NPDCCH period after the transmission at step 84 the SS schedules one UL Grant of size 104 bits, sufficient for one RLC STATUS PDU.
    v_DciUlInfo := cs_NB_DciInfo_CcchDcchDtchUL (1, 3); // TBS size = 104 bits
    f_NBIOT_ULGrantTransmission(nbiot_Cell1, cs_NB_UL_GrantScheduling_Start(cs_NB_SingleGrant(v_DciUlInfo)), v_TimingInfo3); // @sic R5s170494 sic@
    
    //@siclog "Step 86" siclog@
    // Check: Does the UE transmit a Status Report with NACK_SN=16 with SOStart=16 and SOEnd=32767 (special SOEnd value), and ACK_SN=20?
    p_RLC_Rec.AM_VTA := v_VTS_Offset + 20; // @sic R5s170494 sic@
    v_NACK_List := cr_NACK_List(v_VTS_Offset + 16, // @sic R5s170494 sic@
                                tsc_E2_SO_Follows,
                                cr_Status_SO(int2bit(16, tsc_AM_SO_Size), tsc_SO_Special));
    f_NB_RxSTATUS_PDU_NACK(p_RLC_Rec, v_NACK_List, v_Padding_7bits_Any);
    f_NBIOT_PreliminaryPass(__FILE__, __LINE__, "Step 86");
    
    //@siclog "Step 87" siclog@
    // The SS transmits one AMD PDU segment containing L-16 bytes of RLC DL SDU#19 in its data field to the UE. This AMD PDU segment carries part 2 of AMD PDU#17, which contained RLC DL SDU#19 (L bytes) in its data field. SO=16 and LSF=1.
    p_RLC_Rec.AM_VTS := v_VTS_Offset + 16; // @sic R5s170494 sic@
    v_RLC_Data1 := substr(p_RLC_Rec.RLC_DataList[tsc_RLC_SDU19], 16, (16 + v_L));
    f_NB_TxAMD_PDU_OneSeg(p_RLC_Rec,
                          v_TimingInfo4, // @sic R5s170494 sic@
                          tsc_P_NoPoll,
                          tsc_FI_EndOfSDU,
                          tsc_LSF_Last,
                          16,
                          v_RLC_Data1);
    
    //@siclog "Step 88" siclog@
    // In the search space of the 3rd NPDCCH period after the transmission at step 87 the SS schedules four UL Grants of size 296 bits, each one sufficient for one RLC UL SDU to be looped back.
    v_DciUlInfo := cs_NB_DciInfo_CcchDcchDtchUL (1,9);  // UL Grant of 296 bits
    f_NBIOT_ULGrantTransmission(nbiot_Cell1, cs_NB_UL_GrantScheduling_Start(cs_NB_PeriodicGrant(v_DciUlInfo, 4)), v_TimingInfo5); // @sic R5s170494 sic@
    
    //@siclog "Step 89" siclog@
    // Check: Does the UE transmit an RLC UL SDU containing SDU#19 in its data field?
    f_NB_RxAMD_SDU(p_RLC_Rec, tsc_P_NoPoll, tsc_RLC_SDU19);
    f_NBIOT_PreliminaryPass(__FILE__, __LINE__, "Step 89");
    
    //@siclog "Step 90" siclog@
    // Check: Does the UE transmit an RLC UL SDU containing SDU#20 in its data field?
    f_NB_RxAMD_SDU(p_RLC_Rec, tsc_P_NoPoll, tsc_RLC_SDU20);
    f_NBIOT_PreliminaryPass(__FILE__, __LINE__, "Step 90");
    
    //@siclog "Step 91" siclog@
    // Check: Does the UE transmit an RLC UL SDU containing SDU#21 in its data field?
    f_NB_RxAMD_SDU(p_RLC_Rec, tsc_P_NoPoll, tsc_RLC_SDU21);
    f_NBIOT_PreliminaryPass(__FILE__, __LINE__, "Step 91");
    
    //@siclog "Step 92" siclog@
    // Check: Does the UE transmit an RLC UL SDU  containing SDU#22 in its data field?
    f_NB_RxAMD_SDU(p_RLC_Rec, tsc_P_Poll, tsc_RLC_SDU22);
    f_NBIOT_PreliminaryPass(__FILE__, __LINE__, "Step 92");
    
    //@siclog "Step 93" siclog@
    // The SS transmits an RLC STATUS PDU to the UE. This PDU acks PDUs up to those including SDU#21. ACK_SN=17.
    f_NB_TxSTATUS_PDU (p_RLC_Rec);
    
    p_RLC_Rec.AM_VTS := v_VTS_Offset + 20;
  }

}
