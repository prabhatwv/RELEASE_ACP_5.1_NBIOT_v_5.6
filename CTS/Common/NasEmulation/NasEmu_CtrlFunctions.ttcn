/******************************************************************************/
// @copyright   Copyright Notification
//   No part may be reproduced except as authorized by written permission.
//   The copyright and the foregoing restriction extend to reproduction in all media.
//   Trademark 2019, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).
//   All rights reserved.
// @version: 36.523-3 v15.3.0
// $Date: 2018-12-16 11:45:57 +0100 (Sun, 16 Dec 2018) $
// $Rev: 23491 $
/******************************************************************************/

module NasEmu_CtrlFunctions {

  import from CommonDefs all;
  import from NasEmu_Common4G5G all;
  import from NasEmu_CtrlAspTypes all;

  template (value) NAS_SecurityStartRestart_Type cs_NAS_SecurityInit(B3_Type       p_IntegrityAlgorithm,
                                                                     B128_Key_Type p_K_NASint,
                                                                     B3_Type       p_CipheringAlgorithm,
                                                                     B128_Key_Type p_K_NASenc,
                                                                     template (omit) Null_Type p_NasCountReset := true) :=
  { /* @status    APPROVED (ENDC, IMS, IMS_IRAT, LTE, LTE_A_IRAT, LTE_A_PRO, LTE_A_R10_R11, LTE_A_R12, LTE_IRAT, NBIOT, POS) */
    Integrity := {
      Algorithm := p_IntegrityAlgorithm,
      K_NAS := p_K_NASint
    },
    Ciphering := {
      Algorithm := p_CipheringAlgorithm,
      K_NAS := p_K_NASenc
    },
    NasCountReset := p_NasCountReset
  };

  template (value) NAS_CTRL_REQ cas_NasSecurityStart_REQ(template (value) NAS_SecurityStartRestart_Type p_SecurityStartRestart) :=
  { /* Note: NAS security seems to be cell independent
       @status    APPROVED (ENDC, IMS, IMS_IRAT, LTE, LTE_A_IRAT, LTE_A_PRO, LTE_A_R10_R11, LTE_A_R12, LTE_IRAT, NBIOT, POS) */
    Common := cs_NasCtrlReqAspCommonPart,   /* @sic R5s160711 BASELINE MOVING 2016 - NBIOT: cs_NasCtrlReqAspCommonPart instead of cs_ReqAspCommonPart_CellCfg sic@ */
    Request := {
      Security := {
        StartRestart := p_SecurityStartRestart
      }
    }
  };

  template (value) NAS_CTRL_REQ cas_NasSecurityRelease_REQ :=
  { /* Note: NAS security is cell independent */
    /* @status    APPROVED (LTE, LTE_A_R10_R11, NBIOT) */
    Common := cs_NasCtrlReqAspCommonPart,   /* @sic R5s160711 BASELINE MOVING 2016 - NBIOT: cs_NasCtrlReqAspCommonPart instead of cs_ReqAspCommonPart_CellCfg sic@ */
    Request := {
      Security := {
        Release := true
      }
    }
  };

  template (present) NAS_CTRL_CNF car_NasSecurity_CNF :=
  { /* Note: NAS security seems to be cell independent
       @status    APPROVED (ENDC, IMS, IMS_IRAT, LTE, LTE_A_IRAT, LTE_A_PRO, LTE_A_R10_R11, LTE_A_R12, LTE_IRAT, NBIOT, POS) */
    Common := cr_NasCtrlCnfAspCommonPart,   /* @sic R5s160711 BASELINE MOVING 2016 - NBIOT: cs_NasCtrlReqAspCommonPart instead of cs_ReqAspCommonPart_CellCfg sic@ */
    Confirm := {
      Security := true
    }
  };

  /*
   * @desc      Common function to configure NAS security
   * @param     p_Port
   * @param     p_NAS_CTRL_REQ
   * @status    APPROVED (ENDC, IMS, IMS_IRAT, LTE, LTE_A_IRAT, LTE_A_PRO, LTE_A_R10_R11, LTE_A_R12, LTE_IRAT, NBIOT, POS)
   */
  function f_EUTRA_NB_SS_NAS_SecurityConfig(EUTRA_NB_NASCTRL_PORT p_Port,
                                            template (value) NAS_CTRL_REQ p_NAS_CTRL_REQ)
  { /* @sic R5s160711 BASELINE MOVING 2016 - NBIOT: p_Port sic@ */
    p_Port.send(p_NAS_CTRL_REQ);
    if (valueof(p_NAS_CTRL_REQ.Common.ControlInfo.CnfFlag) == true) {
      p_Port.receive(car_NasSecurity_CNF);
    }
  }

  /*
   * @desc      configure NAS security at the NasEmu
   * @param     p_Port
   * @param     p_NAS_Integrity
   * @param     p_NAS_Ciphering
   * @param     p_NasCountReset (optional)
   * @status    APPROVED (ENDC, IMS, IMS_IRAT, LTE, LTE_A_IRAT, LTE_A_PRO, LTE_A_R10_R11, LTE_A_R12, LTE_IRAT, NBIOT, POS)
   */
  function f_EUTRA_NB_SS_NAS_ConfigureSecurity(EUTRA_NB_NASCTRL_PORT p_Port,
                                               NAS_SecurityInfo_Type p_NAS_Integrity,
                                               NAS_SecurityInfo_Type p_NAS_Ciphering,
                                               template (omit) Null_Type p_NasCountReset := true)
  { /* @sic R5s100135 R5s120535 sic@ */
    /* @sic R5s160711 BASELINE MOVING 2016 - NBIOT: p_Port sic@ */
    f_EUTRA_NB_SS_NAS_SecurityConfig(p_Port,
                                     cas_NasSecurityStart_REQ(cs_NAS_SecurityInit(p_NAS_Integrity.Algorithm,
                                                                                  p_NAS_Integrity.K_NAS,
                                                                                  p_NAS_Ciphering.Algorithm,
                                                                                  p_NAS_Ciphering.K_NAS,
                                                                                  p_NasCountReset))); //@sic R5s120535 sic@
  }

}
