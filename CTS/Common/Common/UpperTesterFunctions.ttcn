/******************************************************************************/
// @copyright   Copyright Notification
//   No part may be reproduced except as authorized by written permission.
//   The copyright and the foregoing restriction extend to reproduction in all media.
//   Trademark 2019, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).
//   All rights reserved.
// @version: 36.523-3 v15.3.0
// $Date: 2019-03-20 13:24:23 +0100 (Wed, 20 Mar 2019) $
// $Rev: 24274 $
/******************************************************************************/

module UpperTesterFunctions {

  import from CommonDefs all;
  import from NAS_CommonTypeDefs all;
  import from Parameters all;
  import from UpperTesterCommon all;
  import from UpperTesterPtcToMtcDefs all;

  const integer tsc_ManualPLMN_None := -1;                      /* @status    APPROVED (LTE, LTE_IRAT, NBIOT) */

  template (value) UT_COMMON_CMD cas_UT_Req(template (value) Ut_Common_Req_Type p_Cmd,
                                            template (value) Ut_CnfReq_Type p_Cnf,
                                            template (omit)  Ut_ParameterList_Type p_Parameters := omit) :=
  { /* @status    APPROVED (ENDC, IMS, IMS_IRAT, LTE, LTE_A_IRAT, LTE_A_PRO, LTE_A_R10_R11, LTE_A_R12, LTE_IRAT, NBIOT, POS, SSNITZ, UTRAN) */
    Cmd := p_Cmd,
    CnfReq := p_Cnf,
    ParameterList := p_Parameters
  };

  template (value) Ut_Parameter_Type cs_Ut_Parameter_Cid(charstring p_Value) :=
    /* @status    APPROVED (ENDC, IMS, IMS_IRAT, LTE, LTE_A_IRAT, LTE_A_PRO, LTE_A_R10_R11, LTE_A_R12, LTE_IRAT, NBIOT, POS, SSNITZ, UTRAN) */
    cs_Ut_Parameter_Common("Cid", p_Value);

  template (value) Ut_Parameter_Type cs_Ut_Parameter_QoS(charstring p_Value) :=
    /* @status    APPROVED (LTE, LTE_A_IRAT, LTE_A_R10_R11, LTE_IRAT, NBIOT, POS, SSNITZ, UTRAN) */
    cs_Ut_Parameter_Common("QoS", p_Value);

  template (value) Ut_Parameter_Type cs_Ut_Parameter_PLMN(charstring p_Value) :=
    /* @status    APPROVED (LTE, LTE_A_R10_R11, LTE_IRAT, NBIOT) */
    cs_Ut_Parameter_Common("PLMN", p_Value);

  template (value) Ut_ParameterList_Type cs_CheckPlmn(charstring p_Value) :=
  { /* @status    APPROVED (LTE, LTE_A_R10_R11, LTE_IRAT, NBIOT) */
    cs_Ut_Parameter_PLMN(p_Value)
  };

  template (value) Ut_ParameterList_Type cs_ManualPlmn(charstring p_Value) :=
  { /* @status    APPROVED (LTE, LTE_IRAT, NBIOT) */
    /* @sic R5-106675 sic@ */
    cs_Ut_Parameter_PLMN(p_Value)
  };

  template (value) Ut_ParameterList_Type cs_InsertUsim(template (value) charstring p_Value) :=
  { /* @status    APPROVED (LTE, LTE_A_R10_R11, LTE_IRAT, NBIOT, UTRAN) */
    cs_Ut_Parameter_Common("USIM", p_Value)
  };

  template (value) Ut_ParameterList_Type cs_PDP_Cid(charstring p_Cid) :=
  { /* @status    APPROVED (ENDC, IMS, IMS_IRAT, LTE, LTE_A_IRAT, LTE_A_PRO, LTE_A_R10_R11, LTE_A_R12, LTE_IRAT, NBIOT, POS, SSNITZ, UTRAN) */
    cs_Ut_Parameter_Cid(p_Cid)
  };

  template (value) Ut_ParameterList_Type cs_EPSQoS(charstring p_QoSParams) :=
  { /* @status    APPROVED (LTE, LTE_A_R10_R11, NBIOT) */
    cs_Ut_Parameter_QoS(p_QoSParams)
  };

  template (value) Ut_ParameterList_Type cs_TFT(charstring p_TFTParams) :=
  { /* @status    APPROVED (LTE, LTE_A_R10_R11, NBIOT) */
    cs_Ut_Parameter_Common("TFT", p_TFTParams)
  };

  template (value) Ut_ParameterList_Type cs_RequestPDP(charstring p_PDPParams) :=
  { /* @status    APPROVED (ENDC, LTE, LTE_A_IRAT, LTE_A_R10_R11, LTE_IRAT, NBIOT, POS, SSNITZ, UTRAN) */
    cs_Ut_Parameter_Common("RequestPDP", p_PDPParams)
  };

  /*
   * @desc      local function to send command and get confirmation
   * @param     p_Port
   * @param     p_Cmd
   * @param     p_DontWaitForCnf    (default value: false)
   * @status    APPROVED (ENDC, IMS, IMS_IRAT, LTE, LTE_A_IRAT, LTE_A_PRO, LTE_A_R10_R11, LTE_A_R12, LTE_IRAT, NBIOT, POS, SSNITZ, UTRAN)
   */
  function fl_UT_ApplyCommand(UT_PTC_MTC_PORT p_Port,
                              template (value) UT_COMMON_CMD p_Cmd,
                              boolean p_DontWaitForCnf := false) // @sic R5-140347 sic@
  {
    p_Port.send(p_Cmd);
    if (f_UT_CommandRequiresCnf(p_Cmd.CnfReq) and not p_DontWaitForCnf) { // @sic R5s110275 sic@
      p_Port.receive(car_UT_COMMON_CNF);
    }
  }

  /*
   * @desc      Objective: To make the operator aware that has to remove the USIM card
   * @param     p_Port
   * @param     p_CnfRequired       (default value: CNF_REQUIRED)
   * @status    APPROVED (IMS_IRAT, LTE, LTE_IRAT, NBIOT)
   */
  function f_UT_USIM_Remove(UT_PTC_MTC_PORT p_Port, Ut_CnfReq_Type p_CnfRequired := CNF_REQUIRED)
  {
    fl_UT_ApplyCommand(p_Port, cas_UT_Req(REMOVE_USIM, p_CnfRequired)); // @sic R5s180172 sic@
  }

  /*
   * @desc      Objective: To make the operator insert the USIM card
   *            TTCN waits until operation is confirmed before continuing
   * @param     p_Port
   * @param     p_USIM_ID
   * @status    APPROVED (LTE, LTE_A_R10_R11, LTE_IRAT, NBIOT, UTRAN)
   */
  function f_UT_USIM_Insert(UT_PTC_MTC_PORT p_Port,
                            template (omit) charstring p_USIM_ID)
  {
    if (isvalue(p_USIM_ID)) {
      fl_UT_ApplyCommand(p_Port, cas_UT_Req(INSERT_USIM, CNF_REQUIRED, cs_InsertUsim(valueof(p_USIM_ID))));
    } else {
      fl_UT_ApplyCommand(p_Port, cas_UT_Req(INSERT_USIM, CNF_REQUIRED));
    }
  }

  /*
   * @desc      Objective: To power off the UE
   *            TTCN waits until operation is confirmed before continuing
   * @param     p_Port
   * @status    APPROVED (ENDC, IMS, IMS_IRAT, LTE, LTE_A_IRAT, LTE_A_PRO, LTE_A_R10_R11, LTE_A_R12, LTE_IRAT, NBIOT, POS, SSNITZ, UTRAN)
   */
  function f_UT_PowerOffUE(UT_PTC_MTC_PORT p_Port)
  {
    fl_UT_ApplyCommand(p_Port, cas_UT_Req(POWER_OFF, NO_CNF_REQUIRED));
  }

  /*
   * @desc      switch on the UE
   * @param     p_Port
   * @param     p_USIM_Rmvd   (default: false)
   * @param     p_CnfRequired (default: NO_CNF_REQUIRED) @sic R5s110498 sic@
   * @status    APPROVED (ENDC, IMS, IMS_IRAT, LTE, LTE_A_IRAT, LTE_A_PRO, LTE_A_R10_R11, LTE_A_R12, LTE_IRAT, NBIOT, POS, SSNITZ, UTRAN)
   */
  function f_UT_SwitchOnUE(UT_PTC_MTC_PORT p_Port,
                           boolean p_USIM_Rmvd := false,
                           Ut_CnfReq_Type p_CnfRequired := NO_CNF_REQUIRED)
  {
    var Ut_Common_Req_Type v_Request;

    if (pc_SwitchOnOff) {        // switch on the UE
      v_Request := SWITCH_ON;
    } else if (p_USIM_Rmvd and pc_USIM_Removal) {       // USIM needs to be removed @sic R5s120597r1 sic@
      v_Request := INSERT_USIM;
    } else {                            // power on the UE
      v_Request := POWER_ON;
    }
    fl_UT_ApplyCommand(p_Port, cas_UT_Req(v_Request, p_CnfRequired));
  }

  /*
   * @desc      switch off the UE
   * @param     p_Port
   * @param     p_USIM_Rmvd
   * @param     p_CnfRequired (default: NO_CNF_REQUIRED) @sic R5s110395 sic@
   * @status    APPROVED (ENDC, IMS, IMS_IRAT, LTE, LTE_A_IRAT, LTE_A_PRO, LTE_A_R10_R11, LTE_A_R12, LTE_IRAT, NBIOT, POS, SSNITZ, UTRAN)
   */
  function f_UT_SwitchOffUE(UT_PTC_MTC_PORT p_Port,
                            boolean p_USIM_Rmvd,
                            Ut_CnfReq_Type p_CnfRequired := NO_CNF_REQUIRED)
  {
    if (pc_SwitchOnOff) {        // switch off the UE
      fl_UT_ApplyCommand(p_Port, cas_UT_Req(SWITCH_OFF, p_CnfRequired));  //  @sic R5s110395 sic@
    } else if (p_USIM_Rmvd and pc_USIM_Removal) {  // UE doesn't support switch off, but does support SIM removal, so remove it;  @sic R5-104083 sic@ @sic R5s120597r1 sic@
      fl_UT_ApplyCommand(p_Port, cas_UT_Req(REMOVE_USIM, CNF_REQUIRED));
    } else {                            // power off the UE - last resort
      fl_UT_ApplyCommand(p_Port, cas_UT_Req(POWER_OFF, CNF_REQUIRED));
    }
  } // f_UT_SwitchOffUE

  /*
   * @desc      To convert all TFT parameters into the correct charstring format for the AT command
   * @param     p_DedicatedId
   * @param     p_Filter
   * @return    charstring
   * @status    APPROVED (LTE, LTE_A_R10_R11, NBIOT)
   */
  function fl_GenerateATForTFTPacketFilter(integer p_DedicatedId,
                                           PacketFilter p_Filter) return charstring
  {
    var charstring v_IPAddress := "";
    var charstring v_ProtIdNextHeader := "";
    var charstring v_LocalPort := "";
    var charstring v_RemotePort := "";
    var charstring v_SecurityIndex := "";
    var charstring v_ToS := "";
    var charstring v_FlowLabel := "";
    var integer v_Direction;
    var charstring v_Filterstring := "";
    var PacketFilter v_Filter := p_Filter;
    var integer v_LengthOfContents := lengthof(v_Filter.contents);
    var integer i;
    
    v_Filterstring := int2str(p_DedicatedId);
    v_Filterstring := v_Filterstring & "," & int2str(hex2int(v_Filter.iei)+1); // identifier @sic R5s100557, R5s130195 Baseline Moving sic@
    v_Direction := bit2int(v_Filter.direction); // @sic R5s130195 Baseline Moving sic@
    v_Filterstring := v_Filterstring & "," & int2str(bit2int(v_Filter.precedence)); // precedence
    
    for (i := 0; i < v_LengthOfContents; i := i + 1) {
      if (ischosen(v_Filter.contents[i].packetFilterComponentValue.ipv4RemoteAddress)) { //IPv4
        v_IPAddress := fl_TFTIPAdd(v_Filter.contents[i].packetFilterComponentValue.ipv4RemoteAddress);
      }
      else if (ischosen(v_Filter.contents[i].packetFilterComponentValue.ipv6RemoteAddress)) { //IPv6
        v_IPAddress := fl_TFTIPAdd(v_Filter.contents[i].packetFilterComponentValue.ipv6RemoteAddress);
      }
      else if (ischosen(v_Filter.contents[i].packetFilterComponentValue.protocolIdNextHeader)) { //Protocol id/next header
        v_ProtIdNextHeader := fl_TFTProtHeader(v_Filter.contents[i].packetFilterComponentValue.protocolIdNextHeader);
      }
      else if (ischosen(v_Filter.contents[i].packetFilterComponentValue.singleLocalPort)) { //single local port
        v_LocalPort := fl_TFTPort(v_Filter.contents[i].packetFilterComponentValue.singleLocalPort);
      }
      else if (ischosen(v_Filter.contents[i].packetFilterComponentValue.localPortRange)) { //local port range
        v_LocalPort := fl_TFTPort(v_Filter.contents[i].packetFilterComponentValue.localPortRange);
      }
      else if (ischosen(v_Filter.contents[i].packetFilterComponentValue.singleRemotePort)) { //Single remote port
        v_RemotePort := fl_TFTPort(v_Filter.contents[i].packetFilterComponentValue.singleRemotePort);
      }
      else if (ischosen(v_Filter.contents[i].packetFilterComponentValue.remotePortRange)) { //remote port range
        v_RemotePort := fl_TFTPort(v_Filter.contents[i].packetFilterComponentValue.remotePortRange);
      }
      else if (ischosen(v_Filter.contents[i].packetFilterComponentValue.securityParameterIndex)) { //Security parameter index
        v_SecurityIndex := fl_TFTSecurity(v_Filter.contents[i].packetFilterComponentValue.securityParameterIndex);
      }
      else if (ischosen(v_Filter.contents[i].packetFilterComponentValue.typeOfServiceTrafficClass)) { //Type of Service
        v_ToS :=  fl_TFTToS(v_Filter.contents[i].packetFilterComponentValue.typeOfServiceTrafficClass);
      }
      else if (ischosen(v_Filter.contents[i].packetFilterComponentValue.flowLabel)) { //Flow Label
        v_FlowLabel := fl_TFTFlow(v_Filter.contents[i].packetFilterComponentValue.flowLabel);
      }
    }
    
    if (v_IPAddress == "") {
      v_Filterstring := v_Filterstring & ",";
    } else {
      v_Filterstring := v_Filterstring & "," & v_IPAddress;
    }
    if (v_ProtIdNextHeader == "") {
      v_Filterstring := v_Filterstring & ",";
    } else {
      v_Filterstring := v_Filterstring & "," & v_ProtIdNextHeader;
    }
    if (v_LocalPort == "") {                      // @sic R5s100557 sic@
      v_Filterstring := v_Filterstring & ",";
    } else {
      v_Filterstring := v_Filterstring & "," & v_LocalPort;
    }
    if (v_RemotePort == "") {
      v_Filterstring := v_Filterstring & ",";
    } else {
      v_Filterstring := v_Filterstring & "," & v_RemotePort;
    }
    if (v_SecurityIndex == "") {
      v_Filterstring := v_Filterstring & ",";
    } else {
      v_Filterstring := v_Filterstring & "," & v_SecurityIndex;
    }
    if (v_ToS == "") {
      v_Filterstring := v_Filterstring & ",";
    } else {
      v_Filterstring := v_Filterstring & "," & v_ToS;
    }
    if (v_FlowLabel == "") {
      v_Filterstring := v_Filterstring & ",";
    } else {
      v_Filterstring := v_Filterstring & "," & v_FlowLabel;
    }
    if (v_Direction == 1) {  // Uplink and downlink are different values in AT cmd
      v_Direction := 2;
    } else if (v_Direction == 2) {
      v_Direction := 1;
    }
    v_Filterstring := v_Filterstring & "," & int2str(v_Direction);
    return v_Filterstring;
  }

  /*
   * @desc      To convert a TFT parameter into the correct charstring format for the AT command
   * @param     p_Input
   * @return    charstring
   * @status    APPROVED (LTE, LTE_A_R10_R11, NBIOT)
   */
  function fl_TFTIPAdd(octetstring p_Input) return charstring
  {
    var integer v_Length := lengthof(p_Input);
    var charstring v_Result:= """";
    var integer i;
    
    for (i := 0; i < v_Length; i := i + 1) {
      v_Result := v_Result & int2str(oct2int(p_Input[i]));
      if (i != (v_Length-1)) {
        v_Result := v_Result & ".";
      }
    }
    v_Result := v_Result & """";
    return v_Result;
  }

  /*
   * @desc      To convert a TFT parameter into the correct charstring format for the AT command
   * @param     p_Input
   * @return    charstring
   * @status    APPROVED (LTE, LTE_A_R10_R11, NBIOT)
   */
  function fl_TFTProtHeader(octetstring p_Input) return charstring
  {
    return int2str(oct2int(p_Input));
  }

  /*
   * @desc      To convert a TFT parameter into the correct charstring format for the AT command
   * @param     p_Input
   * @return    charstring
   * @status    APPROVED (LTE, LTE_A_R10_R11, NBIOT)
   */
  function fl_TFTPort(octetstring p_Input) return charstring
  {
    var integer v_Length := lengthof(p_Input);
    var charstring v_Result := "";
    
    v_Result := """";
    
    if (v_Length == 4) {
      v_Result := v_Result & int2str(oct2int(substr(p_Input, 0, 2)));      // @sic R5s100362 sic@
      v_Result := v_Result & "." & int2str(oct2int(substr(p_Input, 2, 2)));
    } else { // @sic R5s100362 sic@
      v_Result := v_Result & int2str(oct2int(p_Input)) & "." & int2str(oct2int(p_Input)); // only given one value, so put the same in both
    }
    
    v_Result := v_Result & """";
    return v_Result;
  }

  /*
   * @desc      To convert a TFT parameter into the correct charstring format for the AT command
   * @param     p_Input
   * @return    charstring
   * @status    APPROVED (LTE, LTE_A_R10_R11, NBIOT)
   */
  function fl_TFTSecurity(octetstring p_Input) return charstring
  {
    return oct2str(p_Input);
  }

  /*
   * @desc      To convert a TFT parameter into the correct charstring format for the AT command
   * @param     p_Input
   * @return    charstring
   * @status    APPROVED (LTE, LTE_A_R10_R11, NBIOT)
   */
  function fl_TFTToS(octetstring p_Input) return charstring
  {
    var charstring v_Result := "";
    v_Result := int2str(oct2int(substr(p_Input, 0, 1)));
    v_Result := v_Result & "." & int2str(oct2int(substr(p_Input, 1, 1)));
    v_Result := """" & v_Result & """"; // @sic R5s180263 sic@
    return v_Result;
  }

  /*
   * @desc      To convert a TFT parameter into the correct charstring format for the AT command
   * @param     p_Input
   * @return    charstring
   * @status    APPROVED (LTE, LTE_A_R10_R11, NBIOT)
   */
  function fl_TFTFlow(octetstring p_Input) return charstring
  {
    return hex2str(substr(oct2hex(p_Input), 1, 5));
  }

  /*
   * @desc      Objective: To make the operator check the indicated PLMN
   *            TTCN waits until operation is confirmed before continuing
   * @param     p_Port
   * @param     p_PLMN_ID
   * @status    APPROVED (LTE, LTE_A_R10_R11, LTE_IRAT, NBIOT)
   */
  function f_UT_PLMN_Check(UT_PTC_MTC_PORT p_Port,
                           charstring p_PLMN_ID)
  {
    fl_UT_ApplyCommand(p_Port, cas_UT_Req(CHECK_PLMN, CNF_REQUIRED, cs_CheckPlmn(p_PLMN_ID)));
  }

  /*
   * @desc      To set manual PLMN selection and select PLMNN (i.e. both of the above in 1 function)
   * @param     p_Port
   * @param     p_PLMN_ID
   * @param     p_Cell_AccessTechnology (default value: tsc_ManualPLMN_None)
   *                                    only set this if the prose says e.g. 'select PLMN9 (UTRAN)'; options are _GERAN, _UTRAN or _EUTRA
   * @param     p_Ut_CnfReq_Type    (default value: NO_CNF_REQUIRED)
   * @status    APPROVED (LTE, LTE_IRAT, NBIOT)
   */
  function f_UT_ManualPLMN_Select(UT_PTC_MTC_PORT p_Port,
                                  NAS_PlmnId p_PLMN_ID,
                                  integer p_Cell_AccessTechnology := tsc_ManualPLMN_None, // @sic R5-106675 sic@
                                  Ut_CnfReq_Type p_Ut_CnfReq_Type := NO_CNF_REQUIRED) // @sic R5s110633 sic@
  { /* Objective: To manually select the specified PLMN
     *            TTCN waits until operation is confirmed before continuing */
    /* @sic R5-106675 sic@ */
    var charstring v_AT := """" & f_ConvertPLMNtoString(p_PLMN_ID) & """"; // @sic R5s160365 sic@

    if (p_Cell_AccessTechnology != tsc_ManualPLMN_None) {
      v_AT := v_AT & "," & int2str(p_Cell_AccessTechnology);
    }
    fl_UT_ApplyCommand(p_Port, cas_UT_Req(PLMN_MANUAL, p_Ut_CnfReq_Type, cs_ManualPlmn(v_AT))); // @sic R5s110633 sic@
  }

  /*
   * @desc      To convert the PLMN in NAS format into that required by the AT command
   * @param     p_PLMN_ID
   * @return    charstring
   * @status    APPROVED (LTE, LTE_A_R10_R11, LTE_IRAT, NBIOT)
   */
  function f_ConvertPLMNtoString(NAS_PlmnId p_PLMN_ID) return charstring
  { /* @sic R5-106675, R5s160365 sic@ */
    var hexstring v_PLMN_Hex := oct2hex(p_PLMN_ID); // Now re-order it for the AT command
    var hexstring v_PLMN_ForAT := v_PLMN_Hex[1] & v_PLMN_Hex[0] & v_PLMN_Hex[3] & v_PLMN_Hex[5] & v_PLMN_Hex[4];
    
    if (v_PLMN_Hex[2] != 'F'H) { // @sic R5s120576 sic@
      v_PLMN_ForAT := v_PLMN_ForAT & v_PLMN_Hex[2];
    }
    return hex2str(v_PLMN_ForAT); // @sic R5s160365 sic@
  }

  /*
   * @desc      To request automatic PLMN selection before a cell has been powered up
   * @param     p_Port
   * @status    APPROVED (LTE, NBIOT)
   */
  function f_UT_AutomaticPLMN_Select_WithSwitchOnOff(UT_PTC_MTC_PORT p_Port)
  { /* Objective: To change the UE into automatic mode then switch it off again*/
     f_UT_SwitchOnUE(p_Port, false, CNF_REQUIRED);
     f_UT_AutomaticPLMN_Select (p_Port);
     f_UT_SwitchOffUE(p_Port, false, CNF_REQUIRED);
  }

  /*
   * @desc      To request automatic PLMN selection
   * @param     p_Port
   * @status    APPROVED (LTE, LTE_IRAT, NBIOT)
   */
  function f_UT_AutomaticPLMN_Select(UT_PTC_MTC_PORT p_Port)
  { /* Objective: To change the UE into automatic mode */
    fl_UT_ApplyCommand(p_Port, cas_UT_Req(PLMN_AUTOMATIC, LOCAL_CNF_REQUIRED)); // @sic R5-106675, R5s180214 sic@
  }

  /*
   * @desc      To modify a default (NB-IoT) EPS bearer
   * @param     p_Port
   * @param     p_DefaultId
   * @param     p_QoSstring
   * @param     p_Tft
   * @status    APPROVED (NBIOT)
   */
  function f_UT_RequestModifyDefaultBearer(UT_PTC_MTC_PORT p_Port,
                                           integer p_DefaultId,
                                           charstring p_QoSstring,
                                           template (value) TrafficFlowTemplate p_Tft)
  {
    var TrafficFlowTemplate v_Tft := valueof(p_Tft); // need to do this to then manipulate it in the charstring
    var charstring v_QoSstring := int2str(p_DefaultId) & p_QoSstring; // @sic R5-192186 sic@
    var integer v_NoOfPacketFilters := bit2int(v_Tft.noOfPktFilter);
    var integer i;
    
    fl_UT_ApplyCommand(p_Port, cas_UT_Req(DEFINE_EPS_QOS, CNF_REQUIRED, cs_EPSQoS(v_QoSstring))); // @sic R5s110570 sic@
    
    if (v_NoOfPacketFilters != 0) {
      for (i := 0; i < v_NoOfPacketFilters; i := i + 1) {
        fl_UT_ApplyCommand(p_Port, cas_UT_Req(DEFINE_TFT, CNF_REQUIRED, cs_TFT(fl_GenerateATForTFTPacketFilter(p_DefaultId, v_Tft.packetFilterList[i])))); // @sic R5s110570 sic@
      }
    }
    fl_UT_ApplyCommand(p_Port, cas_UT_Req(MODIFY_BEARER, NO_CNF_REQUIRED, cs_PDP_Cid(int2str(p_DefaultId))));
  }

  /*
   * @desc      To deactivate either an EPS bearer or UTRAN/GERAN PDP context
   * @param     p_Port
   * @param     p_DedicatedId
   * @status    APPROVED (IMS, IMS_IRAT, LTE, LTE_A_IRAT, LTE_A_PRO, LTE_A_R10_R11, LTE_A_R12, LTE_IRAT, NBIOT, POS)
   */
  function f_UT_DeactivateBearer(UT_PTC_MTC_PORT p_Port,
                                 integer p_DedicatedId)
  {
    fl_UT_ApplyCommand(p_Port, cas_UT_Req(DEACTIVATE_BEARER, NO_CNF_REQUIRED, cs_PDP_Cid(int2str(p_DedicatedId))));
  }

  /*
   * @desc      To build the start of the request for an additional PDN - to be associated with given bearer (p_BearerId)
   * @param     p_APN               (default value: "")
   * @param     p_EmergencyBearer   (default value: false)
   * @return    charstring
   * @status    APPROVED (ENDC, LTE, LTE_A_IRAT, LTE_A_R10_R11, LTE_IRAT, NBIOT)
   */
  function fl_BuildPDNRequest(charstring p_APN := "", // @sic R5s100466 sic@
                              boolean p_EmergencyBearer := false)  // @sic R5-120403 sic@
    return charstring
  {
    var charstring v_Cmd := "";
    var charstring v_CommasToReqType := ",,,,,";
    
    if (p_APN != "") {
      v_Cmd := """" & p_APN & """"; // @sic R5s100466, R5s100538 sic@
    }
    if (p_EmergencyBearer) { // @sic R5-120403 sic@
      v_Cmd := v_Cmd & v_CommasToReqType & "1";
    }
    return v_Cmd;
  }

  /*
   * @desc      To request an PDP context - to be associated with an already existing bearer (p_BearerId)
   * @param     p_Port
   * @param     p_BearerId          - The id of the already existing bearer
   * @param     p_APN               (default value: "")
   * @param     p_EmergencyBearer   (default: false) - set to true if need an additional PDN for an emergency bearer @sic R5-120403 sic@
   * @param     p_NSLPI             (default value: -1)
   * @status    APPROVED (ENDC, LTE, LTE_A_IRAT, LTE_A_R10_R11, LTE_IRAT, NBIOT)
   */
  function f_UT_RequestPDN(UT_PTC_MTC_PORT p_Port,
                        integer p_BearerId,
                        charstring p_APN := "", // @sic R5s100466 sic@
                        boolean p_EmergencyBearer := false,  // @sic R5-120403 sic@
                        integer p_NSLPI := -1) // @sic R5s130330 sic@
  {
    var charstring v_Cmd := fl_BuildPDNRequest(p_APN, p_EmergencyBearer); // @sic R5-192186 sic@
    var charstring v_CommasToReqType := ",,,,,";
    var charstring v_CommasToNSLPI := ",,,";  // @sic R5-192186 sic@
    
    if (p_NSLPI >= 0) { // @sic R5-140628 sic@
      if (not p_EmergencyBearer) {
        v_Cmd := v_Cmd & v_CommasToReqType & v_CommasToNSLPI;
      }
      v_Cmd := v_Cmd & int2str(p_NSLPI);
    }
    // @sic C1-141830 sic@
    
    fl_RequestPDPContext(p_Port, p_BearerId, v_Cmd);
  }

  /*
   * @desc      To request an additional PDN connection - to be associated with an already existing bearer (p_BearerId)
   * @param     p_Port
   * @param     p_BearerId - The id of the already existing bearer
   * @param     p_APN               (default value: "")
   * @param     p_EmergencyBearer   (default value: false) - set to true if need an additional PDN for an emergency bearer @sic R5-120403 sic@
   * @param     p_Ut_CnfReq_Type    (default value: NO_CNF_REQUIRED)
   * @param     p_NSLPI             (default value: -1)
   * @status    APPROVED (ENDC, LTE, LTE_A_IRAT, LTE_A_R10_R11, LTE_IRAT, NBIOT)
   */
  function f_UT_RequestAdditionalPDNConnectivity(UT_PTC_MTC_PORT p_Port,
                                                 integer p_BearerId,
                                                 charstring p_APN := "", // @sic R5s100466 sic@
                                                 boolean p_EmergencyBearer := false,  // @sic R5-120403 sic@
                                                 Ut_CnfReq_Type p_Ut_CnfReq_Type := NO_CNF_REQUIRED,
                                                 integer p_NSLPI := -1) // @sic R5s130330 sic@
  {
      //log("VZW: f_UT_RequestPDN");
    //f_UT_RequestPDN (p_Port, p_BearerId, p_APN, p_EmergencyBearer, p_NSLPI); // @sic R5s150821 sic@
    //log("VZW: fl_UT_ApplyCommand");
      fl_UT_ApplyCommand(p_Port, cas_UT_Req(ACTIVATE_BEARER, p_Ut_CnfReq_Type, cs_PDP_Cid(int2str(p_BearerId))));
  }

  /*
   * @desc      Used by LTE, UTRAN and GERAN to send the DCONT AT command
   * @param     p_Port
   * @param     p_BearerId
   * @param     p_RestOfCmd
   * @status    APPROVED (ENDC, LTE, LTE_A_IRAT, LTE_A_R10_R11, LTE_IRAT, NBIOT, POS, SSNITZ, UTRAN)
   */
  function fl_RequestPDPContext(UT_PTC_MTC_PORT p_Port,
                                integer p_BearerId,
                                charstring p_RestOfCmd)
  { // @sic R5s100466 change 5 sic@
    
    var charstring v_Cmd := "";
    var charstring v_Type := """IP""";
    log("Inside fl_RequestPDPContext");
    if (pc_IPv6 and (not pc_IPv4)) {
      v_Type := """IPV6""";
    }
    if (pc_IPv6 and pc_IPv4) {
      v_Type := """IPV4V6""";
    }
    v_Cmd := v_Cmd & int2str(p_BearerId);
    v_Cmd := v_Cmd & "," & v_Type;
    
    if (p_RestOfCmd != "") { // @sic R5s120002 sic@
      v_Cmd := v_Cmd & "," & p_RestOfCmd; // @sic R5s100520 sic@
    }
    fl_UT_ApplyCommand(p_Port, cas_UT_Req(REQUEST_PDPCONTEXT, CNF_REQUIRED, cs_RequestPDP(v_Cmd))); // @sic R5s110570 sic@
  }

  /*
   * @desc      To attach for PS services
   * @param     p_Port
   * @status    APPROVED (IMS, IMS_IRAT, LTE, LTE_A_IRAT, LTE_IRAT, NBIOT, POS, SSNITZ, UTRAN)
   */
  function f_UT_TriggerAttach(UT_PTC_MTC_PORT p_Port)
  {
    fl_UT_ApplyCommand(p_Port, cas_UT_Req(ATTACH, NO_CNF_REQUIRED));
  }

  /*
   * @desc      To detach
   * @param     p_Port
   * @status    APPROVED (ENDC, IMS, IMS_IRAT, LTE, LTE_A_IRAT, LTE_A_PRO, LTE_A_R10_R11, LTE_A_R12, LTE_IRAT, NBIOT, POS)
   */
  function f_UT_InitiateDetach(UT_PTC_MTC_PORT p_Port)  // @sic R5-113807 sic@
  {
    fl_UT_ApplyCommand(p_Port, cas_UT_Req(DETACH, NO_CNF_REQUIRED));
  }

  /*
   * @desc      To configure UE to use eDRX
   * @param     p_Port
   * @param     p_Enable
   * @param     p_EDRXValue         (default value: omit)
   * @param     p_CnfRequired       (default value: NO_CNF_REQUIRED)
   * @status    APPROVED (LTE_A_PRO, NBIOT)
   */
  function f_UT_ConfigureEDRX(UT_PTC_MTC_PORT p_Port,
                              boolean p_Enable,
                              template (omit) B4_Type p_EDRXValue := omit,
                              Ut_CnfReq_Type p_CnfRequired := NO_CNF_REQUIRED) // @sic R5s180172 sic@
  {
    var charstring v_Cmd := "";
    var B4_Type v_EDRXValue;
    v_Cmd := bit2str(f_ConvertBoolToBit(p_Enable));
    
    if (isvalue(p_EDRXValue)) { // @sic R5-176960 sic@
      v_EDRXValue := valueof(p_EDRXValue);
      v_Cmd := v_Cmd & ",,"""" & bit2str(v_EDRXValue) & """;
    }

    fl_UT_ApplyCommand(p_Port, cas_UT_Req(CONFIGURE_EDRX, p_CnfRequired, {cs_Ut_Parameter_Common ("EDRX", v_Cmd)}));
  }

  /*
   * @desc      To trigger the UE to send an amount of exception data
   * @param     p_Port
   * @param     p_NoOfOctets (default value: 24 - just a random number)
   * @status    APPROVED (NBIOT)
   */
  function f_UT_TriggerMO_ExceptionData(UT_PTC_MTC_PORT p_Port, integer p_NoOfOctets := 24)
  {
    var CharStringList_Type v_CommaSeparatedParams := { "0", int2str(p_NoOfOctets), oct2str(f_GetN_OctetsFromPRBS(0, p_NoOfOctets)), "0", "1" };
    var charstring v_Cmd := f_StringJoin(v_CommaSeparatedParams, ","); // @sic R5s180269 sic@
    fl_UT_ApplyCommand(p_Port, cas_UT_Req(TRIGGER_MO_EXCEPTIONDATA, CNF_REQUIRED, {cs_Ut_Parameter_Common ("Exception Data", v_Cmd)}));
  }

    
    
  /*
   * @desc      Configure UE to use PSM
   * @param     p_Port
   * @param     p_T3312xtd
   * @param     p_T3412xtd
   * @param     p_T3324
   * @param     p_Enable            (default value: true)
   * @param     p_CnfRequired       (default value: NO_CNF_REQUIRED)
   * @status    APPROVED (LTE_A_PRO, LTE_A_R12, NBIOT)
   */
  function f_UT_ConfigurePSM(UT_PTC_MTC_PORT p_Port,
                                   template (omit) GPRS_Timer2 p_T3312xtd,
                                   template (omit) GPRS_Timer2 p_T3412xtd,
                                   template (omit) GPRS_Timer2 p_T3324,
                                   boolean p_Enable := true,
                                   Ut_CnfReq_Type p_CnfRequired := NO_CNF_REQUIRED) // @sic R5s180172 sic@
  { // Timer T3314 can also be configured with this command.  This can be added if required
    var GPRS_Timer2 v_T3312Value;
    var GPRS_Timer2 v_T3412Value;
    var GPRS_Timer2 v_T3324Value;
    var charstring v_T3312;
    var charstring v_T3412;
    var charstring v_T3324;
    var charstring v_Cmd := "";
    v_Cmd := bit2str(f_ConvertBoolToBit(p_Enable));
    
    if (isvalue(p_T3312xtd)) {
      v_T3312Value := valueof(p_T3312xtd);
      v_T3312 := """"& bit2str (v_T3312Value.unit & v_T3312Value.gprsTimerValue) & """" // @sic R5s160870 sic@
    } else {
      v_T3312 := "";
    }
    if (isvalue(p_T3412xtd)) {
      v_T3412Value := valueof(p_T3412xtd);
      v_T3412 := """"& bit2str (v_T3412Value.unit & v_T3412Value.gprsTimerValue) & """" // @sic R5s160870 sic@
        } else {
      v_T3412 := "";
    }
    if (isvalue(p_T3324)) {
      v_T3324Value := valueof(p_T3324);
      v_T3324 := """"& bit2str (v_T3324Value.unit & v_T3324Value.gprsTimerValue) & """" // @sic R5s160870 sic@
        } else {
      v_T3324 := "";
    }
    
    v_Cmd := v_Cmd & "," & v_T3312 &",," & v_T3412 & "," & v_T3324;
    fl_UT_ApplyCommand(p_Port, cas_UT_Req(CONFIGURE_PSM, p_CnfRequired, {cs_Ut_Parameter_Common ("PSM", v_Cmd)})); // @sic R5s180153 sic@
  }
    
   
   //VZW NBIOT Added for SS IMSLESS TCs
    template (value) Ut_ParameterList_Type cs_MessageService(charstring p_Service) :=
  { /* @status    APPROVED (LTE) */
    cs_Ut_Parameter_Common("Service", p_Service)
  };
    
     template (value) Ut_ParameterList_Type cs_MessageFormat(charstring p_Mode) :=
  { /* @status    APPROVED (LTE) */
    cs_Ut_Parameter_Common("Mode", p_Mode)
  };

  template (value) Ut_ParameterList_Type cs_SelectCharacterSet(charstring p_Chset) :=
  { /* @status    APPROVED (LTE) */
    cs_Ut_Parameter_Common("Chset", p_Chset)
  };
    
  template (value) Ut_ParameterList_Type cs_ChkMsgDisplayed(charstring p_Length,
                                                            charstring p_Msg) :=
  { /* @status    APPROVED (LTE) */
    cs_Ut_Parameter_Common("Length", p_Length),
    cs_Ut_Parameter_Common("Msg", p_Msg)
  };
    
  template (value) Ut_ParameterList_Type cs_DeleteMessage_Withflag(charstring p_Index,
                                                                   charstring p_Delflag) :=
  { /* @status    APPROVED (LTE) */
    cs_Ut_Parameter_Common("Index", p_Index),
    cs_Ut_Parameter_Common("Delflag", p_Delflag)
  };
  
  template (value) Ut_ParameterList_Type cs_PreferredStorage(charstring p_Mem1,
                                                             charstring p_Mem2,
                                                             charstring p_Mem3) :=
  { /* @status    APPROVED (LTE) */
    cs_Ut_Parameter_Common("Mem1", p_Mem1),
    cs_Ut_Parameter_Common("Mem2", p_Mem2),
    cs_Ut_Parameter_Common("Mem3", p_Mem3)
  };
    
   template (value) Ut_ParameterList_Type cs_ServiceCentreAddress(charstring p_Sca,
                                                                 charstring p_Tosca) :=
  { /* @status    APPROVED (LTE) */
    cs_Ut_Parameter_Common("Sca", p_Sca),
    cs_Ut_Parameter_Common("Tosca", p_Tosca)
  };
    
   template (value) Ut_ParameterList_Type cs_SetTextModeParameters(charstring p_Fo,
                                                                  charstring p_Vp,
                                                                  charstring p_Pid) :=
  { /* @status    APPROVED (LTE, SSNITZ, UTRAN) */
    /* @sic R5s100606 sic@ */
    cs_Ut_Parameter_Common("Fo", p_Fo),
    cs_Ut_Parameter_Common("Vp", p_Vp),
    cs_Ut_Parameter_Common("Pid", p_Pid)
  };
    
  template (value) Ut_ParameterList_Type cs_WriteMessageToMemory_Text(charstring p_Da,
                                                                      charstring p_Toda,
                                                                      charstring p_Text) :=
  { // @sic R5s110750 sic@
    /* @status    APPROVED (LTE, SSNITZ, UTRAN) */
    cs_Ut_Parameter_Common("Da", p_Da),
    cs_Ut_Parameter_Common("Toda", p_Toda),
    cs_Ut_Parameter_Common("Text", p_Text)
  };
  
   template (value) Ut_ParameterList_Type cs_SendMessageFromStorage(charstring p_Index) :=
  { /* @status    APPROVED (LTE, SSNITZ, UTRAN) */
    cs_Ut_Parameter_Common("Index", p_Index)
  };

}
