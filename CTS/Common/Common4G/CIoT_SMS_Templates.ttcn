/******************************************************************************/
// @copyright   Copyright Notification
//   No part may be reproduced except as authorized by written permission.
//   The copyright and the foregoing restriction extend to reproduction in all media.
//   Trademark 2019, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).
//   All rights reserved.
// @version: 36.523-3 v15.3.0
// $Date: 2019-01-24 22:05:23 +0100 (Thu, 24 Jan 2019) $
// $Rev: 23585 $
/******************************************************************************/

module CIoT_SMS_Templates {

  import from CommonDefs all;
  import from SMS_Templates all;
  import from SMS_TypeDefs all;

  template (omit) CP_UserData_Type cs_CP_UserData_DELIVER_IoT (SMS_DELIVER_Type p_TPDU):=
  { /* @status    APPROVED (LTE_A_PRO, NBIOT) */
    spare := omit,
    iei := omit,
    iel := int2oct (167, 1), // 167 = 1 + 1 + 5(=size of cs_RP_OriginatorAddress_dl) + 1 + 159 // @sic R5-185125, R5s180577 sic@
    rP_PDU := {RP_DATA_dl := cs_RP_DATA_dl_DELIVER_IoT (p_TPDU)}
  };

  template (value) RP_DATA_dl_Type cs_RP_DATA_dl_DELIVER_IoT (SMS_DELIVER_Type p_TPDU) :=
  { /* @status    APPROVED (LTE_A_PRO, NBIOT) */
    spare5 := '00000'B,
    rP_MessageTypeIndicator := tsc_MT_RP_DATA_dl,
    rP_MessageReference := int2oct(0, 1),
    rP_OriginatorAddress := cs_RP_OriginatorAddress_dl,
    rP_DestinationAddress := cs_RP_DestinationAddress_dl,
    rP_UserData := cs_RP_UserData_DELIVER_IoT(p_TPDU)
  };
  
  type enumerated VZ_SMS_PDU_Type {NORMAL,OTADM,SIM_WAKE_UP};    
  template (value) RP_DATA_dl_Type vz_RP_DATA_dl_DELIVER (octetstring p_Digits, octetstring vz_UserData, integer rp_size, integer UDL,VZ_SMS_PDU_Type sms_type:=NORMAL) :=
  { /* @status    APPROVED (IMS, LTE) */
    spare5 := '00000'B,
    rP_MessageTypeIndicator := tsc_MT_RP_DATA_dl,
    rP_MessageReference := int2oct(0, 1),
    rP_OriginatorAddress := cs_RP_OriginatorAddress_dl,
    rP_DestinationAddress := cs_RP_DestinationAddress_dl,
    rP_UserData := vz_RP_UserData_DELIVER(p_Digits,vz_UserData,rp_size,UDL,sms_type)
  };

  template (omit) RP_UserData cs_RP_UserData_DELIVER_IoT (SMS_DELIVER_Type p_TPDU) :=
  { /* @status    APPROVED (LTE_A_PRO, NBIOT) */
    spare := omit,
    iei := omit,
    iel := int2oct (158, 1), // length restriction of 158 octets of TPDU as per 36.509  // @sic R5-185125, R5s180577 sic@
    tP_PDU := {SMS_DELIVER := p_TPDU}
  };

   template (omit) RP_UserData vz_RP_UserData_DELIVER (octetstring p_Digits, octetstring vz_UserData, integer rp_size, integer UDL,VZ_SMS_PDU_Type sms_type:=NORMAL) :=
  { /* @status    APPROVED (IMS, LTE) */
    spare := omit,
    iei := omit,
    iel := int2oct ((rp_size + lengthof (p_Digits)), 1),
    //iel := int2oct(38,1),  
    tP_PDU := {SMS_DELIVER := vz_SMS_DELIVER (p_Digits,vz_UserData,UDL,sms_type)}  
  }; 
    
  template (value) SMS_DELIVER_Type vz_SMS_DELIVER (octetstring p_Digits, octetstring vz_UserData, integer UDL,VZ_SMS_PDU_Type sms_type:=NORMAL) :=
  { /* @status    APPROVED (IMS, LTE) */
    tP_ReplyPath := '0'B,
    tP_UserDataHeaderIndicator := '1'B,
    tP_StatusReportIndication := '0'B,
    spare2 := '00'B,
    tP_MoreMessagesToSend := '1'B,
    tP_MessageTypeIndicator := tsc_MT_SMS_DELIVER,
    tP_OriginatingAddress := cs_TP_Address (p_Digits),
    tP_ProtocolIdentifier := getProtoID (sms_type),  
//    tP_ProtocolIdentifier := cs_TP_ProtocolIdentifier,
//    tP_DataCodingScheme_Type := cs_TP_DataCodingScheme,
    tP_DataCodingScheme_Type := getDataCodingScheme(sms_type), 
    tP_ServiceCentreTimeStamp := f_BCD_TimestampWithTimezone(),
    tP_UserDataLength := int2oct(UDL,1),
    tP_UserData := vz_UserData
  };

    
  template (value) SMS_DELIVER_Type cs_SMS_DELIVER_IoT (octetstring p_PRBS) :=
  { /* @status    APPROVED (LTE_A_PRO, NBIOT) */
    // according to 36.509 test loop mode H description the TPDU user data shall consist of 140 octets
    // with a TP address of 10 digits we have 1 + 7 + 1 + 1 + 7 + 1 = 18 octets plus PRBS of 140 octets => TPDU length is 158 octets
    // calculated in 7 bit chars this means 160 7-bit chars, no padding
    tP_ReplyPath := '0'B,
    tP_UserDataHeaderIndicator := '0'B,
    tP_StatusReportIndication := '0'B,
    spare2 := '00'B,
    tP_MoreMessagesToSend := '1'B,
    tP_MessageTypeIndicator := tsc_MT_SMS_DELIVER,
    tP_OriginatingAddress := cs_TP_Address ('2233445566'O),
    tP_ProtocolIdentifier := cs_TP_ProtocolIdentifier,
    tP_DataCodingScheme_Type := cs_TP_DataCodingScheme,
    tP_ServiceCentreTimeStamp := f_BCD_TimestampWithTimezone(),
    tP_UserDataLength := int2oct(160,1), // 160 7-bit characters  @sic R5-185125, R5s180577 sic@
    tP_UserData := p_PRBS // 140 octets
  };
    
    template (value) TP_ProtocolIdentifier_Type cs_TP_ProtocolIdentifier_sim :=
  { /* @status    APPROVED (IMS, LTE, LTE_A_R12) */
    // @sic R5s100586 sic@
    pidType := '01'B,
    interworking := '1'B,
    pidValue := '11111'B  // @sic R5s100773 sic@
  };
    
  template (value) TP_DataCodingScheme_Type cs_TP_DataCodingScheme_sim :=
  { /* @status    APPROVED (IMS, LTE) */
    codingGroup := '1111'B,
    codeValue := '0110'B
  }; 
  
  template (value) TP_DataCodingScheme_Type cs_TP_DataCodingScheme_otadm :=
  { /* @status    APPROVED (IMS, LTE) */
    codingGroup := '0000'B,
    codeValue := '0100'B
  };     
    function getProtoID(VZ_SMS_PDU_Type sms_type:=NORMAL) return template TP_ProtocolIdentifier_Type
  {
      var template TP_ProtocolIdentifier_Type tP_ProtocolIdentifier;
      if(sms_type == SIM_WAKE_UP)
      {
          tP_ProtocolIdentifier :=  cs_TP_ProtocolIdentifier_sim;                        
      }
      else 
      {
          tP_ProtocolIdentifier := cs_TP_ProtocolIdentifier;
      }
      return tP_ProtocolIdentifier;   
  }  
  function getDataCodingScheme(VZ_SMS_PDU_Type sms_type:=NORMAL) return template TP_DataCodingScheme_Type
  {
      var template TP_DataCodingScheme_Type tP_DataCodingScheme_Type;
      if(sms_type == SIM_WAKE_UP)
      {
          tP_DataCodingScheme_Type :=  cs_TP_DataCodingScheme_sim;                        
      }
      else if (sms_type == OTADM)
      {
           tP_DataCodingScheme_Type :=  cs_TP_DataCodingScheme_otadm;
      }
      else
      {
          tP_DataCodingScheme_Type := cs_TP_DataCodingScheme;
      }
      return tP_DataCodingScheme_Type;   
  }

}
