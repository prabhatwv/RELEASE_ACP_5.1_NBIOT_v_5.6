// ***************************************************************************
// @copyright   Copyright Notification
//   No part may be reproduced except as authorized by written permission.
//   The copyright and the foregoing restriction extend to reproduction in all media.
//   Trademark 2019, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).
//   All rights reserved.
// @version: 36.523-3 v15.3.0
// * $Date: 2018-09-22 12:18:06 +0200 (Sat, 22 Sep 2018) $
// * $Rev: 22495 $
// ***************************************************************************

module NBIOT_NAS_TrackingArea {

  import from NBIOT_RRC_ASN1_Definitions language "ASN.1:2002" all with {encode "UNALIGNED_PER_OctetAligned"};
  import from CIOT_NASTemplates all;
  import from Common4G5G_Templates all;
  import from CommonDefs all;
  import from EPS_NAS_Constants all;
  import from EPS_NAS_LoopBack_Templates all;
  import from EPS_NAS_MsgContainers all;
  import from EPS_NAS_Templates all;
  import from EPS_NAS_TypeDefs all;
  import from EUTRA_NB_AuxiliaryFunctions all;
  import from EUTRA_NB_CommonDefs all;
  import from EUTRA_NB_NASSteps all;
  import from EUTRA_NB_RRC_Templates all;
  import from LoopbackIP all;
  import from NAS_AuxiliaryDefsAndFunctions all;
  import from NAS_CommonTemplates all;
  import from NAS_CommonTypeDefs all;
  import from NBIOT_ASP_SrbDefs all;
  import from NBIOT_CellInfo all;
  import from NBIOT_CommonDefs all;
  import from NBIOT_CommonProcedures all;
  import from NBIOT_Component all;
  import from NBIOT_ConfigurationSteps all;
  import from NBIOT_Imported_EUTRA_ASN1_Types all;
  import from NBIOT_LoopBack all;
  import from NBIOT_NASSteps all;
  import from NBIOT_Paging all;
  import from NBIOT_Parameters all;
  import from NBIOT_RRCSteps all;
  import from NBIOT_RRC_Templates all;
  import from NBIOT_SRB_DRB_Templates all;
  import from NBIOT_SysInfo_Templates all;
  import from NBIOT_Timing all;
  import from Parameters all;
  import from UpperTesterFunctions all;

  type record of NAS_CauseValue_Type ListOfCauses_Type;  /* @status    APPROVED (NBIOT) */

  template (present) NAS_UL_Message_Type cdr_CIOT_ATTACH_REQUEST_WithIMSI(template AdditionalUpdateType p_AdditionalUpdateType)
    modifies cr_CIOT_ATTACH_REQUEST :=
  { /* @status    APPROVED (NBIOT) */
    aTTACH_REQUEST := {
      nasKeySetId              := cr_NAS_KeySetIdentifier(tsc_NasKsi_NoKey, tsc_Spare1),
      epsMobileIdentity        := f_Imsi2MobileIdentity(px_IMSI_Def)
    }
  };

  template (present) NAS_UL_Message_Type cdr_CIOT_ATTACH_REQUEST_WithIMSINoOldPTMSISigNoTai(template AdditionalUpdateType p_AdditionalUpdateType)
    modifies cr_CIOT_ATTACH_REQUEST :=
  { /* @status    APPROVED (NBIOT) */
    aTTACH_REQUEST := {
      nasKeySetId              := cr_NAS_KeySetIdentifier(tsc_NasKsi_NoKey, tsc_Spare1),
      epsMobileIdentity        := f_Imsi2MobileIdentity(px_IMSI_Def),
      oldPtmsiSignature        := omit,
      lastVisitedRegisteredTai := omit
    }
  };

  template (present) NAS_UL_Message_Type cdr_CIOT_TAU_RequestOldGuti(template (present) EPS_UpdateTypeValue p_EpsUpdate_TypeValue,
                                                                     NAS_KsiValue p_KsiValue,
                                                                     template DRXparameter p_DRXparameter := cr_DRXparameter_Any ('5C'O) ifpresent,
                                                                     template AdditionalUpdateType p_AdditionalUpdateType := cr_AdditionalUpdateType_CIOT ifpresent,
                                                                     template (present) MobileIdentity p_OldGuti,
                                                                     template TrackingAreaId p_LastTai := cr_TAI_Any ifpresent)
    modifies cr_508_TAU_Request :=
  { /* @status    APPROVED (NBIOT) */
    tRACKING_AREA_UPDATE_REQUEST := {
      oldGuti := p_OldGuti,
      lastVisitedRegisteredTai := p_LastTai,
      drxParameter := p_DRXparameter,
      addUpdateType := p_AdditionalUpdateType
    }
  };

  template (value) NAS_DL_Message_Type cs_CIOT_TAU_AcceptWithTimers(NAS_AttDetValue_Type p_UpdateValue,
                                                                    template (omit) MobileIdentity p_Guti,
                                                                    template (omit) TrackingAreaIdList p_TaiList,
                                                                    template (omit) EPS_BearerContextStatus p_EPSCtxtStatus,
                                                                    template (omit) AdditionalUpdateResult p_AdditionalUpdateResult,
                                                                    template (omit) GPRS_Timer p_T3402 := omit,
                                                                    template (omit) GPRS_Timer p_T3412 := cs_GprsTimer_tv('5A'O, tsc_GprsTimerUnit_deact, '00000'B)) :=
  /* @status    APPROVED (NBIOT) */
    cs_TAU_Accept_Common(p_UpdateValue,
                         p_Guti,
                         p_TaiList,
                         p_EPSCtxtStatus,
                         omit,
                         omit,
                         p_AdditionalUpdateResult,
                         -,
                         p_T3402,
                         -,
                         f_GetNBIOTNetworkFeatureSupport(CONTROL_PLANE),
                         p_T3412);

  /*
   * @desc      Check DeviceProperties
   * @param     p_DeviceProperties
   * @param     p_ExpectedValue
   * @status    APPROVED (NBIOT)
   */
  function f_NBIOT_DeviceProperties_CheckLowPriority(template (omit) DeviceProperties p_DeviceProperties,
                                                     B1_Type p_ExpectedValue) runs on NBIOT_PTC
  {
    if (not ispresent(p_DeviceProperties)) {
      f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, "Device Properties IE not present");
    }
    if (not match(p_ExpectedValue, p_DeviceProperties.lowPriority)) {
      f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, "MS configuration for NAS signalling low priority is not as expected");
    }
  }

  /*
   * @desc      REFERENCE TS 36.523-3 clause 22.5.7a
   * @status    APPROVED (NBIOT)
   */
  function f_TC_22_5_7a_NBIOT() runs on NBIOT_PTC
  { /* NB-IoT / Normal tracking area update List of equivalent PLMNs in the TRACKING AREA UPDATE ACCEPT message /
       Normal tracking area update Rejected (IMSI invalid / Illegal ME / UE identity cannot be derived by the network /
       UE implicitly detached / PLMN not allowed */
    
    f_NBIOT_Init(c2, CONTROL_PLANE, LTE_CellsOnDifferentPLMN);
    
    // create cell and send out system information
    f_NBIOT_CellConfig_Def(nbiot_Cell50, CONTROL_PLANE);//PLMN1 HPLMN
    f_NBIOT_CellConfig_Def(nbiot_Cell51, CONTROL_PLANE);
    f_NBIOT_CellConfig_Def(nbiot_Cell55, CONTROL_PLANE);
    f_NBIOT_CellConfig_Def(nbiot_Cell56, CONTROL_PLANE);
    f_NBIOT_CellConfig_Def(nbiot_Cell63, CONTROL_PLANE);
    
    // SS send Authentication Reject with cause: PLMN3 is a forbidden PLMN. This results in the UE being switched off and  with no valid GUTI
    f_NBIOT_Preamble_Reject(nbiot_Cell63, tsc_Cause_PLMN_NotAllowed);
    f_NBIOT_SetCellPower(nbiot_Cell63, tsc_NonSuitableOffNBIOTCellRS_EPRE);
    
    // Preamble: the UE is in state Registered, Idle mode (State 3-NB) on Ncell 50 according to TS 36.508 [18] with PLMN3 on its "forbidden PLMN list".
    f_NBIOT_Preamble(nbiot_Cell50, CONTROL_PLANE, STATE3_NB_IDLEUPDATED);
    
    f_NBIOT_TestBody_Set(true);
    
    fl_TC_22_5_7a_Body();
    
    // Postamble
    f_NBIOT_TestBody_Set(false);
    
    f_NBIOT_Postamble_N5Manual (nbiot_Cell56, nbiot_Cell63, CONTROL_PLANE);
  }

  /*
   * @desc      test body of TC_22_5_7a
   * @status    APPROVED (NBIOT)
   */
  function fl_TC_22_5_7a_Body() runs on NBIOT_PTC
  { // @sic R5-177051 sic@
    var template (value) NB_CellPowerList_Type v_CellPowerList;
    var NAS_MSG_Indication_Type v_NAS_Ind;
    var NB_SRB_COMMON_IND v_ReceivedAsp;
    var template (present) NAS_UL_Message_Type v_ESMMessage;
    var template (omit) EPS_BearerContextStatus v_EPS_ContextStatus;
    var template (present) B3_Type v_PDNType := (f_GetPdnType(), '101'B);
    
    var GutiParameters_Type v_Guti_Params_Cell50 := f_NBIOT_CellInfo_GetGuti (nbiot_Cell50);
    var GutiParameters_Type v_Guti_Params_Cell55 := f_NBIOT_CellInfo_GetGuti (nbiot_Cell55);
    var GutiParameters_Type v_Guti_Params_Cell51 := f_NBIOT_CellInfo_GetGuti (nbiot_Cell51);//For NCell51
    var GutiParameters_Type v_Guti_Params_Cell63 := f_NBIOT_CellInfo_GetGuti (nbiot_Cell63);//For NCell63
    
    var NAS_PlmnId v_PLMN_Cell50 := f_Asn2Nas_PlmnId (v_Guti_Params_Cell50.PLMN_Identity);
    var NAS_PlmnId v_PLMN_Cell51 := f_Asn2Nas_PlmnId (v_Guti_Params_Cell51.PLMN_Identity);   //For NCell51
    var NAS_PlmnId v_PLMN_Cell55 := f_Asn2Nas_PlmnId (v_Guti_Params_Cell55.PLMN_Identity);
    var NAS_PlmnId v_PLMN_Cell63 := f_Asn2Nas_PlmnId (v_Guti_Params_Cell63.PLMN_Identity);
    
    var EUTRA_ASN1_TrackingAreaCode_Type v_TAC_Cell50 := f_NBIOT_CellInfo_GetTAC (nbiot_Cell50);
    var EUTRA_ASN1_TrackingAreaCode_Type v_TAC_Cell55 := f_NBIOT_CellInfo_GetTAC (nbiot_Cell55);
    var EUTRA_ASN1_TrackingAreaCode_Type v_TAC_Cell51 := f_NBIOT_CellInfo_GetTAC (nbiot_Cell51);
    var EUTRA_ASN1_TrackingAreaCode_Type v_TAC_Cell63 := f_NBIOT_CellInfo_GetTAC (nbiot_Cell63);
    var EUTRA_ASN1_TrackingAreaCode_Type v_Tac := f_NBIOT_CellInfo_GetTAC(nbiot_Cell51);
    
    var template (value) PLMN_List v_EquivalentPLMN55and63 := cs_PLMN_List_2PLMNs(v_PLMN_Cell55, v_PLMN_Cell63);
    var template (value) PLMN_List v_EquivalentPLMN50and63 := cs_PLMN_List_2PLMNs(v_PLMN_Cell50, v_PLMN_Cell63);
    var NAS_CauseValue_Type v_NAS_CauseValue := tsc_EmmCause_IllegalUe;
    var integer i;

    timer t_WaitforAttach := f_NBIOT_SetTimerToleranceMax( nonProtocolTimer, tsc_WaitforAttach);
    timer t_NCell63_Plmn3;
 
    //@siclog "Step 1" siclog@
    // SS  adjusts the cell power levels according to row T1 in table 22.5.7a.3-1
    // All TRACKING AREA UPDATE REJECT messages below shall be sent integrity protected
    v_CellPowerList := {
      cs_NB_CellPower(nbiot_Cell50, tsc_NonSuitableOffNBIOTCellRS_EPRE),
      cs_NB_CellPower(nbiot_Cell51, tsc_ServingCellRS_EPRE)
    };
    f_NBIOT_SetCellPowerList(v_CellPowerList);
    
    //@siclog "Step 2" siclog@
    //The UE transmits a TRACKING AREA UPDATE REQUEST message on NB-IoT Ncell 51.
    v_NAS_Ind := f_NBIOT_TrackingAreaUpdate_Step1_3(nbiot_Cell51, ?);
    
    v_EPS_ContextStatus := v_NAS_Ind.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.epsBearerContextStatus; // Send this back in the Accept
    //@siclog "Step 3" siclog@
    // SS responds with a TRACKING AREA UPDATE ACCEPT message including PLMN2 and PLMN3 in the list of equivalent PLMNs.
    SRB.send(cas_NB_SRB_NasPdu_REQ(nbiot_Cell51,
                                   tsc_SRB1bis,
                                   cs_TimingInfo_Now,
                                   cs_NAS_Request(tsc_SHT_IntegrityProtected_Ciphered,
                                                  cs_TAU_Accept_Common(tsc_EpsUpdate_TaUpdate,
                                                                       f_GutiParameters2MobileIdentity(tsc_IEI_Guti, v_Guti_Params_Cell51),
                                                                       cds_TAIListNonConsecutive_tlv(v_PLMN_Cell51, { bit2oct(v_Tac) }),
                                                                       v_EPS_ContextStatus,
                                                                       omit,
                                                                       omit,
                                                                       f_GetNBIOTAdditionalUpdateResult(v_NAS_Ind.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.addUpdateType),
                                                                       -,
                                                                       -,
                                                                       v_EquivalentPLMN55and63,
                                                                       f_GetNBIOTNetworkFeatureSupport(CONTROL_PLANE)))));
    //@siclog "Step 4" siclog@
    //The UE transmits a TRACKING AREA UPDATE COMPLETE message
    SRB.receive(car_NB_SRB_NasPdu_IND(nbiot_Cell51,
                                      tsc_SRB1bis,
                                      cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered,
                                                        cr_508_TAU_Complete)));
    //@siclog "Step 5" siclog@
    // SS Releases the RRC Connection
    f_NBIOT_RRC_ConnectionRelease(nbiot_Cell51);
    
    //@siclog "Step 6" siclog@
    // SS  adjusts the cell power levels according to row T2 in table 22.5.7a.3-1
    v_CellPowerList := {
      cs_NB_CellPower(nbiot_Cell51, tsc_NonSuitableOffNBIOTCellRS_EPRE),
      cs_NB_CellPower(nbiot_Cell55, tsc_ServingCellRS_EPRE)
    };
    f_NBIOT_SetCellPowerList(v_CellPowerList);
    
    //@siclog "Step 7" siclog@
    //Check: Does the UE transmit a TRACKING AREA UPDATE REQUEST message on Ncell 55 (PLMN2)?
    v_NAS_Ind := f_NBIOT_TrackingAreaUpdate_Step1_3(nbiot_Cell55, ?);
    f_NBIOT_PreliminaryPass(__FILE__, __LINE__, "Test Case 22.5.7a Step 7");
    
    
    v_EPS_ContextStatus := v_NAS_Ind.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.epsBearerContextStatus; // Send this back in the Accept
    //@siclog "Step 8" siclog@
    // The SS transmits a TRACKING AREA UPDATE ACCEPT message including PLMN1 and PLMN3 in the list of equivalent PLMNs
    SRB.send(cas_NB_SRB_NasPdu_REQ(nbiot_Cell55,
                                   tsc_SRB1bis,
                                   cs_TimingInfo_Now,
                                   cs_NAS_Request(tsc_SHT_IntegrityProtected_Ciphered,
                                                  cs_TAU_Accept_Common(tsc_EpsUpdate_TaUpdate,
                                                                       f_GutiParameters2MobileIdentity(tsc_IEI_Guti, v_Guti_Params_Cell55),
                                                                       cds_TAIListNonConsecutive_tlv(v_PLMN_Cell55, { bit2oct(v_TAC_Cell55) }),
                                                                       v_EPS_ContextStatus,
                                                                       omit,
                                                                       omit,
                                                                       f_GetNBIOTAdditionalUpdateResult(v_NAS_Ind.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.addUpdateType),
                                                                       -,
                                                                       -,
                                                                       v_EquivalentPLMN50and63,
                                                                       f_GetNBIOTNetworkFeatureSupport(CONTROL_PLANE)))));
    
    //@siclog "Step 9" siclog@
    //The UE transmits a TRACKING AREA UPDATE COMPLETE message
    SRB.receive(car_NB_SRB_NasPdu_IND(nbiot_Cell55,
                                      tsc_SRB1bis,
                                      cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered,
                                                        cr_508_TAU_Complete)));
    
    //@siclog "Step 10" siclog@
    // SS Releases the RRC Connection
    f_NBIOT_RRC_ConnectionRelease(nbiot_Cell55);
    
    //@siclog "Step 11" siclog@
    // SS  adjusts the cell power levels according to row T3 in table 22.5.7a.3-1
    // Note: Ncell 63 (PLMN3) belongs to the forbidden PLMN.
    v_CellPowerList := {
      cs_NB_CellPower(nbiot_Cell55, tsc_NonSuitableOffNBIOTCellRS_EPRE),
      cs_NB_CellPower(nbiot_Cell63, tsc_ServingCellRS_EPRE)
    };
    f_NBIOT_SetCellPowerList(v_CellPowerList);
    
    t_NCell63_Plmn3.start(f_NBIOT_SetTimerToleranceMax(nonProtocolTimer, 30.0));
    //@siclog "Step 12" siclog@
    // Check: Does the UE transmit a TRACKING AREA UPDATE REQUEST message on NB-IoT Ncell 63 (PLMN3) in next 30 seconds?
    if (f_NBIOT_RRC_ConnectionRequest_Common(nbiot_Cell63, t_NCell63_Plmn3)) {
      // as UE sends RRC ConnReq, we know there is a Fail verdict to raise...
      f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, "Test Case 22.5.7a Step 12");
    }
    
    //@siclog "Step 13" siclog@
    // The UE is switched to manual PLMN selection mode and is made to select PLMN3 in order to remove PLMN3 in the forbidden PLMN list in the UE
    f_UT_ManualPLMN_Select(UT, f_Asn2Nas_PlmnId (f_NBIOT_CellInfo_GetGutiPLMN (nbiot_Cell63)));
    
    //@siclog "Step 14" siclog@
    // The UE transmits a TRACKING AREA UPDATE REQUEST message on NB-IoT Ncell 63 (PLMN3)
    v_NAS_Ind := f_NBIOT_TrackingAreaUpdate_Step1_3(nbiot_Cell63, ?);
    
    v_EPS_ContextStatus := v_NAS_Ind.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.epsBearerContextStatus; // Send this back in the Accept
    //@siclog "Step 15" siclog@
    // The SS transmits a TRACKING AREA UPDATE ACCEPT message without the list of equivalent PLMNs
    SRB.send(cas_NB_SRB_NasPdu_REQ(nbiot_Cell63,
                                   tsc_SRB1bis,
                                   cs_TimingInfo_Now,
                                   cs_NAS_Request(tsc_SHT_IntegrityProtected_Ciphered,
                                                  cs_TAU_Accept_Common(tsc_EpsUpdate_TaUpdate,
                                                                     f_GutiParameters2MobileIdentity(tsc_IEI_Guti, v_Guti_Params_Cell63),
                                                                       cds_TAIListNonConsecutive_tlv(v_PLMN_Cell63, { bit2oct(v_TAC_Cell63) }),
                                                                       v_EPS_ContextStatus,
                                                                       omit,
                                                                       omit,
                                                                       f_GetNBIOTAdditionalUpdateResult(v_NAS_Ind.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.addUpdateType),
                                                                       -,
                                                                       -,
                                                                       omit,
                                                                       f_GetNBIOTNetworkFeatureSupport(CONTROL_PLANE)))));
    //@siclog "Step 16" siclog@
    // Check: Does the UE transmit a TRACKING AREA UPDATE COMPLETE message?
    SRB.receive(car_NB_SRB_NasPdu_IND(nbiot_Cell63,
                                      tsc_SRB1bis,
                                      cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered,
                                                        cr_508_TAU_Complete)));
    f_NBIOT_PreliminaryPass(__FILE__, __LINE__, "Test Case 22.5.7a Step 16");
    
    //@siclog "Step 17" siclog@
    // SS Releases the RRC Connection
    f_NBIOT_RRC_ConnectionRelease(nbiot_Cell63);
    
    //@siclog "Step 18" siclog@
    // The UE is switched back to automatic PLMN selection mode.
    f_UT_AutomaticPLMN_Select(UT);
    
    //@siclog "Step 19 - Void" siclog@
    
    //@siclog "Step 20" siclog@
    // SS  adjusts the cell power levels according to row T4 in table 22.5.7a.3-1
    v_CellPowerList := {
      cs_NB_CellPower(nbiot_Cell63, tsc_NonSuitableOffNBIOTCellRS_EPRE),
      cs_NB_CellPower(nbiot_Cell51, tsc_ServingCellRS_EPRE),
      cs_NB_CellPower(nbiot_Cell55, tsc_NonSuitableNBIOTCellRS_EPRE)
    };
    f_NBIOT_SetCellPowerList(v_CellPowerList);
    
    //@siclog "Step 21" siclog@
    // Check: Does the UE transmit a TRACKING AREA UPDATE REQUEST message on Ncell 51 (PLMN1)?
    v_NAS_Ind := f_NBIOT_TrackingAreaUpdate_Step1_3(nbiot_Cell51, ?);
    f_NBIOT_PreliminaryPass(__FILE__, __LINE__, "Test Case 22.5.7a Step 21");
    
    v_EPS_ContextStatus := v_NAS_Ind.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.epsBearerContextStatus; // Send this back in the Accept
    //@siclog "Step 22" siclog@
    // SS responds with TRACKING AREA UPDATE ACCEPT message
    SRB.send(cas_NB_SRB_NasPdu_REQ(nbiot_Cell51,
                                   tsc_SRB1bis,
                                   cs_TimingInfo_Now,
                                   cs_NAS_Request(tsc_SHT_IntegrityProtected_Ciphered,
                                                  cs_TAU_Accept_Common(tsc_EpsUpdate_TaUpdate,
                                                                       f_GutiParameters2MobileIdentity(tsc_IEI_Guti, v_Guti_Params_Cell55),
                                                                       cds_TAIListNonConsecutive_tlv(v_PLMN_Cell51, { bit2oct(v_TAC_Cell51) }), // @sic R5s170972 sic@
                                                                       v_EPS_ContextStatus,
                                                                       omit,
                                                                       omit,
                                                                       f_GetNBIOTAdditionalUpdateResult(v_NAS_Ind.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.addUpdateType),
                                                                       -,
                                                                       -,
                                                                       omit,
                                                                       f_GetNBIOTNetworkFeatureSupport(CONTROL_PLANE)))));
    
    //@siclog "Step 23" siclog@
    // The UE transmits a TRACKING AREA UPDATE COMPLETE message
    SRB.receive(car_NB_SRB_NasPdu_IND(nbiot_Cell51,
                                      tsc_SRB1bis,
                                      cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered,
                                                        cr_508_TAU_Complete)));
    //@siclog "Step 23A" siclog@
    // The SS releases the RRC connection.
    f_NBIOT_RRC_ConnectionRelease(nbiot_Cell51); // @sic R5s170777 sic@
    
    if (px_DoAttachWithoutPDN) {
      v_ESMMessage := cr_ESM_DUMMY_MESSAGE;
    } else {
      v_ESMMessage := cr_CIOT_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach, v_PDNType);
    }
    for (i:=0; i<2; i:=i+1) {
      //@siclog "Step 24" siclog@
      // SS  adjusts the cell power levels according to row T5 in table 22.5.7a.3-1
      v_CellPowerList := {
        cs_NB_CellPower(nbiot_Cell50, tsc_ServingCellRS_EPRE),
        cs_NB_CellPower(nbiot_Cell51, tsc_NonSuitableNBIOTCellRS_EPRE),
        cs_NB_CellPower(nbiot_Cell55, tsc_NonSuitableOffNBIOTCellRS_EPRE)
      };
      f_NBIOT_SetCellPowerList(v_CellPowerList);
      
      //@siclog "Step 25" siclog@
      // The UE transmits a TRACKING AREA UPDATE REQUEST on Ncell 50
      v_NAS_Ind := f_NBIOT_TrackingAreaUpdate_Step1_3(nbiot_Cell50, ?);
      
      //@siclog "Step 26" siclog@
      // The SS transmits a TRACKING AREA UPDATE REJECT message:
      //     - first iteration with EMM cause = "Illegal UE"
      //     - second iteration with EMM cause = "Illegal ME"
      SRB.send(cas_NB_SRB1bis_NasPdu_REQ(nbiot_Cell50,
                                         cs_TimingInfo_Now,
                                         cs_NAS_Request(f_GetEPS_SecurityHeaderForReject(v_NAS_CauseValue), // @sic R5-174501 sic@
                                                        cs_508_TRACKING_AREA_UPDATE_REJECT(v_NAS_CauseValue))));
      v_NAS_CauseValue := tsc_EmmCause_IllegalMe;
      
      //@siclog "Step 27" siclog@
      // SS Releases the RRC Connection
      f_NBIOT_RRC_ConnectionRelease(nbiot_Cell50);
      
      //@siclog "Step 28" siclog@
      // SS  adjusts the cell power levels according to row T6 in table 22.5.7a.3-1
      v_CellPowerList := {
        cs_NB_CellPower(nbiot_Cell51, tsc_ServingCellRS_EPRE),
        cs_NB_CellPower(nbiot_Cell50, tsc_NonSuitableNBIOTCellRS_EPRE)
      };
      f_NBIOT_SetCellPowerList(v_CellPowerList);
      
      //@siclog "Step 29" siclog@
      // Check: Does the UE transmit an ATTACH REQUEST message in the next 90 seconds on Ncell 51?
      // Note: NB-IoT Ncell 51 belongs to the same PLMN where the UE was rejected but a different TAC
      f_NBIOT_CheckNoAttachOn1Cell(nbiot_Cell51, 90.0, "Step 29");
      
      //@siclog "Step 30" siclog@
      //The user initiates an attach by MMI or by AT command
      f_UT_TriggerAttach (UT);
      
      //@siclog "Step 31" siclog@
      // Check: Does the UE transmit an ATTACH REQUEST message in the next 90 seconds on Ncell 51?
      f_NBIOT_CheckNoAttachOn1Cell(nbiot_Cell51, 90.0, "Step 31");
      
      // EXCEPTION: Steps 32a1 to 32a4 describe behaviour that depends on the network capability / preference;
      // the "lower case letter" identifies a step sequence that takes place if the network is capable or prefers
      
      //@siclog "Step 32a1" siclog@
      // SS  adjusts the cell power levels according to row T7 in table 22.5.7a.3-1
      v_CellPowerList := {
        cs_NB_CellPower(nbiot_Cell50, tsc_NonSuitableOffNBIOTCellRS_EPRE),
        cs_NB_CellPower(nbiot_Cell55, tsc_ServingCellRS_EPRE),
        cs_NB_CellPower(nbiot_Cell51, tsc_NonSuitableNBIOTCellRS_EPRE)
      };
      f_NBIOT_SetCellPowerList(v_CellPowerList);
      
      
      //@siclog "Step 32a2" siclog@
      if (px_SinglePLMN_Tested == MultiPLMN) {
        // Check: Does the UE transmit an ATTACH REQUEST message in the next 90 seconds on Ncell 55?
        // Note: Ncell 55 belongs to a PLMN which is not the same like the one on which the UE was rejected.
        f_NBIOT_CheckNoAttachOn1Cell(nbiot_Cell55, 90.0, "Step 32a2");
      }
      
      //@siclog "Step 32a3" siclog@
      // The user initiates an attach by MMI or by AT command
      f_UT_TriggerAttach (UT);
      
      // @siclog "Step 32a4" siclog@
      // Check: Does the UE transmit an ATTACH REQUEST message in the next 90 seconds on Ncell 55?
      f_NBIOT_CheckNoAttachOn1Cell(nbiot_Cell55, 90.0, "Step 32a4");
      
      //@siclog "Step 33" siclog@
      f_UT_SwitchOffUE(UT, false);
      
      //@siclog "Step 34" siclog@
      // SS  adjusts the cell power levels according to row T8 in table 22.5.7a.3-1
      v_CellPowerList := {
        cs_NB_CellPower(nbiot_Cell55, tsc_NonSuitableOffNBIOTCellRS_EPRE),
        cs_NB_CellPower(nbiot_Cell51, tsc_ServingCellRS_EPRE)
      };
      f_NBIOT_SetCellPowerList(v_CellPowerList);
      
      //@siclog "Step 35" siclog@
      f_UT_SwitchOnUE(UT);
      
      //@siclog "Step 36" siclog@
      // Check: Does the UE transmit an ATTACH REQUEST message with a PDN CONNECTIVITY REQUEST
      // message to request PDN connectivity to the default PDN or ESM DUMMY MESSAGE on Ncell 51?
      v_NAS_Ind := f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell51,
                                                  cr_EstablishmentCause_NB_Any,
                                                  cr_NAS_IndicationWithPiggybacking(tsc_SHT_NoSecurityProtection, // @sic R5s170777 sic@
                                                                                    cdr_CIOT_ATTACH_REQUEST_WithIMSI(cr_AdditionalUpdateType_CIOT), //Table 22.5.7a.3.3-4
                                                                                    v_ESMMessage));
      f_NBIOT_PreliminaryPass(__FILE__, __LINE__, "Step 36");
      
      
      //@siclog "Step 37-46b1" siclog@
      // The procedure is completed by executing steps 5 to 14b1 of the UE registration procedure in TS 36.508 subclause 8.1.5.2
      f_NBIOT_InitialRegistration_Step5_14(nbiot_Cell51, CONTROL_PLANE, STATE2_NB_CONNECTED_UPDATED, v_NAS_Ind);
      
      //@siclog "Step 47" siclog@
      // SS Releases the RRC Connection, and the UE is in state Registered, NB-IoT Idle Mode (N1) on Ncell 51
      f_NBIOT_RRC_ConnectionRelease(nbiot_Cell51);
    }
    
    //@siclog "Step 48" siclog@
    // SS  adjusts the cell power levels according to row T9 in table 22.5.7a.3-1
    v_CellPowerList := {
      cs_NB_CellPower(nbiot_Cell51, tsc_NonSuitableNBIOTCellRS_EPRE),
      cs_NB_CellPower(nbiot_Cell50, tsc_ServingCellRS_EPRE)
    };
    f_NBIOT_SetCellPowerList(v_CellPowerList);
    
    //@siclog "Step 49" siclog@
    // The UE transmits a TRACKING AREA UPDATE REQUEST on Ncell 50
    v_NAS_Ind := f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell50,  // Table 22.5.7a.3.3-5
                                                ?,
                                                cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                                  cdr_TAU_Request_OldAddGutiTAI(tsc_EpsUpdate_TaUpdate,  //Table 22.5.7a.3.3-5
                                                                                                f_NBIOT_SecurityKSIasme_Get(),
                                                                                                cr_DRXparameter_Any ('5C'O) ifpresent,
                                                                                                cr_AdditionalUpdateType_CIOT ifpresent,  // @sic R5-176872 sic@
                                                                                                f_GutiParameters2MobileIdentity(omit, v_Guti_Params_Cell51),
                                                                                                cr_TAI_Any ifpresent,
                                                                                                omit, // @sic R5s170777 sic@
                                                                                                cr_PTMSI_SignatureAny ifpresent)));
    
    //@siclog "Step 50" siclog@
    // The SS transmits a TRACKING AREA UPDATE REJECT message with EMM cause = "UE identity cannot be derived by the network" as specified.
    SRB.send(cas_NB_SRB1bis_NasPdu_REQ(nbiot_Cell50,
                                       cs_TimingInfo_Now,
                                       cs_NAS_Request(f_GetEPS_SecurityHeaderForReject(tsc_EmmCause_UEIdentityNotDerived), // @sic R5-174501 sic@
                                                      cs_508_TRACKING_AREA_UPDATE_REJECT(tsc_EmmCause_UEIdentityNotDerived))));
    
    //@siclog "Step 51" siclog@
    // SS Releases the RRC Connection
    f_NBIOT_RRC_ConnectionRelease(nbiot_Cell50);

    // EXCEPTION: Step 52a1 describes a behaviour which depends on the UE capability
    //@siclog "Step 52a1" siclog@
    // IF NOT pc_Automatic_EPS_Re_Attach, the user initiates an attach by MMI or by AT command
    if (pc_Automatic_EPS_Re_Attach == false) {
      f_UT_TriggerAttach (UT);
    }
    
    //@siclog "Step 53" siclog@
    // Check: Does the UE transmit an ATTACH REQUEST message with a PDN CONNECTIVITY REQUEST message
    //        to request PDN connectivity to the default PDN or ESM DUMMY MESSAGE message on Ncell 50?
    v_NAS_Ind := f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell50,
                                                cr_EstablishmentCause_NB_Any,
                                                cr_NAS_IndicationWithPiggybacking(tsc_SHT_NoSecurityProtection, // @sic R5s170777 sic@
                                                                                  cdr_CIOT_ATTACH_REQUEST_WithIMSINoOldPTMSISigNoTai(cr_AdditionalUpdateType_CIOT), //Table 22.5.7a.3.3-7
                                                                                  v_ESMMessage));
    f_NBIOT_PreliminaryPass(__FILE__, __LINE__, "Step 53");
    
    //@siclog "Step 54-63b1" siclog@
    // The attach procedure is completed by executing steps 5 to 14b1 of the UE registration procedure in TS 36.508 subclause 8.1.5.2.
    f_NBIOT_InitialRegistration_Step5_14(nbiot_Cell50, CONTROL_PLANE, STATE2_NB_CONNECTED_UPDATED, v_NAS_Ind);
    
    //@siclog "Step 64" siclog@
    // SS Releases the RRC Connection
    f_NBIOT_RRC_ConnectionRelease(nbiot_Cell50);
    
    //@siclog "Step 65" siclog@
    // SS  adjusts the cell power levels according to row T10 in table 22.5.7a.3-1
    v_CellPowerList := {
      cs_NB_CellPower(nbiot_Cell50, tsc_NonSuitableNBIOTCellRS_EPRE),
      cs_NB_CellPower(nbiot_Cell51, tsc_ServingCellRS_EPRE)
    };
    f_NBIOT_SetCellPowerList(v_CellPowerList);
    
    //@siclog "Step 66" siclog@
    // The UE transmits a TRACKING AREA UPDATE REQUEST on Ncell 51
    v_NAS_Ind := f_NBIOT_TrackingAreaUpdate_Step1_3(nbiot_Cell51, ?);
    
    //@siclog "Step 67" siclog@
    // The SS transmits a TRACKING AREA UPDATE REJECT message with EMM cause = "UE implicitly detached" as specified
    SRB.send(cas_NB_SRB1bis_NasPdu_REQ(nbiot_Cell51,
                                       cs_TimingInfo_Now,
                                       cs_NAS_Request(f_GetEPS_SecurityHeaderForReject(tsc_EmmCause_ImplicitlyDetached), // @sic R5-174501 sic@
                                                      cs_508_TRACKING_AREA_UPDATE_REJECT(tsc_EmmCause_ImplicitlyDetached))));
    
    // EXCEPTION: Steps 68a-68a1 describes the behaviour that depends on UE behaviour (Note 1)
    //NOTE 1:  SS waits for 1.5 second to receive the Attach Request on the existing RRC Connection.
    //         In case Attach Request is not received within 1.5 second then the existing RRC Connection is released.
    t_WaitforAttach.start; // @sic R5s170908 sic@
    alt {
      [] SRB.receive(car_NB_SRB1bis_NasPdu_IND(nbiot_Cell51,
                                               cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                 cdr_CIOT_ATTACH_REQUEST_WithGuti(cr_AdditionalUpdateType_CIOT,  //Table 22.5.7a.3.3-9
                                                                                                                  f_NBIOT_SecurityKSIasme_Get(),
                                                                                                                  f_GutiParameters2MobileIdentity(omit, v_Guti_Params_Cell50),
                                                                                                                  cr_TAI(v_PLMN_Cell50, bit2oct(v_TAC_Cell50))),
                                                                                 v_ESMMessage))) -> value v_ReceivedAsp
        {
          v_NAS_Ind := v_ReceivedAsp.Signalling.Nas[0];
          t_WaitforAttach.stop;
          f_NBIOT_PreliminaryPass(__FILE__, __LINE__, "Step 69");
        }
      [] t_WaitforAttach.timeout
        {
          //@siclog "Step 68a" siclog@
          // The SS releases the RRC connection
          f_NBIOT_RRC_ConnectionRelease(nbiot_Cell51);
          //@siclog "Step 68a1" siclog@
          // IF NOT pc_Automatic_EPS_Re_Attach THEN the user initiates an attach by MMI or by AT command
          if (pc_Automatic_EPS_Re_Attach == false) {
            f_UT_TriggerAttach (UT);
          }
          
          //@siclog "Step 69" siclog@
          // Check: Does the UE transmit an ATTACH REQUEST message with a PDN CONNECTIVITY REQUEST message
          //         to request PDN connectivity to the default PDN or ESM DUMMY MESSAGE message on Ncell 51?
          v_NAS_Ind := f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell51,
                                                      cr_EstablishmentCause_NB_Any,
                                                      cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                        cdr_CIOT_ATTACH_REQUEST_WithGuti(cr_AdditionalUpdateType_CIOT,  //Table 22.5.7a.3.3-9
                                                                                                                         f_NBIOT_SecurityKSIasme_Get(),
                                                                                                                         f_GutiParameters2MobileIdentity(omit, v_Guti_Params_Cell50),
                                                                                                                         cr_TAI(v_PLMN_Cell50, bit2oct(v_TAC_Cell50))),
                                                                                        v_ESMMessage));
          f_NBIOT_PreliminaryPass(__FILE__, __LINE__, "Step 69");
        }
    }
    
    //@siclog "Step 70-79b1" siclog@
    // The attach procedure is completed by executing steps 5 to 14b1 of the UE registration procedure in TS 36.508 subclause 8.1.5.2.
    f_NBIOT_InitialRegistration_Step5_14(nbiot_Cell51, CONTROL_PLANE, STATE2_NB_CONNECTED_UPDATED, v_NAS_Ind);
    
    //@siclog "Step 80" siclog@
    // The SS releases the RRC connection
    f_NBIOT_RRC_ConnectionRelease(nbiot_Cell51);
    
    //@siclog "Step 81 - Void" siclog@
    
    //@siclog "Step 82-91b1 - Void" siclog@
    
    //@siclog "Step 92" siclog@
    // SS  adjusts the cell power levels according to row T11 in table 22.5.7a.3-1
    v_CellPowerList := {
      cs_NB_CellPower(nbiot_Cell50, tsc_NonSuitableOffNBIOTCellRS_EPRE),
      cs_NB_CellPower(nbiot_Cell51, tsc_NonSuitableOffNBIOTCellRS_EPRE)
    };
    f_NBIOT_SetCellPowerList(v_CellPowerList);
    f_NBIOT_ReleaseCellSpecific(nbiot_Cell50); //NBIOT Cells to be released as soon as it is not used anymore
    f_NBIOT_ReleaseCellSpecific(nbiot_Cell51);
    
    v_CellPowerList := {
      cs_NB_CellPower(nbiot_Cell55, tsc_NonSuitableNBIOTCellRS_EPRE),
      cs_NB_CellPower(nbiot_Cell56, tsc_ServingCellRS_EPRE)
    };
    f_NBIOT_SetCellPowerList(v_CellPowerList);
    
    
    //@siclog "Step 93" siclog@
    // The UE transmits a TRACKING AREA UPDATE REQUEST on Ncell 56
    v_NAS_Ind := f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell56,  // Table 22.5.7a.3.3-10
                                                ?,
                                                cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                                  cdr_CIOT_TAU_RequestOldGuti(tsc_EpsUpdate_TaUpdate,  //Table 22.5.7a.3.3-10
                                                                                              f_NBIOT_SecurityKSIasme_Get(),
                                                                                              -,
                                                                                              -,
                                                                                              f_GutiParameters2MobileIdentity(omit, v_Guti_Params_Cell51))));
    
    //@siclog "Step 94" siclog@
    // The SS transmits a TRACKING AREA UPDATE REJECT message with EMM cause = "PLMN not allowed"
    SRB.send(cas_NB_SRB1bis_NasPdu_REQ(nbiot_Cell56,
                                       cs_TimingInfo_Now,
                                       cs_NAS_Request(f_GetEPS_SecurityHeaderForReject(tsc_Cause_PLMN_NotAllowed), // @sic R5-174501 sic@
                                                      cs_508_TRACKING_AREA_UPDATE_REJECT(tsc_Cause_PLMN_NotAllowed)))); // Table 22.5.7a.3.3-11
    
    //@siclog "Step 95" siclog@
    // The SS releases the RRC connection
    f_NBIOT_RRC_ConnectionRelease(nbiot_Cell56);
    
    //@siclog "Step 96" siclog@
    // Check: Does the UE transmit an ATTACH REQUEST message in the next 30 seconds on Ncell 56?
    f_NBIOT_CheckNoAttachOn1Cell(nbiot_Cell56, 30.0, "Step 96");
    
    //@siclog "Step 97" siclog@
    // If possible (see ICS) switch off is performed or the USIM is removed. Otherwise the power is removed.
    f_UT_SwitchOffUE(UT, true);
    
    //@siclog "Step 98" siclog@
    // SS  adjusts the cell power levels according to row T12 in table 22.5.7a.3-1
    v_CellPowerList := {
      cs_NB_CellPower(nbiot_Cell56, tsc_NonSuitableOffNBIOTCellRS_EPRE),
      cs_NB_CellPower(nbiot_Cell55, tsc_ServingCellRS_EPRE)
    };
    f_NBIOT_SetCellPowerList(v_CellPowerList);
    
    //@siclog "Step 99" siclog@
    // The UE is brought back to operation or the USIM is inserted
    f_UT_SwitchOnUE(UT, true);
    
    //@siclog "Step 100" siclog@
    // Check: Does the UE transmit an ATTACH REQUEST message in the next 90 seconds on Ncell 55?
    f_NBIOT_CheckNoAttachOn1Cell(nbiot_Cell55, 90.0, "Step 100");
    
    //@siclog "Step 101" siclog@
    //The user initiates an attach by MMI or by AT command.
    f_UT_TriggerAttach (UT);
    
    //@siclog "Step 102" siclog@
    // Check: Does the UE transmit an ATTACH REQUEST message in the next 90 seconds on Ncell 55?
    f_NBIOT_CheckNoAttachOn1Cell(nbiot_Cell55, 90.0, "Step 102");
    
    //@siclog "Step 103" siclog@
    // The following messages are sent and shall be received on Ncell 63
    //@siclog "Step 104" siclog@
    // SS  adjusts the cell power levels according to row T13 in table 22.5.7a.3-1.
    v_CellPowerList := {
      cs_NB_CellPower(nbiot_Cell55, tsc_NonSuitableOffNBIOTCellRS_EPRE),
      cs_NB_CellPower(nbiot_Cell63, tsc_ServingCellRS_EPRE)
    };
    f_NBIOT_SetCellPowerList(v_CellPowerList);
    
    //@siclog "Step 105" siclog@
    // Check: Does the UE transmit ATTACH REQUEST message with a PDN CONNECTIVITY REQUEST message to request PDN connectivity to the default PDN or ESM DUMMY MESSAGE message on Ncell 63?
    v_NAS_Ind := f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell63,
                                                cr_EstablishmentCause_NB_Any,
                                                cr_NAS_IndicationWithPiggybacking(tsc_SHT_NoSecurityProtection, // @sic R5s170777 sic@
                                                                                  cdr_CIOT_ATTACH_REQUEST_WithIMSINoOldPTMSISigNoTai(cr_AdditionalUpdateType_CIOT),  //Table 22.5.7a.3.3-12
                                                                                  v_ESMMessage));
    f_NBIOT_PreliminaryPass(__FILE__, __LINE__, "Step 105");
    
    //@siclog "Step 106-115b1" siclog@
    // The attach procedure is completed by executing steps 5 to 14b1 of the UE registration procedure in TS 36.508 sub clause 8.1.5.2.
    f_NBIOT_InitialRegistration_Step5_14(nbiot_Cell63, CONTROL_PLANE, STATE2_NB_CONNECTED_UPDATED, v_NAS_Ind);
    
    //@siclog "Step 116" siclog@
    // If possible (see ICS) switch off is performed or the USIM is removed. Otherwise the power is
    //@siclog "Step 117a1" siclog@
    // EXCEPTION: Step 117a1 describes behaviour that depends on the UE capability
    // If pc_SwitchOnOff or pc_USIM_Removal then the UE transmits a DETACH REQUEST.
    f_NBIOT_UE_Detach_SwitchOffUe(nbiot_Cell63, CONTROL_PLANE, RRC_CONNECTED);
    
    //@siclog "Step 118" siclog@
    // The following messages are sent and shall be received on NB-IoT Ncell 56
    //@siclog "Step 119" siclog@
    // SS  adjusts the cell power levels according to row T14 in table 22.5.7a.3-1
    // Note: Ncell 56 belongs to the forbidden PLMN.
    v_CellPowerList := {
      cs_NB_CellPower(nbiot_Cell63, tsc_NonSuitableNBIOTCellRS_EPRE),
      cs_NB_CellPower(nbiot_Cell56, tsc_ServingCellRS_EPRE)
    };
    f_NBIOT_SetCellPowerList(v_CellPowerList);
    
    //@siclog "Step 120" siclog@
    // The UE is brought back to operation or the USIM is inserted
    f_UT_SwitchOnUE(UT, true);
    
    //@siclog "Step 121" siclog@
    // The UE is switched to manual PLMN selection mode and is made to select the forbidden PLMN (PLMN2)
    f_UT_ManualPLMN_Select(UT, f_Asn2Nas_PlmnId (f_NBIOT_CellInfo_GetGutiPLMN (nbiot_Cell56)));
    
    //@siclog "Step 122" siclog@
    // Check: Does the UE transmit ATTACH REQUEST message with a PDN CONNECTIVITY REQUEST message
    //        to request PDN connectivity to the default PDN or ESM DUMMY MESSAGE message?
    v_NAS_Ind := f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell56,
                                                cr_EstablishmentCause_NB_Any,
                                                cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                  cr_CIOT_ATTACH_REQUEST (cr_AdditionalUpdateType_CIOT),
                                                                                  v_ESMMessage)); //forbidden PLMN list is now empty
    f_NBIOT_PreliminaryPass(__FILE__, __LINE__, "Step 122");
    
    //@siclog "Step 123-132b1" siclog@
    // The attach procedure is completed by executing steps 5 to 14b1 of the UE registration procedure in TS 36.508 sub clause 8.1.5.2.
    f_NBIOT_InitialRegistration_Step5_14(nbiot_Cell56, CONTROL_PLANE, STATE2_NB_CONNECTED_UPDATED, v_NAS_Ind);
    
    // At the end of this test procedure sequence, the UE is in end state NB-IoT manual selection Mode (N5) according to TS 36.523-3.
    //@siclog "Step 133" siclog@
    // The SS releases the RRC connection
    f_NBIOT_RRC_ConnectionRelease(nbiot_Cell56);
    
  }// function fl_TC_22_5_7a_Body

  /*
   * @desc      REFERENCE TS 36.523-3 clause 22.5.7b
   * @status    APPROVED (NBIOT)
   */
  function f_TC_22_5_7b_NBIOT() runs on NBIOT_PTC
  { /* NB-IoT / Normal tracking area update Rejected (Tracking area not allowed / No suitable cells in tracking area /
       Roaming not allowed in this tracking area / Congestion / UE initiated detach Abnormal case /
       Change of cell in to a new tracking area */
    
    f_NBIOT_Init(c2, CONTROL_PLANE, LTE_CellsOnDifferentPLMN);
    
    // create cell and send out system information
    f_NBIOT_CellConfig_Def(nbiot_Cell50, CONTROL_PLANE);//PLMN1 HPLMN
    f_NBIOT_CellConfig_Def(nbiot_Cell51, CONTROL_PLANE);
    f_NBIOT_CellConfig_Def(nbiot_Cell52, CONTROL_PLANE);
    f_NBIOT_CellConfig_Def(nbiot_Cell53, CONTROL_PLANE);
    f_NBIOT_CellConfig_Def(nbiot_Cell55, CONTROL_PLANE);
    f_NBIOT_CellConfig_Def(nbiot_Cell56, CONTROL_PLANE);
    f_NBIOT_CellConfig_Def(nbiot_Cell61, CONTROL_PLANE);
    
    // Preamble: the UE is in state Registered, Idle mode (State 3-NB) on Ncell 51
    f_NBIOT_Preamble(nbiot_Cell51, CONTROL_PLANE, STATE3_NB_IDLEUPDATED);
    
    f_NBIOT_TestBody_Set(true);
    
    fl_TC_22_5_7b_Body();
    
    // Postamble
    f_NBIOT_TestBody_Set(false);
    
    f_NBIOT_Postamble (nbiot_Cell53, CONTROL_PLANE, N1_IDLE); // @sic R5s170888, R5-185015, R5s180534 sic@
  }

  /*
   * @desc      test body of TC_22_5_7b
   * @status    APPROVED (NBIOT)
   */
  function fl_TC_22_5_7b_Body() runs on NBIOT_PTC
  {
    var template (value) NB_CellPowerList_Type v_CellPowerList;
    var NAS_MSG_Indication_Type v_NasInd;
    var template (present) NAS_UL_Message_Type v_ESMMessage;
    var template (present) B3_Type v_PDNType := (f_GetPdnType(), '101'B);
    var GutiParameters_Type v_Guti_Params_Cell50 := f_NBIOT_CellInfo_GetGuti (nbiot_Cell50);
    var GutiParameters_Type v_Guti_Params_Cell52 := f_NBIOT_CellInfo_GetGuti (nbiot_Cell52);
    var GutiParameters_Type v_Guti_Params_Cell55 := f_NBIOT_CellInfo_GetGuti (nbiot_Cell55);
    var GutiParameters_Type v_Guti_Params_Cell51 := f_NBIOT_CellInfo_GetGuti (nbiot_Cell51);
    var GutiParameters_Type v_Guti_Params_Cell53 := f_NBIOT_CellInfo_GetGuti (nbiot_Cell53); // @sic R5-176879 sic@
    var NAS_PlmnId v_PLMN_Cell52 := f_Asn2Nas_PlmnId (v_Guti_Params_Cell52.PLMN_Identity);
    var EUTRA_ASN1_TrackingAreaCode_Type v_TAC_Cell52 := f_NBIOT_CellInfo_GetTAC (nbiot_Cell52);
    
    timer t_T3346 := f_NBIOT_SetTimerToleranceMin(nasTimer, 300.0); // @sic R5s170888 sic@
    
    //@siclog "Step 1" siclog@
    v_CellPowerList := { // T1
      cs_NB_CellPower(nbiot_Cell50, tsc_ServingCellRS_EPRE),
      cs_NB_CellPower(nbiot_Cell51, tsc_NonSuitableOffNBIOTCellRS_EPRE),
      cs_NB_CellPower(nbiot_Cell52, tsc_Suitable_NeighbourIntraFreq_CellRS_EPRE)
    };
    f_NBIOT_SetCellPowerList(v_CellPowerList);
    
    //@siclog "Step 2" siclog@
    //The UE transmits a TRACKING AREA UPDATE REQUEST message on NB-IoT Ncell 50.
    v_NasInd := f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell50,
                                               cr_EstablishmentCause_NB_Any,
                                               cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                                 cdr_CIOT_TAU_RequestOldGuti(tsc_EpsUpdate_TaUpdate,
                                                                                             f_NBIOT_SecurityKSIasme_Get(),
                                                                                             -,
                                                                                             -,
                                                                                             f_GutiParameters2MobileIdentity(omit, v_Guti_Params_Cell51))));
    
    //@siclog "Step 3" siclog@
    // SS responds with a TRACKING AREA UPDATE REJECT message with EMM cause "Tracking area not allowed".
    SRB.send(cas_NB_SRB1bis_NasPdu_REQ(nbiot_Cell50,
                                       cs_TimingInfo_Now,
                                       cs_NAS_Request(f_GetEPS_SecurityHeaderForReject(tsc_Cause_TA_NotAllowed), // @sic R5-174501 sic@
                                                      cs_508_TRACKING_AREA_UPDATE_REJECT(tsc_Cause_TA_NotAllowed))));
    
    //@siclog "Step 4" siclog@
    // SS Releases the RRC Connection
    f_NBIOT_RRC_ConnectionRelease(nbiot_Cell50);
    
    //@siclog "Step 5" siclog@
    //+   Check: Does the UE transmit an ATTACH REQUEST message in the next 90 seconds on cell 52?
    f_NBIOT_CheckNoAttachOn1Cell(nbiot_Cell52, 90.0);
    
    //@siclog "Step 6" siclog@
    v_CellPowerList := { // T2
      cs_NB_CellPower(nbiot_Cell50, tsc_ServingCellRS_EPRE),
      cs_NB_CellPower(nbiot_Cell51, tsc_NonSuitableOffNBIOTCellRS_EPRE),
      cs_NB_CellPower(nbiot_Cell52, tsc_NonSuitableOffNBIOTCellRS_EPRE)
    };
    f_NBIOT_SetCellPowerList(v_CellPowerList);
    
    //@siclog "Step 7" siclog@
    //+  The user initiates an attach by MMI or by AT command.
    f_UT_TriggerAttach(UT);
    
    //@siclog "Step 8" siclog@
    //+   Check: Does the UE transmit an ATTACH REQUEST message in the next 90 seconds on cell 50?
    f_NBIOT_CheckNoAttachOn1Cell(nbiot_Cell50, 90.0);
    
    //@siclog "Step 9" siclog@
    v_CellPowerList := { // T3
      cs_NB_CellPower(nbiot_Cell50, tsc_NonSuitableOffNBIOTCellRS_EPRE),
      cs_NB_CellPower(nbiot_Cell51, tsc_NonSuitableOffNBIOTCellRS_EPRE),
      cs_NB_CellPower(nbiot_Cell52, tsc_NonSuitableOffNBIOTCellRS_EPRE),
      cs_NB_CellPower(nbiot_Cell61, tsc_ServingCellRS_EPRE)
    };
    f_NBIOT_SetCellPowerList(v_CellPowerList);

    //@siclog "Step 10" siclog@
    //+   Check: Does the UE transmit an ATTACH REQUEST message in the next 90 seconds on cell 61?
    f_NBIOT_CheckNoAttachOn1Cell(nbiot_Cell61, 90.0);
    
    //@siclog "Step 11" siclog@
    v_CellPowerList := { // T4
      cs_NB_CellPower(nbiot_Cell50, tsc_NonSuitableOffNBIOTCellRS_EPRE),
      cs_NB_CellPower(nbiot_Cell51, tsc_NonSuitableOffNBIOTCellRS_EPRE),
      cs_NB_CellPower(nbiot_Cell52, tsc_ServingCellRS_EPRE),
      cs_NB_CellPower(nbiot_Cell61, tsc_NonSuitableOffNBIOTCellRS_EPRE)
    };
    f_NBIOT_SetCellPowerList(v_CellPowerList);
    f_NBIOT_ReleaseCellSpecific(nbiot_Cell61); //NBIOT Cells to be released as soon as it is not used anymore

    if (px_DoAttachWithoutPDN) {
      v_ESMMessage := cr_ESM_DUMMY_MESSAGE;
    } else {
      v_ESMMessage := cr_CIOT_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach, v_PDNType);
    }
    //@siclog "Step 12" siclog@
    // Check: Does the UE transmit an ATTACH REQUEST message with a PDN CONNECTIVITY REQUEST
    // message to request PDN connectivity to the default PDN or ESM DUMMY MESSAGE on Ncell 52?
    v_NasInd := f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell52,
                                                cr_EstablishmentCause_NB_Any,
                                               cr_NAS_IndicationWithPiggybacking(tsc_SHT_NoSecurityProtection,  // @sic R5s170888 sic@
                                                                                 cdr_CIOT_ATTACH_REQUEST_WithIMSI(cr_AdditionalUpdateType_CIOT), //Table 22.5.7b.3.3-3
                                                                                 v_ESMMessage));
    f_NBIOT_PreliminaryPass(__FILE__, __LINE__, "Step 12");
    
    //@siclog "Step 13-24b1" siclog@
    // The procedure is completed by executing steps 5 to 14b1 of the UE registration procedure in TS 36.508 subclause 8.1.5.2
    f_NBIOT_InitialRegistration_Step5_14(nbiot_Cell52, CONTROL_PLANE, STATE2_NB_CONNECTED_UPDATED, v_NasInd);
    
    //@siclog "Step 25" siclog@
    // EXCEPTION: Step 26a1 describes behaviour that depends on the UE capability
    // If pc_SwitchOnOff or pc_USIM_Removal then the UE transmits a DETACH REQUEST.
    f_NBIOT_UE_Detach_SwitchOffUe(nbiot_Cell52, CONTROL_PLANE, RRC_CONNECTED);
    
    //@siclog "Step 28" siclog@
    v_CellPowerList := { // T5
      cs_NB_CellPower(nbiot_Cell50, tsc_ServingCellRS_EPRE),
      cs_NB_CellPower(nbiot_Cell51, tsc_NonSuitableOffNBIOTCellRS_EPRE),
      cs_NB_CellPower(nbiot_Cell52, tsc_NonSuitableOffNBIOTCellRS_EPRE)
    };
    f_NBIOT_SetCellPowerList(v_CellPowerList);
    f_NBIOT_ReleaseCellSpecific(nbiot_Cell52); //NBIOT Cells to be released as soon as it is not used anymore
    
    //@siclog "Step 29" siclog@
    // The UE is brought back to operation or the USIM is inserted
    f_UT_SwitchOnUE(UT, true);
    
    //@siclog "Step 30" siclog@
    // Check: Does the UE transmit an ATTACH REQUEST message with a PDN CONNECTIVITY REQUEST
    // message to request PDN connectivity to the default PDN or ESM DUMMY MESSAGE on Ncell 50?
    v_NasInd := f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell50,
                                               cr_EstablishmentCause_NB_Any,
                                               cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                 cdr_CIOT_ATTACH_REQUEST_WithGuti(cr_AdditionalUpdateType_CIOT, //Table 22.5.7b.3.3-4
                                                                                                                  f_NBIOT_SecurityKSIasme_Get(),
                                                                                                                  f_GutiParameters2MobileIdentity(omit, v_Guti_Params_Cell52), // @sic R5s180171 sic@
                                                                                                                  cr_TAI(v_PLMN_Cell52, bit2oct(v_TAC_Cell52))), // @sic R5s180171 sic@
                                                                                 v_ESMMessage));
    f_NBIOT_PreliminaryPass(__FILE__, __LINE__, "Step 30");
    
    //@siclog "Step 31-40b1" siclog@
    // The procedure is completed by executing steps 5 to 14b1 of the UE registration procedure in TS 36.508 subclause 8.1.5.2
    f_NBIOT_InitialRegistration_Step5_14(nbiot_Cell50, CONTROL_PLANE, STATE2_NB_CONNECTED_UPDATED, v_NasInd);
    
    //@siclog "Step 41" siclog@
    // SS Releases the RRC Connection
    f_NBIOT_RRC_ConnectionRelease(nbiot_Cell50);
    
    //@siclog "Step 42" siclog@
    v_CellPowerList := { // T6
      cs_NB_CellPower(nbiot_Cell50, tsc_NonSuitableNBIOTCellRS_EPRE),
      cs_NB_CellPower(nbiot_Cell51, tsc_NonSuitableOffNBIOTCellRS_EPRE),
      cs_NB_CellPower(nbiot_Cell55, tsc_ServingCellRS_EPRE)
    };
    f_NBIOT_SetCellPowerList(v_CellPowerList);

    //@siclog "Step 43-48" siclog@
    // The UE performs steps 1 to 6 of the generic procedure in TS 36.508 8.1.5A.5 to camp on Ncell 55
    f_NBIOT_TrackingAreaUpdate (nbiot_Cell55, CONTROL_PLANE);
    
    //@siclog "Step 49" siclog@
    v_CellPowerList := { // T7
      cs_NB_CellPower(nbiot_Cell50, tsc_NonSuitableOffNBIOTCellRS_EPRE),
      cs_NB_CellPower(nbiot_Cell55, tsc_Suitable_NeighbourIntraFreq_CellRS_EPRE),
      cs_NB_CellPower(nbiot_Cell56, tsc_ServingCellRS_EPRE)
    };
    f_NBIOT_SetCellPowerList(v_CellPowerList);
    
    //@siclog "Step 50" siclog@
    // The UE transmits a TRACKING AREA UPDATE REQUEST on Ncell 56
    v_NasInd := f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell56,  // Table 22.5.7b.3.3-5
                                               cr_EstablishmentCause_NB_Any,
                                               cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                                 cdr_CIOT_TAU_RequestOldGuti(tsc_EpsUpdate_TaUpdate,
                                                                                             f_NBIOT_SecurityKSIasme_Get(),
                                                                                             -,
                                                                                             -,
                                                                                             f_GutiParameters2MobileIdentity(omit, v_Guti_Params_Cell55))));
    
    //@siclog "Step 51 Void" siclog@
    
    //@siclog "Step 52" siclog@
    // The SS transmits a TRACKING AREA UPDATE REJECT message with EMM cause = "Roaming not allowed in this tracking area" as specified.
    SRB.send(cas_NB_SRB1bis_NasPdu_REQ(nbiot_Cell56,
                                       cs_TimingInfo_Now,
                                       cs_NAS_Request(f_GetEPS_SecurityHeaderForReject(tsc_Cause_Roaming_NotAllowed), // @sic R5-174501 sic@
                                                      cs_508_TRACKING_AREA_UPDATE_REJECT(tsc_Cause_Roaming_NotAllowed))));
    
    //@siclog "Step 53" siclog@
    // SS Releases the RRC Connection
    f_NBIOT_RRC_ConnectionRelease(nbiot_Cell56);

    //@siclog "Step 53A" siclog@
    v_CellPowerList := { // T8
      cs_NB_CellPower(nbiot_Cell50, tsc_NonSuitableOffNBIOTCellRS_EPRE),
      cs_NB_CellPower(nbiot_Cell55, tsc_ServingCellRS_EPRE),
      cs_NB_CellPower(nbiot_Cell56, tsc_Suitable_NeighbourIntraFreq_CellRS_EPRE)
    };
    f_NBIOT_SetCellPowerList(v_CellPowerList);
    
    //@siclog "Step 54" siclog@
    // Check: Does the UE transmit a TRACKING AREA UPDATE REQUEST on Ncell 55
    v_NasInd := f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell55,  // Table 22.5.7b.3.3-5
                                               cr_EstablishmentCause_NB_Any,
                                               cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                                 cdr_CIOT_TAU_RequestOldGuti(tsc_EpsUpdate_TaUpdate,
                                                                                             f_NBIOT_SecurityKSIasme_Get(),
                                                                                             -,
                                                                                             -,
                                                                                             f_GutiParameters2MobileIdentity(omit, v_Guti_Params_Cell55))));
    f_NBIOT_PreliminaryPass(__FILE__, __LINE__, "Step 54");
    
    //@siclog "Step 55" siclog@
    // The SS transmits a TRACKING AREA UPDATE REJECT message with EMM cause = "Roaming not allowed in this tracking area" as specified.
    SRB.send(cas_NB_SRB1bis_NasPdu_REQ(nbiot_Cell55,
                                       cs_TimingInfo_Now,
                                       cs_NAS_Request(f_GetEPS_SecurityHeaderForReject(tsc_Cause_Roaming_NotAllowed), // @sic R5-174501 sic@
                                                      cs_508_TRACKING_AREA_UPDATE_REJECT(tsc_Cause_Roaming_NotAllowed))));
    
    //@siclog "Step 56" siclog@
    // SS Releases the RRC Connection
    f_NBIOT_RRC_ConnectionRelease(nbiot_Cell55);
    
    //@siclog "Step 57a1" siclog@
    v_CellPowerList := { // T9
      cs_NB_CellPower(nbiot_Cell50, tsc_ServingCellRS_EPRE),
      cs_NB_CellPower(nbiot_Cell55, tsc_NonSuitableOffNBIOTCellRS_EPRE),
      cs_NB_CellPower(nbiot_Cell56, tsc_NonSuitableOffNBIOTCellRS_EPRE)
    };
    f_NBIOT_SetCellPowerList(v_CellPowerList);
    f_NBIOT_ReleaseCellSpecific(nbiot_Cell55); // @sic R5-176879 sic@
    f_NBIOT_ReleaseCellSpecific(nbiot_Cell56); //NBIOT Cells to be released as soon as it is not used anymore
    
    // Check: Does the UE transmit a TRACKING AREA UPDATE REQUEST on Ncell 50
    v_NasInd := f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell50,  // Table 22.5.7b.3.3-5
                                               cr_EstablishmentCause_NB_Any,
                                               cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                                 cdr_CIOT_TAU_RequestOldGuti(tsc_EpsUpdate_TaUpdate,
                                                                                             f_NBIOT_SecurityKSIasme_Get(),
                                                                                             -,
                                                                                             -,
                                                                                             f_GutiParameters2MobileIdentity(omit, v_Guti_Params_Cell55))));
    f_NBIOT_PreliminaryPass(__FILE__, __LINE__, "Step 57a2");
    
    //@siclog "Step 57a3-57a4" siclog@
    // The TAU procedure is completed
    f_NBIOT_TrackingAreaUpdate_Accept_Complete(nbiot_Cell50,
                                               CONTROL_PLANE,
                                               tsc_SRB1bis,
                                               v_Guti_Params_Cell50,
                                               v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.epsBearerContextStatus,
                                               v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.addUpdateType);
    //@siclog "Step 57a5" siclog@
    // SS Releases the RRC Connection
    f_NBIOT_RRC_ConnectionRelease(nbiot_Cell50);
    
    //@siclog "Step 58" siclog@
    v_CellPowerList := { // T10
      cs_NB_CellPower(nbiot_Cell50, tsc_NonSuitableOffNBIOTCellRS_EPRE), // @sic R5s180296 sic@
      cs_NB_CellPower(nbiot_Cell51, tsc_ServingCellRS_EPRE)
    };
    f_NBIOT_SetCellPowerList(v_CellPowerList);
    
    //@siclog "Step 59" siclog@
    // The UE transmits a TRACKING AREA UPDATE REQUEST on Ncell 51
    v_NasInd := f_NBIOT_TrackingAreaUpdate_Step1_3(nbiot_Cell51, cr_EstablishmentCause_NB_Any);
    
    //@siclog "Step 60" siclog@
    // The SS transmits a TRACKING AREA UPDATE REJECT message with EMM cause = "No suitable cells in tracking area" as specified
    SRB.send(cas_NB_SRB1bis_NasPdu_REQ(nbiot_Cell51,
                                       cs_TimingInfo_Now,
                                       cs_NAS_Request(f_GetEPS_SecurityHeaderForReject(tsc_Cause_NoSuitableCells), // @sic R5-174501 sic@
                                                      cs_508_TRACKING_AREA_UPDATE_REJECT(tsc_Cause_NoSuitableCells))));
    
    //@siclog "Step 61" siclog@
    v_CellPowerList := { // T11
      cs_NB_CellPower(nbiot_Cell50, tsc_ServingCellRS_EPRE),
      cs_NB_CellPower(nbiot_Cell51, tsc_Suitable_NeighbourIntraFreq_CellRS_EPRE)
    };
    f_NBIOT_SetCellPowerList(v_CellPowerList);
    
    //@siclog "Step 62" siclog@
    // The SS releases the RRC connection
    f_NBIOT_RRC_ConnectionRelease(nbiot_Cell51);
    
    //@siclog "Step 63" siclog@
    // Check: Does the UE transmit a TRACKING AREA UPDATE REQUEST on Ncell 50
    v_NasInd := f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell50,  // Table 22.5.7b.3.3-8
                                               cr_EstablishmentCause_NB_Any,
                                               cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                                 cdr_CIOT_TAU_RequestOldGuti(tsc_EpsUpdate_TaUpdate,
                                                                                             f_NBIOT_SecurityKSIasme_Get(),
                                                                                             -,
                                                                                             -,
                                                                                             f_GutiParameters2MobileIdentity(omit, v_Guti_Params_Cell50))));
    f_NBIOT_PreliminaryPass(__FILE__, __LINE__, "Step 63");
    
    //@siclog "Step 64-65" siclog@
    // The TAU procedure is completed
    f_NBIOT_TrackingAreaUpdate_Accept_Complete(nbiot_Cell50,
                                               CONTROL_PLANE,
                                               tsc_SRB1bis,
                                               v_Guti_Params_Cell50,
                                               v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.epsBearerContextStatus,
                                               v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.addUpdateType);
    
    //@siclog "Step 65A" siclog@
    // SS Releases the RRC Connection
    f_NBIOT_RRC_ConnectionRelease(nbiot_Cell50);

    //@siclog "Step 66" siclog@
    v_CellPowerList := { // T12
      cs_NB_CellPower(nbiot_Cell50, tsc_NonSuitableNBIOTCellRS_EPRE),
      cs_NB_CellPower(nbiot_Cell51, tsc_ServingCellRS_EPRE),
      cs_NB_CellPower(nbiot_Cell53, tsc_ServingCellRS_EPRE) // @sic R5-176879 sic@
    };
    f_NBIOT_SetCellPowerList(v_CellPowerList);
    
    //@siclog "Step 67" siclog@
    // The UE transmits a TRACKING AREA UPDATE REQUEST on Ncell 53
    v_NasInd := f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell53, // @sic R5-176879 sic@
                                               cr_EstablishmentCause_NB_Any,
                                               cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                                 cr_508_TAU_Request(tsc_EpsUpdate_TaUpdate,
                                                                                    f_NBIOT_SecurityKSIasme_Get(),
                                                                                    cr_DRXparameter_Any ('5C'O) ifpresent,
                                                                                    cr_AdditionalUpdateType_CIOT ifpresent))); // @sic R5-176872 sic@
    
    //@siclog "Step 68" siclog@
    // The SS transmits a TRACKING AREA UPDATE REJECT message with EMM cause = "Congestion"
    SRB.send(cas_NB_SRB1bis_NasPdu_REQ(nbiot_Cell53,
                                       cs_TimingInfo_Now,
                                       cs_NAS_Request(tsc_SHT_IntegrityProtected_Ciphered, // @sic R5s170888, R5s180171 sic@
                                                      cs_508_TRACKING_AREA_UPDATE_REJECT(tsc_Cause_Congestion,
                                                                                         cs_GPRS_Timer2_3_IEI('5F'O, '001'B, '00101'B))))); // T3346
    t_T3346.start;
    
    //@siclog "Step 69" siclog@
    // The SS releases the RRC connection
    f_NBIOT_RRC_ConnectionRelease(nbiot_Cell53);
    
    //@siclog "Step 70" siclog@
    // If the UE sends a TAU Req before the timer expires, it will fail in the default behaviour
    t_T3346.timeout;
    
    //@siclog "Step 71" siclog@
    // Does the UE transmits a TRACKING AREA UPDATE REQUEST after T3346 has expired?
    v_NasInd := f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell53,
                                               cr_EstablishmentCause_NB_Any,
                                               cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                                 cr_508_TAU_Request(tsc_EpsUpdate_TaUpdate,
                                                                                    f_NBIOT_SecurityKSIasme_Get(),
                                                                                    cr_DRXparameter_Any ('5C'O) ifpresent,
                                                                                    cr_AdditionalUpdateType_CIOT ifpresent))); // @sic R5-176872 sic@
    
    f_NBIOT_PreliminaryPass(__FILE__, __LINE__, "Step 71");
    
    //@siclog "Step 72-73" siclog@
    // The TAU procedure is completed
    f_NBIOT_TrackingAreaUpdate_Accept_Complete(nbiot_Cell53,
                                               CONTROL_PLANE,
                                               tsc_SRB1bis,
                                               v_Guti_Params_Cell53,  // @sic R5-176879 sic@
                                               v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.epsBearerContextStatus,
                                               v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.addUpdateType);
    //@siclog "Step 73A" siclog@
    // SS Releases the RRC Connection
    f_NBIOT_RRC_ConnectionRelease(nbiot_Cell53);

    // @sic R5-1851015 sic@
  }

  /*
   * @desc      REFERENCE TS 36.523-3 clause 22.5.8
   * @status    APPROVED (NBIOT)
   */
  function f_TC_22_5_8_NBIOT() runs on NBIOT_PTC
  { /* NB-IoT / Tracking Area Update Reject / Change of cell in to a new tracking area /
     * Access barred due to access class conteol or NAS signalling connection establishment rejected
     * by the network / Success of fail after several attempts due to no network response / RA belongs to
     * TAI list at status is UPDATED / Tracking area updating and detach procedure collision
     */
    
    var NAS_MSG_Indication_Type v_NasInd;
    var template (present) NAS_UL_Message_Type v_NASMessage;
    var template (omit) NAS_UL_Message_Type v_ReturnedValue;
    var integer v_PDNIndex := 0;
    var GutiParameters_Type v_Guti_Params1;
    var GutiParameters_Type v_Guti_Params2;
    var GutiParameters_Type v_Guti_Params3;
    var GutiParameters_Type v_Guti_Params4;
    var template (value) NB_CellPowerList_Type v_CellPowerList;
    var NAS_PlmnId v_PLMN1;
    var NAS_PlmnId v_PLMN2;
    var NAS_PlmnId v_PLMN3;
    var NAS_PlmnId v_PLMN4;
    var EUTRA_ASN1_TrackingAreaCode_Type v_Tac1;
    var EUTRA_ASN1_TrackingAreaCode_Type v_Tac2;
    var EUTRA_ASN1_TrackingAreaCode_Type v_Tac3;
    var EUTRA_ASN1_TrackingAreaCode_Type v_Tac4;
    var template (present) TrackingAreaId v_Tai1;
    var template (present) TrackingAreaId v_Tai2;
    var template (present) TrackingAreaId v_Tai3;
    var template (present) TrackingAreaId v_Tai4;
    var template (value) TrackingAreaIdList v_TaiList1;
    var template (value) TrackingAreaIdList v_TaiList2;
    var template (value) TrackingAreaIdList v_TaiList3;
    var template (value) TrackingAreaIdList v_TaiList4;
    var integer i;
    var integer v_AttemptCount;
    var template (value) SystemInformationBlockType14_NB_r13 v_SIB14;
    var octetstring v_UserData := f_IPv4IPv6_IcmpEchoReply(f_LoopbackModeB_IP_Address_UE());
    var ListOfCauses_Type v_ListOfCauses := { tsc_EmmCause_SemanticallyIncorrect,
                                              tsc_EmmCause_InvalidMandatoryInformation,
                                              tsc_EmmCause_MessageTypeNonExistentOrNotImplemented,
                                              tsc_EmmCause_IENonExistentOrNotImplemented,
                                              tsc_EmmCause_ProtocolErrorUnspecified };
    
    timer t_T3412 := f_NBIOT_SetTimerToleranceMin(nasTimer, 60.0);
    timer t_T3402 := f_NBIOT_SetTimerToleranceMin(nasTimer, 30.0);
    timer t_WaitForTAU;
    timer t_Timer;
    
    f_NBIOT_Init(c4, CONTROL_PLANE, LTE_AllCellsOnSamePLMN);
    
    // create cell and send out system information
    f_NBIOT_CellConfig_Def(nbiot_Cell50, CONTROL_PLANE);
    f_NBIOT_CellConfig_Def(nbiot_Cell51, CONTROL_PLANE);
    f_NBIOT_CellConfig_Def(nbiot_Cell52, CONTROL_PLANE);
    f_NBIOT_CellConfig_Def(nbiot_Cell53, CONTROL_PLANE);
    
    // Preamble: The UE is in State 3-NB Idle
    // ==========================================================================
    v_CellPowerList := {
      cs_NB_CellPower(nbiot_Cell50, tsc_ServingCellRS_EPRE),
      cs_NB_CellPower(nbiot_Cell51, tsc_NonSuitableOffNBIOTCellRS_EPRE),
      cs_NB_CellPower(nbiot_Cell52, tsc_NonSuitableOffNBIOTCellRS_EPRE),
      cs_NB_CellPower(nbiot_Cell53, tsc_NonSuitableOffNBIOTCellRS_EPRE)
    };
    f_NBIOT_SetCellPowerList(v_CellPowerList);
    f_UT_SwitchOnUE(UT, true);
    
    v_NasInd := f_NBIOT_InitialRegistration_Step2_4(nbiot_Cell50, CONTROL_PLANE, PREAMBLE);
    f_NBIOT_InitialRegistration_Step5_12(nbiot_Cell50, CONTROL_PLANE, STATE3_NB_IDLEUPDATED, v_NasInd);
    
    f_NBIOT_InitialRegistration_Step13(nbiot_Cell50,
                                       CONTROL_PLANE,
                                       v_NasInd,
                                       -, // @sic R5s170597 sic@
                                       -,
                                       -,
                                       -,
                                       -,
                                       cs_GprsTimer_v('001'B, '00001'B), // T3412
                                       cs_GprsTimer_tv('17'O, '000'B, '01111'B)); // T3402
    t_T3412.start;
    
    f_NBIOT_InitialRegistration_Step14(nbiot_Cell50, CONTROL_PLANE, tsc_EpsDefaultBearerId); // @sic R5s170597 sic@
    f_NBIOT_RRC_ConnectionRelease(nbiot_Cell50);
    
    v_Guti_Params1 := f_NBIOT_CellInfo_GetGuti (nbiot_Cell50);
    v_PLMN1 := f_Asn2Nas_PlmnId(v_Guti_Params1.PLMN_Identity);
    v_Tac1 := f_NBIOT_CellInfo_GetTAC(nbiot_Cell50);
    v_Tai1 := cr_TAI(v_PLMN1, bit2oct(v_Tac1));
    v_TaiList1 := cds_TAIListNonConsecutive_tlv(v_PLMN1, { bit2oct(v_Tac1) });
    
    f_NBIOT_TestBody_Set(true);
    // Ncell 50 already configured to serving cell.
    
    for (i:= 0; i<lengthof(v_ListOfCauses); i:= i+1) {
      //@siclog "Step 2" siclog@
      // wait for T3412 to elapse
      t_T3412.timeout;
      
      //@siclog "Step 3" siclog@
      // The UE transmits a TRACKING AREA UPDATE REQUEST message
      v_NasInd := f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell50,
                                                 cr_EstablishmentCause_NB_Any,
                                                 cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                                   cr_508_TAU_Request (tsc_EpsUpdate_Periodic,  // Table 22.5.8.3.3-8
                                                                                       f_NBIOT_SecurityKSIasme_Get(),
                                                                                       cr_DRXparameter_Any ('5C'O) ifpresent,
                                                                                       cr_AdditionalUpdateType_CIOT ifpresent)));
      
      //@siclog "Step 4" siclog@
      // The SS transmits a TRACKING AREA UPDATE REJECT message
      SRB.send(cas_NB_SRB_NasPdu_REQ(nbiot_Cell50,
                                     tsc_SRB1bis,
                                     cs_TimingInfo_Now,
                                     cs_NAS_Request(f_GetEPS_SecurityHeaderForReject(v_ListOfCauses[i]), // @sic R5-174501 sic@
                                                    cs_508_TRACKING_AREA_UPDATE_REJECT(v_ListOfCauses[i]))));
      
      t_T3402.start;
      
      //@siclog "Step 5" siclog@
      f_NBIOT_RRC_ConnectionRelease(nbiot_Cell50);
      
      //@siclog "Step 6" siclog@
      // Check: When the timer T3402 expires does the UE re-transmit a TRACKING AREA UPDATE REQUEST message
      t_T3402.timeout;
      v_NasInd := f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell50,
                                                 cr_EstablishmentCause_NB_Any,
                                                 cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                                   cr_508_TAU_Request (tsc_EpsUpdate_TaUpdate,   // no specific message contents, so default value
                                                                                       f_NBIOT_SecurityKSIasme_Get(),
                                                                                       cr_DRXparameter_Any ('5C'O) ifpresent,
                                                                                       cr_AdditionalUpdateType_CIOT ifpresent)));
      f_NBIOT_PreliminaryPass(__FILE__, __LINE__, "Step "&int2str(6+(i*8)));
      
      //@siclog "Step 7" siclog@
      // The SS transmits a TRACKING AREA UPDATE ACCEPT message.
      SRB.send(cas_NB_SRB_NasPdu_REQ(nbiot_Cell50,
                                     tsc_SRB1bis,
                                     cs_TimingInfo_Now,
                                     cs_NAS_Request(tsc_SHT_IntegrityProtected_Ciphered,
                                                    cs_CIOT_TAU_AcceptWithTimers(tsc_EpsUpdate_TaUpdate,
                                                                                 f_GutiParameters2MobileIdentity (tsc_IEI_Guti, v_Guti_Params1),
                                                                                 v_TaiList1,
                                                                                 v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.epsBearerContextStatus,
                                                                                 f_GetNBIOTAdditionalUpdateResult(v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.addUpdateType),
                                                                                 cs_GprsTimer_tv('17'O, '000'B, '01111'B),
                                                                                 cs_GprsTimer_tv('5A'O, '001'B, '00001'B)))));

      t_T3412.start;
      
      //@siclog "Step 8" siclog@
      //The UE transmits a TRACKING AREA UPDATE COMPLETE message.
      SRB.receive(car_NB_SRB_NasPdu_IND(nbiot_Cell50,
                                        tsc_SRB1bis,
                                        cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered,
                                                          cr_508_TAU_Complete)));
      
      //@siclog "Step 9" siclog@
      f_NBIOT_RRC_ConnectionRelease(nbiot_Cell50);
    } // End of for loop
    t_T3412.stop; // periodic testing finished so don't need to wait for this anymore
    
    //@siclog "Step 42" siclog@
    v_CellPowerList := {
      cs_NB_CellPower(nbiot_Cell50, tsc_NonSuitableNBIOTCellRS_EPRE),
      cs_NB_CellPower(nbiot_Cell51, tsc_ServingCellRS_EPRE),
      cs_NB_CellPower(nbiot_Cell52, tsc_NonSuitableOffNBIOTCellRS_EPRE),
      cs_NB_CellPower(nbiot_Cell53, tsc_NonSuitableOffNBIOTCellRS_EPRE)
    };
    f_NBIOT_SetCellPowerList(v_CellPowerList);
    
    //@siclog "Step 43" siclog@
    // The UE transmit a TRACKING AREA UPDATE REQUEST message
    v_NasInd := f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell51,
                                               cr_EstablishmentCause_NB_Any,
                                               cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                                 cdr_CIOT_TAU_RequestOldGuti((tsc_EpsUpdate_TaUpdate, tsc_EpsUpdate_Periodic),  // @sic R5s170765 sic@
                                                                                             f_NBIOT_SecurityKSIasme_Get(),
                                                                                             -,
                                                                                             -,
                                                                                             f_GutiParameters2MobileIdentity(omit, v_Guti_Params1),
                                                                                             v_Tai1)));
    
    f_NBIOT_SS_SRBs_DRBs_Reset (nbiot_Cell51, CONTROL_PLANE);  // @sic R5s170765 sic@
    // @siclog "Step 44" siclog@
    v_CellPowerList := {
      cs_NB_CellPower(nbiot_Cell50, tsc_NonSuitableNBIOTCellRS_EPRE),
      cs_NB_CellPower(nbiot_Cell51, tsc_NonSuitableOffNBIOTCellRS_EPRE),
      cs_NB_CellPower(nbiot_Cell52, tsc_NonSuitableOffNBIOTCellRS_EPRE),
      cs_NB_CellPower(nbiot_Cell53, tsc_ServingCellRS_EPRE)
    };
    f_NBIOT_SetCellPowerList(v_CellPowerList);

    //@siclog "Step 45 - 46 Void" siclog@
    //@siclog "Step 47" siclog@
    // Check: Does the UE transmit a TRACKING AREA UPDATE REQUEST message on Ncell 53
    v_NasInd := f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell53, // @sic R5s170765 sic@
                                               cr_EstablishmentCause_NB_Any,
                                               cr_NAS_Indication(tsc_SHT_IntegrityProtected, // @sic R5s180149 sic@
                                                                 cdr_CIOT_TAU_RequestOldGuti(tsc_EpsUpdate_TaUpdate,   // default value
                                                                                             f_NBIOT_SecurityKSIasme_Get(),
                                                                                             -,
                                                                                             -,
                                                                                             f_GutiParameters2MobileIdentity(omit, v_Guti_Params1),
                                                                                             v_Tai1))); // @sic R5-174465 sic@
    
    f_NBIOT_PreliminaryPass(__FILE__, __LINE__, "Step 47");
    
    v_Guti_Params4 := f_NBIOT_CellInfo_GetGuti (nbiot_Cell53);
    v_PLMN4 := f_Asn2Nas_PlmnId(v_Guti_Params4.PLMN_Identity);
    v_Tac4 := f_NBIOT_CellInfo_GetTAC(nbiot_Cell53);
    v_Tai4 := cr_TAI (v_PLMN4, bit2oct(v_Tac4));
    v_TaiList4 := cds_TAIListNonConsecutive_tlv(v_PLMN4, { bit2oct(v_Tac4) });
    
    //@siclog "Step 48" siclog@
    // The SS transmits a TRACKING AREA UPDATE ACCEPT message.
    SRB.send(cas_NB_SRB_NasPdu_REQ(nbiot_Cell53,
                                   tsc_SRB1bis,
                                   cs_TimingInfo_Now,
                                   cs_NAS_Request(tsc_SHT_IntegrityProtected_Ciphered,
                                                  cs_CIOT_TAU_AcceptWithTimers(tsc_EpsUpdate_TaUpdate,
                                                                               f_GutiParameters2MobileIdentity (tsc_IEI_Guti, v_Guti_Params4),
                                                                               v_TaiList4,
                                                                               v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.epsBearerContextStatus,
                                                                               f_GetNBIOTAdditionalUpdateResult(v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.addUpdateType)))));
    //@siclog "Step 49" siclog@
    //The UE transmits a TRACKING AREA UPDATE COMPLETE message.
    SRB.receive(car_NB_SRB_NasPdu_IND(nbiot_Cell53,
                                      tsc_SRB1bis,
                                      cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered,
                                                        cr_508_TAU_Complete)));
    
    //@siclog "Step 50 - 50B" siclog@
    // Switch off the UE
    f_NBIOT_UE_Detach_SwitchOffUe(nbiot_Cell53, CONTROL_PLANE, RRC_CONNECTED);
    
    //@siclog "Step 50C" siclog@
    v_CellPowerList := {
      cs_NB_CellPower(nbiot_Cell50, tsc_ServingCellRS_EPRE),
      cs_NB_CellPower(nbiot_Cell51, tsc_NonSuitableNBIOTCellRS_EPRE),
      cs_NB_CellPower(nbiot_Cell52, tsc_NonSuitableNBIOTCellRS_EPRE),
      cs_NB_CellPower(nbiot_Cell53, tsc_NonSuitableOffNBIOTCellRS_EPRE)
    };
    f_NBIOT_SetCellPowerList(v_CellPowerList);
    
    //@siclog "Step 51" siclog@
    // The UE is powered on or switched on
    f_UT_SwitchOnUE(UT, true);

    //@siclog "Step 52" siclog@
    // Steps 2-10a2 of the generic procedure for UE registration
    v_NasInd := f_NBIOT_InitialRegistration_Step2_4(nbiot_Cell50, CONTROL_PLANE, NORMAL);
    f_NBIOT_InitialRegistration_Step5_10a(nbiot_Cell50, CONTROL_PLANE, STATE3_NB_IDLEUPDATED, v_NasInd);
    
    //@siclog "Step 53" siclog@
    // SS responds with ATTACH ACCEPT message
    f_NBIOT_InitialRegistration_Step13(nbiot_Cell50,
                                       CONTROL_PLANE,
                                       v_NasInd,
                                       -,
                                       -,
                                       -,
                                       -,
                                       -,
                                       cs_GprsTimer_v('010'B, '00001'B)); // T3412  @sic R5s170597, R5s170765 sic@
    
    //@siclog "Step 54" siclog@
    // Steps 14b1 of the generic procedure for UE registration
    f_NBIOT_InitialRegistration_Step14(nbiot_Cell50, CONTROL_PLANE, tsc_EpsDefaultBearerId); // @sic R5s170597 sic@

    //@siclog "Step 55" siclog@
    // The SS releases the RRC connection
    f_NBIOT_RRC_ConnectionRelease(nbiot_Cell50);
    
    //@siclog "Step 56" siclog@
    // Wait for 6 min to ensure that T3412 expires
    f_Delay(f_NBIOT_SetTimerToleranceMin(nasTimer, 360.0)); // @sic R5s170765 sic@
    
    //@siclog "Step 57 - 65" siclog@
    for (v_AttemptCount := 1; v_AttemptCount <6; v_AttemptCount := v_AttemptCount +1) {
      // The UE transmits a TRACKING AREA UPDATE REQUEST message with the EPS update type set to 'Periodic updating'
      v_NasInd := f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell50,
                                                 cr_EstablishmentCause_NB_Any,
                                                 cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                            cdr_CIOT_TAU_RequestOldGuti (tsc_EpsUpdate_Periodic,   // default value
                                                                                         f_NBIOT_SecurityKSIasme_Get(),
                                                                                         -, -,
                                                                                         f_GutiParameters2MobileIdentity(omit, v_Guti_Params1),
                                                                                         v_Tai1)));
      // Wait for 265s to ensure that T3412 expires
      f_Delay (f_NBIOT_SetTimerToleranceMin(nasTimer, 265.0)); // @sic R5s170765 sic@
      if (v_AttemptCount <5) { // All but last one
        f_NBIOT_SS_SRBs_DRBs_Reset (nbiot_Cell50, CONTROL_PLANE);
      }
    }
    
    //@siclog "Step 66" siclog@
    // The SS releases the RRC connection
    f_NBIOT_RRC_ConnectionRelease(nbiot_Cell50);
    
    //@siclog "Step 67" siclog@
    // Wait for 12 mins to ensure that T3402 expires
    f_Delay (f_NBIOT_SetTimerToleranceMin(nasTimer, 720.0)); // @sic R5s170058 sic@
    
    //@siclog "Step 68" siclog@
    // The UE transmits a TRACKING AREA UPDATE REQUEST message with the EPS update type set to 'TA updating'
    v_NasInd := f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell50,
                                               cr_EstablishmentCause_NB_Any,
                                               cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                                 cdr_CIOT_TAU_RequestOldGuti(tsc_EpsUpdate_TaUpdate,
                                                                                             f_NBIOT_SecurityKSIasme_Get(),
                                                                                             -, -,
                                                                                             f_GutiParameters2MobileIdentity(omit, v_Guti_Params1),
                                                                                             v_Tai1)));
    f_NBIOT_PreliminaryPass(__FILE__, __LINE__, "Step 68");
    
    v_Guti_Params2 := f_NBIOT_CellInfo_GetGuti (nbiot_Cell51);
    v_PLMN2 := f_Asn2Nas_PlmnId(v_Guti_Params2.PLMN_Identity);
    v_Tac2 := f_NBIOT_CellInfo_GetTAC(nbiot_Cell51);
    v_Tai2 := cr_TAI(v_PLMN1, bit2oct(v_Tac2));
    v_TaiList2 := cds_TAIListNonConsecutive_tlv(v_PLMN2, { bit2oct(v_Tac2) });
    
    //@siclog "Step 69" siclog@
    // The SS transmits a TRACKING AREA UPDATE ACCEPT message.
    SRB.send(cas_NB_SRB_NasPdu_REQ(nbiot_Cell50,
                                   tsc_SRB1bis,
                                   cs_TimingInfo_Now,
                                   cs_NAS_Request(tsc_SHT_IntegrityProtected_Ciphered,
                                                  cs_CIOT_TAU_AcceptWithTimers(tsc_EpsUpdate_TaUpdate,
                                                                               omit,
                                                                               v_TaiList1,
                                                                               v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.epsBearerContextStatus,
                                                                               f_GetNBIOTAdditionalUpdateResult(v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.addUpdateType)))));
    
    f_Delay (1.0);  // @sic R5s170765 sic@
    f_NBIOT_SS_SRBs_DRBs_Reset (nbiot_Cell50, CONTROL_PLANE);  // @sic R5s170765, R5s180149 sic@
    v_CellPowerList := {
      cs_NB_CellPower(nbiot_Cell50, tsc_NonSuitableNBIOTCellRS_EPRE),
      cs_NB_CellPower(nbiot_Cell51, tsc_ServingCellRS_EPRE),
      cs_NB_CellPower(nbiot_Cell52, tsc_NonSuitableNBIOTCellRS_EPRE),
      cs_NB_CellPower(nbiot_Cell53, tsc_NonSuitableOffNBIOTCellRS_EPRE)
    };
    f_NBIOT_SetCellPowerList(v_CellPowerList);
    
    //@siclog "Step 71 - 79" siclog@
    for (v_AttemptCount := 1; v_AttemptCount <6; v_AttemptCount := v_AttemptCount +1) {
      // The UE transmits a TRACKING AREA UPDATE REQUEST message with the EPS update type set to 'TA updating'
      v_NasInd := f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell51,
                                                 cr_EstablishmentCause_NB_Any,
                                                 cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                                   cdr_CIOT_TAU_RequestOldGuti (tsc_EpsUpdate_TaUpdate,
                                                                                                f_NBIOT_SecurityKSIasme_Get(),
                                                                                                -, -,
                                                                                                f_GutiParameters2MobileIdentity(omit, v_Guti_Params1),
                                                                                                v_Tai1)));
      // Wait for 265s to ensure that T3412 expires
      f_Delay (f_NBIOT_SetTimerToleranceMin(nasTimer, 265.0)); // @sic R5s170765 sic@
      if (v_AttemptCount < 5) { // All but last one
        f_NBIOT_SS_SRBs_DRBs_Reset (nbiot_Cell51, CONTROL_PLANE);
      }
    }
    
    //@siclog "Step 80" siclog@
    // The SS releases the RRC connection
    f_NBIOT_RRC_ConnectionRelease(nbiot_Cell51);
    
    //@siclog "Step 81" siclog@
    v_CellPowerList := {
      cs_NB_CellPower(nbiot_Cell50, tsc_NonSuitableNBIOTCellRS_EPRE),
      cs_NB_CellPower(nbiot_Cell51, tsc_NonSuitableNBIOTCellRS_EPRE),
      cs_NB_CellPower(nbiot_Cell52, tsc_ServingCellRS_EPRE),
      cs_NB_CellPower(nbiot_Cell53, tsc_NonSuitableOffNBIOTCellRS_EPRE)
    };
    f_NBIOT_SetCellPowerList(v_CellPowerList);
    
    v_Guti_Params3 := f_NBIOT_CellInfo_GetGuti (nbiot_Cell52);
    v_PLMN3 := f_Asn2Nas_PlmnId(v_Guti_Params3.PLMN_Identity);
    v_Tac3 := f_NBIOT_CellInfo_GetTAC(nbiot_Cell52);
    v_Tai3 := cr_TAI (v_PLMN3, bit2oct(v_Tac3));
    v_TaiList3 := cds_TAIListNonConsecutive_tlv(v_PLMN3, { bit2oct(v_Tac3) });
    
    //@siclog "Step 82" siclog@
    // The UE transmits a TRACKING AREA UPDATE REQUEST message with the EPS update type set to 'TA updating'
    v_NasInd := f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell52,
                                               cr_EstablishmentCause_NB_Any,
                                               cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                                 cdr_CIOT_TAU_RequestOldGuti(tsc_EpsUpdate_TaUpdate,
                                                                                             f_NBIOT_SecurityKSIasme_Get(),
                                                                                             -,
                                                                                             -,
                                                                                             f_GutiParameters2MobileIdentity(omit, v_Guti_Params1),
                                                                                             v_Tai1)));
    f_NBIOT_PreliminaryPass(__FILE__, __LINE__, "Step 82");
    
    //@siclog "Step 83" siclog@
    // The SS transmits a TRACKING AREA UPDATE ACCEPT message.
    SRB.send(cas_NB_SRB_NasPdu_REQ(nbiot_Cell52,
                                   tsc_SRB1bis,
                                   cs_TimingInfo_Now,
                                   cs_NAS_Request(tsc_SHT_IntegrityProtected_Ciphered,
                                                  cs_CIOT_TAU_AcceptWithTimers(tsc_EpsUpdate_TaUpdate,
                                                                               f_GutiParameters2MobileIdentity (tsc_IEI_Guti, v_Guti_Params3),
                                                                               v_TaiList3,
                                                                               v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.epsBearerContextStatus,
                                                                               f_GetNBIOTAdditionalUpdateResult(v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.addUpdateType)))));
    
    //@siclog "Step 84" siclog@
    //The UE transmits a TRACKING AREA UPDATE COMPLETE message.
    SRB.receive(car_NB_SRB_NasPdu_IND(nbiot_Cell52,
                                      tsc_SRB1bis,
                                      cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered,
                                                        cr_508_TAU_Complete)));
    
    //@siclog "Step 85" siclog@
    // The SS releases the RRC connection
    f_NBIOT_RRC_ConnectionRelease(nbiot_Cell52);
    
    //@siclog "Step 86" siclog@
    f_NBIOT_CellInfo_SetAB_Enabled (nbiot_Cell50, true); // @sic R5-177120 sic@
    //SS sets SystemInformationBlockType14-NB of Ncell 50 @sic R5s180455 sic@
    v_SIB14 := f_NBIOT_CellInfo_GetSIB14 (nbiot_Cell50);
    v_SIB14.ab_Param_r13.ab_Common_r13 := cs_AB_Config_NB(a, '1111111111'B, omit, '11111'B);
    f_NBIOT_CellInfo_SetSIB14(nbiot_Cell50, v_SIB14);
    f_NBIOT_SS_ConfigureSysinfo(nbiot_Cell50, false);
    
    v_CellPowerList := {
      cs_NB_CellPower(nbiot_Cell50, tsc_ServingCellRS_EPRE),
      cs_NB_CellPower(nbiot_Cell51, tsc_NonSuitableNBIOTCellRS_EPRE),
      cs_NB_CellPower(nbiot_Cell52, tsc_NonSuitableOffNBIOTCellRS_EPRE),
      cs_NB_CellPower(nbiot_Cell53, tsc_NonSuitableOffNBIOTCellRS_EPRE)
    };
    f_NBIOT_SetCellPowerList(v_CellPowerList);

    //@siclog "Step 87" siclog@
    // Check for 60 seconds if UE initiates the tracking area updating procedure on Ncell 50
    if (f_NBIOT_RRC_RRCConnectionRequest_Check(nbiot_Cell50, 60.0)) {
      f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, "Step 87");
    }
    
    //@siclog "Step 91" siclog@
    // Have to set this up in advance
    //The SS responds with RRCConnectionReject-NB message with IE extendedwaitTime set to 10s.
    f_NBIOT_SS_ConfigRachProcedureMsg4(nbiot_Cell50, cs_RRCConnectionReject_NB(10));
    
    //@siclog "Step 87 Void" siclog@
    //@siclog "Step 89" siclog@
    //SS sets SystemInformationBlockType14-NB of Ncell 50
    v_SIB14.ab_Param_r13.ab_Common_r13 := cs_AB_Config_NB(a, '0000000000'B, omit, '00000'B);
    f_NBIOT_CellInfo_SetSIB14(nbiot_Cell50, v_SIB14);
    f_NBIOT_SS_ConfigureSysinfo(nbiot_Cell50, false);
    
    //@siclog "Step 90" siclog@
    //UE transmits an RRCConnectionRequest-NB message
    f_NBIOT_RRC_ConnectionRequest_Def(nbiot_Cell50);
    
    //@siclog "Step 92" siclog@
    // Check for 10 seconds if UE initiates the tracking area updating procedure on Ncell 50
    t_Timer.start(5.0); // somewhere in the middle to assume the reject message has gone out
    t_WaitForTAU.start(f_NBIOT_SetTimerToleranceMin(nasTimer, 10.0));
    alt {
      [] SRB.receive (car_NB_SRB0_RrcPdu_IND(nbiot_Cell50, cr_RRCConnectionRequest_NB(cr_EstablishmentCause_NB_Any))) {
        f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, "Step 92");
      }
      [] t_Timer.timeout {
        // Now configure Msg4 back to the default RRC Conn Setup for the postamble
        f_NBIOT_SS_ConfigRachProcedureMsg4(nbiot_Cell50, f_NBIOT_508_RRCConnectionSetup());
        repeat;
      }
      [] t_WaitForTAU.timeout {}
    }
    
    //@siclog "Step 93 - 95" siclog@
    // UE performs a TAU and SS releases the RRC connection
    f_NBIOT_TrackingAreaUpdate (nbiot_Cell50, CONTROL_PLANE);
    f_NBIOT_PreliminaryPass(__FILE__, __LINE__, "Step 93");
    
    //@siclog "Step 97" siclog@
    //SS sets SystemInformationBlockType1-NB and SystemInformationBlockType14-NB of Ncell 50
    f_NBIOT_CellInfo_SetAB_Enabled (nbiot_Cell51, true); // @sic R5-177120 sic@
    f_NBIOT_CellInfo_SetIntraFreqReselection( nbiot_Cell51, allowed);
    v_SIB14 := f_NBIOT_CellInfo_GetSIB14 (nbiot_Cell51);
    v_SIB14.ab_Param_r13.ab_Common_r13 := cs_AB_Config_NB(a, '1111111111'B, omit, '11111'B);
    f_NBIOT_CellInfo_SetSIB14(nbiot_Cell51, v_SIB14);
    f_NBIOT_SS_ConfigureSysinfo(nbiot_Cell51, true);

    //@siclog "Step 98" siclog@
    v_CellPowerList := {
      cs_NB_CellPower(nbiot_Cell50, tsc_NonSuitableOffNBIOTCellRS_EPRE),
      cs_NB_CellPower(nbiot_Cell51, tsc_ServingCellRS_EPRE),
      cs_NB_CellPower(nbiot_Cell52, tsc_NonSuitableOffNBIOTCellRS_EPRE),
      cs_NB_CellPower(nbiot_Cell53, tsc_NonSuitableOffNBIOTCellRS_EPRE)
    };
    f_NBIOT_SetCellPowerList(v_CellPowerList);
    
    //@siclog "Step 99" siclog@
    // Check for 60 seconds if UE initiates the tracking area updating procedure on Ncell 50
    if (f_NBIOT_RRC_RRCConnectionRequest_Check(nbiot_Cell51, 60.0)) {
      f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, "Step 99");
    }
    
    //@siclog "Step 100" siclog@
    v_CellPowerList := {
      cs_NB_CellPower(nbiot_Cell50, tsc_NonSuitableOffNBIOTCellRS_EPRE),
      cs_NB_CellPower(nbiot_Cell51, tsc_Suitable_NeighbourIntraFreq_CellRS_EPRE),
      cs_NB_CellPower(nbiot_Cell52, tsc_NonSuitableOffNBIOTCellRS_EPRE),
      cs_NB_CellPower(nbiot_Cell53, tsc_ServingCellRS_EPRE)
    };
    f_NBIOT_SetCellPowerList(v_CellPowerList);
    
    //@siclog "Step 101 - 103" siclog@
    // UE performs a TAU and SS releases the RRC connection
    f_NBIOT_TrackingAreaUpdate (nbiot_Cell53, CONTROL_PLANE); // @sic R5s180455 sic@
    f_NBIOT_PreliminaryPass(__FILE__, __LINE__, "Step 101");
    
    //@siclog "Step 103A - 103C" siclog@
    // Switch off the UE
    f_NBIOT_UE_Detach_SwitchOffUe(nbiot_Cell53, CONTROL_PLANE, RRC_IDLE);  // @sic R5s180455 sic@
    
    //@siclog "Step 104" siclog@
    v_CellPowerList := {
      cs_NB_CellPower(nbiot_Cell50, tsc_ServingCellRS_EPRE),
      cs_NB_CellPower(nbiot_Cell51, tsc_NonSuitableNBIOTCellRS_EPRE), // @sic R5-177120 sic@
      cs_NB_CellPower(nbiot_Cell52, tsc_NonSuitableOffNBIOTCellRS_EPRE),
      cs_NB_CellPower(nbiot_Cell53, tsc_NonSuitableOffNBIOTCellRS_EPRE)
    };
    f_NBIOT_SetCellPowerList(v_CellPowerList);
    
    //@siclog "Step 104A" siclog@
    //SS sets SystemInformationBlockType14-NB of Ncell 51
    v_SIB14.ab_Param_r13.ab_Common_r13 := cs_AB_Config_NB(a, '0000000000'B, omit, '00000'B);
    f_NBIOT_CellInfo_SetSIB14(nbiot_Cell51, v_SIB14);
    f_NBIOT_ModifySysinfoUE_Off(nbiot_Cell51);
    
    //@siclog "Step 105" siclog@
    // Switch on UE
    f_UT_SwitchOnUE(UT, true);
    
    //@siclog "Step 106" siclog@
    // Steps 2-10a of the generic procedure for UE registration
    v_NasInd := f_NBIOT_InitialRegistration_Step2_4(nbiot_Cell50, CONTROL_PLANE, NORMAL);
    
    //@siclog "Step 107" siclog@
    // SS activates radio bearer test mode
    f_NBIOT_InitialRegistration_Step5_10a(nbiot_Cell50, CONTROL_PLANE, STATE3A_NB_IDLEUPDATED_TESTLOOP_ModeG, v_NasInd);
    
    //@siclog "Step 108" siclog@
    // SS responds with an ATTACH ACCEPT message with the T3412 value indicating 6 mins
    f_NBIOT_InitialRegistration_Step13(nbiot_Cell50,
                                       CONTROL_PLANE,
                                       v_NasInd,
                                       -,
                                       -,
                                       -,
                                       -,
                                       -,
                                       cs_GprsTimer_v('010'B, '00001'B)); // T3412  @sic R5s170597, R5s170765 sic@
    
    //@siclog "Step 109" siclog@
    // UE transmits an ATTACH COMPLETE
    f_NBIOT_InitialRegistration_Step14(nbiot_Cell50, CONTROL_PLANE, tsc_EpsDefaultBearerId); // @sic R5s170597 sic@

    //@siclog "Step 110" siclog@
    // The SS releases the RRC connection
    f_NBIOT_RRC_ConnectionRelease(nbiot_Cell50);
    
    //@siclog "Step 110A" siclog@
    v_CellPowerList := {
      cs_NB_CellPower(nbiot_Cell50, tsc_ServingCellRS_EPRE),
      cs_NB_CellPower(nbiot_Cell51, tsc_Suitable_NeighbourIntraFreq_CellRS_EPRE) // @sic R5-177120 sic@
    };
    f_NBIOT_SetCellPowerList(v_CellPowerList);
    //@siclog "Step 111" siclog@
    // Wait for 6 min to ensure that T3412 expires
    f_Delay (f_NBIOT_SetTimerToleranceMin(nasTimer, 360.0)); // @sic R5s170765 sic@
    
    //@siclog "Step 112" siclog@
    // The UE transmits a TRACKING AREA UPDATE REQUEST message with the EPS update type set to 'Periodic updating'
    v_NasInd := f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell50,
                                               cr_EstablishmentCause_NB_Any,
                                               cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                                 cdr_CIOT_TAU_RequestOldGuti(tsc_EpsUpdate_Periodic,
                                                                                             f_NBIOT_SecurityKSIasme_Get(),
                                                                                             -,
                                                                                             -,
                                                                                             f_GutiParameters2MobileIdentity(omit, v_Guti_Params1),
                                                                                             v_Tai1)));
    //@siclog "Step 113" siclog@
    // The SS releases the RRC connection
    f_NBIOT_RRC_ConnectionRelease(nbiot_Cell50);
    
    //@siclog "Step 114 - 115 Void" siclog@
    
    //@siclog "Step 116" siclog@
    // Steps 1-4a1b3a2 of the generic procedure to check the UE response to paging
    f_NBIOT_UE_Page(nbiot_Cell50);
    v_ReturnedValue := f_NBIOT_508Check_CP_ResponseToPagingForMTAccess_Step2_4 (nbiot_Cell50);
    
    //@siclog "Step 117" siclog@
    // The SS transmits a SERVICE REJECT message with EMM cause set to "Congestion"
    SRB.send(cas_NB_SRB_NasPdu_REQ(nbiot_Cell50,
                                   tsc_SRB1bis,
                                   cs_TimingInfo_Now,
                                   cs_NAS_Request(tsc_SHT_IntegrityProtected_Ciphered,
                                                  cs_508_SERVICE_REJECT(tsc_Cause_Congestion))));
    
    //@siclog "Step 118" siclog@
    // The SS releases the RRC connection
    f_NBIOT_RRC_ConnectionRelease(nbiot_Cell50);
    
    //@siclog "Step 119" siclog@
    // Wait for 10s after step 113 to ensure T3411 expires - should have expired ages ago
    
    //@siclog "Step 120a1" siclog@
    if (not f_NBIOT_RRC_RRCConnectionRequest_Check(nbiot_Cell50, f_NBIOT_SetTimerToleranceMin(rrcTimer, 360.0), -, true)) {
      
      //@siclog "Step 120a2" siclog@
      // The UE transmits a TRACKING AREA UPDATE REQUEST message with the EPS update type set to 'Periodic updating'
      v_NasInd := f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell50,
                                                 cr_EstablishmentCause_NB_Any,
                                                 cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                                   cdr_CIOT_TAU_RequestOldGuti(tsc_EpsUpdate_Periodic,
                                                                                               f_NBIOT_SecurityKSIasme_Get(),
                                                                                               -,
                                                                                               -,
                                                                                               f_GutiParameters2MobileIdentity(omit, v_Guti_Params1),
                                                                                               v_Tai1)));
      //@siclog "Step 120a3" siclog@
      // The SS releases the RRC connection and waits for T3411 to expire
      f_NBIOT_RRC_ConnectionReleaseAndTestT3411 (nbiot_Cell50);
    }
    //@siclog "Step 121" siclog@
    // The UE transmits a TRACKING AREA UPDATE REQUEST message with the EPS update type set to 'Periodic updating'
    v_NasInd := f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell50,
                                               cr_EstablishmentCause_NB_Any,
                                               cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                                 cdr_CIOT_TAU_RequestOldGuti(tsc_EpsUpdate_Periodic,
                                                                                             f_NBIOT_SecurityKSIasme_Get(),
                                                                                             -,
                                                                                             -,
                                                                                             f_GutiParameters2MobileIdentity(omit, v_Guti_Params1),
                                                                                             v_Tai1)));
    
    //@siclog "Step 122" siclog@
    // The SS transmits a TRACKING AREA UPDATE ACCEPT message.
    SRB.send(cas_NB_SRB_NasPdu_REQ(nbiot_Cell50,
                                   tsc_SRB1bis,
                                   cs_TimingInfo_Now,
                                   cs_NAS_Request(tsc_SHT_IntegrityProtected_Ciphered,
                                                  cs_CIOT_TAU_AcceptWithTimers(tsc_EpsUpdate_TaUpdate,
                                                                               omit,
                                                                               v_TaiList1,
                                                                               v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.epsBearerContextStatus,
                                                                               f_GetNBIOTAdditionalUpdateResult(v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.addUpdateType)))));
    
    //@siclog "Step 123-124 Void" siclog@
    f_NBIOT_Activate_TestMode (nbiot_Cell50, tsc_UE_TestLoopMode_TypeG); //@sic R5s170765 sic@
    //@siclog "Step 125" siclog@
    // The UE enters the UE test loop mode
    f_NBIOT_CloseUE_TestLoopModeGH (nbiot_Cell50, tsc_UE_TestLoopMode_TypeG, tsc_TestLoopModeGH_UplinkMode_NAS, 1, 20);
    
    //@siclog "Step 126" siclog@
    // The SS transmits one IP packet to the UE
    SRB.send(cas_NB_SRB_NasPdu_REQ(nbiot_Cell50,
                                   tsc_SRB1bis,
                                   cs_TimingInfo_Now,
                                   cs_NAS_Request(tsc_SHT_IntegrityProtected_Ciphered,
                                                  cs_ESM_DATA_TRANSPORT (tsc_EpsDefaultBearerId, f_NBIOT_MobileInfo_GetPTI(v_PDNIndex), cs_UserDataContainer(v_UserData)))));
    
    //@siclog "Step 127" siclog@
    // Wait for 1s after the IP packet has been transmitted
    f_Delay (1.0);
    
    //@siclog "Step 127A" siclog@
    // The SS releases the RRC connection
    f_NBIOT_RRC_ConnectionRelease(nbiot_Cell50);
    
    if (px_DoAttachWithoutPDN) { // Then UE will not have configured PDN at step 106
      //@siclog "Step 128a" siclog@
      // Steps 2 -5 of the generic procedure to check the UE response to paging
      f_NBIOT_508Check_CP_ResponseToPagingForMTAccess_Step2_5 (nbiot_Cell50);
      
      //@siclog "Step 128b" siclog@
      // The SS releases the RRC connection
      f_NBIOT_RRC_ConnectionRelease(nbiot_Cell50);
    }
    
    //@siclog "Step 130" siclog@
    v_CellPowerList := {
      cs_NB_CellPower(nbiot_Cell50, tsc_NonSuitableNBIOTCellRS_EPRE),
      cs_NB_CellPower(nbiot_Cell51, tsc_ServingCellRS_EPRE)
    };
    f_NBIOT_SetCellPowerList(v_CellPowerList);

    //@siclog "Step 131" siclog@
    // The UE transmits a TRACKING AREA UPDATE REQUEST message with the EPS update type set to 'TA updating'
    v_NasInd := f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell51,
                                               cr_EstablishmentCause_NB_Any,
                                               cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                            cdr_CIOT_TAU_RequestOldGuti(tsc_EpsUpdate_TaUpdate,
                                                                                        f_NBIOT_SecurityKSIasme_Get(),
                                                                                        -,
                                                                                        -,
                                                                                        f_GutiParameters2MobileIdentity(omit, v_Guti_Params1),
                                                                                        v_Tai1)));
    //@siclog "Step 132" siclog@
    // Wait for 255s to ensure that T3430 expires
    f_Delay (f_NBIOT_SetTimerToleranceMin(nasTimer, 255.0)); // @sic R5s180149 sic@
    
    //@siclog "Step 133" siclog@
    // The SS releases the RRC connection
    f_NBIOT_RRC_ConnectionRelease(nbiot_Cell51);
    
    //@siclog "Step 134" siclog@
    // Check: Does the UE transmit a CONTROL PLANE SERVICE REQUEST message within 5s (if it does it will need to request an RRC Connection first)
    if (f_NBIOT_RRC_RRCConnectionRequest_Check(nbiot_Cell51, 5.0)) {
      f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, "Step 134");
    }
    
    //@siclog "Step 135" siclog@
    // Wait for 10s after step 113 to ensure T3411 expires - should have already expired
    
    //@siclog "Step 136" siclog@
    // The UE transmits a TRACKING AREA UPDATE REQUEST message with the EPS update type set to 'TA updating'
    v_NASMessage := cdr_CIOT_TAU_RequestOldGuti(tsc_EpsUpdate_TaUpdate,
                                                f_NBIOT_SecurityKSIasme_Get(),
                                                -,
                                                -,
                                                f_GutiParameters2MobileIdentity(omit, v_Guti_Params1),
                                                v_Tai1);
    v_NASMessage.tRACKING_AREA_UPDATE_REQUEST.epsUpdateType.activeFlag := ?; // Table 22.5.8.3.3-28
    v_NasInd := f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell51,
                                               cr_EstablishmentCause_NB_Any,
                                               cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                                 v_NASMessage));
    
    //@siclog "Step 137" siclog@
    // The SS transmits a TRACKING AREA UPDATE ACCEPT message.
    SRB.send(cas_NB_SRB_NasPdu_REQ(nbiot_Cell51,
                                   tsc_SRB1bis,
                                   cs_TimingInfo_Now,
                                     cs_NAS_Request(tsc_SHT_IntegrityProtected_Ciphered,
                                                    cs_CIOT_TAU_AcceptWithTimers(tsc_EpsUpdate_TaUpdate,
                                                                                 f_GutiParameters2MobileIdentity (tsc_IEI_Guti, v_Guti_Params2),
                                                                                 v_TaiList2,
                                                                                 v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.epsBearerContextStatus,
                                                                                 f_GetNBIOTAdditionalUpdateResult(v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.addUpdateType)))));
    
    t_WaitForTAU.start (5.0);
    alt {
      //@siclog "Step 138" siclog@
      //The UE transmits a TRACKING AREA UPDATE COMPLETE message.
      [] SRB.receive(car_NB_SRB_NasPdu_IND(nbiot_Cell51,
                                           tsc_SRB1bis,
                                           cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered,
                                                            cr_508_TAU_Complete)))
        {repeat}
      
      //@siclog "Step 139a1" siclog@
      // UE loops back the IP packet within 5s
      [] SRB.receive(car_NB_SRB_NasPdu_IND(nbiot_Cell51,
                                           tsc_SRB1bis,
                                           cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered,
                                                             cr_ESM_DATA_TRANSPORT (tsc_EpsDefaultBearerId, cr_UserDataContainer))))
        {repeat}
      [] t_WaitForTAU.timeout {}
    }
    //@siclog "Step 140" siclog@
    // The SS releases the RRC connection
    f_NBIOT_RRC_ConnectionRelease(nbiot_Cell51);
    
    //@siclog "Step 141" siclog@
    v_CellPowerList := {
      cs_NB_CellPower(nbiot_Cell50, tsc_ServingCellRS_EPRE),
      cs_NB_CellPower(nbiot_Cell51, tsc_NonSuitableNBIOTCellRS_EPRE)
    };
    f_NBIOT_SetCellPowerList(v_CellPowerList);

    //@siclog "Step 142" siclog@
    // The UE transmits a TRACKING AREA UPDATE REQUEST message
    v_NasInd := f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell50,
                                               cr_EstablishmentCause_NB_Any,
                                               cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                                 cr_508_TAU_Request((tsc_EpsUpdate_Periodic, tsc_EpsUpdate_TaUpdate), // @sic R5s170765 sic@
                                                                                    f_NBIOT_SecurityKSIasme_Get(),
                                                                                    cr_DRXparameter_Any ('5C'O) ifpresent,
                                                                                    cr_AdditionalUpdateType_CIOT ifpresent)));
    //@siclog "Step 143-144" siclog@
    // SS does not send TRACKING AREA UPDATE ACCEPT to the UE
    // SS transmits a DETACH REQUEST message with Detach type = 're-attach not required'
    SRB.send(cas_NB_SRB_NasPdu_REQ(nbiot_Cell50,
                                     tsc_SRB1bis,
                                     cs_TimingInfo_Now,
                                   cs_NAS_Request(tsc_SHT_IntegrityProtected_Ciphered,
                                                cs_508_DETACH_REQUEST_MT(cs_DetachType(tsc_DetachMT_NoReAttach),
                                                                         cs_EMM_Cause_tv(tsc_Cause_TA_NotAllowed)))));
    //@siclog "Step 144A" siclog@
    // UE transmit a DETACH ACCEPT message @sic R5-177120 sic@
    SRB.receive(car_NB_SRB_NasPdu_IND(nbiot_Cell50,
                                     tsc_SRB1bis,
                                    cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered,
                                                      cr_508_DETACH_ACCEPT)));
    f_NBIOT_PreliminaryPass(__FILE__, __LINE__, "Step 144A");
    
    //@siclog "Step 145" siclog@
    // The SS releases the RRC connection
    f_NBIOT_RRC_ConnectionRelease(nbiot_Cell50);
    
    //@siclog "Step 146-147" siclog@
    // Check: Does the UE respond to the paging message?
    f_NBIOT_UE_Page_NoReaction(nbiot_Cell50,
                               cs_NB_Paging_OneRecord(cs_PagingUE_Identity_S_TMSI(v_Guti_Params1.MME_Code, v_Guti_Params1.M_TMSI)),
                               30.0);
    
    // Postamble
    f_NBIOT_TestBody_Set(false);
    f_NBIOT_Postamble (nbiot_Cell50, CONTROL_PLANE, N4_DEREGISTERED);
  }

  /*
   * @desc      REFERENCE TS 36.523-3 clause 22.5.15
   * @status    APPROVED (NBIOT)
   */
  function f_TC_22_5_15_NBIOT() runs on NBIOT_PTC
  { /* NB-IoT / Normal tracking area update / low priority override*/
   
    f_NBIOT_Init(c1);
        
    // create cell and send out system information
    f_NBIOT_CellConfig_Def(nbiot_Cell50, CONTROL_PLANE);
    f_NBIOT_CellConfig_Def(nbiot_Cell51, CONTROL_PLANE);

    f_NBIOT_SetCellPower(nbiot_Cell51, tsc_NonSuitableNBIOTCellRS_EPRE);
        
    //Equip UE with a USIM containing default values except for those shown in 22.5.15.3.1-1
    f_UT_USIM_Insert(UT, "36.523-1 Table 22.5.15.3.1-1");

    // Preamble: The UE is in state Switched OFF (state 1-NB)
    f_NBIOT_Preamble(nbiot_Cell50, CONTROL_PLANE, STATE2_NB_CONNECTED_UPDATED);
    f_NBIOT_UE_Detach_SwitchOffUe(nbiot_Cell50, CONTROL_PLANE, RRC_CONNECTED);
    
    f_NBIOT_TestBody_Set(true);
    
    // Now continue with the procedure
    fl_TC_22_5_15_Body();
    
    // Postamble
    f_NBIOT_TestBody_Set(false);
    f_NBIOT_Postamble(nbiot_Cell51, CONTROL_PLANE, N1_IDLE);
  }

  /*
   * @desc      test body of TC_22_5_15
   * @status    APPROVED (NBIOT)
   */
  function fl_TC_22_5_15_Body() runs on NBIOT_PTC
  {
    var template (value) NB_CellPowerList_Type v_CellPowerList;
    var NAS_MSG_Indication_Type v_NasInd;
    var template (present) B3_Type v_PDNType := (f_GetPdnType(), '101'B);
    var template (present) NAS_UL_Message_Type v_ESMMessage;
    var GutiParameters_Type v_Guti_Params := f_NBIOT_CellInfo_GetGuti (nbiot_Cell50);
    var NAS_PlmnId v_NAS_PlmnId := f_Asn2Nas_PlmnId(v_Guti_Params.PLMN_Identity);
    var template (value) TrackingAreaId v_Tai := cr_TAI(v_NAS_PlmnId, tsc_TAC1);
    var template (omit) EPS_BearerContextStatus v_EPS_ContextStatus;
    
    if (px_DoAttachWithoutPDN) {
      v_ESMMessage := cr_ESM_DUMMY_MESSAGE;
    } else {
      v_ESMMessage := cr_CIOT_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach, v_PDNType);
    }
    
    //@siclog "Step 1 -4b1" siclog@
    // Steps 1 - 4b1 of the generic procedure specified in TS 36.508 subclause 8.1.5.2.3 are performed
    f_UT_SwitchOnUE(UT, true);
    v_NasInd := f_NBIOT_InitialRegistration_Step2_4(nbiot_Cell50, CONTROL_PLANE, NORMAL);
    //Check: Does the UE transmit an ATTACH REQUEST message with the Device properties IE set to "MS is not configured for NAS signalling low priority"?
    f_NBIOT_DeviceProperties_CheckLowPriority(v_NasInd.Pdu.Msg.aTTACH_REQUEST.deviceProperties, '0'B);
    f_NBIOT_PreliminaryPass(__FILE__, __LINE__, "Step 5");
    
    //@siclog "Step 6-15b1" siclog@
    //Steps 5-14b1 from the Generic procedure 'NB-IoT UE Attach, Connected mode (State 2-NB)' as described in TS 36.508 [18], clause 8.1.5.2 take place.
    f_NBIOT_InitialRegistration_Step5_14 (nbiot_Cell50, CONTROL_PLANE, STATE2_NB_CONNECTED_UPDATED, v_NasInd);
    
    //@siclog "Step 16" siclog@
    f_NBIOT_RRC_ConnectionRelease(nbiot_Cell50); // SS releases the RRC Connection
    
    //The following messages are sent and shall be received on Ncell 51.
    //Step 17 - Set the cell type of Ncell 50 to the "Non-Suitable cell".Set the cell type of Ncell 51 to the " Serving cell"
    //@siclog "Step 17" siclog@
    v_CellPowerList := {
      cs_NB_CellPower(nbiot_Cell50, tsc_NonSuitableNBIOTCellRS_EPRE),
      cs_NB_CellPower(nbiot_Cell51, tsc_ServingCellRS_EPRE)
    };
    f_NBIOT_SetCellPowerList(v_CellPowerList);
    
    //@siclog "Step 18" siclog@
    v_NasInd := f_NBIOT_TrackingAreaUpdate_Step1_3(nbiot_Cell51, ?); // @sic R5s170795 sic@
    //Check: Does the UE transmit a TRACKING AREA UPDATE REQUEST message with the Device properties IE set to "MS is not configured for NAS signalling low priority"?
    f_NBIOT_DeviceProperties_CheckLowPriority(v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.deviceProperties, '0'B);
    
    //Check: Does the UE transmit a TRACKING AREA UPDATE REQUEST message with the lastVisitedRegisteredTai set to TAI-1?
    if (not match (v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.lastVisitedRegisteredTai, v_Tai)) {
      f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, "Step 18 : Incorrect lastVisitedRegisteredTai");
    }
    f_NBIOT_PreliminaryPass(__FILE__, __LINE__, "Step 18");
    v_EPS_ContextStatus := v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.epsBearerContextStatus; // Send this back in the Accept
    
    //@siclog "Step 19 - 20" siclog@
    f_NBIOT_TrackingAreaUpdate_Accept_Complete(nbiot_Cell51,
                                               CONTROL_PLANE,
                                               tsc_SRB1bis,
                                               v_Guti_Params,
                                               v_EPS_ContextStatus,
                                               v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.addUpdateType);
    
    //@siclog "Step 21" siclog@
    f_NBIOT_RRC_ConnectionRelease(nbiot_Cell51); // SS releases the RRC Connection
    f_NBIOT_CellInfo_SetGuti(nbiot_Cell51, v_Guti_Params); // @sic R5s170795 sic@
  }

  /*
   * @desc      REFERENCE TS 36.523-3 clause 22.5.16
   * @status    APPROVED (NBIOT)
   */
  function f_TC_22_5_16_NBIOT() runs on NBIOT_PTC
  { // NB-IoT / Normal tracking area update / Rejected / EPS service not allowed /EPS services not allowed in this PLMN

    var template (value) NB_CellPowerList_Type v_CellPowerListT0;
    var NB_CarrierFreq_Type v_CarrierFreq_Ncell50AndNcell51;
    var NB_CarrierFreq_Type v_CarrierFreq_Ncell55AndNcell56;
    
    f_NBIOT_Init(c3, CONTROL_PLANE, LTE_CellsOnDifferentPLMN);
    
    //Get cell specific parameter
    v_CarrierFreq_Ncell50AndNcell51 := f_NBIOT_CellInfo_GetEARFCN(nbiot_Cell50);
    v_CarrierFreq_Ncell55AndNcell56 := f_NBIOT_CellInfo_GetEARFCN(nbiot_Cell55);
    
    //Set the SIB5 for the Ncell50 and Ncell 51 according to Table 22.5.16.3.3-6
    f_NBIOT_ChangeSIB5_Combination3(nbiot_Cell50, cs_508_SystemInformationBlockType5_NB_Def({cs_NB_InterFreqCarrierFreq(v_CarrierFreq_Ncell55AndNcell56)})); //f2 @sic R5s170797 sic@
    f_NBIOT_ChangeSIB5_Combination3(nbiot_Cell51, cs_508_SystemInformationBlockType5_NB_Def({cs_NB_InterFreqCarrierFreq(v_CarrierFreq_Ncell55AndNcell56)})); //f2 @sic R5s170797 sic@
    
    //Set the SIB5 for the Ncell55 and Ncell 56 according to Table 22.5.16.3.3-7
    f_NBIOT_ChangeSIB5_Combination3(nbiot_Cell55, cs_508_SystemInformationBlockType5_NB_Def({cs_NB_InterFreqCarrierFreq(v_CarrierFreq_Ncell50AndNcell51)})); //f1 @sic R5s170797 sic@
    f_NBIOT_ChangeSIB5_Combination3(nbiot_Cell56, cs_508_SystemInformationBlockType5_NB_Def({cs_NB_InterFreqCarrierFreq(v_CarrierFreq_Ncell50AndNcell51)})); //f1 @sic R5s170797 sic@
    
    // create cell and send out system information
    f_NBIOT_CellConfig_Def(nbiot_Cell50, CONTROL_PLANE);//PLMN1 HPLMN
    f_NBIOT_CellConfig_Def(nbiot_Cell51, CONTROL_PLANE);
    f_NBIOT_CellConfig_Def(nbiot_Cell55, CONTROL_PLANE);
    f_NBIOT_CellConfig_Def(nbiot_Cell56, CONTROL_PLANE);
    
    //The UE is in state Registered, Idle Mode (State 3-NB) on Ncell 50 with power settings "T0" in table 22.5.16.3.1-1
    v_CellPowerListT0 := {
      cs_NB_CellPower(nbiot_Cell50, tsc_ServingCellRS_EPRE),
      cs_NB_CellPower(nbiot_Cell51, tsc_NonSuitableNBIOTCellRS_EPRE),
      cs_NB_CellPower(nbiot_Cell55, tsc_NonSuitableNBIOTCellRS_EPRE),
      cs_NB_CellPower(nbiot_Cell56, tsc_NonSuitableOffNBIOTCellRS_EPRE)
    };
    // Preamble: the UE is in state Registered, Idle mode (State 3-NB) on Ncell 50 according to TS 36.508 [18] with PLMN3 on its "forbidden PLMN list".
    f_NBIOT_Preamble(nbiot_Cell50, CONTROL_PLANE, STATE3_NB_IDLEUPDATED);
    
    f_NBIOT_TestBody_Set(true);
    
    fl_TC_22_5_16_Body();
    
    // Postamble
    f_NBIOT_TestBody_Set(false);
    f_NBIOT_Postamble (nbiot_Cell55, CONTROL_PLANE, N1_IDLE);
  }

  /*
   * @desc      test body of TC_22_5_16
   * @status    APPROVED (NBIOT)
   */
  function fl_TC_22_5_16_Body() runs on NBIOT_PTC
  {
    var template (value) NB_CellPowerList_Type v_CellPowerList_AtT1;
    var template (value) NB_CellPowerList_Type v_CellPowerList_AtT2;
    var template (value) NB_CellPowerList_Type v_CellPowerList_AtT3;
    var template (value) NB_CellPowerList_Type v_CellPowerList_AtT4;
    var template (value) NB_CellPowerList_Type v_CellPowerList_AtT5;
    var template (value) NB_CellPowerList_Type v_CellPowerList_AtT6;
    var template (value) NB_CellPowerList_Type v_CellPowerList_AtT7;
    var template (value) NB_CellPowerList_Type v_CellPowerList_AtT8;
    var template (value) NB_CellPowerList_Type v_CellPowerList_AtT9;
    var NAS_MSG_Indication_Type v_NAS_Ind;
    var template (present) NAS_UL_Message_Type v_ESMMessage;
    var B3_Type v_PDNType := f_GetPdnType();
    var GutiParameters_Type v_Guti_Params_Cell50 := f_NBIOT_CellInfo_GetGuti(nbiot_Cell50);
    var NAS_PlmnId v_PLMN_Cell50 := f_Asn2Nas_PlmnId(v_Guti_Params_Cell50.PLMN_Identity);
    
    //@siclog "Step 1" siclog@
    //Set the cell type of Ncell 50 to the "Non-Suitable cell". Set the cell type of Ncell 51 to the "Serving cell" according to row T1 of table 22.5.16.3.1-1.
    v_CellPowerList_AtT1 := {
      cs_NB_CellPower(nbiot_Cell50, tsc_NonSuitableNBIOTCellRS_EPRE),
      cs_NB_CellPower(nbiot_Cell51, tsc_ServingCellRS_EPRE),
      cs_NB_CellPower(nbiot_Cell55, tsc_NonSuitableNBIOTCellRS_EPRE),
      cs_NB_CellPower(nbiot_Cell56, tsc_NonSuitableOffNBIOTCellRS_EPRE)
    };
    f_NBIOT_SetCellPowerList(v_CellPowerList_AtT1);
    
    if (px_DoAttachWithoutPDN) {
      v_ESMMessage := cr_ESM_DUMMY_MESSAGE;
    } else {
      v_ESMMessage := cr_CIOT_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach, v_PDNType);
    }
    
    //@siclog "Steps 2" siclog@
    v_NAS_Ind := f_NBIOT_TrackingAreaUpdate_Step1_3(nbiot_Cell51, ?);
    
    //@siclog "Step 3" siclog@
    // The SS transmits a TRACKING AREA UPDATE REJECT message with cause EPS services not allowed '00000111'B
    SRB.send(cas_NB_SRB_NasPdu_REQ(nbiot_Cell51,
                                   tsc_SRB1bis,
                                   cs_TimingInfo_Now,
                                   cs_NAS_Request(f_GetEPS_SecurityHeaderForReject(tsc_Cause_EPSServNotAllowed), // @sic R5-174501 sic@
                                                  cs_508_TRACKING_AREA_UPDATE_REJECT(tsc_Cause_EPSServNotAllowed))));
    
    //@siclog "Step 4" siclog@
    //The SS releases the RRC connection.
    f_NBIOT_RRC_ConnectionRelease(nbiot_Cell51);
    
    //@siclog "Step 5" siclog@
    //Set the cell type of Ncell 50 to the "Serving cell". Set the cell type of Ncell 51  to the "Non-Suitable cell" according to row T2 of table 22.5.16.3.1-21.
    v_CellPowerList_AtT2 := {
      cs_NB_CellPower(nbiot_Cell50, tsc_ServingCellRS_EPRE),
      cs_NB_CellPower(nbiot_Cell51, tsc_NonSuitableNBIOTCellRS_EPRE),
      cs_NB_CellPower(nbiot_Cell55, tsc_NonSuitableNBIOTCellRS_EPRE),
      cs_NB_CellPower(nbiot_Cell56, tsc_NonSuitableOffNBIOTCellRS_EPRE)
    };
    f_NBIOT_SetCellPowerList(v_CellPowerList_AtT2);
    
    //@siclog "Step 6" siclog@
    //The UE should not perform an ATTACH for 90 s
    f_NBIOT_CheckNoAttachOn1Cell(nbiot_Cell50, 90.0, "Step 6");
    
    //@siclog "Step 7" siclog@
    //The operator initiates an UE attach by MMI or by AT command.
    f_UT_TriggerAttach (UT);
    
    //@siclog "Step 8" siclog@
    //The UE should not perform an ATTACH for 90 s
    f_NBIOT_CheckNoAttachOn1Cell(nbiot_Cell50, 90.0, "Step 8");
    
    //@siclog "Step 9" siclog@
    //Set the cell type of Ncell 50 to the " Non-Suitable cell". Set the cell type of Ncell 55 to the "Serving cell" according to row T3 of table 22.5.16.3.1-21.
    v_CellPowerList_AtT3 := {
      cs_NB_CellPower(nbiot_Cell50, tsc_NonSuitableNBIOTCellRS_EPRE),
      cs_NB_CellPower(nbiot_Cell51, tsc_NonSuitableNBIOTCellRS_EPRE),
      cs_NB_CellPower(nbiot_Cell55, tsc_ServingCellRS_EPRE),
      cs_NB_CellPower(nbiot_Cell56, tsc_NonSuitableOffNBIOTCellRS_EPRE)
    };
    f_NBIOT_SetCellPowerList(v_CellPowerList_AtT3);
    
    //@siclog "Step 10" siclog@
    //The UE should not perform an ATTACH for 90 s
    f_NBIOT_CheckNoAttachOn1Cell(nbiot_Cell55, 90.0, "Step 10");
    
    //@siclog "Step 11" siclog@
    //The operator initiates an UE attach by MMI or by AT command.
    f_UT_TriggerAttach (UT);
    
    //@siclog "Step 12" siclog@
    //The UE should not perform an ATTACH for 90 s
    f_NBIOT_CheckNoAttachOn1Cell(nbiot_Cell55, 90.0, "Step 12");
    
    //@siclog "Step 13" siclog@
    //If possible (see ICS) switch off is performed or the USIM is removed.
    //Otherwise the power is removed.
    f_UT_SwitchOffUE(UT, true);

    //@siclog "Step 14" siclog@
    //Set the cell type of Ncell 50 to the "Serving cell". Set the cell type of Ncell 55 to the "Non-Suitable cell" according to row T4 of table 22.5.16.3.1-21.
    v_CellPowerList_AtT4 := {
      cs_NB_CellPower(nbiot_Cell50, tsc_ServingCellRS_EPRE),
      cs_NB_CellPower(nbiot_Cell51, tsc_NonSuitableNBIOTCellRS_EPRE),
      cs_NB_CellPower(nbiot_Cell55, tsc_NonSuitableNBIOTCellRS_EPRE),
      cs_NB_CellPower(nbiot_Cell56, tsc_NonSuitableOffNBIOTCellRS_EPRE)
    };
    f_NBIOT_SetCellPowerList(v_CellPowerList_AtT4);
    
    //@siclog "Step 15" siclog@
    //The UE is brought back to operation or the USIM is inserted.
    f_UT_SwitchOnUE(UT, true);
    
    //@siclog "Step 16" siclog@
    //Check: Does the UE transmit an ATTACH REQUEST message?
    v_NAS_Ind := f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell50,
                                                cr_EstablishmentCause_NB_Any,
                                                cr_NAS_IndicationWithPiggybacking(tsc_SHT_NoSecurityProtection, // @sic R5s170797 sic@
                                                                                  cdr_CIOT_ATTACH_REQUEST_WithGuti (cr_AdditionalUpdateType_CIOT,
                                                                                                                    tsc_NasKsi_NoKey,// @sic R5s180014 sic@
                                                                                                                    f_Imsi2MobileIdentity(px_IMSI_Def),
                                                                                                                    cr_TAI_Any ifpresent),// IMSI-1
                                                                                  v_ESMMessage));
    f_NBIOT_PreliminaryPass(__FILE__, __LINE__, "Step 16");
    
    //@siclog "Step 17-33" siclog@
    //The attach procedure is completed and the RRC connection is released by executing steps 5-14b1 of the UE registration procedure in TS 36.508 clause 8.1.5.2.3.
    f_NBIOT_InitialRegistration_Step5_14(nbiot_Cell50, CONTROL_PLANE, STATE2_NB_CONNECTED_UPDATED, v_NAS_Ind);
    
    //@siclog "Step 34" siclog@
    //The SS releases the RRC connection.
    f_NBIOT_RRC_ConnectionRelease(nbiot_Cell50);
    
    //If possible (see ICS) switch off is performed or the USIM is removed.
    //Otherwise the power is removed.
    //@siclog "Step 34a" siclog@
    f_NBIOT_UE_Detach_SwitchOffUe(nbiot_Cell50, CONTROL_PLANE, RRC_IDLE);
    
    //@siclog "Step 35" siclog@
    //Set the cell type of Ncell 55 to the "Serving cell" according to row T5 of table 22.5.16.3.1-21..
    v_CellPowerList_AtT5 := {
      cs_NB_CellPower(nbiot_Cell50, tsc_NonSuitableOffNBIOTCellRS_EPRE),
      cs_NB_CellPower(nbiot_Cell51, tsc_NonSuitableOffNBIOTCellRS_EPRE),
      cs_NB_CellPower(nbiot_Cell55, tsc_ServingCellRS_EPRE),
      cs_NB_CellPower(nbiot_Cell56, tsc_NonSuitableOffNBIOTCellRS_EPRE)
    };
    f_NBIOT_SetCellPowerList(v_CellPowerList_AtT5);
    
    //The UE is brought back to operation or the USIM is inserted.
    f_UT_SwitchOnUE(UT, true);
    
    //@siclog "Step 36-56" siclog@
    f_NBIOT_InitialRegistration(nbiot_Cell55, CONTROL_PLANE, NORMAL);
    //@siclog "Step 57" siclog@
    f_NBIOT_RRC_ConnectionRelease(nbiot_Cell55);
    
    //Set the cell type of Ncell 56 to the "Serving cell". Set the cell type of Ncell 55 to the "Non-Suitable cell" according to row T6 of table 22.5.16.3.1-21.
    v_CellPowerList_AtT6 := {
      cs_NB_CellPower(nbiot_Cell50, tsc_NonSuitableOffNBIOTCellRS_EPRE),
      cs_NB_CellPower(nbiot_Cell51, tsc_NonSuitableOffNBIOTCellRS_EPRE),
      cs_NB_CellPower(nbiot_Cell55, tsc_NonSuitableNBIOTCellRS_EPRE),
      cs_NB_CellPower(nbiot_Cell56, tsc_ServingCellRS_EPRE)
    };
    f_NBIOT_SetCellPowerList(v_CellPowerList_AtT6);
    
    //@siclog "Step 58" siclog@
    v_NAS_Ind := f_NBIOT_TrackingAreaUpdate_Step1_3(nbiot_Cell56, ?);
    
    //@siclog "Step 59" siclog@
    // The SS transmits a TRACKING AREA UPDATE REJECT message with cause EPS services not allowed in this PLMN '00001110'B
    SRB.send(cas_NB_SRB_NasPdu_REQ(nbiot_Cell56,
                                   tsc_SRB1bis,
                                   cs_TimingInfo_Now,
                                   cs_NAS_Request(f_GetEPS_SecurityHeaderForReject(tsc_Cause_EPSServNotAllowedInThisPLMN), // @sic R5-174501 sic@
                                                  cs_508_TRACKING_AREA_UPDATE_REJECT(tsc_Cause_EPSServNotAllowedInThisPLMN))));
    
    //@siclog "Step 60" siclog@
    //The SS releases the RRC connection.
    f_NBIOT_RRC_ConnectionRelease(nbiot_Cell56);
    
    //@siclog "Step 61" siclog@
    //Set the cell type of Ncell 55 to the "Serving cell". Set the cell type of Ncell 56 to the "Non-Suitable cell" according to row T7 of table 22.5.16.3.1-21.
    v_CellPowerList_AtT7 := {
      cs_NB_CellPower(nbiot_Cell50, tsc_NonSuitableOffNBIOTCellRS_EPRE),
      cs_NB_CellPower(nbiot_Cell51, tsc_NonSuitableOffNBIOTCellRS_EPRE),
      cs_NB_CellPower(nbiot_Cell55, tsc_ServingCellRS_EPRE),
      cs_NB_CellPower(nbiot_Cell56, tsc_NonSuitableNBIOTCellRS_EPRE)
    };
    f_NBIOT_SetCellPowerList(v_CellPowerList_AtT7);
    
    //@siclog "Step 62" siclog@
    //The UE should not perform an ATTACH for 90 s
    f_NBIOT_CheckNoAttachOn1Cell(nbiot_Cell55, 90.0, "Step 62");
    
    //@siclog "Step 63" siclog@
    //The operator initiates an UE attach by MMI or by AT command.
    f_UT_TriggerAttach (UT);
    
    //@siclog "Step 64" siclog@
    //The UE should not perform an ATTACH for 90 s
    f_NBIOT_CheckNoAttachOn1Cell(nbiot_Cell55, 90.0, "Step 64");
    
    //@siclog "Step 65" siclog@
    //Set the cell type of Ncell 55 to the " Non-Suitable cell". Set the cell type of Ncell 50 to the "Serving cell" according to row T8 of table 22.5.16.3.1-21.
    v_CellPowerList_AtT8 := {
      cs_NB_CellPower(nbiot_Cell50, tsc_ServingCellRS_EPRE),
      cs_NB_CellPower(nbiot_Cell51, tsc_NonSuitableOffNBIOTCellRS_EPRE),
      cs_NB_CellPower(nbiot_Cell55, tsc_NonSuitableNBIOTCellRS_EPRE),
      cs_NB_CellPower(nbiot_Cell56, tsc_NonSuitableNBIOTCellRS_EPRE)
    };
    f_NBIOT_SetCellPowerList(v_CellPowerList_AtT8);
    
    //@siclog "Step 66" siclog@
    v_NAS_Ind := f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell50, // @sic R5s170797 sic@
                                                cr_EstablishmentCause_NB_Any,
                                                cr_NAS_IndicationWithPiggybacking(tsc_SHT_NoSecurityProtection, // @sic R5s170797 sic@
                                                                                  cdr_CIOT_ATTACH_REQUEST_WithIMSINoTai(cr_AdditionalUpdateType_CIOT),// IMSI-1
                                                                                  v_ESMMessage));
    f_NBIOT_PreliminaryPass(__FILE__, __LINE__, "Step 66");
    
    //@siclog "Step 67-82" siclog@
    //The attach procedure is completed and the RRC connection is released by executing steps 5-14b1 of the UE registration procedure in TS 36.508 clause 8.1.5.2.3.
    f_NBIOT_InitialRegistration_Step5_14(nbiot_Cell50, CONTROL_PLANE, STATE2_NB_CONNECTED_UPDATED, v_NAS_Ind); // @sic R5s170797 sic@
    
    //@siclog "Step 83" siclog@
    //The SS releases the RRC connection.
    f_NBIOT_RRC_ConnectionRelease(nbiot_Cell50); // @sic R5s170797 sic@
    
    //@siclog "Step 84" siclog@
    //If possible switch off is performed or the USIM is removed, otherwise the power is removed.
    f_NBIOT_UE_Detach_SwitchOffUe(nbiot_Cell50, CONTROL_PLANE, RRC_IDLE); // @sic R5s170797 sic@
    
    //@siclog "Step 85" siclog@
    //Set the cell type of Ncell 55 to the "Serving cell". Set the cell type of Ncell 50 to the "Non-Suitable cell" according to row T9 of table 22.5.16.3.1-21.
    v_CellPowerList_AtT9 := {
      cs_NB_CellPower(nbiot_Cell50, tsc_NonSuitableNBIOTCellRS_EPRE),
      cs_NB_CellPower(nbiot_Cell51, tsc_NonSuitableOffNBIOTCellRS_EPRE),
      cs_NB_CellPower(nbiot_Cell55, tsc_ServingCellRS_EPRE),
      cs_NB_CellPower(nbiot_Cell56, tsc_NonSuitableNBIOTCellRS_EPRE)
    };
    f_NBIOT_SetCellPowerList(v_CellPowerList_AtT9);
    
    //@siclog "Step 86" siclog@
    //The UE is brought back to operation or the USIM is inserted.
    f_UT_SwitchOnUE(UT, true);
    
    //@siclog "Step 87" siclog@
    v_NAS_Ind := f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell55,
                                                cr_EstablishmentCause_NB_Any,
                                                cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                  cdr_CIOT_ATTACH_REQUEST_WithGuti (cr_AdditionalUpdateType_CIOT,
                                                                                                                    f_NBIOT_SecurityKSIasme_Get(),
                                                                                                                    f_Imsi2MobileIdentity(px_IMSI_Def), // @sic R5-176323 sic@
                                                                                                                    cr_TAI(v_PLMN_Cell50, tsc_TAC1) ifpresent),// GUTI-1 @sic R5s170797 sic@
                                                                                  v_ESMMessage));
    f_NBIOT_PreliminaryPass(__FILE__, __LINE__, "Step 87");
    
    //@siclog "Step 88-103" siclog@
    //The attach procedure is completed and the RRC connection is released by executing steps 5-14b1 of the UE registration procedure in TS 36.508 clause 8.1.5.2.3.
    f_NBIOT_InitialRegistration_Step5_14(nbiot_Cell55, CONTROL_PLANE, STATE2_NB_CONNECTED_UPDATED, v_NAS_Ind);
    
    //@siclog "Step 89" siclog@
    //The SS releases the RRC connection.
    f_NBIOT_RRC_ConnectionRelease(nbiot_Cell55);
  }

}
