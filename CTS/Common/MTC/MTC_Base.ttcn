/******************************************************************************/
// @copyright   Copyright Notification
//   No part may be reproduced except as authorized by written permission.
//   The copyright and the foregoing restriction extend to reproduction in all media.
//   Trademark 2019, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).
//   All rights reserved.
// @version: 36.523-3 v15.3.0
// $Date: 2019-03-16 19:54:08 +0100 (Sat, 16 Mar 2019) $
// $Rev: 24094 $
/******************************************************************************/

module MTC_Base {

  import from UpperTesterCommon all;
  import from UpperTesterPtcToMtcDefs all;

  const integer tsc_UT_NoCnfExpected := -1;                     /* special value to indicate that no confirmation is expected;
                                                                   @status    APPROVED (ENDC, IMS, IMS_IRAT, LTE, LTE_A_IRAT, LTE_A_PRO, LTE_A_R10_R11, LTE_A_R12, LTE_IRAT, NBIOT, POS, SSNITZ, UTRAN) */

  const integer tsc_NoOfCordPorts := 9;                         /* @status    APPROVED (ENDC, IMS, IMS_IRAT, LTE, LTE_A_IRAT, LTE_A_PRO, LTE_A_R10_R11, LTE_A_R12, LTE_IRAT, NBIOT, POS, SSNITZ, UTRAN)
                                                                   @sic R5-134070: generic handling of UT commands for IMS PTC as well as for the other PTCs sic@
                                                                   @sic R5-151995: additional port for WLAN sic@
                                                                   @sic R5s160736: tsc_NoOfCordPorts := 8 to cope with FBBA sic@
                                                                   @sic R5w180111: NR (=> tsc_NoOfCordPorts := 9) sic@ */

  const integer tsc_MTC_PortIndex_EUTRA := 0;                   /* @status    APPROVED (ENDC, IMS, IMS_IRAT, LTE, LTE_A_IRAT, LTE_A_PRO, LTE_A_R10_R11, LTE_A_R12, LTE_IRAT, NBIOT, POS, UTRAN) */

  const integer tsc_MTC_PortIndex_NBIOT := tsc_MTC_PortIndex_EUTRA; /* @status    APPROVED (NBIOT) */

  type record UT_Ctrl_Type {                                    /* @status    APPROVED (ENDC, IMS, IMS_IRAT, LTE, LTE_A_IRAT, LTE_A_PRO, LTE_A_R10_R11, LTE_A_R12, LTE_IRAT, NBIOT, POS, SSNITZ, UTRAN) */
    integer CoordPortIndex,                                     /* index of the coordination port to which a confirmation shall be sent back;
                                                                   tsc_UT_NoCnfExpected when no confimation is expected */
    boolean UE_SwitchedOn
  };

  type component MTC_BASE {                                     /* @status    APPROVED (ENDC, IMS, IMS_IRAT, LTE, LTE_A_IRAT, LTE_A_PRO, LTE_A_R10_R11, LTE_A_R12, LTE_IRAT, NBIOT, POS, SSNITZ, UTRAN) */
    var UT_Ctrl_Type vc_UT_Ctrl;

    // Ports:
    port MTC_System_Ut      Ut;                            // Upper Tester: Port at MTC connected to the system interface
    port UT_MTC_PTC_PORT    PTC_Ut[tsc_NoOfCordPorts];     // coordination ports
  };

  type component MTC_BASE_SYSTEM {                              /* @status    APPROVED (ENDC, IMS, IMS_IRAT, LTE, LTE_A_IRAT, LTE_A_PRO, LTE_A_R10_R11, LTE_A_R12, LTE_IRAT, NBIOT, POS, SSNITZ, UTRAN) */
    port MTC_System_Ut       Ut;
  };

  /*
   * @desc      map MTC's system ports
   * @param     p_System
   * @status    APPROVED (ENDC, IMS, IMS_IRAT, LTE, LTE_A_IRAT, LTE_A_PRO, LTE_A_R10_R11, LTE_A_R12, LTE_IRAT, NBIOT, POS, SSNITZ, UTRAN)
   */
  function f_MTC_BASE_Map(MTC_BASE_SYSTEM p_System)
  {
    map(mtc:Ut, p_System:Ut);
  }

  /*
   * @desc      initialise upper tester
   * @status    APPROVED (ENDC, IMS, IMS_IRAT, LTE, LTE_A_IRAT, LTE_A_PRO, LTE_A_R10_R11, LTE_A_R12, LTE_IRAT, NBIOT, POS, SSNITZ, UTRAN)
   */
  function f_MTC_BASE_Init() runs on MTC_BASE
  {
    f_MTC_BASE_CoordPortIndex_Set(tsc_UT_NoCnfExpected);
    vc_UT_Ctrl.UE_SwitchedOn  := false;
  }

  /*
   * @desc      set index of the coordination port from which the latest AT/MMI commond has been received to send back the confirmation
   * @param     p_CoordPortIndex
   * @status    APPROVED (ENDC, IMS, IMS_IRAT, LTE, LTE_A_IRAT, LTE_A_PRO, LTE_A_R10_R11, LTE_A_R12, LTE_IRAT, NBIOT, POS, SSNITZ, UTRAN)
   */
  function f_MTC_BASE_CoordPortIndex_Set(integer p_CoordPortIndex) runs on MTC_BASE
  {
    vc_UT_Ctrl.CoordPortIndex := p_CoordPortIndex;
  }

  /*
   * @desc      get index of the coordination port from which the latest AT/MMI commond has been received to send back the confirmation
   * @return    integer
   * @status    APPROVED (ENDC, IMS, IMS_IRAT, LTE, LTE_A_IRAT, LTE_A_PRO, LTE_A_R10_R11, LTE_A_R12, LTE_IRAT, NBIOT, POS, SSNITZ, UTRAN)
   */
  function f_MTC_BASE_CoordPortIndex_Get() runs on MTC_BASE return integer
  {
    return vc_UT_Ctrl.CoordPortIndex;
  }

  /*
   * @desc      return true when waiting for any confirmation for an AT/MMI command
   * @return    boolean
   * @status    APPROVED (ENDC, IMS, IMS_IRAT, LTE, LTE_A_IRAT, LTE_A_PRO, LTE_A_R10_R11, LTE_A_R12, LTE_IRAT, NBIOT, POS, SSNITZ, UTRAN)
   */
  function f_MTC_BASE_IsWaitingForCnf() runs on MTC_BASE return boolean
  {
    return ((vc_UT_Ctrl.CoordPortIndex >= 0) and (vc_UT_Ctrl.CoordPortIndex < tsc_NoOfCordPorts));
  }

  /*
   * @desc      set UE status: switched-on
   * @param     p_UE_SwitchedOn
   * @status    APPROVED (ENDC, IMS, IMS_IRAT, LTE, LTE_A_IRAT, LTE_A_PRO, LTE_A_R10_R11, LTE_A_R12, LTE_IRAT, NBIOT, POS, SSNITZ, UTRAN)
   */
  function f_MTC_BASE_UE_SwitchedOn_Set(boolean p_UE_SwitchedOn) runs on MTC_BASE
  {
    vc_UT_Ctrl.UE_SwitchedOn := p_UE_SwitchedOn;
  }

  /*
   * @desc      get UE status
   * @return    boolean
   * @status    APPROVED (ENDC, IMS, IMS_IRAT, LTE, LTE_A_IRAT, LTE_A_PRO, LTE_A_R10_R11, LTE_A_R12, LTE_IRAT, NBIOT, POS, SSNITZ, UTRAN)
   */
  function f_MTC_BASE_UE_SwitchedOn_Get() runs on MTC_BASE return boolean
  {
    return vc_UT_Ctrl.UE_SwitchedOn;
  }

  /*
   * @desc      Terminate the MTC
   * @param     p_Verdict
   * @status    APPROVED (ENDC, IMS, IMS_IRAT, LTE, LTE_A_IRAT, LTE_A_PRO, LTE_A_R10_R11, LTE_A_R12, LTE_IRAT, NBIOT, POS, SSNITZ, UTRAN)
   */
  function f_MTC_Stop(verdicttype p_Verdict)
  {
    /* Note: the assignment of the final verdict is according to table 28 in the TTCN-3 core spec (cl. 24.1);
       i.e. at the end of a test case "pass" may always be assigned since it overrules "none" only */
    setverdict(p_Verdict);
    all component.stop;                       // stop the NAS emulator and IP PTC (if started)
    mtc.stop;
  }

}
