/******************************************************************************/
// @copyright   Copyright Notification
//   No part may be reproduced except as authorized by written permission.
//   The copyright and the foregoing restriction extend to reproduction in all media.
//   Trademark 2019, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).
//   All rights reserved.
// @version: 36.523-3 v15.3.0
// $Date: 2019-03-11 10:08:10 +0100 (Mon, 11 Mar 2019) $
// $Rev: 23871 $
/******************************************************************************/

module NBIOT_RRC_ControlPlane {

  import from NBIOT_RRC_ASN1_Definitions language "ASN.1:2002" all with {encode "UNALIGNED_PER_OctetAligned"};
  import from CIOT_NASTemplates all;
  import from Common4G5G_Templates all;
  import from CommonAspDefs all;
  import from CommonDefs all;
  import from EPS_NAS_Constants all;
  import from EPS_NAS_LoopBack_Templates all;
  import from EPS_NAS_Templates all;
  import from EUTRA_NB_ASP_Templates all;
  import from EUTRA_NB_CommonDefs all;
  import from EUTRA_NB_Parameters all;
  import from EUTRA_NB_SecurityDefinitionsAndExternalFunctions all;
  import from LoopbackIP all;
  import from NAS_CommonTemplates all;
  import from NBIOT_ASP_SrbDefs all;
  import from NBIOT_ASP_TypeDefs all;
  import from NBIOT_CellCfg_Templates all;
  import from NBIOT_CellInfo all;
  import from NBIOT_CommonDefs all;
  import from NBIOT_CommonProcedures all;
  import from NBIOT_Component all;
  import from NBIOT_ConfigurationSteps all;
  import from NBIOT_Imported_EUTRA_ASN1_Types all;
  import from NBIOT_LoopBack all;
  import from NBIOT_NASSteps all;
  import from NBIOT_Parameters all;
  import from NBIOT_RRCSteps all;
  import from NBIOT_RRC_Common all;
  import from NBIOT_RRC_Templates all;
  import from NBIOT_SRB_DRB_Templates all;
  import from NBIOT_SecurityFunctions all;
  import from NBIOT_SysInfo_Templates all;
  import from NBIOT_Timing all;
  import from Parameters all;
  import from UpperTesterFunctions all;

  template (present) UL_CCCH_Message_NB cr_RRCConnectionReestablishmentRequest_NB_r14(template (present) ReestabUE_Identity_CP_NB_r14 p_UE_Identity,
                                                                                      ReestablishmentCause_NB_r13 p_ReestablishmentCause) :=
  { /* @status    APPROVED (NBIOT) */
    message_ := {
      c1 := {
        rrcConnectionReestablishmentRequest_r13 := {
          criticalExtensions := {
            later := {
              rrcConnectionReestablishmentRequest_r14 := {
              ue_Identity_r14               := p_UE_Identity,
              reestablishmentCause_r14      := p_ReestablishmentCause,
              cqi_NPDCCH_r14                := ?,   /* @sic R5s180412 BASELINE MOVING 2018-2 sic@ */
              earlyContentionResolution_r14 := ?,   /* @sic R5s180412 BASELINE MOVING 2018-2 sic@ */
              spare                         := ?    /* @sic R5s180412 BASELINE MOVING 2018-2 sic@ */
              }
            }
          }
        }
      }
    }
  };

  /*
   * @desc      check the reported UE MultipleDRB vs. UE MultipleDRB PICS item.
   *            Inconsistency leads to verdict FAIL
   * @param     p_UE_Capability_NB_r13
   * @status    APPROVED (NBIOT)
   */
  function fl_NBIOT_CheckMultipleDRB(UE_Capability_NB_r13 p_UE_Capability_NB_r13)
  {
    if ((isvalue(p_UE_Capability_NB_r13.multipleDRB_r13)) xor pc_NB_MultiDRB ) {
      f_SetVerdict(fail, __FILE__, __LINE__, "PICS does not match reported multipleDRB"); // PICS mismatch
    }
  }

  /*
   * @desc      check the reported UE PhyLayerParameters vs. UE PhyLayerParameters PICS items.
   *            Inconsistency leads to verdict FAIL
   * @param     p_PhyLayerParameters_NB_r13
   * @status    APPROVED (NBIOT)
   */
  function fl_NBIOT_CheckPhyLayerParameters(PhyLayerParameters_NB_r13 p_PhyLayerParameters_NB_r13)
  {
    if( (isvalue(p_PhyLayerParameters_NB_r13.multiTone_r13)) xor pc_NB_MultiTone ) {
      f_SetVerdict(fail, __FILE__, __LINE__, "PICS does not match reported MultiTone"); // PICS mismatch
    }
    if( (isvalue(p_PhyLayerParameters_NB_r13.multiCarrier_r13)) xor pc_NB_MultiCarrier ) {
      f_SetVerdict(fail, __FILE__, __LINE__, "PICS does not match reported MultiCarrier"); // PICS mismatch
    }
  }

  /*
   * @desc      Check that any value B such that pc_eBandB_Supp is TRUE and different from all eutra-Band[k] where k = 1 to a - 1
   *            Go through the received supportedBandList and match against the supported bands according to the PICS
   *            Check only the bands for which there are PICS; do not check other bands which may or may not be reported
   * @param     p_SupportedBandList
   * @status    APPROVED (NBIOT)
   */
  function fl_NBIOT_CheckSupportedBands(SupportedBandList_NB_r13 p_SupportedBandList)
  {
    var integer i;
    var integer j;
    var integer v_Band_r13;
    var integer v_BitStringIndex;
    var bitstring v_SuppBandsFromPICS := f_DeriveSuppNBIoTBandsFromPics ();
    var integer v_MaxBandsReported := lengthof(p_SupportedBandList);
    var bitstring v_SuppBandsReported := int2bit(0, v_MaxBandsReported); // 1... maxbands
    // There may be more bands reported than there are PICS defined for bands
    
    for (i:= 0; i < lengthof(p_SupportedBandList); i:= i+1) {
      if (tsc_NBIOT_SupportedBands[i] == '1'B) { // Don't check anything if band not supported @sic R5s170290 sic@
        if (v_SuppBandsFromPICS[i] =='1'B) { // PICS for band i
          for (j := 0; j < v_MaxBandsReported; j := j + 1) { // check against all reported bands
            v_Band_r13 := p_SupportedBandList[j].band_r13;
            v_BitStringIndex := v_Band_r13 - 1;
            if (i == v_BitStringIndex) {
              if (v_SuppBandsReported[v_BitStringIndex] == '1'B) {
                f_SetVerdict(fail, __FILE__, __LINE__, "support of band nr. " & int2str(v_Band_r13) &  " is reported more than once"); // error: duplicate found
              } else {
                v_SuppBandsReported[v_BitStringIndex] := '1'B;
              }
            }
            else {// do nothing
            }
          }
          if (v_SuppBandsReported[i] != '1'B) { // PICS set,  but expected band was not in the list
            f_SetVerdict(fail, __FILE__, __LINE__, "expected (per PICS) band nr. " & int2str(i + 1) &  " is not reported"); // error: PICS set, but expected band not reported
          }
        }
        else { // PICS is not set => non support
          for (j := 0; j < v_MaxBandsReported; j := j + 1) { // check against all reported bands
            v_Band_r13 := p_SupportedBandList[j].band_r13;
            v_BitStringIndex := v_Band_r13 - 1;
            if (i == v_BitStringIndex) {
              f_SetVerdict(fail, __FILE__, __LINE__, "PICS does not match reported capability for band nr. " & int2str(v_Band_r13)); // PICS mismatch
            }
            else { // do nothing
            }
          }
        }
      } // if band not supported
    }
  }

  /*
   * @desc      check the reported UE MultipleDRB vs. UE MultiCarrierPaging PICS item.
   *            Inconsistency leads to verdict FAIL
   * @param     p_UE_RadioPagingInfo_NB_r13
   * @status    APPROVED (NBIOT)
   */
  function fl_NBIOT_CheckMultiCarrierPaging(UE_RadioPagingInfo_NB_r13 p_UE_RadioPagingInfo_NB_r13)
  {
    if ((isvalue(p_UE_RadioPagingInfo_NB_r13.multiCarrierPaging_r14)) xor pc_NB_MultiCarrier_Paging ) { // @sic R5-182640 sic@
      f_SetVerdict(fail, __FILE__, __LINE__, "PICS does not match reported multiCarrierPaging"); // PICS mismatch
    }
  }

  /*
   * @desc      check the reported UE Category vs. UE Category PICS item for NB2.
   *            Inconsistency leads to verdict FAIL
   * @param     p_UE_Capability_NB_Ext_r14
   * @status    APPROVED (NBIOT)
   */
  function fl_NBIOT_CheckCategoryNB2(UE_Capability_NB_Ext_r14_IEs p_UE_Capability_NB_Ext_r14)
  {
    if ((isvalue(p_UE_Capability_NB_Ext_r14.ue_Category_NB_r14)) xor pc_ue_Category_NB2 ) {
      f_SetVerdict(fail, __FILE__, __LINE__, "PICS does not match reported UE Category for Rel14"); // PICS mismatch
    }
  }

  /*
   * @desc      check the reported UE Rai Support vs. UE Rai Support PICS item.
   *            Inconsistency leads to verdict FAIL
   * @param     p_UE_Capability_NB_Ext_r14
   * @status    APPROVED (NBIOT)
   */
  function fl_NBIOT_CheckRaiSupport(UE_Capability_NB_Ext_r14_IEs p_UE_Capability_NB_Ext_r14)
  {
    if (isvalue(p_UE_Capability_NB_Ext_r14.mac_Parameters_r14)){
      if ((isvalue(p_UE_Capability_NB_Ext_r14.mac_Parameters_r14.rai_Support_r14)) xor pc_NB_Rai_Support ){
        f_SetVerdict(fail, __FILE__, __LINE__, "PICS does not match reported Rai_Support"); // PICS mismatch
      }
    }
    else{
      if (pc_NB_Rai_Support){
        f_SetVerdict(fail, __FILE__, __LINE__, "PICS does not match reported IE mac_Parameters_r14 including Rai_Support"); // PICS mismatch
      }
    }
  }

  /*
   * @desc      check the reported UE phyLayerParameters_v1430 vs. UE phyLayerParameters_v1430 PICS item.
   *            Inconsistency leads to verdict FAIL
   * @param     p_UE_Capability_NB_Ext_r14
   * @status    APPROVED (NBIOT)
   */
  function fl_NBIOT_CheckPhyLayerParameters_v1430(UE_Capability_NB_Ext_r14_IEs p_UE_Capability_NB_Ext_r14)
  {
    if (isvalue(p_UE_Capability_NB_Ext_r14.phyLayerParameters_v1430)){
      if ((isvalue(p_UE_Capability_NB_Ext_r14.phyLayerParameters_v1430.multiCarrier_NPRACH_r14)) xor pc_NB_MultiCarrier_NPRACH ){
        f_SetVerdict(fail, __FILE__, __LINE__, "PICS does not match reported multiCarrier_NPRACH"); // PICS mismatch
      }
      if ((isvalue(p_UE_Capability_NB_Ext_r14.phyLayerParameters_v1430.twoHARQ_Processes_r14)) xor pc_NB_TwoHARQ_Processes ){
        f_SetVerdict(fail, __FILE__, __LINE__, "PICS does not match reported twoHARQ_Processes"); // PICS mismatch
      }
    }
    else{
      if (pc_NB_MultiCarrier_NPRACH){
        f_SetVerdict(fail, __FILE__, __LINE__, "PICS does not match reported IE phyLayerParameters_v1430 including multiCarrier_NPRACH"); // PICS mismatch
      }
      if (pc_NB_TwoHARQ_Processes){
        f_SetVerdict(fail, __FILE__, __LINE__, "PICS does not match reported IE phyLayerParameters_v1430 including twoHARQ_Processes"); // PICS mismatch
      }
    }
  }

  /*
   * @desc      check the reported UE phyLayerParameters_v1440 vs. UE phyLayerParameters_v1440 PICS item.
   *            Inconsistency leads to verdict FAIL
   * @param     p_UE_Capability_NB_Ext_r14
   * @status    APPROVED (NBIOT)
   */
  function fl_NBIOT_CheckphyLayerParameters_v1440(UE_Capability_NB_Ext_r14_IEs p_UE_Capability_NB_Ext_r14)
  {
    if (isvalue(p_UE_Capability_NB_Ext_r14.nonCriticalExtension)){
      if (isvalue(p_UE_Capability_NB_Ext_r14.nonCriticalExtension.phyLayerParameters_v1440)){
        if ((isvalue(p_UE_Capability_NB_Ext_r14.nonCriticalExtension.phyLayerParameters_v1440.interferenceRandomisation_r14)) xor pc_NB_InterferenceRandomisation ){
          f_SetVerdict(fail, __FILE__, __LINE__, "PICS does not match reported interferenceRandomisation"); // PICS mismatch
        }
      }
      else{
        if (pc_NB_InterferenceRandomisation){
          f_SetVerdict(fail, __FILE__, __LINE__, "PICS does not match reported IE phyLayerParameters_v1430 including interferenceRandomisation"); // PICS mismatch
        }
      }
    }
    else{
      if (pc_NB_InterferenceRandomisation){
        f_SetVerdict(fail, __FILE__, __LINE__, "PICS does not match reported UE_Capability_NB_v1440_IEs including interferenceRandomisation"); // PICS mismatch
      }
    }
  }

  /*
   * @desc      To decode the ue-Capability-ContainerExt-r14 CONTAINING UE-Capability-NB-Ext-r14-IEs
   * @param     p_Octetstring
   * @return    UE_Capability_NB_Ext_r14_IEs
   * @status    APPROVED (NBIOT)
   */
  function fl_NBIOT_DecodeCapExt_r14(octetstring p_Octetstring) return UE_Capability_NB_Ext_r14_IEs
  {
    var UE_Capability_NB_Ext_r14_IEs v_UE_Capability_NB_Ext_r14;
    var bitstring v_Bitstring := oct2bit(p_Octetstring);
    var integer v_Result := decvalue(v_Bitstring, v_UE_Capability_NB_Ext_r14);
    if (v_Result != 0) {
      FatalError(__FILE__, __LINE__, "UE Capability Ext for Rel-14 cannot be decoded");
    }
    return v_UE_Capability_NB_Ext_r14;
  }

  /*
   * @desc      Function to calculate shortMAC-I that is used as a parameter in RRCConnectionReestablishmentRequest
   * @param     p_CellId_Source
   * @param     p_CellId_Current    (default value: omit)
   * @status    APPROVED (NBIOT)
   */
  function f_NBIOT_RRC_RRCConnectionReestablishmentRequest_r14(NBIOT_CellId_Type p_CellId_Source,
                                                               template (omit) NBIOT_CellId_Type p_CellId_Current := omit) runs on NBIOT_PTC
  {
    var NBIOT_CellId_Type v_CellId_Current := p_CellId_Source;
    var NBIOT_SecurityParams_Type v_SecurityParams := f_NBIOT_Security_Get();
    var GutiParameters_Type v_Source_GUTI := f_NBIOT_CellInfo_GetGuti(p_CellId_Source);
    var NB_SRB_COMMON_IND  v_NB_SRB_COMMON_IND;
    var B16_Type v_ReceivedMac;
    var MessageAuthenticationCode v_CalculatedMac;
    var B28_Type v_CellIdentity;
    var O4_Type v_NASCOUNT;
    var B5_Type v_BearerId := '00000'B;
    var integer v_Direction := 0;
    var EUTRA_ASN1_S_TMSI_Type v_S_TMSI;
    
    if (ispresent(p_CellId_Current)) {
      v_CellId_Current := valueof(p_CellId_Current);
    }
    SRB.receive(car_NB_SRB0_RrcPdu_IND(v_CellId_Current, cr_RRCConnectionReestablishmentRequest_NB_r14(?, otherFailure)))-> value v_NB_SRB_COMMON_IND;
  
    /* According to 36.331 cl. 5.3.7.4
       calculate ul-NAS-MAC using the cellIdentity of the PCell in which the trigger for the re-establishment occurred;
       1>  using 28 bits bitstring cellIdentity of the PCell;
       2>  with the K_NAS key and NAS integrity protection algorithm; and
       3>  with all input bits for COUNT, BEARER('00000') and DIRECTION set to binary ones; */

    v_CellIdentity := f_NBIOT_CellInfo_GetCellIdentity (v_CellId_Current);
    v_NASCOUNT := '00'O & '0000'O & bit2oct(v_NB_SRB_COMMON_IND.Signalling.Rrc.Ccch.message_.c1.rrcConnectionReestablishmentRequest_r13.criticalExtensions.later.rrcConnectionReestablishmentRequest_r14.ue_Identity_r14.ul_NAS_Count_r14);
    v_ReceivedMac := v_NB_SRB_COMMON_IND.Signalling.Rrc.Ccch.message_.c1.rrcConnectionReestablishmentRequest_r13.criticalExtensions.later.rrcConnectionReestablishmentRequest_r14.ue_Identity_r14.ul_NAS_MAC_r14;

    v_CalculatedMac := fx_NasIntegrityAlgorithmBitstring(v_CellIdentity,
                                                         v_SecurityParams.NAS_Integrity.Algorithm,
                                                         v_SecurityParams.NAS_Integrity.K_NAS,
                                                         v_NASCOUNT,
                                                         v_BearerId,
                                                         v_Direction);

    if( bit2oct(v_ReceivedMac) != substr(v_CalculatedMac, 0, 2) ){
      f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, "Received ul-NAS-MAC-r14 does not match calculated NAS MAC");
    }

    v_S_TMSI.mmec := v_Source_GUTI.MME_Code;
    v_S_TMSI.m_TMSI := v_Source_GUTI.M_TMSI;
    if (v_S_TMSI != v_NB_SRB_COMMON_IND.Signalling.Rrc.Ccch.message_.c1.rrcConnectionReestablishmentRequest_r13.criticalExtensions.later.rrcConnectionReestablishmentRequest_r14.ue_Identity_r14.s_TMSI_r14){
      f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, "Received s-TMSI-r14 does not match s-TMSI");
    }
  }

  /*
   * @desc      REFERENCE TS 36.523-1 clause 22.4.7
   * @status    APPROVED (NBIOT)
   */
  function f_TC_22_4_7_NBIOT() runs on NBIOT_PTC
  {//NB-IoT / RRC connection release with extendedWait / extendedWait ignored / RRC connection establishment / Reject with extendedWait
    var integer v_XtdWaitTime := 60;
    var integer v_DelayLoopbackDataTime := 15;//@sic R5-174646, R5s170562 change 1.2 sic@
    var float v_WaitForConnectionMax := f_NBIOT_SetTimerToleranceMax (rrcTimer, int2float(v_XtdWaitTime));//@sic R5-174646, R5s170562 change 1.1 sic@
    var float v_WaitForConnection := f_NBIOT_SetTimerToleranceMin (rrcTimer, int2float(v_XtdWaitTime));
    var NBIOT_CellInfo_Type v_CellInfo;
    var octetstring v_UserData := f_IPv4IPv6_IcmpEchoReply(f_LoopbackModeB_IP_Address_UE());
    var boolean v_TimerMsg4IsRunning := true;
    timer t_Wait;
    timer t_WaitForConnection;
    timer t_WaitForConfigMsg4;
    
    f_NBIOT_Init(c1);

    v_CellInfo := f_NBIOT_CellInfo_Get(nbiot_Cell1);
    
    //Create and configure all cells
    f_NBIOT_CellConfig_Def(nbiot_Cell1, CONTROL_PLANE);

    //Bring UE to initial state
    f_NBIOT_Preamble(nbiot_Cell1, CONTROL_PLANE, STATE2A_NB_TESTLOOP_ModeG);
    f_NBIOT_CloseUE_TestLoopModeGH(nbiot_Cell1, tsc_UE_TestLoopMode_TypeG, tsc_TestLoopModeGH_UplinkMode_NAS, 1, v_DelayLoopbackDataTime);//@sic R5-174646, R5s170562 change 1.2 sic@

    f_NBIOT_TestBody_Set(true);

    //@siclog "Step 0" siclog@
    //@sic R5-172869 sic@
    //The SS transmits an RRCConnectionRelease-NB message
    f_NBIOT_RRC_ConnectionRelease (nbiot_Cell1);
    
    //@siclog "Step 0A" siclog@
    //@sic R5-171547 sic@
    //'Generic Test Procedure NB-IoT Control Plane CIoT MT user data transfer non-SMS transport' as described in TS 36.508 [18], clause 8.1.5A.2.3 are performed
    f_NBIOT_508Check_CP_ResponseToPagingForMTAccess(nbiot_Cell1);

    //@siclog "Step 0B" siclog@
    //@sic R5-171547 sic@
    //The SS transmits one IP packet to the UE embedded in a  ESM DATA TRANSPORT and  DLInformationTransfer-NB
    SRB.send(cas_NB_SRB_NasPdu_REQ(nbiot_Cell1,
                                   tsc_SRB1bis,
                                   cs_TimingInfo_Now,
                                   cs_NAS_Request(tsc_SHT_IntegrityProtected_Ciphered,
                                                  cs_ESM_DATA_TRANSPORT (tsc_EpsDefaultBearerId, tsc_PTI_Unassigned, cs_UserDataContainer(v_UserData)))));//@sic R5s170364 sic@

    //@siclog "Step 0C" siclog@
    //@sic R5-171547 sic@
    //Wait for 1 s after the IP packet has been transmitted in step 0B.
    //Note 1: The 1 second delay is used to secure that the UE have received and forwarded the IP Packet transmitted by the SS to the UE test loop function before the RRCConnectionRelease-NB message is sent by the SS.
    f_Delay(1.0);

    //@siclog "Step 0D" siclog@
    //@sic R5-172869, R5-174646, R5s170562 change 1.3 sic@
    //Void.
    
    //@siclog "Step 1" siclog@
    //The SS transmits an RRCConnectionRelease-NB message on Ncell 1 with IE extendedwaitTime set to 60s.
    f_NBIOT_RRC_ConnectionRelease_Common(nbiot_Cell1, CONTROL_PLANE, cs_RRCConnectionRelease_NB(tsc_RRC_TI_Def, other, -, v_XtdWaitTime), cs_TimingInfo_Now);
   
    //@siclog "Step 2" siclog@
    //@sic R5-171547 sic@
    //Void.
    
    //@siclog "Step 2A" siclog@
    //@sic R5-172869, R5-174646, R5s170562 change 1.1 sic@
    //Check: Does the UE ignore extendedwaitTime and transmit an RRCConnectionRequest-NB message on Ncell 1 within 60s (extendedwaitTime)?
    t_Wait.start(v_WaitForConnectionMax);//@sic R5-174646, R5s170562 change 1.1 sic@
    alt {
      [] SRB.check(receive(car_NB_SRB0_RrcPdu_IND(nbiot_Cell1, cr_RRCConnectionRequest_NB(mo_Data)))){
         t_Wait.stop;
         f_NBIOT_PreliminaryPass(__FILE__, __LINE__, "Step 2A");
        }
      [] t_Wait.timeout {
         f_NBIOT_SetVerdictFailOrInconc (__FILE__, __LINE__, "Step 2A");
        }
    }

    //@siclog "Step 3" siclog@
    //@sic R5-171547 sic@
    //Void.

    //@siclog "Step 3A" siclog@
    //@sic R5-172869 sic@
    //Void.

    //@siclog "Step 3A1 - 3A3" siclog@
    //@sic R5-171547, R5-172869 sic@
    //Steps 2 to 4 of the 'Generic Test Procedure NB-IoT Control Plan CIoT MO user data transfer non-SMS transport' as described in TS 36.508 [18], clause 8.1.5A.3.3  are performed
    //NOTE: The UE will transmit one ESM DATA TRANSPORT message containing loopback data received in step 0B.
    f_NBIOT_508Check_CP_MONonSMSDataTransfer(nbiot_Cell1, cr_UserDataContainer);

    //@siclog "Step 3A4" siclog@
    //@sic R5-171547, R5-172869 sic@
    //The SS transmits an RRCConnectionRelease-NB message
    f_NBIOT_RRC_ConnectionRelease (nbiot_Cell1);

    //@siclog "Step 3B" siclog@
    //@sic R5-171547 sic@
    //'Generic Test Procedure NB-IoT Control Plane CIoT MT user data transfer non-SMS transport' as described in TS 36.508 [18], clause 8.1.5A.2.3  are performed.
    f_NBIOT_508Check_CP_ResponseToPagingForMTAccess(nbiot_Cell1);

    //@siclog "Step 3BA - 3BB" siclog@
    //@sic R5-174646 sic@
    //The SS transmits a CLOSE UE TEST LOOP message to close the UE test loop mode for user data transfer (15 sec delay).
    //The UE transmits a CLOSE UE TEST LOOP COMPLETE message to confirm that loopback is activated.
    f_NBIOT_CloseUE_TestLoopModeGH(nbiot_Cell1, tsc_UE_TestLoopMode_TypeG, tsc_TestLoopModeGH_UplinkMode_NAS, 1, v_DelayLoopbackDataTime);

    //@siclog "Step 3C" siclog@
    //@sic R5-171547 sic@
    //The SS transmits one IP packet to the UE embedded in a  ESM DATA TRANSPORT and  DLInformationTransfer-NB
    SRB.send(cas_NB_SRB_NasPdu_REQ(nbiot_Cell1,
                                   tsc_SRB1bis,
                                   cs_TimingInfo_Now,
                                   cs_NAS_Request(tsc_SHT_IntegrityProtected_Ciphered,
                                                  cs_ESM_DATA_TRANSPORT (tsc_EpsDefaultBearerId, tsc_PTI_Unassigned, cs_UserDataContainer(v_UserData)))));//@sic R5s170364 sic@
    //@siclog "Step 3D" siclog@
    //@sic R5-171547 sic@
    //Wait for 1 s after the IP packet has been transmitted.
    //Note 1: The 1 second delay is used to secure that the UE have received and forwarded the IP Packet transmitted by the SS to the UE test loop function before the RRCConnectionRelease-NB message is sent by the SS.
    f_Delay(1.0);

    //Configure Msg4 with RRCConnectionReject for step 6
    f_NBIOT_SS_ConfigRachProcedureMsg4(nbiot_Cell1, cs_RRCConnectionReject_NB(v_XtdWaitTime));//@sic R5s170565 sic@

    //@siclog "Step 3E" siclog@
    //@sic R5-171547 sic@
    //The SS transmits an RRCConnectionRelease-NB message
    f_NBIOT_RRC_ConnectionRelease (nbiot_Cell1);

    //@siclog "Step 3F" siclog@
    //@sic R5-172869, R5-174646, R5s170562 change 1.3 sic@
    //Void.

    //@siclog "Step 4" siclog@
    //@sic R5-171547 sic@
    //Void.

    //@siclog "Step 5" siclog@
    //UE transmits an RRCConnectionRequest-NB message
    f_NBIOT_RRC_ConnectionRequest_Def(nbiot_Cell1);//@sic R5-172869, R5-174646, R5s170562 change 1.3 sic@

    //@siclog "Step 6" siclog@
    //The SS responds with RRCConnectionReject-NB message with IE extendedwaitTime set to 60s.
    //Automatically sent according to SS configuration
    
    //@siclog "Step 6A" siclog@
    //@sic R5-171547 sic@
    //Check: Does the UE transmit an RRCConnectionRequest-NB message on Ncell 1 within 60s?
    t_WaitForConfigMsg4.start(40.0);//start timer to configure Msg4 back to the default RRC Conn Setup in advance
    t_WaitForConnection.start(v_WaitForConnection);

    alt {
      // receive RRC Connection Request on SRB0 (CCCH):
      [] SRB.receive(car_NB_SRB0_RrcPdu_IND(nbiot_Cell1, cr_RRCConnectionRequest_NB(cr_EstablishmentCause_NB_Any)))
        {
          if(v_TimerMsg4IsRunning)
          {
            t_WaitForConfigMsg4.stop;
          }
          t_WaitForConnection.stop;
          f_NBIOT_SetVerdictFailOrInconc (__FILE__, __LINE__, "Step 6A");
        }
      [] t_WaitForConnection.timeout
        {

        }
      [v_TimerMsg4IsRunning] t_WaitForConfigMsg4.timeout
        {
          //Now configure Msg4 back to the default RRC Conn Setup for the rest steps and postamble
          f_NBIOT_SS_ConfigRachProcedureMsg4(nbiot_Cell1, f_NBIOT_508_RRCConnectionSetup());
          v_TimerMsg4IsRunning := false;
          repeat;
        }
    }

    //@siclog "Step 6B" siclog@
    //@sic R5-171547 sic@
    //The SS starts timer Timer_1 = 8 s
    t_Wait.start(8.0);//@sic R5s170562 sic@

    //EXCEPTION: Steps 6Ba1 to 6Bb1 describe a transaction that depends on the UE behaviour; the "lower case letter" identifies a test sequence that takes place if a specific behaviour happens.
    //Note 2: A UE may send the pending loopback data
    //@sic R5-171547 sic@
    alt {
      //@siclog "Step 6Ba1 - 6Ba4" siclog@
      //Steps 1 to 4 of the 'Generic Test Procedure NB-IoT Control Plan CIoT MO user data transfer non-SMS transport' as described in TS 36.508 [18], clause 8.1.5A.3.3  are performed.
      //NOTE: The UE will transmit one ESM DATA TRANSPORT message containing loopback data received in step 3C.
      [] SRB.check(receive(car_NB_SRB0_RrcPdu_IND(nbiot_Cell1, cr_RRCConnectionRequest_NB(mo_Data)))){
        t_Wait.stop;
        f_NBIOT_508Check_CP_MONonSMSDataTransfer(nbiot_Cell1, cr_UserDataContainer);
   
        //@siclog "Step 6Ba5" siclog@
        //The SS transmits an RRCConnectionRelease-NB message
        f_NBIOT_RRC_ConnectionRelease (nbiot_Cell1);
      }
      //@siclog "Step 6Bb1" siclog@
      //The SS waits for Timer_1 expiry
      [] t_Wait.timeout{}
    }

    //@siclog "Step 7 - 12b1" siclog@
    //@sic R5-171547 sic@
    //Void.

    f_NBIOT_TestBody_Set(false);
    
    //Switch/power off UE
    f_NBIOT_Postamble ( nbiot_Cell1, CONTROL_PLANE, N1_IDLE );
  }

  /*
   * @desc      REFERENCE TS 36.523-1 clause 22.4.8
   * @status    APPROVED (NBIOT)
   */
  function f_TC_22_4_8_NBIOT() runs on NBIOT_PTC
  { //NB-IoT / RRC connection establishment / Access Barring for UE with AC 0 to 9 / MO exception data / ab-Category a, b and c
    
    var SubFrameTiming_Type v_TimeOfPaging;
    var integer v_WaitTime := 30;
    var float v_WaitForConnection := f_NBIOT_SetTimerToleranceMax(rrcTimer, int2float(v_WaitTime));
    var template (value) SystemInformationBlockType14_NB_r13 v_SIB14_Cell1;
    var template (value) SystemInformationBlockType14_NB_r13 v_SIB14_Cell12;
    var template (value) SystemInformationBlockType14_NB_r13 v_SIB14_Cell13;
    var boolean v_Rxd_RRCConnReq := false;
    var template (value) NB_CellPowerList_Type v_CellPowerList_AtT1 := { // @sic R5s170464, R5-174317 sic@
      cs_NB_CellPower(nbiot_Cell1, tsc_NonSuitableOffNBIOTCellRS_EPRE),
      cs_NB_CellPower(nbiot_Cell12, -85),
      cs_NB_CellPower(nbiot_Cell13, -120)
    };
    var template (value) NB_CellPowerList_Type v_CellPowerList_AtT2 := { // @sic R5s170464, R5-174317 sic@
      cs_NB_CellPower(nbiot_Cell1, -85),
      cs_NB_CellPower(nbiot_Cell12, -120),
      cs_NB_CellPower(nbiot_Cell13, tsc_NonSuitableOffNBIOTCellRS_EPRE)
    };
    timer t_Timer1;
    
    f_NBIOT_Init(c4);
    
    //Set Sys info and cell info for Ncell 1, 12 & 13 to be used
    f_NBIOT_CellInfo_SetPLMN_1Entry(nbiot_Cell12, cs_HPLMN_001_11);  //PLMN1
    f_NBIOT_CellInfo_SetPLMN_1Entry(nbiot_Cell13, cs_HPLMN_001_21);  //PLMN2
    
    //Create and configure all cells
    f_NBIOT_CellConfig_Def(nbiot_Cell1, CONTROL_PLANE);
    f_NBIOT_CellConfig_Def(nbiot_Cell12, CONTROL_PLANE);
    f_NBIOT_CellConfig_Def(nbiot_Cell13, CONTROL_PLANE);
    
    //Equip UE with a USIM containing default values except for those shown in Table 22.4.8.3.1-2
    f_UT_USIM_Insert(UT, "36.523-1 Table 22.4.8.3.1-2. USIM must be configured for Access Class 0");

    //Make sure the UE is in automatic PLMN selection mode
    f_UT_AutomaticPLMN_Select_WithSwitchOnOff (UT);    //@sic R5s180214 sic@

    //Bring UE to initial state
    f_NBIOT_Preamble(nbiot_Cell13, CONTROL_PLANE, STATE3_NB_IDLEUPDATED);
    
    f_NBIOT_TestBody_Set(true);
    
    //@siclog "Step 0A" siclog@
    //@sic R5-170608 sic@
    //SS adjusts MasterInformationBlock-NB of Ncell 13 with ab-Enabled-r13 set to TRUE and SystemInformationBlockType14-NB of Ncell 13
    v_SIB14_Cell13 := f_NBIOT_CellInfo_GetSIB14 (nbiot_Cell13);
    v_SIB14_Cell13.ab_Param_r13.ab_Common_r13 := cs_AB_Config_NB(c, '1000000000'B, true_, '00000'B);
    f_NBIOT_CellInfo_SetSIB14(nbiot_Cell13, v_SIB14_Cell13);
    f_NBIOT_CellInfo_SetAB_Enabled(nbiot_Cell13, true);

    //@siclog "Step 0B" siclog@
    //@sic R5-170608 sic@
    //The SS notifies the UE of change of System Information
    v_TimeOfPaging := f_NBIOT_ModifySysinfo (nbiot_Cell13, true, false);
    
    //@siclog "Step 0C" siclog@
    //@sic R5-170608 sic@
    //Wait for 90 seconds for UE to read updated MasterInformationBlock-NB
    f_Delay(90.0);
    
    //@siclog "Step 1" siclog@
    //Trigger the UE to initiate MO Exception Data
    f_UT_TriggerMO_ExceptionData(UT); // @sic R5w170308 sic@

    //@siclog "Step 2" siclog@
    //Check: Does the UE transmit an RRCConnectionRequest-NB message on Ncell 13 within 30s?
    v_Rxd_RRCConnReq := f_NBIOT_RRC_RRCConnectionRequest_Check (nbiot_Cell13, v_WaitForConnection, mo_ExceptionData);
    if (v_Rxd_RRCConnReq) {
      f_NBIOT_SetVerdictFailOrInconc (__FILE__, __LINE__, "Step 2");
    }
    
    //@siclog "Step 3" siclog@
    //SS adjusts cell levels according to row T1 of table 22.4.8.3.2-1
    f_NBIOT_SetCellPowerList(v_CellPowerList_AtT1); // @sic R5s170464, R5-174317 sic@
    
    //@siclog "Step 4" siclog@
    //Step 1 to 5 of generic test procedure in TS 36.508 subclause 8.1.5A.5 to take place on Ncell 12.
    //NOTE: The UE performs a TAU procedure.
    f_NBIOT_TrackingAreaUpdate_Step1_5 (nbiot_Cell12, CONTROL_PLANE);  // @sic R5s170464, R5-174317 sic@
    
    //@siclog "Step 4AA" siclog@
    //@sic R5s170464, R5-174317 sic@
    //The SS starts timer Timer_1 = 10 s
    t_Timer1.start (10.0);

    //@sic R5s170464, R5-174317 sic@
    //EXCEPTION: Steps 4ABa1 to 4ABb1 describe a transaction that depends on the UE behaviour;
    //the "lower case letter" identifies a test sequence that takes place if a specific behaviour happens
    //Note 1: A UE may send the pending data triggered at step 1
    alt {
      //@siclog "Step 4ABa1" siclog@
      //The UE transmits one IP packet embedded in a ESM DATA TRANSPORT and  ULInformationTransfer-NB
      [] SRB.receive(car_NB_SRB_NasPdu_IND(nbiot_Cell12,
                                           tsc_SRB1bis,
                                           cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered,
                                                             cr_ESM_DATA_TRANSPORT(?, cr_UserDataContainer)))){
        t_Timer1.stop;
      }
      //@siclog "Step 4ABb1" siclog@
      //The SS waits for Timer_1 expiry
      [] t_Timer1.timeout{}
    }
    
    //@siclog "Step 4AC" siclog@
    //@sic R5s170464, R5-174317 sic@
    //The SS transmits an RRCConnectionRelease-NB message
    f_NBIOT_RRC_ConnectionRelease(nbiot_Cell12);
    
    //@siclog "Step 4A" siclog@
    //@sic R5-170608 sic@
    //SS adjusts MasterInformationBlock-NB of Ncell 12 with ab-Enabled-r13 set to TRUE and SystemInformationBlockType14-NB of Ncell 12
    v_SIB14_Cell12 := f_NBIOT_CellInfo_GetSIB14 (nbiot_Cell12);
    v_SIB14_Cell12.ab_Param_r13.ab_Common_r13 := cs_AB_Config_NB(c, '1000000000'B, true_, '00000'B);
    f_NBIOT_CellInfo_SetSIB14(nbiot_Cell12, v_SIB14_Cell12);
    f_NBIOT_CellInfo_SetAB_Enabled(nbiot_Cell12, true);
    
    //@siclog "Step 4B" siclog@
    //@sic R5-170608 sic@
    //The SS notifies the UE of change of System Information
    v_TimeOfPaging := f_NBIOT_ModifySysinfo (nbiot_Cell12, true, false);
    
    //@siclog "Step 4C" siclog@
    //@sic R5-170608 sic@
    //Wait for 90 seconds for UE to read updated MasterInformationBlock-NB
    f_Delay(90.0);
    
    //@siclog "Step 5" siclog@
    //Trigger the UE to initiate MO Exception Data
    f_UT_TriggerMO_ExceptionData(UT); // @sic R5w170308 sic@
    
    //@siclog "Step 5A" siclog@
    //Check: Does the UE transmit an RRCConnectionRequest-NB message on Ncell 12 with establishmentCause-r13 set to mo-ExceptionData?
    //@siclog "Step 6A - 6C" siclog@
    //Steps 2 to 4 of the 'Generic Test Procedure NB-IoT Control Plan CIoT MO user data transfer non-SMS transport' as described in TS 36.508 [18], clause 8.1.5A.3.3  are performed.
    //NOTE: The UE will transmit one ESM DATA TRANSPORT message containing user data generated in step 5.
    //@sic R5-170608 sic@
    f_NBIOT_508Check_CP_MONonSMSDataTransfer(nbiot_Cell12, cr_UserDataContainer, mo_ExceptionData);
    f_NBIOT_PreliminaryPass(__FILE__, __LINE__, "Step 5A - 6C");
    
    //@siclog "Step 7" siclog@
    //The SS transmits an RRCConnectionRelease-NB message
    f_NBIOT_RRC_ConnectionRelease (nbiot_Cell12);
    
    //@siclog "Step 8" siclog@
    //@sic R5-170608 sic@
    //SS adjusts SystemInformationBlockType14-NB of Ncell 12 with ab-Category set to 'b'
    v_SIB14_Cell12.ab_Param_r13.ab_Common_r13 := cs_AB_Config_NB(b, '1000000000'B, true_, '00000'B);
    f_NBIOT_CellInfo_SetSIB14(nbiot_Cell12, v_SIB14_Cell12);
    f_NBIOT_SS_ConfigureSysinfo(nbiot_Cell12, false);
    
    //@siclog "Step 9" siclog@
    //@siclog "Step 10" siclog@
    //Void
    
    //@siclog "Step 11" siclog@
    //Trigger the UE to initiate MO Exception Data
    f_UT_TriggerMO_ExceptionData(UT); // @sic R5w170308 sic@
    
    //@siclog "Step 12" siclog@
    //Check: Does the UE transmit an RRCConnectionRequest-NB message on Ncell 12 within 30s?
    v_Rxd_RRCConnReq := f_NBIOT_RRC_RRCConnectionRequest_Check (nbiot_Cell12, v_WaitForConnection, mo_ExceptionData);
    if (v_Rxd_RRCConnReq) {
      f_NBIOT_SetVerdictFailOrInconc (__FILE__, __LINE__, "Step 12");
    }
    
    //@siclog "Step 13" siclog@
    //SS adjusts cell levels according to row T2 of table 22.4.8.3.2-1
    f_NBIOT_SetCellPowerList(v_CellPowerList_AtT2);

    //@siclog "Step 14" siclog@
    //Step 1 to 5 of generic test procedure in TS 36.508 subclause 8.1.5A.5 to take place on Ncell 1.
    //NOTE: The UE performs a TAU procedure.
    f_NBIOT_TrackingAreaUpdate_Step1_5 (nbiot_Cell1, CONTROL_PLANE); // @sic R5s170464, R5-174317 sic@

    //@siclog "Step 14AA" siclog@
    //@sic R5s170464, R5-174317 sic@
    //The SS starts timer Timer_1 = 10 s.
    t_Timer1.start (10.0);
    
    //@sic R5s170464, R5-174317 sic@
    //EXCEPTION: Steps 14ABa1 to 14ABb1 describe a transaction that depends on the UE behaviour;
    //the "lower case letter" identifies a test sequence that takes place if a specific behaviour happens
    //Note 2: A UE may send the pending data triggered at step 11
    alt {
      //@siclog "Step 14ABa1" siclog@
      //The UE transmits one IP packet embedded in a ESM DATA TRANSPORT and  ULInformationTransfer-NB
      [] SRB.receive(car_NB_SRB_NasPdu_IND(nbiot_Cell1,
                                           tsc_SRB1bis,
                                           cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered,
                                                             cr_ESM_DATA_TRANSPORT(?, cr_UserDataContainer)))){
        t_Timer1.stop;
      }
      //@siclog "Step 14ABb1" siclog@
      //The SS waits for Timer_1 expiry
      [] t_Timer1.timeout{}
    }
    
    //@siclog "Step 14AC" siclog@
    //@sic R5s170464, R5-174317 sic@
    //The SS transmits an RRCConnectionRelease-NB message
    f_NBIOT_RRC_ConnectionRelease(nbiot_Cell1);

    //@siclog "Step 14A" siclog@
    //@sic R5-170608 sic@
    //SS adjusts MasterInformationBlock-NB of Ncell 1 with ab-Enabled-r13 set to TRUE and SystemInformationBlockType14-NB of Ncell 1
    v_SIB14_Cell1 := f_NBIOT_CellInfo_GetSIB14 (nbiot_Cell1);
    v_SIB14_Cell1.ab_Param_r13.ab_Common_r13 := cs_AB_Config_NB(b, '1000000000'B, true_, '00000'B);
    f_NBIOT_CellInfo_SetSIB14(nbiot_Cell1, v_SIB14_Cell1);
    f_NBIOT_CellInfo_SetAB_Enabled(nbiot_Cell1, true);
    
    //@siclog "Step 14B" siclog@
    //@sic R5-170608 sic@
    //The SS notifies the UE of change of System Information
    v_TimeOfPaging := f_NBIOT_ModifySysinfo (nbiot_Cell1, true, false);
    
    //@siclog "Step 14C" siclog@
    //@sic R5-170608 sic@
    //Wait for 90 seconds for UE to read updated MasterInformationBlock-NB
    f_Delay(90.0);

    //@siclog "Step 15" siclog@
    //Trigger the UE to initiate MO Exception Data
    f_UT_TriggerMO_ExceptionData(UT); // @sic R5w170308 sic@
    
    //@siclog "Step 15A" siclog@
    //Check: Does the UE transmit an RRCConnectionRequest-NB message on Ncell 1 with establishmentCause-r13 set to mo-ExceptionData?
    //@siclog "Step 16A - 16C" siclog@
    //Steps 2 to 4 of the 'Generic Test Procedure NB-IoT Control Plan CIoT MO user data transfer non-SMS transport' as described in TS 36.508 [18], clause 8.1.5A.3.3 are performed.
    //NOTE: The UE will transmit one ESM DATA TRANSPORT message containing user data generated in step 15.
    //@sic R5-170608 sic@
    f_NBIOT_508Check_CP_MONonSMSDataTransfer(nbiot_Cell1, cr_UserDataContainer, mo_ExceptionData);
    f_NBIOT_PreliminaryPass(__FILE__, __LINE__, "Step 15A - 16C");

    //@siclog "Step 17" siclog@
    //The SS transmits an RRCConnectionRelease-NB message
    f_NBIOT_RRC_ConnectionRelease (nbiot_Cell1);

    //@siclog "Step 18" siclog@
    //@sic R5-170608 sic@
    //SS adjusts SystemInformationBlockType14-NB of Ncell 1 with ab-Category set to 'a'
    v_SIB14_Cell1.ab_Param_r13.ab_Common_r13 := cs_AB_Config_NB(a, '1000000000'B, true_, '00000'B);
    f_NBIOT_CellInfo_SetSIB14(nbiot_Cell1, v_SIB14_Cell1);
    f_NBIOT_SS_ConfigureSysinfo(nbiot_Cell1, false);
    
    //@siclog "Step 19" siclog@
    //@siclog "Step 20" siclog@
    //Void

    //@siclog "Step 21" siclog@
    //Trigger the UE to initiate MO Exception Data
    f_UT_TriggerMO_ExceptionData(UT); // @sic R5w170308 sic@
    
    //@siclog "Step 22" siclog@
    //Check: Does the UE transmit an RRCConnectionRequest-NB message on Ncell 1 within 30s?
    v_Rxd_RRCConnReq := f_NBIOT_RRC_RRCConnectionRequest_Check (nbiot_Cell1, v_WaitForConnection, mo_ExceptionData);
    if (v_Rxd_RRCConnReq) {
      f_NBIOT_SetVerdictFailOrInconc (__FILE__, __LINE__, "Step 22");
    }

    //@siclog "Step 22A" siclog@
    //@sic R5-174317 sic@
    //'Generic Test Procedure NB-IoT Control Plane CIoT MT user data transfer non-SMS transport' as described in TS 36.508 [18], clause 8.1.5A.2.3 are performed (Note 3).
    //Note 3: A UE may send the pending data triggered at step 21
    f_NBIOT_508Check_CP_ResponseToPagingForMTAccess(nbiot_Cell1);

    //@siclog "Step 22AA" siclog@
    //@sic R5-185017 sic@
    //The SS starts timer Timer_1 = 10 s
    t_Timer1.start(10.0);

    //@sic R5-185017 sic@
    //EXCEPTION: Steps 22ABa1 to 22ABb1 describe a transaction that depends on the UE behaviour;
    //the "lower case letter" identifies a test sequence that takes place if a specific behaviour happens (Note 3)
    //Note 3: A UE may send the pending data triggered at step 21
    alt {
      //@siclog "Step 22ABa1" siclog@
      //The UE transmits one IP packet embedded in a  ESM DATA TRANSPORT and  ULInformationTransfer-NB
      [] SRB.receive(car_NB_SRB_NasPdu_IND(nbiot_Cell1,
                                           tsc_SRB1bis,
                                           cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered,
                                                             cr_ESM_DATA_TRANSPORT(?, cr_UserDataContainer)))){
        t_Timer1.stop;
      }
      //@siclog "Step 22ABb1" siclog@
      //The SS waits for Timer_1 expiry
      [] t_Timer1.timeout{}
    }

    //@siclog "Step 22B" siclog@
    //@sic R5-174317 sic@
    //The SS transmits an RRCConnectionRelease-NB message
    f_NBIOT_RRC_ConnectionRelease(nbiot_Cell1);

    //@siclog "Step 23" siclog@
    //@sic R5-170608 sic@
    //SS adjusts SystemInformationBlockType14-NB of Ncell 1 with ab-BarringForExceptionData not present.
    v_SIB14_Cell1.ab_Param_r13.ab_Common_r13 := cs_AB_Config_NB(a, '1000000000'B, omit, '00000'B);
    f_NBIOT_CellInfo_SetSIB14(nbiot_Cell1, v_SIB14_Cell1);
    f_NBIOT_SS_ConfigureSysinfo(nbiot_Cell1, false);
    
    //@siclog "Step 24" siclog@
    //@siclog "Step 25" siclog@
    //Void

    //@siclog "Step 26" siclog@
    //Trigger the UE to initiate MO Exception Data
    f_UT_TriggerMO_ExceptionData(UT); // @sic R5w170308 sic@
    
    //@siclog "Step 26A" siclog@
    //Check: Does the UE transmit an RRCConnectionRequest-NB message on Ncell 1 with establishmentCause-r13 set to mo-ExceptionData?
    //@siclog "Step 27 - 27B" siclog@
    //Steps 2 to 4 of the 'Generic Test Procedure NB-IoT Control Plan CIoT MO user data transfer non-SMS transport' as described in TS 36.508 [18], clause 8.1.5A.3.3  are performed.
    //NOTE: The UE will transmit one ESM DATA TRANSPORT message containing user data generated in step 26.
    //@sic R5-170608 sic@
    f_NBIOT_508Check_CP_MONonSMSDataTransfer(nbiot_Cell1, cr_UserDataContainer, mo_ExceptionData);
    f_NBIOT_PreliminaryPass(__FILE__, __LINE__, "Step 26A - 27B");
    
    //@siclog "Step 28" siclog@
    //The SS transmits an RRCConnectionRelease-NB message
    f_NBIOT_RRC_ConnectionRelease (nbiot_Cell1);
    
    f_NBIOT_TestBody_Set(false);
    
    // Now change SIB14 to allow UE to detach on this cell @sic R5s170464 sic@
    v_SIB14_Cell1.ab_Param_r13.ab_Common_r13 := cs_AB_Config_NB(a, '0000000000'B, omit, '00000'B);
    f_NBIOT_CellInfo_SetSIB14(nbiot_Cell1, v_SIB14_Cell1);
    f_NBIOT_SS_ConfigureSysinfo(nbiot_Cell1, false);
    
    //Switch/power off UE
    f_NBIOT_Postamble ( nbiot_Cell1, CONTROL_PLANE, N1_IDLE );
  }

  /*
   * @desc      REFERENCE TS 36.523-1 clause 22.4.9
   * @status    APPROVED (NBIOT)
   */
  function f_TC_22_4_9_NBIOT() runs on NBIOT_PTC
  { //NB-IoT / RRC connection establishment / Access Barring for UE with AC 11 to 15 / MO exception data / ab-Category a, b and c
    
    var SubFrameTiming_Type v_TimeOfPaging;
    var integer v_WaitTime := 30;
    var float v_WaitForConnection := f_NBIOT_SetTimerToleranceMax(rrcTimer, int2float(v_WaitTime));
    var template (value) SystemInformationBlockType14_NB_r13 v_SIB14_Cell1;
    var template (value) SystemInformationBlockType14_NB_r13 v_SIB14_Cell12;
    var template (value) SystemInformationBlockType14_NB_r13 v_SIB14_Cell13;
    var boolean v_Rxd_RRCConnReq := false;
    var template (value) NB_CellPowerList_Type v_CellPowerList_AtT1 := { // @sic R5s170466, R5-174467 sic@
      cs_NB_CellPower(nbiot_Cell1, tsc_NonSuitableOffNBIOTCellRS_EPRE),
      cs_NB_CellPower(nbiot_Cell12, -85),
      cs_NB_CellPower(nbiot_Cell13, -120)
    };
    var template (value) NB_CellPowerList_Type v_CellPowerList_AtT2 := { // @sic R5s170466, R5-174467 sic@
      cs_NB_CellPower(nbiot_Cell1, -85),
      cs_NB_CellPower(nbiot_Cell12, -120),
      cs_NB_CellPower(nbiot_Cell13, tsc_NonSuitableOffNBIOTCellRS_EPRE)
    };
    timer t_Timer1;
    
    f_NBIOT_Init(c4);

    //Set Sys info and cell info for Ncell 1, 12 & 13 to be used
    f_NBIOT_CellInfo_SetPLMN_1Entry(nbiot_Cell12, cs_HPLMN_001_11);  //PLMN1
    f_NBIOT_CellInfo_SetPLMN_1Entry(nbiot_Cell13, cs_HPLMN_001_21);  //PLMN2
    
    //Create and configure all cells
    f_NBIOT_CellConfig_Def(nbiot_Cell1, CONTROL_PLANE);
    f_NBIOT_CellConfig_Def(nbiot_Cell12, CONTROL_PLANE);
    f_NBIOT_CellConfig_Def(nbiot_Cell13, CONTROL_PLANE);
    
    //Equip UE with a USIM containing default values except for those shown in Table 22.4.9.3.1-2 and 22.4.9.3.1-3:
    f_UT_USIM_Insert(UT, "36.523-1 Table 22.4.9.3.1-2 and 22.4.9.3.1-3. USIM must be configured for Access Class 0, special access class 11 and 15");
    
    //Make sure the UE is in automatic PLMN selection mode
    f_UT_AutomaticPLMN_Select_WithSwitchOnOff (UT);    //@sic R5s180214 sic@

    //Bring UE to initial state
    f_NBIOT_Preamble(nbiot_Cell13, CONTROL_PLANE, STATE3_NB_IDLEUPDATED);

    f_NBIOT_TestBody_Set(true);
    
    //@siclog "Step 1" siclog@
    //SS adjusts MasterInformationBlock-NB of Ncell 13 with ab-Enabled-r13 set to TRUE and SystemInformationBlockType14-NB of Ncell 13
    v_SIB14_Cell13 := f_NBIOT_CellInfo_GetSIB14 (nbiot_Cell13);
    v_SIB14_Cell13.ab_Param_r13.ab_Common_r13 := cs_AB_Config_NB(c, '1000000000'B, true_, '10001'B);
    f_NBIOT_CellInfo_SetSIB14(nbiot_Cell13, v_SIB14_Cell13);
    f_NBIOT_CellInfo_SetAB_Enabled(nbiot_Cell13, true);

    //@siclog "Step 2" siclog@
    //The SS notifies the UE of change of System Information
    v_TimeOfPaging := f_NBIOT_ModifySysinfo(nbiot_Cell13, true, false);

    //@siclog "Step 3" siclog@
    //Wait for 90 seconds for UE to read updated MasterInformationBlock-NB
    f_Delay(90.0);
    
    //@siclog "Step 4" siclog@
    //Trigger the UE to initiate MO Exception Data
    f_UT_TriggerMO_ExceptionData(UT); // @sic R5w170308 sic@
    
    //@siclog "Step 5" siclog@
    //Check: Does the UE transmit an RRCConnectionRequest-NB message on Ncell 13 within 30s?
    v_Rxd_RRCConnReq := f_NBIOT_RRC_RRCConnectionRequest_Check(nbiot_Cell13, v_WaitForConnection, mo_ExceptionData);
    if (v_Rxd_RRCConnReq) {
      f_NBIOT_SetVerdictFailOrInconc (__FILE__, __LINE__, "Step 5");
    }
    
    //@siclog "Step 6" siclog@
    //SS adjusts cell levels according to row T1 of table 22.4.9.3.2-1.
    f_NBIOT_SetCellPowerList(v_CellPowerList_AtT1); // @sic R5s170466, R5-174467 sic@
    
    //@siclog "Step 7" siclog@
    //Step 1 to 5 of generic test procedure in TS 36.508 subclause 8.1.5A.5 to take place on Ncell 12.
    //NOTE: The UE performs a TAU procedure.
    f_NBIOT_TrackingAreaUpdate_Step1_5(nbiot_Cell12, CONTROL_PLANE); // @sic R5s170466, R5-174467 sic@
    
    //@siclog "Step 7A" siclog@
    //@sic R5s170466, R5-174467 sic@
    //The SS starts timer Timer_1 = 10 s
    t_Timer1.start (10.0);

    //@sic R5s170466, R5-174467 sic@
    //EXCEPTION: Steps 7Ba1 to 7Bb1 describe a transaction that depends on the UE behaviour;
    //the "lower case letter" identifies a test sequence that takes place if a specific behaviour happens
    //Note 1: A UE may send the pending data triggered at step 4
    alt {
      //@siclog "Step 7Ba1" siclog@
      //The UE transmits one IP packet embedded in a ESM DATA TRANSPORT and  ULInformationTransfer-NB
      [] SRB.receive(car_NB_SRB_NasPdu_IND(nbiot_Cell12,
                                           tsc_SRB1bis,
                                           cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered,
                                                             cr_ESM_DATA_TRANSPORT(?, cr_UserDataContainer)))){
        t_Timer1.stop;
      }
      //@siclog "Step 7Bb1" siclog@
      //The SS waits for Timer_1 expiry
      [] t_Timer1.timeout{}
    }

    //@siclog "Step 7C" siclog@
    //@sic R5s170466, R5-174467 sic@
    //The SS transmits an RRCConnectionRelease-NB message
    f_NBIOT_RRC_ConnectionRelease(nbiot_Cell12);
    
    //@siclog "Step 8" siclog@
    //SS adjusts MasterInformationBlock-NB of Ncell 12 with ab-Enabled-r13 set to TRUE and SystemInformationBlockType14-NB of Ncell 12
    v_SIB14_Cell12 := f_NBIOT_CellInfo_GetSIB14(nbiot_Cell12);
    v_SIB14_Cell12.ab_Param_r13.ab_Common_r13 := cs_AB_Config_NB(c, '1000000000'B, true_, '10001'B);
    f_NBIOT_CellInfo_SetSIB14(nbiot_Cell12, v_SIB14_Cell12);
    f_NBIOT_CellInfo_SetAB_Enabled(nbiot_Cell12, true);

    //@siclog "Step 9" siclog@
    //The SS notifies the UE of change of System Information
    v_TimeOfPaging := f_NBIOT_ModifySysinfo(nbiot_Cell12, true, false);
    
    //@siclog "Step 10" siclog@
    //Wait for 90 seconds for UE to read updated MasterInformationBlock-NB
    f_Delay(90.0);
    
    //@siclog "Step 11" siclog@
    //Trigger the UE to initiate MO Exception Data
    f_UT_TriggerMO_ExceptionData(UT); // @sic R5w170308 sic@
    
    //@siclog "Step 12" siclog@
    //Check: Does the UE transmit an RRCConnectionRequest-NB message on Ncell 12 with establishmentCause-r13 set to mo-ExceptionData?
    //@siclog "Step 13 - 15" siclog@
    //Steps 2 to 4 of the 'Generic Test Procedure NB-IoT Control Plan CIoT MO user data transfer non-SMS transport' as described in TS 36.508 [18], clause 8.1.5A.3.3  are performed.
    //NOTE: The UE will transmit one ESM DATA TRANSPORT message containing user data generated in step 11.
    f_NBIOT_508Check_CP_MONonSMSDataTransfer(nbiot_Cell12, cr_UserDataContainer, mo_ExceptionData);
    f_NBIOT_PreliminaryPass(__FILE__, __LINE__, "Step 12 - 15");
    
    //@siclog "Step 16" siclog@
    //The SS transmits an RRCConnectionRelease-NB message
    f_NBIOT_RRC_ConnectionRelease(nbiot_Cell12);
    
    //@siclog "Step 17" siclog@
    //SS adjusts SystemInformationBlockType14-NB of Ncell 12 with ab-Category set to 'b'
    v_SIB14_Cell12.ab_Param_r13.ab_Common_r13 := cs_AB_Config_NB(b, '1000000000'B, true_, '10001'B);
    f_NBIOT_CellInfo_SetSIB14(nbiot_Cell12, v_SIB14_Cell12);
    f_NBIOT_SS_ConfigureSysinfo(nbiot_Cell12, false);

    //@siclog "Step 18" siclog@
    //Trigger the UE to initiate MO Exception Data
    f_UT_TriggerMO_ExceptionData(UT); // @sic R5w170308 sic@

    //@siclog "Step 19" siclog@
    //Check: Does the UE transmit an RRCConnectionRequest-NB message on Ncell 12 within 30s?
    v_Rxd_RRCConnReq := f_NBIOT_RRC_RRCConnectionRequest_Check(nbiot_Cell12, v_WaitForConnection, mo_ExceptionData);
    if (v_Rxd_RRCConnReq) {
      f_NBIOT_SetVerdictFailOrInconc (__FILE__, __LINE__, "Step 19");
    }
    
    //@siclog "Step 20" siclog@
    //SS adjusts cell levels according to row T2 of table 22.4.9.3.2-1.
    f_NBIOT_SetCellPowerList(v_CellPowerList_AtT2);
    
    //@siclog "Step 21" siclog@
    //Step 1 to 5 of generic test procedure in TS 36.508 subclause 8.1.5A.5 to take place on Ncell 1.
    //NOTE: The UE performs a TAU procedure.
    f_NBIOT_TrackingAreaUpdate_Step1_5(nbiot_Cell1, CONTROL_PLANE); // @sic R5s170466, R5-174467 sic@

    //@siclog "Step 21A" siclog@
    //@sic R5s170466, R5-174467 sic@
    //The SS starts timer Timer_1 = 10s
    t_Timer1.start(10.0);

    //@sic R5s170466, R5-174467 sic@
    //EXCEPTION: Steps 21Ba1 to 21Bb1 describe a transaction that depends on the UE behaviour;
    //the "lower case letter" identifies a test sequence that takes place if a specific behaviour happens
    //Note 2: A UE may send the pending data triggered at step 18
    alt {
      //@siclog "Step 21Ba1" siclog@
      //The UE transmits one IP packet embedded in a ESM DATA TRANSPORT and  ULInformationTransfer-NB
      [] SRB.receive(car_NB_SRB_NasPdu_IND(nbiot_Cell1,
                                           tsc_SRB1bis,
                                           cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered,
                                                             cr_ESM_DATA_TRANSPORT(?, cr_UserDataContainer)))){
        t_Timer1.stop;
      }
      //@siclog "Step 21Bb1" siclog@
      //The SS waits for Timer_1 expiry
      [] t_Timer1.timeout{}
    }
    
    //@siclog "Step 21C" siclog@
    //@sic R5s170466, R5-174467 sic@
    //The SS transmits an RRCConnectionRelease-NB message
    f_NBIOT_RRC_ConnectionRelease(nbiot_Cell1);
    
    //@siclog "Step 22" siclog@
    //SS adjusts MasterInformationBlock-NB of Ncell 1 with ab-Enabled-r13 set to TRUE and SystemInformationBlockType14-NB of Ncell 1
    v_SIB14_Cell1 := f_NBIOT_CellInfo_GetSIB14(nbiot_Cell1);
    v_SIB14_Cell1.ab_Param_r13.ab_Common_r13 := cs_AB_Config_NB(b, '1000000000'B, true_, '10001'B);
    f_NBIOT_CellInfo_SetSIB14(nbiot_Cell1, v_SIB14_Cell1);
    f_NBIOT_CellInfo_SetAB_Enabled(nbiot_Cell1, true);

    //@siclog "Step 23" siclog@
    //The SS notifies the UE of change of System Information
    v_TimeOfPaging := f_NBIOT_ModifySysinfo(nbiot_Cell1, true, false);

    //@siclog "Step 24" siclog@
    //Wait for 90 seconds for UE to read updated MasterInformationBlock-NB
    f_Delay(90.0);

    //@siclog "Step 25" siclog@
    //Trigger the UE to initiate MO Exception Data
    f_UT_TriggerMO_ExceptionData(UT); // @sic R5w170308 sic@

    //@siclog "Step 26" siclog@
    //Check: Does the UE transmit an RRCConnectionRequest-NB message on Ncell 1 with establishmentCause-r13 set to mo-ExceptionData?
    //@siclog "Step 27 - 29" siclog@
    //Steps 2 to 4 of the 'Generic Test Procedure NB-IoT Control Plan CIoT MO user data transfer non-SMS transport' as described in TS 36.508 [18], clause 8.1.5A.3.3 are performed.
    //NOTE: The UE will transmit one ESM DATA TRANSPORT message containing user data generated in step 25.
    f_NBIOT_508Check_CP_MONonSMSDataTransfer(nbiot_Cell1, cr_UserDataContainer, mo_ExceptionData);
    f_NBIOT_PreliminaryPass(__FILE__, __LINE__, "Step 26 - 29");
    
    //@siclog "Step 30" siclog@
    //The SS transmits an RRCConnectionRelease-NB message
    f_NBIOT_RRC_ConnectionRelease (nbiot_Cell1);

    //@siclog "Step 31" siclog@
    //SS adjusts SystemInformationBlockType14-NB of Ncell 1 with ab-Category set to 'a'
    v_SIB14_Cell1.ab_Param_r13.ab_Common_r13 := cs_AB_Config_NB(a, '1000000000'B, true_, '10001'B);
    f_NBIOT_CellInfo_SetSIB14(nbiot_Cell1, v_SIB14_Cell1);
    f_NBIOT_SS_ConfigureSysinfo(nbiot_Cell1, false);
    
    //@siclog "Step 32" siclog@
    //Trigger the UE to initiate MO Exception Data
    f_UT_TriggerMO_ExceptionData(UT); // @sic R5w170308 sic@
    
    //@siclog "Step 33" siclog@
    //Check: Does the UE transmit an RRCConnectionRequest-NB message on Ncell 1 within 30s?
    v_Rxd_RRCConnReq := f_NBIOT_RRC_RRCConnectionRequest_Check(nbiot_Cell1, v_WaitForConnection, mo_ExceptionData);
    if (v_Rxd_RRCConnReq) {
      f_NBIOT_SetVerdictFailOrInconc (__FILE__, __LINE__, "Step 33");
    }

    //@siclog "Step 33A" siclog@
    //@sic R5-174467 sic@
    //'Generic Test Procedure NB-IoT Control Plane CIoT MT user data transfer non-SMS transport' as described in TS 36.508 [18], clause 8.1.5A.2.3 are performed (Note 3).
    //Note 3: A UE may send the pending data triggered at step 32
    f_NBIOT_508Check_CP_ResponseToPagingForMTAccess(nbiot_Cell1);

    //@siclog "Step 33AA" siclog@
    //@sic R5-185017 sic@
    //The SS starts timer Timer_1 = 10 s
    t_Timer1.start(10.0);

    //@sic R5-185017 sic@
    //EXCEPTION: Steps 33ABa1 to 33ABb1 describe a transaction that depends on the UE behaviour;
    //the "lower case letter" identifies a test sequence that takes place if a specific behaviour happens (Note 3)
    //Note 3: A UE may send the pending data triggered at step 32
    alt {
      //@siclog "Step 33ABa1" siclog@
      //The UE transmits one IP packet embedded in a  ESM DATA TRANSPORT and  ULInformationTransfer-NB
      [] SRB.receive(car_NB_SRB_NasPdu_IND(nbiot_Cell1,
                                           tsc_SRB1bis,
                                           cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered,
                                                             cr_ESM_DATA_TRANSPORT(?, cr_UserDataContainer)))){
        t_Timer1.stop;
      }
      //@siclog "Step 33ABb1" siclog@
      //The SS waits for Timer_1 expiry
      [] t_Timer1.timeout{}
    }

    //@siclog "Step 33B" siclog@
    //@sic R5-174467 sic@
    //The SS transmits an RRCConnectionRelease-NB message
    f_NBIOT_RRC_ConnectionRelease(nbiot_Cell1);

    //@siclog "Step 34" siclog@
    //SS adjusts SystemInformationBlockType14-NB of Ncell 1 with ab-BarringForExceptionData not present.
    v_SIB14_Cell1.ab_Param_r13.ab_Common_r13 := cs_AB_Config_NB(a, '1000000000'B, omit, '10001'B);
    f_NBIOT_CellInfo_SetSIB14(nbiot_Cell1, v_SIB14_Cell1);
    f_NBIOT_SS_ConfigureSysinfo(nbiot_Cell1, false);
    
    //@siclog "Step 35" siclog@
    //Trigger the UE to initiate MO Exception Data
    f_UT_TriggerMO_ExceptionData(UT); // @sic R5w170308 sic@

    //@siclog "Step 36" siclog@
    //Check: Does the UE transmit an RRCConnectionRequest-NB message on Ncell 1 with establishmentCause-r13 set to mo-ExceptionData?
    //@siclog "Step 37 - 39" siclog@
    //Steps 2 to 4 of the 'Generic Test Procedure NB-IoT Control Plan CIoT MO user data transfer non-SMS transport' as described in TS 36.508 [18], clause 8.1.5A.3.3  are performed.
    //NOTE: The UE will transmit one ESM DATA TRANSPORT message containing user data generated in step 26.
    f_NBIOT_508Check_CP_MONonSMSDataTransfer(nbiot_Cell1, cr_UserDataContainer, mo_ExceptionData);
    f_NBIOT_PreliminaryPass(__FILE__, __LINE__, "Step 36 - 39");
    
    //@siclog "Step 40" siclog@
    //The SS transmits an RRCConnectionRelease-NB message
    f_NBIOT_RRC_ConnectionRelease(nbiot_Cell1);

    //@siclog "Step 41" siclog@
    //@sic R5-172164 sic@
    //SS adjusts SystemInformationBlockType14-NB of Ncell 1 with a special access class bitmap different from the special access class bitmap set in USIM and ab-BarringForExceptionData is set to true.
    v_SIB14_Cell1.ab_Param_r13.ab_Common_r13 := cs_AB_Config_NB(a, '1000000000'B, true_, '10000'B);
    f_NBIOT_CellInfo_SetSIB14(nbiot_Cell1, v_SIB14_Cell1);
    f_NBIOT_SS_ConfigureSysinfo(nbiot_Cell1, false);
    
    //@siclog "Step 42" siclog@
    //@sic R5-172164 sic@
    //Trigger the UE to initiate MO Exception Data
    f_UT_TriggerMO_ExceptionData(UT); // @sic R5w170308 sic@

    //@siclog "Step 43" siclog@
    //@sic R5-172164 sic@
    //Check: Does the UE transmit an RRCConnectionRequest-NB message on Ncell 1 with establishmentCause-r13 set to mo-ExceptionData?
    //@siclog "Step 44 - 46" siclog@
    //@sic R5-172164 sic@
    //Steps 2 to 4 of the 'Generic Test Procedure NB-IoT Control Plan CIoT MO user data transfer non-SMS transport' as described in TS 36.508 [18], clause 8.1.5A.3.3  are performed.
    //NOTE: The UE will transmit one ESM DATA TRANSPORT message containing user data generated in step 42.
    f_NBIOT_508Check_CP_MONonSMSDataTransfer(nbiot_Cell1, cr_UserDataContainer, mo_ExceptionData);
    f_NBIOT_PreliminaryPass(__FILE__, __LINE__, "Step 43 - 46");

    //@siclog "Step 47" siclog@
    //The SS transmits an RRCConnectionRelease-NB message
    f_NBIOT_RRC_ConnectionRelease(nbiot_Cell1);
    
    f_NBIOT_TestBody_Set(false);
    
    //Switch/power off UE
    f_NBIOT_Postamble(nbiot_Cell1, CONTROL_PLANE, N1_IDLE);
  }

  /*
   * @desc      REFERENCE TS 36.523-1 clause 22.4.11
   * @status    APPROVED (NBIOT)
   */
  function f_TC_22_4_11_NBIOT() runs on NBIOT_PTC
  { //NB-IoT / RRC connection release / Redirection to another NB-IoT frequency

    var NB_CarrierFreq_Type v_CarrierFreq_Cell1;
    var NB_CarrierFreq_Type v_CarrierFreq_Cell23;
    
    f_NBIOT_Init(c3);
    
    //Get cell specific parameter
    v_CarrierFreq_Cell1 := f_NBIOT_CellInfo_GetEARFCN(nbiot_Cell1);
    v_CarrierFreq_Cell23 := f_NBIOT_CellInfo_GetEARFCN(nbiot_Cell23);
    
    //Set System Information for Cell 1 & 23 according to Table 22.4.11.3.3-2 and Table 22.4.11.3.3-3.
    //This will overwrite the default SIB5 initialization by function f_NBIOT_Init.
    f_NBIOT_CellInfo_SetSIB5(nbiot_Cell1, cs_508_SystemInformationBlockType5_NB_Def({cs_NB_InterFreqCarrierFreq(v_CarrierFreq_Cell23)})); //f2
    f_NBIOT_CellInfo_SetSIB5(nbiot_Cell23, cs_508_SystemInformationBlockType5_NB_Def({cs_NB_InterFreqCarrierFreq(v_CarrierFreq_Cell1)})); //f1
    
    //Create and configure all cells
    f_NBIOT_CellConfig_Def(nbiot_Cell1, CONTROL_PLANE);
    f_NBIOT_CellConfig_Def(nbiot_Cell23, CONTROL_PLANE);
    
    //Bring UE to initial state
    f_NBIOT_Preamble(nbiot_Cell1, CONTROL_PLANE);
    
    //Set inital cell power level for Cell 23
    f_NBIOT_SetCellPower(nbiot_Cell23, tsc_SuitableCellRS_EPRE);
    
    f_NBIOT_TestBody_Set(true);
    
    //@siclog "Step 1" siclog@
    //SS transmits an RRCConnectionRelease-NB message (IE redirectedCarrierInfo including carrierFreq-r13 of Ncell 23).
    f_NBIOT_RRC_ConnectionRelease_Common(nbiot_Cell1, CONTROL_PLANE, cs_RRCConnectionRelease_NB(tsc_RRC_TI_Def, other, -, -, v_CarrierFreq_Cell23.DL), cs_TimingInfo_Now);
    
    //@siclog "Step 2 - 6" siclog@
    //Check: Does the Generic test procedure in TS 36.508 subclause 8.1.5A.5 from steps 1-5 to take place indicating that the UE is camped on Ncell 23? //@sic R5-170582, R5-174292 sic@
    f_NBIOT_TrackingAreaUpdate_Step1_5(nbiot_Cell23, CONTROL_PLANE);
    
    //@siclog "Step 7" siclog@
    //@sic R5-174292, R5s170547 sic@
    //The SS changes Ncell1 and Ncell 23 power level according to the row "T1" in table 22.4.11.3.2-0.
    f_NBIOT_SetCellPower(nbiot_Cell1, tsc_NonSuitableOffNBIOTCellRS_EPRE);
   
    //@siclog "Step 8" siclog@
    //@sic R5-174292 sic@
    //The SS transmits an RRCConnectionRelease-NB message to release RRC connection.
    f_NBIOT_RRC_ConnectionRelease(nbiot_Cell23);

    f_NBIOT_TestBody_Set(false);
    
    //Switch/power off UE
    f_NBIOT_Postamble ( nbiot_Cell23, CONTROL_PLANE, N1_IDLE );
  }

  /*
   * @desc      REFERENCE TS 36.523-1 clause 22.4.12
   * @status    APPROVED (NBIOT)
   */
  function f_TC_22_4_12_NBIOT() runs on NBIOT_PTC
  {//NB-IoT / RRC connection release / Redirection to another NB-IoT band
    var NB_CarrierFreq_Type v_CarrierFreq_Cell1;
    var NB_CarrierFreq_Type v_CarrierFreq_Cell10;
    var EUTRA_ASN1_TrackingAreaCode_Type v_TAC2 := int2bit (2, 16);

    f_NBIOT_Init(c3);
    
    //Get cell specific parameter
    v_CarrierFreq_Cell1 := f_NBIOT_CellInfo_GetEARFCN(nbiot_Cell1);
    v_CarrierFreq_Cell10 := f_NBIOT_CellInfo_GetEARFCN(nbiot_Cell10);

    //Set TAC according to Table 8.1.4.2-2
    f_NBIOT_CellInfo_SetTAC (nbiot_Cell10, v_TAC2); //different TAC for TAU procedure
    
    //Set System Information for Cell 1 & 10 according to Table 22.4.12.3.3-2 and Table 22.4.12.3.3-3.
    //This will overwrite the default SIB5 initialization by function f_NBIOT_Init.
    f_NBIOT_CellInfo_SetSIB5(nbiot_Cell1, cs_508_SystemInformationBlockType5_NB_Def({cs_NB_InterFreqCarrierFreq(v_CarrierFreq_Cell10)})); //f5
    f_NBIOT_CellInfo_SetSIB5(nbiot_Cell10, cs_508_SystemInformationBlockType5_NB_Def({cs_NB_InterFreqCarrierFreq(v_CarrierFreq_Cell1)})); //f1

    //Create and configure all cells
    f_NBIOT_CellConfig_Def(nbiot_Cell1, CONTROL_PLANE);
    f_NBIOT_CellConfig_Def(nbiot_Cell10, CONTROL_PLANE);

    //Bring UE to initial state
    f_NBIOT_Preamble(nbiot_Cell1, CONTROL_PLANE);

    //Set inital cell power level for Cell 10
    f_NBIOT_SetCellPower(nbiot_Cell10, tsc_SuitableCellRS_EPRE);

    f_NBIOT_TestBody_Set(true);

    //@siclog "Step 1" siclog@
    //SS transmits an RRCConnectionRelease-NB message (IE redirectedCarrierInfo including carrierFreq-r13 of Ncell 10).
    f_NBIOT_RRC_ConnectionRelease_Common(nbiot_Cell1, CONTROL_PLANE, cs_RRCConnectionRelease_NB(tsc_RRC_TI_Def, other, -, -, v_CarrierFreq_Cell10.DL), cs_TimingInfo_Now);
   
    //@siclog "Step 2 - 6" siclog@
    //Check: Does the Generic test procedure in TS 36.508 subclause 8.1.5A.5 from steps 1-5 to take place indicating that the UE is camped on Ncell 10? //@sic R5-170583, R5-174471, R5s170560 sic@
    f_NBIOT_TrackingAreaUpdate_Step1_5(nbiot_Cell10, CONTROL_PLANE);
    
    //@siclog "Step 7" siclog@
    //@sic R5-174471, R5s170548, R5s170560 sic@
    //The SS changes Ncell 1 and Ncell 10 power level according to the row "T1" in table 22.4.12.3.2-0.
    f_NBIOT_SetCellPower(nbiot_Cell1, tsc_NonSuitableOffNBIOTCellRS_EPRE);
   
    //@siclog "Step 8" siclog@
    //@sic R5-174471, R5s170560 sic@
    //The SS transmits an RRCConnectionRelease-NB message to release RRC connection.
    f_NBIOT_RRC_ConnectionRelease(nbiot_Cell10);

    f_NBIOT_TestBody_Set(false);

    //Switch/power off UE
    f_NBIOT_Postamble ( nbiot_Cell10, CONTROL_PLANE, N1_IDLE );
  }

  /*
   * @desc      REFERENCE TS 36.523-1 clause 22.4.13
   * @status    APPROVED (NBIOT)
   */
  function f_TC_22_4_13_NBIOT() runs on NBIOT_PTC
  {
    var template PDCP_Parameters_NB_r13 v_PDCP_Parameters := omit; // if CP, IE not present
    var NB_SRB_COMMON_IND v_ReceivedAspForUeCapabilityInfo;
    var UECapabilityInformation_NB_r13_IEs v_UECapabilityInformation_r13;
    var UE_Capability_NB_r13 v_UECapability;
    var UE_Capability_NB_Ext_r14_IEs v_UE_Capability_NB_Ext_r14;
    
    f_NBIOT_Init(c1);
    
    //Create and configure all cells
    f_NBIOT_CellConfig_Def(nbiot_Cell1, CONTROL_PLANE);

    //Bring UE to initial state
    f_NBIOT_Preamble(nbiot_Cell1, CONTROL_PLANE);

    f_NBIOT_TestBody_Set(true);

    //@siclog "Step 1" siclog@
    SRB.send(cas_NB_SRB_RrcPdu_REQ(nbiot_Cell1, tsc_SRB1bis, cs_TimingInfo_Now, cs_508_UeCapabilityEnquiry_NB(tsc_RRC_TI_Def)));

    if (pc_User_Plane_CIoT_Optimisation or pc_S1_U_DataTransfer) { // Check contents if UP @sic R5-170962, R5-173076 sic@
      v_PDCP_Parameters := cr_PDCP_Parameters_NB(pc_ROHC_profile0x0002);
    }
    
    //@siclog "Step 2" siclog@
    SRB.receive(car_NB_SRB_RrcPdu_IND(nbiot_Cell1, tsc_SRB1bis, cr_508_UeCapabilityInformation_NB(tsc_RRC_TI_Def,
                                                                                                  cr_UE_Capability_NB(v_PDCP_Parameters),
                                                                                                  cr_UE_RadioPagingInfo_NB(nb1))))
      -> value v_ReceivedAspForUeCapabilityInfo;

    v_UECapabilityInformation_r13 := v_ReceivedAspForUeCapabilityInfo.Signalling.Rrc.Dcch.message_.c1.ueCapabilityInformation_r13.criticalExtensions.ueCapabilityInformation_r13;
    v_UECapability := v_UECapabilityInformation_r13.ue_Capability_r13; // @sic R5-174293, R5-181277 sic@
    f_NBIOT_CheckReleaseIndicator (v_UECapabilityInformation_r13.ue_Capability_r13.accessStratumRelease_r13); // @sic R5-183056 sic@
    fl_NBIOT_CheckMultipleDRB(v_UECapability);
    fl_NBIOT_CheckPhyLayerParameters(v_UECapability.phyLayerParameters_r13);
    fl_NBIOT_CheckSupportedBands(v_UECapability.rf_Parameters_r13.supportedBandList_r13);
    if (v_UECapability.ue_Category_NB_r13 != nb1) { // @sic R5-174293 sic@
      f_NBIOT_SetVerdictFailOrInconc (__FILE__, __LINE__, "UE Category does not equal nb1");
    } else {
      f_NBIOT_PreliminaryPass(__FILE__, __LINE__, "Step 2");
    }

    select (v_UECapability.accessStratumRelease_r13) { // @sic R5-181277 sic@
      case (rel13) {
        //do nothing
      }
      case (rel14, rel15) { // @sic R5s180552 BASELINE MOVING 2018 sic@
        fl_NBIOT_CheckMultiCarrierPaging(v_UECapabilityInformation_r13.ue_RadioPagingInfo_r13);

        if (not isvalue(v_UECapabilityInformation_r13.nonCriticalExtension)) {
          f_SetVerdictInconc (__FILE__, __LINE__, "UECapabilityInformation-NB-Ext-r14 is not present for Rel-14 NB-IoT UE");
        }
        else {
          v_UE_Capability_NB_Ext_r14 := fl_NBIOT_DecodeCapExt_r14(v_UECapabilityInformation_r13.nonCriticalExtension.ue_Capability_ContainerExt_r14);
          fl_NBIOT_CheckCategoryNB2(v_UE_Capability_NB_Ext_r14);
          fl_NBIOT_CheckRaiSupport(v_UE_Capability_NB_Ext_r14);
          fl_NBIOT_CheckPhyLayerParameters_v1430(v_UE_Capability_NB_Ext_r14);
          fl_NBIOT_CheckphyLayerParameters_v1440(v_UE_Capability_NB_Ext_r14);
        }
      }
      case else  {
        f_SetVerdictInconc (__FILE__, __LINE__, "AccessStratumRelease not testable"); // a UE implementing an unsupported release must not be failed !
      }
    }

    f_NBIOT_TestBody_Set(false);
    
    //Switch/power off UE
    f_NBIOT_Postamble ( nbiot_Cell1, CONTROL_PLANE, N2_CONNECTED );
  }

  /*
   * @desc      REFERENCE TS 36.523-3 clause 22.4.19a
   * @status    APPROVED (NBIOT)
   */
  function f_TC_22_4_19a_NBIOT() runs on NBIOT_PTC
  {// NB-IoT / Radio link failure / T301 expiry / T311 expiry / RRC connection re-establishment
    var SystemInformationBlockType2_NB_r13 v_SIB2;
    var template (value) NB_CellPowerList_Type v_CellPowerList_Step1 := {
      cs_NB_CellPower(nbiot_Cell1, tsc_NonSuitableOffNBIOTCellRS_EPRE),
      cs_NB_CellPower(nbiot_Cell2, tsc_SuitableCellRS_EPRE)
    };
    var template (value) NB_CellPowerList_Type v_CellPowerList_Step9 := {
      cs_NB_CellPower(nbiot_Cell1, tsc_NonSuitableOffNBIOTCellRS_EPRE),
      cs_NB_CellPower(nbiot_Cell2, tsc_NonSuitableOffNBIOTCellRS_EPRE)
    };
    var template (value) NB_CellPowerList_Type v_CellPowerList_Step11 := {
      cs_NB_CellPower(nbiot_Cell1, tsc_ServingCellRS_EPRE),
      cs_NB_CellPower(nbiot_Cell2, tsc_NonSuitableOffNBIOTCellRS_EPRE)
    };
    var float v_T301 := f_NBIOT_SetTimerToleranceMin(rrcTimer, 2.5);
    timer t_Wait;
    
    f_NBIOT_Init(c2);
    
    //Set the value of T301 and T311 timer in SIB2 for Ncell 1, Ncell 2
    v_SIB2 := f_NBIOT_CellInfo_GetSIB2(nbiot_Cell1);
    v_SIB2.ue_TimersAndConstants_r13.t301_r13 := ms2500;
    v_SIB2.ue_TimersAndConstants_r13.t311_r13 := ms10000;
    v_SIB2.cp_Reestablishment_r14 := true_;
    f_NBIOT_CellInfo_SetSIB2 (nbiot_Cell1, v_SIB2);
    
    v_SIB2 := f_NBIOT_CellInfo_GetSIB2(nbiot_Cell2);
    v_SIB2.ue_TimersAndConstants_r13.t301_r13 := ms2500;
    v_SIB2.ue_TimersAndConstants_r13.t311_r13 := ms10000;
    v_SIB2.cp_Reestablishment_r14 := true_;
    f_NBIOT_CellInfo_SetSIB2 (nbiot_Cell2, v_SIB2);
    
    //Create and configure all cells
    f_NBIOT_CellConfig_Def(nbiot_Cell1, CONTROL_PLANE);
    f_NBIOT_CellConfig_Def(nbiot_Cell2, CONTROL_PLANE);
    
    //Bring UE to initial state
    f_NBIOT_Preamble(nbiot_Cell1, CONTROL_PLANE);
    
    f_NBIOT_TestBody_Set(true);
    
    //Setup the no response in step 3
    f_NBIOT_SS_ConfigRachProcedureWithNoMsg4(nbiot_Cell2); // @sic R5s180539, R5-186796 sic@

    f_Delay (0.5); // to ensure ACK for the ATTACH COMPLETE is sent // @sic R5s180539 sic@
 
    //@siclog "Step 1" siclog@
    //The SS changes Ncell 1 to "Off" and Ncell2 to Suitable
    f_NBIOT_SetCellPowerList(v_CellPowerList_Step1);

    //Reset the SRBs ready for TAU at end of test
    f_NBIOT_SS_SRBs_DRBs_Reset(nbiot_Cell1, CONTROL_PLANE); // @sic R5s180539 sic@
        
    //@siclog "Step 2" siclog@
    //The UE sends an RRC Connection Reestablishment Request-NB message on Ncell2
    f_NBIOT_RRC_RRCConnectionReestablishmentRequest_r14(nbiot_Cell1, nbiot_Cell2); // @sic R5-183199 sic@
    
    //@siclog "Step 3" siclog@
    //The SS does not respond for 2.5s (T301)
    t_Wait.start(v_T301); // @sic R5s180539, R5-186796 sic@
    alt {
      [] SRB.receive(car_NB_SRB0_RrcPdu_IND(nbiot_Cell2, cr_RRCConnectionReestablishmentRequest_NB_r14(?, otherFailure)))
        {
          repeat;
        }
      [] t_Wait.timeout {}
    }

    //Setup the RRCConnectionSetup for the TAU procedure in steps 4-8
    f_NBIOT_SS_ConfigRachProcedureMsg4(nbiot_Cell2, f_NBIOT_508_RRCConnectionSetup()); // @sic R5s180539 sic@
        
    //@siclog "Step 4-8" siclog@
    //Does the test result of generic test procedure in TS 36.508 subclause 8.1.5A.2 indicate that the UE is camped on E-UTRAN Ncell 2?
    f_NBIOT_508Check_CP_ResponseToPagingForMTAccess(nbiot_Cell2);// @sic R5-183199 sic@
    f_NBIOT_PreliminaryPass(__FILE__, __LINE__, "Steps 4 - 8");

    f_Delay (0.5); // to ensure Service Accept is sent

    //@siclog "Step 9" siclog@
    //The SS changes Ncell 2 to "Off"
    f_NBIOT_SetCellPowerList(v_CellPowerList_Step9);
    
    //@siclog "Step 10" siclog@
    //Wait for 12 seconds (T311 = 10s)
    f_Delay(12.0);
    
    //@siclog "Step 11" siclog@
    //The SS changes Ncell 1 to ServingCell
    f_NBIOT_SetCellPowerList(v_CellPowerList_Step11);

    //@siclog "Step 11A" siclog@
    //Wait for 30s to allow the UE to camp on Ncell 1
    f_Delay(30.0); // @sic R5s190016, R5-191551 sic@

    //@siclog "Step 12-16" siclog@
    //Check: Does the test result of generic test procedure in TS 36.508 subclause 8.1.5A.2 indicate that the UE is camped on E-UTRAN Ncell 1?
    //NOTE: The UE performs a TAU procedure and the RRC connection is released.
    f_NBIOT_508Check_CP_ResponseToPagingForMTAccess(nbiot_Cell1);// @sic R5-183199 sic@

    //@siclog "Step 17" siclog@
    //@sic R5-183199 sic@
    //The SS transmits an RRCConnectionRelease-NB message.
    f_NBIOT_RRC_ConnectionRelease(nbiot_Cell1);

    f_NBIOT_TestBody_Set(false);
    
    //Switch/power off UE
    f_NBIOT_Postamble(nbiot_Cell1, CONTROL_PLANE, N1_IDLE);
  }

  /*
   * @desc      REFERENCE TS 36.523-3 clause 22.4.20a
   * @status    APPROVED (NBIOT)
   */
  function f_TC_22_4_20a_NBIOT() runs on NBIOT_PTC
  {// NB-IoT / Radio link failure / RRC connection re-establishment reject / RRC connection re-establishment
    var SystemInformationBlockType2_NB_r13 v_SIB2;
    var template (value) NB_RachProcedureList_Type v_RachProcedureList;
    var template (value) NB_CellPowerList_Type v_CellPowerList_Step1 := {
      cs_NB_CellPower(nbiot_Cell1, tsc_NonSuitableOffNBIOTCellRS_EPRE),
      cs_NB_CellPower(nbiot_Cell2, tsc_Suitable_NeighbourIntraFreq_CellRS_EPRE) // @sic R5s180277 sic@
    };

    f_NBIOT_Init(c2);
    
    //Set the value of T311 timer in SIB2 for Ncell 1
    v_SIB2 := f_NBIOT_CellInfo_GetSIB2(nbiot_Cell1);
    v_SIB2.ue_TimersAndConstants_r13.t311_r13 := ms10000;
    v_SIB2.cp_Reestablishment_r14 := true_;
    f_NBIOT_CellInfo_SetSIB2 (nbiot_Cell1, v_SIB2);
    
    //Set the value of T311 timer in SIB2 for Ncell2
    v_SIB2 := f_NBIOT_CellInfo_GetSIB2(nbiot_Cell2);
    v_SIB2.ue_TimersAndConstants_r13.t311_r13 := ms10000;
    v_SIB2.cp_Reestablishment_r14 := true_;
    f_NBIOT_CellInfo_SetSIB2 (nbiot_Cell2, v_SIB2);

    //Create and configure all cells
    f_NBIOT_CellConfig_Def(nbiot_Cell1, CONTROL_PLANE);
    f_NBIOT_CellConfig_Def(nbiot_Cell2, CONTROL_PLANE);

    //Bring UE to initial state
    f_NBIOT_Preamble(nbiot_Cell1, CONTROL_PLANE);
    
    f_NBIOT_TestBody_Set(true);

    //Setup the RRC Connection Reestablishment Reject message to be sent in step 3 and the RRCConnectionSetup for the TAU procedure @sic R5s170523 change 1.5: preconfiguration of RRCConnectionSetup sic@
    v_RachProcedureList := {
      cs_NB_RachProcedure(cs_NB_RandomAccessResponseConfig_Def, cs_NB_ContentionResolutionCtrl_Def(cs_ContentionResolution_DlschSdu(f_RRC_DL_CCCH_NB_Encvalue(cs_RRCConnectionReestablishmentReject_NB)))),
      cs_NB_RachProcedure(cs_NB_RandomAccessResponseConfig_Def, cs_NB_ContentionResolutionCtrl_Def(cs_ContentionResolution_DlschSdu(f_RRC_DL_CCCH_NB_Encvalue(f_NBIOT_508_RRCConnectionSetup()))))
    };
    f_NBIOT_SS_CommonCellConfig(nbiot_Cell2, cads_NB_RachProcedure_Config_REQ(nbiot_Cell2, cs_TimingInfo_Now, -, -, v_RachProcedureList));  //@sic R5s170523 change 1.5: nbiot_Cell2 sic@
    
    //@siclog "Step 1" siclog@
    //The SS changes the power level of Ncell 1 to non-suitable "Off" and changes the power level of Ncell 2 to suitable according to TS 36.508 subclause 8.3.2.2.1-1 in order that the radio link quality of Ncell 1 is degraded.
    f_NBIOT_SetCellPowerList(v_CellPowerList_Step1);
    
    //@siclog "Step 2" siclog@
    //The UE sends RRCConnectionReestablishmentRequest-NB message on Ncell 2.
    f_NBIOT_RRC_RRCConnectionReestablishmentRequest_r14(nbiot_Cell1, nbiot_Cell2); // @sic R5-183195 sic@
    
    //@siclog "Step 3" siclog@
    //The SS transmits a RRCConnectionReestablishmentReject message.
    //Automatically sent by SS
    
    //@siclog "Step 4" siclog@
    //Check: Does the UE camp by using the procedure in clause 8.1.5A.2 of TS 36.508 [18] on Ncell 2?
    f_NBIOT_508Check_CP_ResponseToPagingForMTAccess(nbiot_Cell2); // @sic R5-183195 sic@

    //@siclog "Step 5" siclog@
    //@sic R5-183195 sic@
    //The SS transmits an RRCConnectionRelease-NB message.
    f_NBIOT_RRC_ConnectionRelease(nbiot_Cell2);
 
    f_NBIOT_TestBody_Set(false);
    
    //Switch/power off UE
    f_NBIOT_Postamble(nbiot_Cell2, CONTROL_PLANE, N1_IDLE);
  }

  /*
   * @desc      REFERENCE TS 36.523-3 clause 22.4.23
   * @status    APPROVED (NBIOT)
   */
  function f_TC_22_4_23_NBIOT() runs on NBIOT_PTC
  { // NB-IoT / Radio link failure / T310 expiry / Dedicated RLF timer (CP CIoT)
    var SystemInformationBlockType2_NB_r13 v_SIB2;
    var template (value) DL_CCCH_Message_NB v_RrcConnSetup;

    f_NBIOT_Init(c1);

    //Set the value of T311 timer in SIB2 for Ncell 1, Ncell 2 according to 22.4.23.3.3-1
    v_SIB2 := f_NBIOT_CellInfo_GetSIB2(nbiot_Cell1);
    v_SIB2.ue_TimersAndConstants_r13.t310_r13 := ms1000;
    v_SIB2.ue_TimersAndConstants_r13.n310_r13 := n1;
    f_NBIOT_CellInfo_SetSIB2 (nbiot_Cell1, v_SIB2);

    //Create and configure all cells
    f_NBIOT_CellConfig_Def(nbiot_Cell1, CONTROL_PLANE);

    //Bring UE to initial state
    f_NBIOT_Preamble(nbiot_Cell1, CONTROL_PLANE, STATE3_NB_IDLEUPDATED);

    f_NBIOT_TestBody_Set(true);

    // Setup the RRC Connection Setup message to be sent in step 1
    v_RrcConnSetup := f_NBIOT_508_RRCConnectionSetup();
    v_RrcConnSetup.message_.c1.rrcConnectionSetup_r13.criticalExtensions.c1.rrcConnectionSetup_r13.radioResourceConfigDedicated_r13.rlf_TimersAndConstants_r13 := cs_RLF_TimersAndConstants_Setup_CP;
    f_NBIOT_SS_ConfigRachProcedureMsg4 (nbiot_Cell1, v_RrcConnSetup);
    
    //@siclog "Step 1" siclog@
    //'Generic Test Procedure NB-IoT Control Plane CIoT MT user data transfer non-SMS transport' as described in TS 36.508 [18], clause 8.1.5A.2.3  are performed.
    f_NBIOT_508Check_CP_ResponseToPagingForMTAccess(nbiot_Cell1);

    f_Delay (0.5); // @sic R5s170781 to ensure Service Accept is sent sic@
    
    //@siclog "Step 1A" siclog@
    //The SS changes Ncell1 according to row "T1" in Table 22.4.23.3.2-1.
    f_NBIOT_SetCellPower(nbiot_Cell1, tsc_NonSuitableOffNBIOTCellRS_EPRE);

    //@siclog "Step 1B" siclog@
    f_Delay (5.0);
    
    //@siclog "Step 1C" siclog@
    //The SS changes Ncell1 according to row "T2" in Table 22.4.23.3.2-1.
    f_NBIOT_SetCellPower(nbiot_Cell1, -85);
    
    //@siclog "Step 1D - 1E" siclog@
    f_NBIOT_Capability (nbiot_Cell1, CONTROL_PLANE);

    //@siclog "Step 1F" siclog@
    f_NBIOT_RRC_ConnectionRelease (nbiot_Cell1);

    // Now configure Msg4 back to the default RRC Conn Setup // @sic R5s180050 sic@
    f_NBIOT_SS_ConfigRachProcedureMsg4(nbiot_Cell1, f_NBIOT_508_RRCConnectionSetup());
    
    //@siclog "Step 1G" siclog@
    //'Generic Test Procedure NB-IoT Control Plane CIoT MT user data transfer non-SMS transport' as described in TS 36.508 [18], clause 8.1.5A.2.3  are performed.
    f_NBIOT_508Check_CP_ResponseToPagingForMTAccess(nbiot_Cell1);

    f_Delay (0.5); // @sic R5s170781 to ensure Service Accept is sent sic@

    //@siclog "Step 8" siclog@
    //The SS changes Ncell1 according to row "T1" in Table 22.4.23.3.2-1.
    f_NBIOT_SetCellPower(nbiot_Cell1, tsc_NonSuitableOffNBIOTCellRS_EPRE);
    f_NBIOT_SS_SRBs_DRBs_Reset (nbiot_Cell1, CONTROL_PLANE);
    
    //@siclog "Step 8A" siclog@
    f_Delay (3.0);

    //@siclog "Step 8B" siclog@
    //The SS changes Ncell1 according to row "T2" in Table 22.4.23.3.2-1.
    f_NBIOT_SetCellPower(nbiot_Cell1, -85);
    
    //@siclog "Step 8C" siclog@
    f_Delay (3.0); // @sic R5-181304 sic@

    //@siclog "Step 9-13" siclog@
    //'Generic Test Procedure NB-IoT Control Plane CIoT MT user data transfer non-SMS transport' as described in TS 36.508 [18], clause 8.1.5A.2.3 are performed
    f_NBIOT_508Check_CP_ResponseToPagingForMTAccess(nbiot_Cell1); // @sic R5-181304 sic@
    f_NBIOT_PreliminaryPass(__FILE__, __LINE__, "Step 9");

    //@siclog "Step 14" siclog@
    //The SS transmits an RRCConnectionRelease-NB message
    f_NBIOT_RRC_ConnectionRelease (nbiot_Cell1);
    f_NBIOT_TestBody_Set(false);

    //Switch/power off UE
    f_NBIOT_Postamble(nbiot_Cell1, CONTROL_PLANE, N1_IDLE);
  }

}
