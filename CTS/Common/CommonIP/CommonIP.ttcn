/******************************************************************************/
// @copyright   Copyright Notification
//   No part may be reproduced except as authorized by written permission.
//   The copyright and the foregoing restriction extend to reproduction in all media.
//   Trademark 2019, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).
//   All rights reserved.
// @version: 36.523-3 v15.3.0
// $Date: 2019-03-20 15:14:47 +0100 (Wed, 20 Mar 2019) $
// $Rev: 24279 $
/******************************************************************************/

module CommonIP {

  import from CommonDefs all;
  import from Parameters all;

  const integer tsc_IMS_MediaPort_M1 := 60350;                                         /* RTP port Speech  @sic R5s130495 Change 19 sic@
                                                                                        * @status    APPROVED (ENDC, IMS, IMS_IRAT, LTE, LTE_A_IRAT, LTE_A_PRO, LTE_A_R10_R11, LTE_A_R12, LTE_IRAT, NBIOT) */

  const integer tsc_IMS_MediaPort_M2 := 60352;                                         /* RTP port Video   @sic R5s130495 Change 19 sic@
                                                                                        * @status    APPROVED (ENDC, IMS, IMS_IRAT, LTE, LTE_A_IRAT, LTE_A_PRO, LTE_A_R10_R11, LTE_A_R12, LTE_IRAT, NBIOT) */

  const UInt8_Type tsc_IP_Protocol_ICMP := 1;                     /* @status    APPROVED (ENDC, LTE, LTE_IRAT, NBIOT) */

  const UInt8_Type tsc_IP_Protocol_UDP  := 17;                    /* @status    APPROVED (LTE, LTE_A_PRO, NBIOT, UTRAN) */

  const UInt8_Type tsc_ICMP_Type_EchoReply := 0;                  /* @status    APPROVED (ENDC, LTE, LTE_IRAT, NBIOT) */

  const UInt8_Type tsc_ICMPv6_Type_EchoReply := 129;              /* @status    APPROVED (ENDC, LTE, LTE_IRAT, NBIOT) */

  const UInt8_Type tsc_ICMP_Type_EchoRequest := 8;                /* @status    APPROVED (ENDC, LTE, LTE_IRAT, NBIOT) */

  const UInt8_Type tsc_ICMPv6_Type_EchoRequest := 128;            /* @status    APPROVED (ENDC, LTE, LTE_IRAT, NBIOT) */

  const UInt8_Type tsc_IP_Protocol_TCP   := 6;                    /* @status    APPROVED (LTE, NBIOT, UTRAN) */

  const UInt8_Type tsc_IP_Protocol_IPSec := 50;                   /* @status    APPROVED (LTE, NBIOT, UTRAN) */

  const UInt8_Type tsc_IP_Protocol_ICMPv6 := 58;                  /* @status    APPROVED (ENDC, LTE, LTE_IRAT, NBIOT) */

  const O2_Type tsc_MulticastPrefix_FF02 := 'FF02'O;              /* @status    APPROVED (ENDC, IMS, IMS_IRAT, LTE, LTE_A_IRAT, LTE_A_PRO, LTE_A_R10_R11, LTE_A_R12, LTE_IRAT, NBIOT, POS, UTRAN) */

  const octetstring tsc_IP_AnyData := '00112233445566778899AABBCCDDEEFF'O;  //* @status    APPROVED (ENDC, LTE, LTE_A_PRO, LTE_IRAT, NBIOT, UTRAN) */

  type record PDN_AddressInfo_Type {                              /* @status    APPROVED (ENDC, IMS, IMS_IRAT, LTE, LTE_A_IRAT, LTE_A_PRO, LTE_A_R10_R11, LTE_A_R12, LTE_IRAT, NBIOT, POS, SSNITZ, UTRAN) */
    charstring UE_IPAddressIPv4,
    charstring UE_IPAddressIPv6,
    charstring Remote_IPAddressIPv4,    /* @sic R5s130681 additional change sic@ */
    charstring Remote_IPAddressIPv6,    /* @sic R5s130681 additional change sic@ */
    charstring DHCP_ServerAddress,
    charstring ICMPv6_ServerAddress,
    charstring PCSCF_IPAddressIPv4,
    charstring PCSCF_IPAddressIPv6,
    charstring DNS_ServerAddressIPv4,
    charstring DNS_ServerAddressIPv6,
    charstring XCAP_ServerAddressIPv4,  /* @sic R5s141051 change 8 sic@ */
    charstring XCAP_ServerAddressIPv6,  /* @sic R5s141051 change 8 sic@ */
    charstring ProSe_ServerAddressIPv4, /* @sic R5-160765 sic@ */
    charstring ProSe_ServerAddressIPv6  /* @sic R5-160765 sic@ */
  };

  const PDN_AddressInfo_Type tsc_PDN1_AddressInfo := {          /* @status    APPROVED (ENDC, IMS, IMS_IRAT, LTE, LTE_A_IRAT, LTE_A_PRO, LTE_A_R10_R11, LTE_A_R12, LTE_IRAT, NBIOT, POS, SSNITZ, UTRAN) */
    UE_IPAddressIPv4 := px_IPv4_Address1_UE,
    UE_IPAddressIPv6 := px_IPv6_Address1_UE,
    Remote_IPAddressIPv4 := px_IPv4_Address1_RemoteUE,
    Remote_IPAddressIPv6 := px_IPv6_Address1_RemoteUE,
    DHCP_ServerAddress := px_IPv4_Address1_NW,
    ICMPv6_ServerAddress := px_IPv6_Address1_NW,
    PCSCF_IPAddressIPv4 := px_IPv4_Address1_NW,
    PCSCF_IPAddressIPv6 := px_IPv6_Address1_NW,
    DNS_ServerAddressIPv4 := px_IPv4_Address1_NW,
    DNS_ServerAddressIPv6 := px_IPv6_Address1_NW,
    XCAP_ServerAddressIPv4 := px_IPv4_Address1_NW, /* @sic R5s141051 change 8 sic@ */
    XCAP_ServerAddressIPv6 := px_IPv6_Address1_NW, /* @sic R5s141051 change 8 sic@ */
    ProSe_ServerAddressIPv4 := px_IPv4_Address1_NW, /* @sic R5-160765 sic@ */
    ProSe_ServerAddressIPv6 := px_IPv6_Address1_NW  /* @sic R5-160765 sic@ */
  };

  const PDN_AddressInfo_Type tsc_PDN2_AddressInfo := {          /* @status    APPROVED (ENDC, IMS, IMS_IRAT, LTE, LTE_A_IRAT, LTE_A_PRO, LTE_A_R10_R11, LTE_A_R12, LTE_IRAT, NBIOT, POS, SSNITZ, UTRAN) */
    UE_IPAddressIPv4 := px_IPv4_Address2_UE,
    UE_IPAddressIPv6 := px_IPv6_Address2_UE,
    Remote_IPAddressIPv4 := px_IPv4_Address2_RemoteUE,
    Remote_IPAddressIPv6 := px_IPv6_Address2_RemoteUE,
    DHCP_ServerAddress := px_IPv4_Address2_NW,
    ICMPv6_ServerAddress := px_IPv6_Address2_NW,
    PCSCF_IPAddressIPv4 := px_IPv4_Address2_NW,
    PCSCF_IPAddressIPv6 := px_IPv6_Address2_NW,
    DNS_ServerAddressIPv4 := px_IPv4_Address2_NW,
    DNS_ServerAddressIPv6 := px_IPv6_Address2_NW,
    XCAP_ServerAddressIPv4 := px_IPv4_Address2_NW, /* @sic R5s141051 change 8 sic@ */
    XCAP_ServerAddressIPv6 := px_IPv6_Address2_NW, /* @sic R5s141051 change 8 sic@ */
    ProSe_ServerAddressIPv4 := px_IPv4_Address2_NW, /* @sic R5-160765 sic@ */
    ProSe_ServerAddressIPv6 := px_IPv6_Address2_NW  /* @sic R5-160765 sic@ */
  };

  const PDN_AddressInfo_Type tsc_PDN_AddressInfo[2] := { tsc_PDN1_AddressInfo, tsc_PDN2_AddressInfo};  /* @status    APPROVED (ENDC, IMS, IMS_IRAT, LTE, LTE_A_IRAT, LTE_A_PRO, LTE_A_R10_R11, LTE_A_R12, LTE_IRAT, NBIOT, POS, UTRAN) */

  type record WLAN_AddressInfo_Type {  /* @status    APPROVED (ENDC, IMS, IMS_IRAT, LTE, LTE_A_IRAT, LTE_A_PRO, LTE_A_R10_R11, LTE_A_R12, LTE_IRAT, NBIOT, POS, UTRAN) */
    charstring UE_IPAddressIPv4,
    charstring UE_IPAddressIPv6,
    charstring DNS_ServerAddressIPv4,
    charstring DNS_ServerAddressIPv6,
    charstring EPDG_ServerAddressIPv4,
    charstring EPDG_ServerAddressIPv6,
    charstring EmergencyEPDG_ServerAddressIPv4,
    charstring EmergencyEPDG_ServerAddressIPv6,
    charstring Non3GPP_XCAP_ServerAddressIPv4,
    charstring Non3GPP_XCAP_ServerAddressIPv6
  };

  /*
   * @desc      return index of the IP address or IMS server corresponding to the given PdnIndex
   * @param     p_PdnIndex
   * @return    integer
   * @status    APPROVED (ENDC, IMS, IMS_IRAT, LTE, LTE_A_IRAT, LTE_A_PRO, LTE_A_R10_R11, LTE_A_R12, LTE_IRAT, NBIOT, POS, UTRAN)
   */
  function f_PDN_PdnIndex2Integer(PDN_Index_Type p_PdnIndex) return integer
  { /* PDN_2a to support change of the IP address for IMS test case 19.5.1 */
    /* @sic R5s150031: fl_IP_ServerIndex -> f_PDN_PdnIndex2Integer sic@ */
    var integer v_Index;
    select (p_PdnIndex) {
      case (PDN_1, ePDG_IMS1) {
        v_Index := 0;
      }
      case (PDN_2, PDN_2a, PDN_Internet, ePDG_IMS2, ePDG_XCAP, ePDG_Internet) {
        v_Index := 1;
      }
      case else {
        FatalError(__FILE__, __LINE__, "Invalid PDN index");
      }
    }
    return v_Index;
  }

  /*
   * @desc      return PDN_AddressInfo corresponding to the given PdnIndex
   * @param     p_PdnIndex
   * @return    PDN_AddressInfo_Type
   * @status    APPROVED (ENDC, IMS, IMS_IRAT, LTE, LTE_A_IRAT, LTE_A_PRO, LTE_A_R10_R11, LTE_A_R12, LTE_IRAT, NBIOT, POS, UTRAN)
   */
  function f_PDN_AddressInfo_Get(PDN_Index_Type p_PdnIndex) return PDN_AddressInfo_Type
  { /* PDN_2a to support change of the IP address for IMS test case 19.5.1 */
    var PDN_AddressInfo_Type v_PDN_AddressInfo;
    var integer v_Index := f_PDN_PdnIndex2Integer(p_PdnIndex);

    v_PDN_AddressInfo := tsc_PDN_AddressInfo[v_Index];
    if (p_PdnIndex == PDN_2a) {
      v_PDN_AddressInfo.UE_IPAddressIPv4 := px_IPv4_Address2a_UE;   /* @sic implementation of IMS TC_19_5_1 sic@ */
      v_PDN_AddressInfo.UE_IPAddressIPv6 := px_IPv6_Address2a_UE;   /* @sic implementation of IMS TC_19_5_1 sic@ */
    }
    return v_PDN_AddressInfo;
  }

  /*
   * @desc      Check whether given string is IPv4 address
   * @param     p_IpAddress
   * @return    boolean
   * @status    APPROVED (ENDC, IMS, IMS_IRAT, LTE, LTE_A_IRAT, LTE_A_PRO, LTE_A_R10_R11, LTE_A_R12, LTE_IRAT, NBIOT, POS, UTRAN)
   */
  function f_IpAddressIsIPv4(charstring p_IpAddress) return boolean
  {
    var template charstring v_Pattern := pattern "[0-9]+[.][0-9]+[.][0-9]+[.][0-9]+";
    return match(p_IpAddress, v_Pattern);
  };

    
    
   // ADDED THIS IPV6 FUNCTION FROM HERE -------------------
  function f_IpAddressIsIPv6(charstring p_IpAddress) return boolean
  {
    var Char1List_Type v_SplitCharList := {":"};
    var CharStringList_Type v_FieldList := f_StringSplit(p_IpAddress, v_SplitCharList);
    var integer v_FieldCnt := lengthof(v_FieldList);
    var charstring v_Field;
    var charstring v_Pattern;
    var integer v_FieldLength;
    var integer i;
    
    if ((v_FieldCnt == 1) or (v_FieldCnt > 8)) { return false; }
    
    for (i:=0; i<v_FieldCnt; i:=i+1) {
      v_Field := v_FieldList[i];
      v_FieldLength := lengthof(v_Field);
      v_Pattern := "[0-9a-fA-F]#(" & int2str(v_FieldLength) & ")";  // @sic R5s150668 NOTE: "@nocase" to be used on long term sic@

      if (v_FieldLength > 4) { return false; }
      if (not match(v_Field, pattern v_Pattern)) { return false; }
    }
    return true;
  }  // ADDED THIS IPV6 FUNCTION FROM HERE -------------------

  /*
   * @desc      convert IP address in dot notation into octetstring;
   *            e.g. "10.11.12.13" results in '0A0B0C0D'O
   * @param     p_IPv4AddrChar
   * @return    O4_Type
   * @status    APPROVED (ENDC, IMS, IMS_IRAT, LTE, LTE_A_IRAT, LTE_A_PRO, LTE_A_R10_R11, LTE_A_R12, LTE_IRAT, NBIOT, POS, SSNITZ, UTRAN)
   */
  function f_Convert_IPv4Addr2OctString(charstring p_IPv4AddrChar) return O4_Type
  {
    var Char1List_Type v_SplitCharList := {"."};
    var CharStringList_Type v_FieldList := f_StringSplit(p_IPv4AddrChar, v_SplitCharList);
    var octetstring v_IPv4AddrOct := ''O;
    var integer v_FieldCnt := lengthof(v_FieldList);
    var integer v_IntVal;
    var integer i;

    if (v_FieldCnt != 4) {
      FatalError(__FILE__, __LINE__, "invalid IP Address");
    }
    for (i:=0; i<v_FieldCnt; i:=i+1) {
      v_IntVal := str2int(v_FieldList[i]);
      v_IPv4AddrOct := v_IPv4AddrOct & int2oct(v_IntVal, 1);
    }
    return v_IPv4AddrOct;
  }

  /*
   * @desc      Convert a text representation of a IPv6 address into hexadecimal format
   *            into an octetstring of length 16 according to RFC3513.
   *            E.g. "2001::1" results in '20010000000000000000000000000001'O
   * @param     p_IPv6AddrChar
   * @return    O16_Type
   * @status    APPROVED (ENDC, IMS, IMS_IRAT, LTE, LTE_A_IRAT, LTE_A_PRO, LTE_A_R10_R11, LTE_A_R12, LTE_IRAT, NBIOT, POS, SSNITZ, UTRAN)
   */
  function f_Convert_IPv6Addr2OctString(charstring p_IPv6AddrChar) return O16_Type
  {
    var Char1List_Type v_SplitCharList := {":"};
    var CharStringList_Type v_FieldList := f_StringSplit(p_IPv6AddrChar, v_SplitCharList);
    var octetstring v_IPv6AddrOct := ''O;
    var integer v_FieldCnt := lengthof(v_FieldList);
    var boolean v_EmptyBlocksExpanded := false;          /* set to true when "::" has been expanded => subsequent empty fields will just be replaced by '0000' */
    var charstring v_Field;
    var integer v_NoOfEmptyBlocks;
    var integer i;
    var integer k;

    if (v_FieldCnt > 8) {
      FatalError(__FILE__, __LINE__, "invalid IP Address");
    }
    for (i:=0; i<v_FieldCnt; i:=i+1) {
      v_Field := v_FieldList[i];
      select (lengthof(v_Field)) {
        case (0) { // empty block
          if (not v_EmptyBlocksExpanded) {                /* e.g. for "2001:0ba0::" we have two empty blocks at the end of the address but only one of them shall be expanded; @sic R5s110645 change 5 sic@ */
            v_EmptyBlocksExpanded := true;
            v_NoOfEmptyBlocks := 8 - (v_FieldCnt - 1);    /* "-1" because one empty block is already contained in v_FieldCnt */
            for (k:=0; k < v_NoOfEmptyBlocks; k:=k+1) {
              v_IPv6AddrOct := v_IPv6AddrOct & '0000'O;
            }
          } else {                                        /* "::" has already been expanded */
            v_IPv6AddrOct := v_IPv6AddrOct & '0000'O;
          }
        }
        case (1) {
          v_IPv6AddrOct := v_IPv6AddrOct & str2oct("000" & v_Field);
        }
        case (2) {
          v_IPv6AddrOct := v_IPv6AddrOct & str2oct("00" & v_Field);
        }
        case (3) {
          v_IPv6AddrOct := v_IPv6AddrOct & str2oct("0" & v_Field);
        }
        case (4) {
          v_IPv6AddrOct := v_IPv6AddrOct & str2oct(v_Field);

        }
        case else {
          FatalError(__FILE__, __LINE__, "invalid IP Address");
        }
      }
    }
    return v_IPv6AddrOct;
  }

  /*
   * @desc      convert IPv6 address given as octet string to charstring (readable format)
   * @param     p_IPv6AddrOct
   * @return    charstring
   * @status    APPROVED (ENDC, IMS, IMS_IRAT, LTE, LTE_A_IRAT, LTE_A_PRO, LTE_A_R10_R11, LTE_A_R12, LTE_IRAT, NBIOT, POS, UTRAN)
   */
  function f_Convert_OctString2IPv6Addr(O16_Type p_IPv6AddrOct) return charstring
  { /* @sic R5s110603 change 2 sic@ */
    var charstring v_IPv6Addr := "";
    var integer v_AddrLength := lengthof(p_IPv6AddrOct);
    var integer i := 0;

    while (i < v_AddrLength) {
      v_IPv6Addr := v_IPv6Addr & oct2str(substr(p_IPv6AddrOct, i, 2));
      i:=i+2;
      if (i < v_AddrLength) {
        v_IPv6Addr := v_IPv6Addr & ":";
      }
    }
    return v_IPv6Addr;
  }

  /*
   * @desc      Calculate of the IP checksum acc. RFC 1071
   * @param     p_OctetString
   * @return    O2_Type
   * @status    APPROVED (ENDC, IMS, IMS_IRAT, LTE, LTE_A_IRAT, LTE_A_PRO, LTE_A_R10_R11, LTE_A_R12, LTE_IRAT, NBIOT, POS, UTRAN)
   */
  function f_IpChecksum(octetstring p_OctetString) return O2_Type
  { /* calculate header checksum; within the given octetstring the header checksum shall be set to '0000'O */
    var integer i;
    var octetstring v_Word;
    var integer v_DataLength := lengthof(p_OctetString);
    var integer v_Sum := 0;

    if (v_DataLength mod 2 != 0) {
      p_OctetString := p_OctetString & '00'O;
    }
    // accumulate all words of the IP header
    for (i:=0; i < v_DataLength; i := i+2) {
      v_Word := p_OctetString[i] & p_OctetString[i+1];
      v_Sum := v_Sum + oct2int(v_Word);
    }
    // deal with the
    while (v_Sum > tsc_UInt16Max) {
      v_Sum := (v_Sum mod (tsc_UInt16Max+1)) + (v_Sum / (tsc_UInt16Max+1));
    }
    // get complement
    v_Sum := tsc_UInt16Max - v_Sum;
    return int2oct(v_Sum, 2);
  }

  /*
   * @desc      Check whether an address is a IPv6 multicast address
   * @param     p_IPv6Addr
   * @return    boolean     ..  true if the address is a multicast address
   * @status    APPROVED (ENDC, IMS, IMS_IRAT, LTE, LTE_A_IRAT, LTE_A_PRO, LTE_A_R10_R11, LTE_A_R12, LTE_IRAT, NBIOT, POS, UTRAN)
   */
  function f_IPv6AddrIsMulticast(charstring p_IPv6Addr) return boolean
  {
    var O2_Type v_Prefix;
    v_Prefix := str2oct(substr(p_IPv6Addr, 0, 4));
    if (v_Prefix == tsc_MulticastPrefix_FF02) { // RFC 2375
      return true;
    }
    return false;
  }

  /*
   * @desc      convert (global) IPv6 adddress into link-local address
   * @param     p_IPv6Addr        .. global IPv6 address
   * @return    charstring        .. link-local address
   * @status    APPROVED (ENDC, IMS, IMS_IRAT, LTE, LTE_A_IRAT, LTE_A_PRO, LTE_A_R10_R11, LTE_A_R12, LTE_IRAT, NBIOT, POS, UTRAN)
   */
  function f_IPv6AddrGetLinkLocalAddr(charstring p_IPv6Addr) return charstring
  {
    var O16_Type v_IPv6AddrOctets := f_Convert_IPv6Addr2OctString(p_IPv6Addr);
    var O8_Type  v_InterfaceId    := substr(v_IPv6AddrOctets, 8, 8);             // interface id assuming a /64 prefix
    
    return f_Convert_OctString2IPv6Addr('FE80000000000000'O & v_InterfaceId);
  }

  /*
   * @desc      Return ICMP PDU including correct checksum
   * @param     p_SrcAddress
   * @param     p_DstAddress
   * @param     p_IcmpPDU
   * @return    octetstring
   * @status    APPROVED (ENDC, IMS, IMS_IRAT, LTE, LTE_A_IRAT, LTE_A_PRO, LTE_A_R10_R11, LTE_A_R12, LTE_IRAT, NBIOT, POS, UTRAN)
   */
  function f_ICMPv6_UpdateCRCChecksum(charstring p_SrcAddress,
                                      charstring p_DstAddress,
                                      octetstring p_IcmpPDU) return octetstring
  {
    var octetstring v_PseudoHeader;
    var octetstring v_IcmpPDU := p_IcmpPDU;
    var O2_Type v_Checksum;
    // Build pseudo headers for ICMPv6, see RFC 4443 clause 2.3
    // Pseudo headers are specified in RFC 2460 clause 8.1
    v_PseudoHeader :=
      f_Convert_IPv6Addr2OctString(p_SrcAddress) &
        f_Convert_IPv6Addr2OctString(p_DstAddress) &
        int2oct (lengthof(p_IcmpPDU), 4) & '0000003A'O;
      
      // Now compute checksum
      v_Checksum := f_IpChecksum (v_PseudoHeader & p_IcmpPDU);
      
      // See RFC 4443 clause 2.1
      v_IcmpPDU[2] := v_Checksum[0];
      v_IcmpPDU[3] := v_Checksum[1];
      return v_IcmpPDU;
  }

  /*
   * @desc      create an IPv6 packet (currently with typical settings for an UDP packet)
   *            For IPv6 packet format, see RFC 2460
   * @param     p_TrafficClass      (default value: '00'O)
   * @param     p_FlowLabel         (default value: 0)
   * @param     p_Protocol
   * @param     p_HopCount          (default value: 64)
   * @param     p_SourceAddr
   * @param     p_DestAddr
   * @param     p_IPPayload
   * @return    octetstring
   * @status    APPROVED (ENDC, LTE, LTE_A_PRO, LTE_IRAT, NBIOT, UTRAN)
   */
  function f_IPv6Packet_Create(O1_Type p_TrafficClass := '00'O,
                               UInt20_Type p_FlowLabel := 0,
                               UInt8_Type p_Protocol,
                               UInt8_Type p_HopCount := 64,
                               charstring p_SourceAddr,
                               charstring p_DestAddr,
                               octetstring p_IPPayload)
    return octetstring
  { /* @sic R5s170286: p_HopCount sic@ */
    var hexstring v_Version := '6'H;
    var hexstring v_TrafficClass := oct2hex (p_TrafficClass);
    var hexstring v_FlowLabel := int2hex (p_FlowLabel, 5);
    var O16_Type v_SourceAddrStr := f_Convert_IPv6Addr2OctString(p_SourceAddr);
    var O16_Type v_DestAddrStr := f_Convert_IPv6Addr2OctString(p_DestAddr);
    var octetstring v_OctetString;
    
    // IP header
    v_OctetString := hex2oct(v_Version & v_TrafficClass & v_FlowLabel);  // Version, Traffic Class and Flow Label to be revised
    v_OctetString := v_OctetString & int2oct (lengthof(p_IPPayload), 2); // Payload Length
    v_OctetString := v_OctetString & int2oct(p_Protocol, 1);   // Next header
    v_OctetString := v_OctetString & int2oct(p_HopCount, 1);   // Hop Limit @sic R5s170286 sic@
    v_OctetString := v_OctetString & v_SourceAddrStr;
    v_OctetString := v_OctetString & v_DestAddrStr;
    v_OctetString := v_OctetString & p_IPPayload;
    return v_OctetString;
  }

}
