/******************************************************************************/
// @copyright   Copyright Notification
//   No part may be reproduced except as authorized by written permission.
//   The copyright and the foregoing restriction extend to reproduction in all media.
//   Trademark 2019, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).
//   All rights reserved.
// @version: 36.523-3 v15.3.0
// $Date: 2018-12-04 17:07:08 +0100 (Tue, 04 Dec 2018) $
// $Rev: 23347 $
/******************************************************************************/

module NBIOT_CommonDefs {
  import from NBIOT_RRC_ASN1_Definitions language "ASN.1:2002" all with {encode "UNALIGNED_PER_OctetAligned"};
  import from NBIOT_Imported_EUTRA_ASN1_Types all;
  import from CommonDefs all;
  import from CommonAspDefs all;
  import from CommonIP all;
  import from EUTRA_NB_CommonDefs all;

  group NBIOT_Common_Types {

  type enumerated NBIOT_CellId_Type {
    nbiot_Cell_NonSpecific,
    nbiot_Cell1,
    nbiot_Cell2,
    nbiot_Cell3,
    nbiot_Cell4,
    nbiot_Cell5,
    nbiot_Cell6,
    nbiot_Cell10,
    nbiot_Cell11,
    nbiot_Cell12,
    nbiot_Cell13,
    nbiot_Cell14,
    nbiot_Cell18,
    nbiot_Cell23,
    nbiot_Cell50,
    nbiot_Cell51,
    nbiot_Cell52,
    nbiot_Cell53,
    nbiot_Cell54,
    nbiot_Cell55,
    nbiot_Cell56,
    nbiot_Cell57,
    nbiot_Cell58,
    nbiot_Cell59,
    nbiot_Cell60,
    nbiot_Cell61,
    nbiot_Cell62,
    nbiot_Cell63
  };
  
  const EUTRA_ASN1_TrackingAreaCode_Type tsc_Idle_TAC_Cell2  := int2bit (2, 16);
  const EUTRA_ASN1_TrackingAreaCode_Type tsc_Idle_TAC_Cell3  := int2bit (3, 16);
  const EUTRA_ASN1_TrackingAreaCode_Type tsc_Idle_TAC_Cell4  := int2bit (4, 16);
  const EUTRA_ASN1_TrackingAreaCode_Type tsc_Idle_TAC_Cell6  := int2bit (6, 16);
  const EUTRA_ASN1_TrackingAreaCode_Type tsc_Idle_TAC_Cell11  := int2bit (11, 16);
  const EUTRA_ASN1_TrackingAreaCode_Type tsc_Idle_TAC_Cell12  := int2bit (12, 16);
  const EUTRA_ASN1_TrackingAreaCode_Type tsc_Idle_TAC_Cell13  := int2bit (13, 16);
  const EUTRA_ASN1_TrackingAreaCode_Type tsc_Idle_TAC_Cell23  := int2bit (23, 16);

  type enumerated IOT_STATE_Type {CONTROL_PLANE, USER_PLANE};
  type enumerated NBIOT_IDLEUPDATED_STATE_Type {
    STATE2_NB_CONNECTED_UPDATED,
    STATE2A_NB_TESTLOOP_ModeA,
    STATE2A_NB_TESTLOOP_ModeB,
    STATE2A_NB_TESTLOOP_ModeF, // @sic R5-185113 sic@
    STATE2A_NB_TESTLOOP_ModeG,
    STATE2A_NB_TESTLOOP_ModeH,
    STATE2A_NB_TESTLOOP_ModeI, // @sic R5-172854 sic@
    STATE3_NB_IDLEUPDATED,
    STATE3A_NB_IDLEUPDATED_TESTLOOP_ModeA,
    STATE3A_NB_IDLEUPDATED_TESTLOOP_ModeB,
    STATE3A_NB_IDLEUPDATED_TESTLOOP_ModeF, // @sic R5-185113 sic@
    STATE3A_NB_IDLEUPDATED_TESTLOOP_ModeG,
    STATE3A_NB_IDLEUPDATED_TESTLOOP_ModeH,
    STATE3A_NB_IDLEUPDATED_TESTLOOP_ModeI, // @sic R5-172854 sic@
    STATE3ANB_TESTLOOP_IDLE};
  type enumerated NBIOT_POSTAMBLE_STATE_Type {N1_IDLE, N2_CONNECTED, N3_TESTMODE, N4_DEREGISTERED};
  type enumerated NB_OperationMode_Type {inband_samePCI, inband_differentPCI, guardband, standalone};
  
  type integer NB_HarqProcessId_Type (0..1);                              /* Only one, not used */
  type integer NB_RedundancyVersion_Type (0..2);                           /* Only used for UL. FFS. used in EUTRA_ASP_DrbDefs and EUTRA_ASP_Typedefs */

  type record NB_CarrierFreq_Type {
    CarrierFreq_NB_r13 DL,
    CarrierFreq_NB_r13 UL
  };
  
  type union NB_RRC_MSG_Request_Type {                                     /* DL RRC PDU on CCCH or DCCH */
    DL_CCCH_Message_NB             Ccch,
    DL_DCCH_Message_NB             Dcch
  };
  
  type union NB_RRC_MSG_Indication_Type {                                  /* UL RRC PDU on CCCH or DCCH */
    UL_CCCH_Message_NB             Ccch,
    UL_DCCH_Message_NB             Dcch
  };
   
  } // End group NBIOT_Common_Types
  
  //----------------------------------------------------------------------------
  
  
  group NBIOT_RRC_Nested_Types {
  type MasterInformationBlock_NB.operationModeInfo_r13                                          NB_OperationModeInfo_Type;
  type MasterInformationBlock_NB.schedulingInfoSIB1_r13                                         NB_SchedulingInfoSIB1_Type;
  type SystemInformationBlockType1_NB.si_WindowLength_r13                                       NB_SiWindowLength_Type;
  type SystemInformationBlockType1_NB.si_RadioFrameOffset_r13                                   NB_SiRadioFrameOffset_Type;
  type SystemInformationBlockType1_NB.cellSelectionInfo_r13.q_RxLevMin_r13                      NB_Q_Rxlevmin_Type;
  type SystemInformationBlockType1_NB.cellAccessRelatedInfo_r13.cellBarred_r13                  NB_CellBarred_Type;
  type SystemInformationBlockType1_NB.cellAccessRelatedInfo_r13.intraFreqReselection_r13        NB_IntraFreqRes_Type;
  type SystemInformationBlockType1_NB.eutraControlRegionSize_r13                                NB_EutraControlRegionSize_Type;
  type SystemInformationBlockType1_NB.nrs_CRS_PowerOffset_r13                                   NRS_CRS_PowerOffset_Type;
  
  type SystemInformationBlockType2_NB_r13.freqInfo_r13.additionalSpectrumEmission_r13           NB_AdditionalSpectrumEmission_Type;
  
  type SystemInformationBlockType3_NB_r13.cellReselectionInfoCommon_r13.q_Hyst_r13              NB_Q_Hyst_Type;
  type SystemInformationBlockType3_NB_r13.intraFreqCellReselectionInfo_r13.t_Reselection_r13    NB_T_Reselection_Type;
  
  type AB_Config_NB_r13.ab_Category_r13                                                         AB_Category_Type;
  type AB_Config_NB_r13.ab_BarringForExceptionData_r13                                          AB_ForExceptionData_Type;    /* @sic R5s170597 BASELINE MOVING 2017: BarringExceptionData -> BarringForExceptionData sic@ */
  type SchedulingInfoList_NB_r13[0].si_Periodicity_r13                                          NB_SiPeriodicity_Type;
  type SchedulingInfoList_NB_r13[0].si_RepetitionPattern_r13                                    NB_SiRepetitionPattern_Type;
  type SchedulingInfoList_NB_r13[0].si_TB_r13                                                   NB_SiTransportBlockSize_Type;
  type PCCH_Config_NB_r13.nB_r13                                                                NB_Paging_nB_Type;
  type UE_TimersAndConstants_NB_r13.t300_r13                                                    NB_T300_Type;
  type UE_TimersAndConstants_NB_r13.t301_r13                                                    NB_T301_Type;
  type UE_TimersAndConstants_NB_r13.t310_r13                                                    NB_T310_Type;
  type UE_TimersAndConstants_NB_r13.t311_r13                                                    NB_T311_Type;
  type RACH_Info_NB_r13.mac_ContentionResolutionTimer_r13                                       NB_MAC_ContentionResolutionTimer_Type;
  type NPDSCH_ConfigCommon_NB_r13.nrs_Power_r13                                                 NB_ReferenceSignalPower_Type;
  type PCCH_Config_NB_r13.defaultPagingCycle_r13                                                NB_DefaultPagingCycle_Type;
  type RACH_Info_NB_r13.ra_ResponseWindowSize_r13                                               NB_Ra_ResponseWindowSize_Type;
  type Paging_NB.systemInfoModification_r13                                                     NB_Paging_SystemInfoModification_Type;
  type Paging_NB.systemInfoModification_eDRX_r13                                                NB_Paging_SystemInfoModification_eDRX_Type;
  type CarrierFreq_NB_r13.carrierFreqOffset_r13                                                 NB_CarrierFreqOffset_r13_Type;
  
  type RadioResourceConfigDedicated_NB_r13.mac_MainConfig_r13                                   NB_MAC_MainConfig_Type; /* NOTE:
                                                                                                                         * the type name is confusing since there is a ASN.1 type MAC_MainConfig
                                                                                                                         * which is used as RadioResourceConfigDedicated.mac_MainConfig.explicitValue;
                                                                                                                         * but that is as per ASN.1 */
  type MAC_MainConfig_NB_r13.ul_SCH_Config_r13                                                  NB_UL_SCH_Config_Type;
  type MAC_MainConfig_NB_r13.logicalChannelSR_Config_r13.setup.logicalChannelSR_ProhibitTimer_r13       NB_SR_ProhibitTimer_Type;
  
  type PDCP_Parameters_NB_r13.maxNumberROHC_ContextSessions_r13                                 NB_MaxNumberROHC_ContextSessions_Type;

  type NPDCCH_ConfigDedicated_NB_r13.npdcch_NumRepetitions_r13                                  NPDCCH_NumRepetitions_UESS_Type;
  type NPDCCH_ConfigDedicated_NB_r13.npdcch_StartSF_USS_r13                                     NPDCCH_StartSF_UESS_Type;
  type NPDCCH_ConfigDedicated_NB_r13.npdcch_Offset_USS_r13                                      NPDCCH_Offset_UESS_Type;

  type PCCH_Config_NB_r13.npdcch_NumRepetitionPaging_r13                                        NPDCCH_NumRepetitions_Type1CSS_Type;

  type NPRACH_Parameters_NB_r13.npdcch_NumRepetitions_RA_r13                                    NPDCCH_NumRepetitions_Type2CSS_Type;
  type NPRACH_Parameters_NB_r13.npdcch_StartSF_CSS_RA_r13                                       NPDCCH_StartSF_Type2CSS_Type;
  type NPRACH_Parameters_NB_r13.npdcch_Offset_RA_r13                                            NPDCCH_Offset_Type2CSS_Type;

  type NPUSCH_ConfigCommon_NB_r13.ack_NACK_NumRepetitions_Msg4_r13                              NPUSCH_ACK_NACK_NumRepetitions_Msg4_Type;

  type RRCConnectionSetupComplete_NB_r13_IEs.attachWithoutPDN_Connectivity_r13                  RRCConnSetupComplete_AttachWithoutPDN_Type;

  type SystemInformationBlockType20_NB_r14.sc_mcch_CarrierConfig_r14                            NB_SC_MCCH_CarrierConfig_Type;
  type SystemInformationBlockType20_NB_r14.sc_mcch_RepetitionPeriod_r14                         NB_SC_MCCH_RepetitionPeriod_Type;
  type SystemInformationBlockType20_NB_r14.sc_mcch_Offset_r14                                   NB_SC_MCCH_Offset_Type;
  type SystemInformationBlockType20_NB_r14.sc_mcch_ModificationPeriod_r14                       NB_SC_MCCH_ModificationPeriod_Type;
  type SystemInformationBlockType20_NB_r14.sc_mcch_SchedulingInfo_r14                           NB_SC_MCCH_SchedulingInfo_Type;

  type SC_MTCH_Info_NB_r14.npdcch_NumRepetitions_SC_MTCH_r14                                    NPDCCH_NumRepetitions_SC_MTCH_Type;
  type SC_MTCH_Info_NB_r14.npdcch_StartSF_SC_MTCH_r14                                           NPDCCH_StartSF_SC_MTCH_Type;
  type SC_MTCH_Info_NB_r14.npdcch_Offset_SC_MTCH_r14                                            NPDCCH_Offset_SC_MTCH_Type;
  type SC_MTCH_Info_NB_r14.npdcch_NPDSCH_MaxTBS_SC_MTCH_r14                                     NPDCCH_NPDSCH_MaxTBS_SC_MTCH_Type;
  type SC_MTCH_Info_NB_r14.sc_mtch_CarrierConfig_r14                                            NB_SC_MTCH_CarrierConfig_Type;
  } // End group NBIOT_RRC_Nested_Types

  //----------------------------------------------------------------------------

  group NBIOT_ASP_CommonPart {
  /* Definition of ASP common parts for REQ-, CNF- and IND-ASPs */

  //----------------------------------------------------------------------------

  group NBIOT_ASP_CommonPart_Definitions {
  
  group NBIOT_Routing_Info {

  const integer tsc_NB_MaxRB := 2 + 2; /* 2 DRBs + 2 SRBs */
  const integer tsc_SRB1bis := 3;

  type integer NB_SRB_Identity_Type (tsc_SRB0, tsc_SRB1, tsc_SRB1bis);

  type union NB_RadioBearerId_Type {
    NB_SRB_Identity_Type              Srb,
    EUTRA_ASN1_DRB_Identity_Type      Drb,
    SC_MRB_Identity_Type              ScMrb
  };

  const NB_RadioBearerId_Type tsc_NB_RbId_SRB0 := {Srb:=tsc_SRB0};
  const NB_RadioBearerId_Type tsc_NB_RbId_SRB1 := {Srb:=tsc_SRB1};
  const NB_RadioBearerId_Type tsc_NB_RbId_SRB1bis := {Srb:=tsc_SRB1bis};
  
  const NB_RadioBearerId_Type tsc_NB_RbId_DRB1  := {Drb:=tsc_DRB1};
  const NB_RadioBearerId_Type tsc_NB_RbId_DRB2  := {Drb:=tsc_DRB2};
  
  type union NB_RoutingInfo_Type {
    Null_Type                 None,
    Null_Type                 L2Test,           /* to be used to let the NAS emulator route back encoded an RRC message back to the test case instead of forwarding it to the SS */
    NB_RadioBearerId_Type     RadioBearerId
  };
   
  } // End sub-group NBIOT_Routing_Info
  
  //----------------------------------------------------------------------------
  
  
  } // End sub-group NBIOT_ASP_CommonPart_Definitions
  
  //----------------------------------------------------------------------------
  
  group REQ_ASP_CommonPart {
  
  type record NB_ReqAspCommonPart_Type {
    NBIOT_CellId_Type           CellId,
    NB_RoutingInfo_Type         RoutingInfo,
    TimingInfo_Type             TimingInfo,
    ReqAspControlInfo_Type      ControlInfo
  };
  
  } // End group REQ_ASP_CommonPart
  
  //----------------------------------------------------------------------------
  
  group NBIOT_CNF_ASP_CommonPart {

  type record NB_CnfAspCommonPart_Type {
    NBIOT_CellId_Type           CellId,
    NB_RoutingInfo_Type            RoutingInfo,
    TimingInfo_Type             TimingInfo,
    ConfirmationResult_Type     Result
  };
  
  } // End sub-group NBIOT_CNF_ASP_CommonPart
  
  //----------------------------------------------------------------------------
  
  group NBIOT_IND_ASP_CommonPart {
  
  type record NB_IndAspCommonPart_Type {
    NBIOT_CellId_Type           CellId,
    NB_RoutingInfo_Type         RoutingInfo,
    TimingInfo_Type             TimingInfo,
    IndicationStatus_Type       Status
  };
  
  } // End sub-group NBIOT_IND_ASP_CommonPart
  
  //----------------------------------------------------------------------------
  
  } // End group NBIOT_ASP_CommonPart
  
  function f_VZ_ConvertIpv4Addr2Int(charstring ipAddr, out integer ipv4) return boolean
    {
        if (f_IpAddressIsIPv4(ipAddr))
        {
            ipv4 := oct2int(f_Convert_IPv4Addr2OctString(ipAddr));
            return true;
        }
        return false;
    }
  function f_VZ_ConvertIpv6Addr2Int(charstring ip6Addr, out IntegerList_Type ipv6) return boolean
    {
        var integer v_Index := 0;
        var integer v_List_Index := 0;
        if(f_IpAddressIsIPv6(ip6Addr))
        {
            var O16_Type octstring := f_Convert_IPv6Addr2OctString(ip6Addr);
            for(v_Index := 0; v_Index < lengthof(octstring);v_Index := v_Index + 2)
            {
                ipv6[v_List_Index] := oct2int(substr(octstring,v_Index,2));
                v_List_Index := v_List_Index + 1;
            }
            return true;
        }
        return false;
    }
/*  ADDED THIS FUNCTION FOR NBIOT COMPATIBILITY END FROM HERE ------*/  
      
    
    
}
