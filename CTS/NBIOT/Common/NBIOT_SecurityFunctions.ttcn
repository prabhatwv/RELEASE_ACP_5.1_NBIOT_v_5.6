/******************************************************************************/
// @copyright   Copyright Notification
//   No part may be reproduced except as authorized by written permission.
//   The copyright and the foregoing restriction extend to reproduction in all media.
//   Trademark 2019, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).
//   All rights reserved.
// @version: 36.523-3 v15.3.0
// $Date: 2018-06-14 09:59:10 +0200 (Thu, 14 Jun 2018) $
// $Rev: 21683 $
/******************************************************************************/
module NBIOT_SecurityFunctions {

  import from NBIOT_RRC_ASN1_Definitions language "ASN.1:2002" all with {encode "UNALIGNED_PER_OctetAligned"};
  import from CommonDefs all;
  import from EPS_NAS_TypeDefs all;
  import from EUTRA_NB_CommonDefs all;
  import from EUTRA_NB_Parameters all;
  import from EUTRA_NB_SecurityFunctions all;
  import from EUTRA_NR_SecurityFunctions all;
  import from NAS_AuthenticationCommon all;
  import from NAS_CommonTypeDefs all;
  import from NBIOT_ASP_TypeDefs all;
  import from NBIOT_CommonDefs all;
  import from NBIOT_Imported_EUTRA_ASN1_Types all;
  import from NBIOT_Security_Templates all;
  import from NasEmu_CtrlAspTypes all;
  import from Parameters all;
  import from TestcaseProperties all;
  import from VZW_NBIOT_AlgMilenage all;

  type record NBIOT_SecurityParams_Type {       /* @status    APPROVED (NBIOT)
                                                   parameters related/used to/by NBIOT authentication and security */
    KDF_Type                KDF,
    B3_Type                 KSIasme,            // 3 bit KSIasme used when Authentication is performed by MME.
    B3_Type                 KSIsgsn,            // USEd to store when KASME is derived from Ck,IK due to GMM Authentication at handover to LTE
    B256_Type               Ks,                 // = Ck || IK
    // NAS keys
    B256_Type               KASME,
    B256_Type               KENB,
    B256_Type               NH,
    B32_Type                NonceMME,
    B32_Type                NonceUE,
    // NAS Security structures
    NAS_SecurityInfo_Type   NAS_Integrity,
    NAS_SecurityInfo_Type   NAS_Ciphering,
    // AS Security structures
    NB_AS_IntegrityInfo_Type   AS_Integrity,
    NB_AS_CipheringInfo_Type   AS_Ciphering,
    UE_SecurityCapability   NAS_SecurityCap,
    UE_AdditionalSecurityCapability NAS_SecurityCap5G         optional, // needed for UEs which support EN-DC @sic R5s180271 Baseline Moving 2018 Phase 1 sic@
    Common_AuthenticationParams_Type AuthParams
    
    // Note the Keys in the above NAS/AS_Integrity/Ciphering is the truncated 128 bit keys
    // More fields to be added here
  };

  template (value) NB_AS_IntegrityInfo_Type cs_NB_AS_IntegrityInfo(IntegrityProtAlgorithm_Type  p_Algo,
                                                                   B128_Key_Type p_Key) :=
  { /* @status    APPROVED (NBIOT) */
    Algorithm         := p_Algo,
    KRRCint           := p_Key,
    ActTimeList       := omit         /* => all SRBs shall be configured immediately */
  };

  template (value) NB_SecurityActTime_Type cs_NB_CipherAct_Null(NB_RadioBearerId_Type p_RBID) :=
  { /* @status    APPROVED (NBIOT) */
    RadioBearerId         := p_RBID,
    UL                    := { None := true },
    DL                    := { None := true }
  };

  template (value) NBIOT_SecurityParams_Type cs_NB_AuthParams_Init(B128_Type   p_Rand,
                                                                   B3_Type     p_NAS_IntegrityProtAlgorithm,
                                                                   B3_Type     p_NAS_CipheringAlgorithm,
                                                                   IntegrityProtAlgorithm_Type p_RRC_IntegrityProtAlgorithm,
                                                                   EUTRA_ASN1_CipheringAlgorithm_r12_Type p_RRC_CipheringAlgorithm) :=
  { /* to Store all parameters related/used to Authentication
       @status    APPROVED (NBIOT) */
    KDF                := tsc_KDF_HMAC_SHA_256,    //33401 defined KDF
    KSIasme            := '111'B,        //un initialised
    KSIsgsn            := '111'B,        //un initialised,
    Ks                 := tsc_AuthUndefinedB256,
    KASME              := tsc_AuthUndefinedB256,
    KENB               := tsc_AuthUndefinedB256,
    NH                 := tsc_AuthUndefinedB256,
    NonceMME           := tsc_AuthUndefinedB32,
    NonceUE            := tsc_AuthUndefinedB32,
    NAS_Integrity      := cs_NAS_SecurityInfo (p_NAS_IntegrityProtAlgorithm, tsc_AuthUndefinedB128),
    NAS_Ciphering      := cs_NAS_SecurityInfo (p_NAS_CipheringAlgorithm, tsc_AuthUndefinedB128),
    // AS Security structures
    AS_Integrity       :=  cs_NB_AS_IntegrityInfo (p_RRC_IntegrityProtAlgorithm, tsc_AuthUndefinedB128),
    AS_Ciphering       :=  cs_NB_AS_CipheringInfo(p_RRC_CipheringAlgorithm,
                                                  tsc_AuthUndefinedB128,
                                                  tsc_AuthUndefinedB128,
                                               { cs_NB_CipherAct_Null(tsc_NB_RbId_SRB1),
                                                 cs_NB_CipherAct_Null(tsc_NB_RbId_SRB1bis) } ),
    NAS_SecurityCap    := cs_NAS_SecurityCapabilityInit,
    NAS_SecurityCap5G  := omit, // @sic R5s180271 Baseline Moving 2018 Phase 1 sic@
    AuthParams         := cs_CommonAuthParams_Init (p_Rand)

  };

  /*
   * @desc      Converts ASN.1 IntegrityProtAlgorithm_Type to bit string representation
   *            considering the test case attribute "NullIntegrityAlgorithmAllowed"
   * @param     p_AS_Integrity
   * @return    B3_Type
   * @status    APPROVED (NBIOT)
   */
  function fl_NB_AS_IntegrityInfo_GetIntAlg(NB_AS_IntegrityInfo_Type p_AS_Integrity) return B3_Type
  {
    var B3_Type v_IntAlg;
    
    if ((f_GetTestcaseAttrib_NullIntegrityAlgorithmAllowed(testcasename())) and (p_AS_Integrity.Algorithm == eia0_v920 )) {
      v_IntAlg := '000'B;
    } else {
      v_IntAlg := f_EUTRA_NB_ConvertIntAlg2Bitstring(p_AS_Integrity.Algorithm);
    }
    return v_IntAlg;
  }
    
    
    //VZW NBIOT: Handling for Authentication FOR tc 3.2
  function f_NBIOT_Authentication_InitNAS_ZeroAMF(NBIOT_SecurityParams_Type p_Auth_Params,
                                          NAS_PlmnId p_PLMN,
                                          template (omit) Common_AuthenticationParams_Type p_Common_AuthenticationParams := omit) return NBIOT_SecurityParams_Type
  {
    var NBIOT_SecurityParams_Type v_Auth_Params := p_Auth_Params;
    
    
      v_Auth_Params.AuthParams := f_AuthenticationInit_MILENAGE_ZeroAMF(v_Auth_Params.AuthParams);
    
    
 
      
      
    // Generates Ck, Ik, AUTN, XRES
    v_Auth_Params.Ks := v_Auth_Params.AuthParams.CK & v_Auth_Params.AuthParams.IK;
    // As per 33401 clause 6.2
    v_Auth_Params.KASME := f_EUTRA_NB_Authentication_S10(v_Auth_Params.AuthParams,
                                                         v_Auth_Params.KDF,
                                                         v_Auth_Params.Ks,
                                                         p_PLMN);
    // Generates KASME
    v_Auth_Params.KSIasme := f_Authentication_IncrementKeySeq(v_Auth_Params.KSIasme);
    // updates KSI
    v_Auth_Params.KSIsgsn := '111'B;
    // Invalidate KSIsgsn which is useful only in case of if KSIASME is derived from SGSN keys Ck and Ik.
    v_Auth_Params.NAS_Ciphering.K_NAS := f_EUTRA_NB_Authentication_S15 (tsc_NAS_Enc_Alg,
                                                                      v_Auth_Params.NAS_Ciphering.Algorithm,
                                                                      v_Auth_Params.KASME,
                                                                      v_Auth_Params.KDF);
    // Derives KNASenc key
    v_Auth_Params.NAS_Integrity.K_NAS := f_EUTRA_NB_Authentication_S15 (tsc_NAS_Int_Alg,v_Auth_Params.NAS_Integrity.Algorithm,
                                                                      v_Auth_Params.KASME,
                                                                      v_Auth_Params.KDF);
    // Derives KNASint key
    return v_Auth_Params;
  }
  

  /*
   * @desc      Function to be used before executing Authentication procedure in NBIOT.
   *            The structure for NBIOT_SecurityParams_Type passed as parameter shall have at least valid parameters for:
   *            IMSI, PLMN, NAS_IntegrityInfo_Type.NAS_IntAlgo, NAS_CipheringInfo_Type.NAS_CipherAlgo
   *            Execution of this fucntion will initialise following parameters
   *            randValue, CK, IK, Ks, aUTN, XRES,KSIasme, KASME, KNASenc & KNASint
   * @param     p_Auth_Params
   * @param     p_PLMN
   * @param     p_Common_AuthenticationParams (default value: omit)
   * @return    NBIOT_SecurityParams_Type
   * @status    APPROVED (NBIOT)
   */
  function f_NBIOT_Authentication_InitNAS(NBIOT_SecurityParams_Type p_Auth_Params,
                                          NAS_PlmnId p_PLMN,
                                          template (omit) Common_AuthenticationParams_Type p_Common_AuthenticationParams := omit) return NBIOT_SecurityParams_Type
  {
    var NBIOT_SecurityParams_Type v_Auth_Params := p_Auth_Params;
    
    /*if (isvalue(p_Common_AuthenticationParams)) {
      v_Auth_Params.AuthParams := valueof(p_Common_AuthenticationParams);
    } else {
      v_Auth_Params.AuthParams := f_AuthenticationInit(v_Auth_Params.AuthParams);
    }*/
    //VZW NBIOT: Handling for Authentication 
    if (isvalue(p_Common_AuthenticationParams)) {
       v_Auth_Params.AuthParams := valueof(p_Common_AuthenticationParams);
    }else if (px_MILENAGE_enabled == true){  
          v_Auth_Params.AuthParams := f_AuthenticationInit_MILENAGE(v_Auth_Params.AuthParams);
      
    }
    else{
          log("VZW: XOR Algorithm");
          v_Auth_Params.AuthParams := f_AuthenticationInit(v_Auth_Params.AuthParams);
    }
      
      
    // Generates Ck, Ik, AUTN, XRES
    v_Auth_Params.Ks := v_Auth_Params.AuthParams.CK & v_Auth_Params.AuthParams.IK;
    // As per 33401 clause 6.2
    v_Auth_Params.KASME := f_EUTRA_NB_Authentication_S10(v_Auth_Params.AuthParams,
                                                         v_Auth_Params.KDF,
                                                         v_Auth_Params.Ks,
                                                         p_PLMN);
    // Generates KASME
    v_Auth_Params.KSIasme := f_Authentication_IncrementKeySeq(v_Auth_Params.KSIasme);
    // updates KSI
    v_Auth_Params.KSIsgsn := '111'B;
    // Invalidate KSIsgsn which is useful only in case of if KSIASME is derived from SGSN keys Ck and Ik.
    v_Auth_Params.NAS_Ciphering.K_NAS := f_EUTRA_NB_Authentication_S15 (tsc_NAS_Enc_Alg,
                                                                      v_Auth_Params.NAS_Ciphering.Algorithm,
                                                                      v_Auth_Params.KASME,
                                                                      v_Auth_Params.KDF);
    // Derives KNASenc key
    v_Auth_Params.NAS_Integrity.K_NAS := f_EUTRA_NB_Authentication_S15 (tsc_NAS_Int_Alg,v_Auth_Params.NAS_Integrity.Algorithm,
                                                                      v_Auth_Params.KASME,
                                                                      v_Auth_Params.KDF);
    // Derives KNASint key
    return v_Auth_Params;
  }

    
    
  /*
   * @desc      Function to be used for AS KEy deriviation before AS SMC in NBIOT [p_IsSMC_Procedure := true]
   *            or
   *            Re-keying of Kenb[derivation of a new KeNB from a new KASME (i.e., after an AKA has taken place)]
   *            i.e.to be called after sending RRCConnection reconfiguration for handover or
   *            RRC Connection Re-establishment when keyChangeIndicator received in the securityConfiguration is set to TRUE [p_IsSMC_Procedure := false]
   *            The parameter p_UL_NAS_Count shall be the NAS count of
   *            if [AUTN procedure is executed]
   *            then: The UL NAS Count of NAS SMC Complete, of the NAS SMC procedure executed after AUTN Proc.
   *            else
   *            then: The UL NAS count of the NAS UL message[which shall be security protected] received which triggered the RRC Connection establishment
   *            i.e. Attach Req[ in special cases], TAU Req, Service Req etc.
   *            The structure for NBIOT_SecurityParams_Type passed as parameter shall have atleast valid parameters for:
   *            KASME, AS_IntegrityInfo_Type.IntProtAlgo AS_CipheringInfo_Type.CiphAlgo.
   *            Execution of this fucntion will initialise following parameters
   *            KENB,KRRCenc, KRRCint & KUPenc;
   * @param     p_Auth_Params
   * @param     p_UL_NAS_Count
   * @param     p_IsSMC_Procedure   (default value: true)
   * @param     p_TargetPhysicalCellIdentity (default value: omit)
   * @param     p_EARFCN_DL         (default value: omit)
   * @return    NBIOT_SecurityParams_Type
   * @status    APPROVED (NBIOT)
   */
  function f_NBIOT_Authentication_InitAS(NBIOT_SecurityParams_Type p_Auth_Params,
                                         O4_Type p_UL_NAS_Count,
                                         boolean p_IsSMC_Procedure := true,
                                         template (omit) EUTRA_ASN1_PhysCellId_Type p_TargetPhysicalCellIdentity := omit,
                                         template (omit) integer p_EARFCN_DL := omit)
    return NBIOT_SecurityParams_Type
  {
    var NBIOT_SecurityParams_Type v_Auth_Params := p_Auth_Params;

    v_Auth_Params.KENB := f_EUTRA_NB_Authentication_S11(v_Auth_Params.KDF, v_Auth_Params.KASME, p_UL_NAS_Count);     // Derives KENB
    v_Auth_Params.NH := f_EUTRA_NB_Authentication_S12(v_Auth_Params.KDF, v_Auth_Params.KASME, v_Auth_Params.KENB);   // Derives NH corresponding to NCC =1

    if (p_IsSMC_Procedure == false) {
      if (not (isvalue(p_TargetPhysicalCellIdentity) and isvalue(p_EARFCN_DL))) {
        FatalError(__FILE__, __LINE__, "New key is to be used at RRC Connection Re-establishment or Reconfiguration but no Physical Cell ID and/or ARFCN value is provided");
      }
      else { // Refresh of KeNB; horizontal key derivation
        v_Auth_Params.KENB := f_EUTRA_NB_Authentication_S13(v_Auth_Params.KDF,
                                                            v_Auth_Params.KENB,
                                                            v_Auth_Params.NH,
                                                            valueof(p_TargetPhysicalCellIdentity),
                                                            valueof(p_EARFCN_DL));
      }
    }
    
    v_Auth_Params.AS_Ciphering.KRRCenc := f_EUTRA_NB_Authentication_S15(tsc_RRC_Enc_Alg,
                                                                        f_EUTRA_NB_ConvertCiphAlg2Bitstring(v_Auth_Params.AS_Ciphering.Algorithm),
                                                                        v_Auth_Params.KENB,
                                                                        v_Auth_Params.KDF);
    v_Auth_Params.AS_Integrity.KRRCint := f_EUTRA_NB_Authentication_S15(tsc_RRC_Int_Alg,
                                                                        fl_NB_AS_IntegrityInfo_GetIntAlg(v_Auth_Params.AS_Integrity),
                                                                        v_Auth_Params.KENB,
                                                                        v_Auth_Params.KDF);
    v_Auth_Params.AS_Ciphering.KUPenc := f_EUTRA_NB_Authentication_S15(tsc_UP_Enc_Alg,
                                                                       f_EUTRA_NB_ConvertCiphAlg2Bitstring(v_Auth_Params.AS_Ciphering.Algorithm),
                                                                       v_Auth_Params.KENB,
                                                                       v_Auth_Params.KDF);
    // Ciphering algorithm for UP is same as RRC
    return v_Auth_Params;
  }

  /*
   * @desc      Function to be used for AS KEy deriviation before AS SMC in NBIOT.
   *            for Re-keying of an existing KeNB when no fresh Authentication has taken.
   *            NOTE: As there is no handover in NBIOT only Re-keying is considered but no Chaining
   *            This function needs to be called after sending RRC Connection Re-establishment
   *            when keyChangeIndicator received in the securityConfiguration is not set to TRUE
   *            The structure for NBIOT_SecurityParams_Type passed as parameter shall have all AS keys set.
   *            Execution of this fucntion will re-initialise following parameters
   *            NH, KENB* == KENB,KRRCenc, KRRCint & KUPenc
   *
   * @param     p_PhysicalCellIdentity
   * @param     p_EARFCN_DL
   * @param     p_Auth_Params
   * @return    NBIOT_SecurityParams_Type
   * @status    APPROVED (NBIOT)
   */
  function f_NBIOT_InitAS_KeyRefresh(EUTRA_ASN1_PhysCellId_Type p_PhysicalCellIdentity,
                                     integer p_EARFCN_DL,
                                     NBIOT_SecurityParams_Type p_Auth_Params) return NBIOT_SecurityParams_Type
  {
    var NBIOT_SecurityParams_Type v_Auth_Params := p_Auth_Params;    // initialise to  received as parameter

    // Refresh of KeNB; Horizontol key derivation
    v_Auth_Params.KENB := f_EUTRA_NB_Authentication_S13(v_Auth_Params.KDF,
                                                        v_Auth_Params.KENB,
                                                        v_Auth_Params.NH,
                                                        p_PhysicalCellIdentity,
                                                        p_EARFCN_DL);
    v_Auth_Params.AS_Ciphering.KRRCenc := f_EUTRA_NB_Authentication_S15(tsc_RRC_Enc_Alg,
                                                                        f_EUTRA_NB_ConvertCiphAlg2Bitstring(v_Auth_Params.AS_Ciphering.Algorithm),
                                                                        v_Auth_Params.KENB,
                                                                        v_Auth_Params.KDF);
    // Derives KRRCenc key
    v_Auth_Params.AS_Integrity.KRRCint := f_EUTRA_NB_Authentication_S15(tsc_RRC_Int_Alg,
                                                                        fl_NB_AS_IntegrityInfo_GetIntAlg(v_Auth_Params.AS_Integrity),
                                                                        v_Auth_Params.KENB,
                                                                        v_Auth_Params.KDF);
    // Derives KRRCenc key
    v_Auth_Params.AS_Ciphering.KUPenc := f_EUTRA_NB_Authentication_S15(tsc_UP_Enc_Alg,
                                                                       f_EUTRA_NB_ConvertCiphAlg2Bitstring(v_Auth_Params.AS_Ciphering.Algorithm),
                                                                       v_Auth_Params.KENB,
                                                                       v_Auth_Params.KDF);
    // Derives KRRCenc key;
    // Ciphering algorithm for UP is same as RRC
    return v_Auth_Params;
  }

  /*
   * @desc      to be called during initialisiation of the NBIOT PTC
   * @return    NBIOT_SecurityParams_Type
   * @status    APPROVED (NBIOT)
   */
  function f_NBIOT_Security_Init() return NBIOT_SecurityParams_Type
  {
    return valueof(cs_NB_AuthParams_Init(px_eAuthRAND,
                                         px_NAS_IntegrityProtAlgorithm,
                                         px_NAS_CipheringAlgorithm,
                                         px_RRC_IntegrityProtAlgorithm,
                                         px_RRC_CipheringAlgorithm));
  }

}
