/******************************************************************************/
// @copyright   Copyright Notification
//   No part may be reproduced except as authorized by written permission.
//   The copyright and the foregoing restriction extend to reproduction in all media.
//   Trademark 2019, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).
//   All rights reserved.
// @version: 36.523-3 v15.3.0
// $Date: 2019-01-29 18:31:21 +0100 (Tue, 29 Jan 2019) $
// $Rev: 23621 $
/******************************************************************************/

module CIOT_NASTemplates {

  import from CommonDefs all;
  import from CommonIP all;
  import from EPS_NAS_Constants all;
  import from EPS_NAS_MsgContainers all;
  import from EPS_NAS_Templates all;
  import from EPS_NAS_TypeDefs all;
  import from EUTRA_NB_CommonDefs all;
  import from EUTRA_NB_NASSteps all;
  import from NBIOT_Component all;
  import from NAS_AuxiliaryDefsAndFunctions all;
  import from NAS_CommonTemplates all;
  import from NAS_CommonTypeDefs all;
  import from Parameters all;

  template (value) NAS_DL_Message_Type cs_CIOT_ATTACH_ACCEPT(template (value) TrackingAreaIdList p_TaiList,
                                                             template (omit) MobileIdentity p_Guti,
                                                             template (value) EPS_NetworkFeatureSupport p_NwkFeatSup,
                                                             template (omit) AdditionalUpdateResult p_AdditionalUpdateResult,
                                                             template (value) GPRS_Timer p_T3412 := cs_GprsTimer_v_deact,
                                                             template (omit) GPRS_Timer p_T3402 := omit,
                                                             template (omit) GPRS_Timer3 p_T3412Extd := omit,
                                                             template (omit) GPRS_Timer2 p_T3324 := omit,
                                                             template (omit) GPRS_Timer p_T3423 := omit,
                                                             template (omit) PLMN_List p_EquivalentPlmnList := omit,
                                                             template (omit) ExtdDRXParams p_ExtdDRXParams := omit,
                                                             template (omit) DCN_ID p_DCN_ID := omit,
                                                             template (omit) SMSServicesStatus p_SMSServicesStatus := omit,
                                                             template (omit) Non3GPP_NW_ProvidedPolicies p_Non3GPPPolicies := omit,
                                                             template (omit) GPRS_Timer2 p_T3448 := omit,
                                                             template (omit) NetworkPolicy p_NwkPolicy := omit,
                                                             template (omit) GPRS_Timer3 p_T3447Value := omit) :=
  /* @status    APPROVED (NBIOT) */
    cs_ATTACH_ACCEPT_Common(tsc_EAttachType_EpsOnly,
                            p_T3412,
                            p_TaiList,
                            p_Guti,
                            omit,
                            omit,
                            omit,
                            p_T3402,
                            p_T3423,
                            p_EquivalentPlmnList, // @sic R5-171414 sic@
                            omit,
                            p_NwkFeatSup,
                            p_AdditionalUpdateResult,
                            p_T3412Extd,
                            p_T3324,
                            p_ExtdDRXParams,
                            p_DCN_ID, // @sic R5-183196 sic@
                            p_SMSServicesStatus,
                            p_Non3GPPPolicies,
                            p_T3448,
                            p_NwkPolicy,
                            p_T3447Value);

  template (present) AdditionalUpdateType cr_AdditionalUpdateType_CIOT(template (present) B2_Type p_PNB := ?,
                                                                       template (present) B1_Type p_Value := ?) :=
  { /* 24.301 cl. 9.9.3.0B */
    /* @status    APPROVED (NBIOT) */
    iei       := 'F'H,                            // currently only used as TV
    pnb_CIOT  := p_PNB,
    signallingActiveFlag := ?,
    addUpdateTypeValue := p_Value
  };

  template (present) NAS_UL_Message_Type cr_CIOT_ATTACH_REQUEST(template AdditionalUpdateType p_AdditionalUpdateType) :=
  { /* 24.301 cl. 8.2.4 */
    /* @status    APPROVED (NBIOT) */
    aTTACH_REQUEST := {
      securityHeaderType       := tsc_SHT_NoSecurityProtection,
      protocolDiscriminator    := tsc_PD_EMM,
      messageType              := tsc_MT_AttachRequest,
      nasKeySetId              := cr_NAS_KeySetIdentifier(?, ?),
      epsAttachType            := cr_EPS_AttachType(tsc_EAttachType_EpsOnly),
      epsMobileIdentity        := cr_MobileIdAny,
      ueNetworkCapability      := cr_UENetworkCap_Any (omit),
      esmMessage               := cr_ESM_MessageContainer,
      oldPtmsiSignature        := cr_PTMSI_SignatureAny ifpresent,
      additionalGuti           := cr_MobileIdAny ('50'O) ifpresent,
      lastVisitedRegisteredTai := cr_TAI_Any ifpresent,
      drxParameter             := cr_DRXparameter_Any ('5C'O) ifpresent,
      msNetworkCapability      := cr_MS_NetworkCap_Any ifpresent,
      oldLai                   := cr_LAI_Any ifpresent,
      tmsiStatus               := cr_TMSI_Status ifpresent,
      msClassmark2             := cr_MS_Clsmk2_Any_tlv ifpresent,
      msClassmark3             := cr_MSCLSMK3_Any ifpresent,
      supportedCodecList       := cr_CodecListAny ifpresent,
      addUpdateType            := p_AdditionalUpdateType ifpresent, // @sic R5s180294 added ifpresent here as this is never added to the passed in parameter sic@
      voiceDomainPref          := cr_VoiceDomainPref_Any ifpresent,
      deviceProperties         := cr_DeviceProperties('D'H) ifpresent,  /* cl. 9.9.2.0A O TV 1 IEI=0xD- */
      oldGUTI_Type             := cr_GUTI_Type_Any ifpresent,  /* cl. 9.9.3.45 O TV 1 IEI=0xE- */
      msNetworkFeatureSupport  := cr_MS_NetworkFeatureSupport('C'H) ifpresent,  /* cl. 9.9.2.0A O TV 1 IEI=0xC- */
      tmsiBasedNRIContainer    := cr_NwkResourceIdAny ifpresent,
      t3324Value               := cr_GPRS_Timer2_3('6A'O) ifpresent,
      t3412ExtdValue           := cr_GPRS_Timer2_3 ('5E'O) ifpresent,
      extendedDRXParams        := cr_ExtdDRXParamsAny ifpresent,
      ueAddSecurityCap         := f_GetUE_AdditionalSecurityCapability(), // @sic R5s180271 Baseline Moving 2018 Phase 1 sic@
      ueStatus                 := cr_UEStatus_Any ifpresent,    /* cl. 9.9.3.54 O TLV 3    IEI=0x6D @sic R5s180552 Baseline Moving 2018 Phase 2 sic@ */
      addInfoReq               := cr_AdditionalInfoReqAny ifpresent     /* cl. 9.9.3.55 O TLV 2    IEI=0x17 @sic R5s180552 Baseline Moving 2018 Phase 2 sic@ */
    }
  };

  template (present) NAS_UL_Message_Type cdr_CIOT_ATTACH_REQUEST_WithIMSINoTai(template AdditionalUpdateType p_AdditionalUpdateType)
    modifies cr_CIOT_ATTACH_REQUEST :=
  { /* @status    APPROVED (NBIOT) */
    aTTACH_REQUEST := {
      nasKeySetId              := cr_NAS_KeySetIdentifier(tsc_NasKsi_NoKey, tsc_Spare1),
      epsMobileIdentity        := f_Imsi2MobileIdentity(px_IMSI_Def),
      lastVisitedRegisteredTai := omit
    }
  };

  template (present) NAS_UL_Message_Type cdr_CIOT_ATTACH_REQUEST_WithGuti(template AdditionalUpdateType p_AdditionalUpdateType,
                                                                          template (present) NAS_KsiValue p_KsiValue,
                                                                          template (present) MobileIdentity p_MobileId,
                                                                          template TrackingAreaId p_Tai)
    modifies cr_CIOT_ATTACH_REQUEST :=
  { /* @status    APPROVED (NBIOT) */
    aTTACH_REQUEST := {
      nasKeySetId              := cr_NAS_KeySetIdentifier(p_KsiValue, tsc_Spare1),
      epsMobileIdentity        := p_MobileId,
      lastVisitedRegisteredTai := p_Tai
    }
  };

  template (present) NAS_UL_Message_Type cr_CIOT_PDN_CONNECTIVITY_REQUEST(template (present) B3_Type p_RequestTypeValue,
                                                                          template (present) PdnTypeValue p_PDNTypeValue,
                                                                          template AccessPointName p_APN := cr_AccessPointName_Any ifpresent,
                                                                          template HeaderCompressConfig p_HeaderCompressConfig := cr_HeaderCompressConfigAny ifpresent,
                                                                          template ExtdProtocolConfigOptions p_ExtdProtocolConfigOptions := cr_ExtdPCOAny ifpresent) :=
  /* @status    APPROVED (NBIOT) */
    cr_PDN_CONNECTIVITY_REQUEST_Common ('0'H,
                                        ?,
                                        p_PDNTypeValue,
                                        p_RequestTypeValue,
                                        cr_ESMInfoTransferFlag_Any ifpresent,
                                        p_APN,
                                        *,//VZW NBIOT changed TO MATCH UE  
                                        -,
                                        -,
                                        p_HeaderCompressConfig,
                                        p_ExtdProtocolConfigOptions);

  template (value) NAS_DL_Message_Type cs_CIOT_ActivateDefEpsBearerContextRequest(EPS_BearerIdentity p_EpsBearerId,
                                                                                 template (value) ProcedureTransactionIdentifier p_ProcTi,
                                                                                 template (value) AccessPointName p_APN,
                                                                                 template (omit) PDN_Address p_Address,
                                                                                 template (omit) ExtdProtocolConfigOptions p_ExtdProtocolConfigOptions,
                                                                                 template (omit) ESM_Cause p_Cause := omit,
                                                                                 template (omit) BEARER_CONTEXT_TYPE p_BearerContextNumber := omit,
                                                                                 template (omit) NBIFOMContainer p_NBIFOMContainer := omit,
                                                                                 template (omit) HeaderCompressConfig p_HeaderCompressConfig := omit,
                                                                                 template (omit) ControlPlaneInd p_ControlPlaneInd := omit,
                                                                                 template (omit) ServingPLMNRateControl p_ServingPLMNRateControl := omit) :=
  /* @status    APPROVED (NBIOT) */
    cs_508_ActivateDefEpsBearerContextRequestAll(p_EpsBearerId,
                                                 p_ProcTi,
                                                 f_Get_508_EPSQoS(p_BearerContextNumber),
                                                 p_APN,
                                                 p_Address,
                                                 omit,
                                                 f_Get_508_NegotiatedQualityOfService(p_BearerContextNumber),
                                                 f_Get_508_NegotiatedLLCSAPI(p_BearerContextNumber),
                                                 f_Get_508_RadioPriority(p_BearerContextNumber),
                                                 omit,
                                                 omit,
                                                 p_Cause,
                                                 omit,
                                                 p_NBIFOMContainer,
                                                 p_HeaderCompressConfig,
                                                 p_ControlPlaneInd,
                                                 p_ExtdProtocolConfigOptions,
                                                 p_ServingPLMNRateControl,
                                                 omit // @sic R5s180271 Baseline Moving 2018 Phase 1 sic@
                                                 );

  template (present) NAS_UL_Message_Type cdr_CIOT_ActivateDefEpsBearerContextAccept(EPS_BearerIdentity p_EpsBearerId,
                                                                                    template (value) ProcedureTransactionIdentifier p_ProcTi := '00'O)
    modifies cr_ActivateDefEpsBearerContextAccept_Common :=
  { /* @status    APPROVED (NBIOT) */
    aCTIVATE_DEFAULT_EPS_BEARER_CONTEXT_ACCEPT := {
      protocolConfigurationOptions      := omit
    }
  };

  template (value) HeaderCompressConfig crs_HeaderCompressConfigZeros :=
  { /* 24.301 cl. 9.9.4.22 */
    /* @status    APPROVED (NBIOT) */
    iei                   := '66'O,
    iel                   := '03'O,
    spare                 := tsc_Spare1,
    profileP0x0104        := tsc_Spare1,
    profileP0x0103        := tsc_Spare1,
    profileP0x0102        := tsc_Spare1,
    profileP0x0006        := tsc_Spare1,
    profileP0x0004        := tsc_Spare1,
    profileP0x0003        := tsc_Spare1,
    profileP0x0002        := tsc_Spare1,
    maxCID                := '0000'O,
    addHeaderCompressContextSetupParamsType := omit, // @sic R5s170597 Baseline Moving sic@
    addHeaderCompressContextSetupParams   := omit    // @sic R5s170597 Baseline Moving sic@
  };

  template (value) APNRateControlParams cs_APNRateControlParams (B3_Type p_ULTimeUnit, O3_Type p_Rate):=
  { /* @status    APPROVED (LTE_A_PRO, NBIOT) */
    spare   := tsc_Spare4,
    aer     := '0'B,
    uplinkTimeUnit := p_ULTimeUnit,
    maxUplinkRate  := p_Rate
  };

  template (value) PDN_Address cs_PDN_Address_NonIP :=
  { /* @status    APPROVED (NBIOT) */
    iei        := omit, // @sic R5s180258 sic@
    iel        := '05'O, // @sic R5s180258 sic@
    spare      := tsc_Spare5,
    typeValue  := '101'B,
    adressInfo := int2oct(0, 4)
  };

  template (value) AdditionalUpdateResult cs_AdditionalUpdateResult_CP(B2_Type p_AddUpdateResultValue := '00'B) :=
  { /* @status    APPROVED (NBIOT) */
    /* 24.301 cl. 9.9.3.0A */
    // To be deleted when no longer used in 22.1.1.
    iei       := 'F'H,                            // currently only used as TV
    spareBits    := tsc_Spare2,                 // @sic R5s170597 Baseline Moving sic@
    addUpdateResultValue := p_AddUpdateResultValue
  };

  template (value) AdditionalUpdateResult cs_AdditionalUpdateResult_CP_SMS := cs_AdditionalUpdateResult_CP('10'B);   /* @status    APPROVED (NBIOT) */

  template (value) ControlPlaneInd cs_ControlPlaneInd :=
  { /* 24.301 cl. 9.9.4.23 */
    /* @status    APPROVED (ENDC, IMS, IMS_IRAT, LTE, LTE_A_IRAT, LTE_A_PRO, LTE_A_R10_R11, LTE_A_R12, LTE_IRAT, NBIOT, POS) */
    iei        := '9'H,
    spare      := tsc_Spare3,
    cpIndValue := '1'B
  };

  template (present) NAS_UL_Message_Type cdr_CIOT_Esm_Information_Response(template (present) ProcedureTransactionIdentifier p_ProcTi,
                                                                          template ExtdProtocolConfigOptions p_ExtdProtocolConfigOptions := cr_ExtdPCOAny ifpresent)
    modifies cr_508_Esm_Information_Response :=
  { /* @status    APPROVED (NBIOT) */
    eSM_INFORMATION_RESPONSE := {
      protocolConfigurationOptions := omit,
      extdProtocolConfigurationOptions  := p_ExtdProtocolConfigOptions
    }
  };

  template (value) NAS_DL_Message_Type cs_ESM_DUMMY_MESSAGE(ProcedureTransactionIdentifier p_PTI) :=
  { /* 24.301 cl. 8.3.12A */
    /* @status    APPROVED (NBIOT) */
    eSM_DUMMY_MESSAGE := {
      epsBearerId   := '0'H,                               /* cl. 9.3.2    M V 1/2 */
      protocolDiscriminator  := tsc_PD_ESM,                /* cl. 9.2      M V 1/2 */
      procedureTransactionIdentifier := p_PTI,             /* cl. 9.4      M V 1   */
      messageType   := tsc_MT_EsmDummyMessage              /* cl. 9.8      M V 1   */
    }
  };

  template (present) NAS_UL_Message_Type cr_ESM_DUMMY_MESSAGE :=
  { /* 24.301 cl. 8.3.12A */
    /* @status    APPROVED (NBIOT) */
    eSM_DUMMY_MESSAGE := {
      epsBearerId   := '0'H,                               /* cl. 9.3.2    M V 1/2 */
      protocolDiscriminator  := tsc_PD_ESM,                /* cl. 9.2      M V 1/2 */
      procedureTransactionIdentifier := ?,                 /* cl. 9.4      M V 1   */
      messageType   := tsc_MT_EsmDummyMessage              /* cl. 9.8      M V 1   */
    }
  };

  template (value) NAS_DL_Message_Type cs_ESM_DATA_TRANSPORT(EPS_BearerIdentity p_EPSBearerId,
                                                             ProcedureTransactionIdentifier p_PTI,
                                                             template (value) UserDataContainer p_Data,
                                                             template (omit) ReleaseAssistanceInd p_ReleaseAssistanceInd := omit) :=
  { /* @status    APPROVED (LTE_A_PRO, NBIOT) */
    eSM_DATA_TRANSPORT := {
      epsBearerId   := p_EPSBearerId,                      /* cl. 9.3.2    M V 1/2 */
      protocolDiscriminator  := tsc_PD_ESM,                /* cl. 9.2      M V 1/2 */
      procedureTransactionIdentifier := p_PTI,             /* cl. 9.4      M V 1   */
      messageType   := tsc_MT_EsmDataTransport,            /* cl. 9.8      M V 1   */
      userDatacontainer := p_Data,                         /* cl. 9.9.4.24 M LV-E 2-n octets */
      releaseAssistanceInd    := p_ReleaseAssistanceInd    /* cl. 9.9.4.25 O TV 1 IEI=0xF- */
    }
  };

  template (present) ReleaseAssistanceInd cr_ReleaseAssistanceInd (template (present) B2_Type p_DLData := ?) :=
  { /* 24.301 cl. 9.9.4.25 */
    /* @status    APPROVED (LTE_A_PRO, NBIOT) */
    iei             := 'F'H,
    spare           := tsc_Spare2,
    dlDataExpected  := p_DLData
  };

  template (present) NAS_UL_Message_Type cr_ESM_DATA_TRANSPORT(template (present) EPS_BearerIdentity p_EPSBearerId,
                                                               template (present) UserDataContainer p_Data,
                                                               template ReleaseAssistanceInd p_ReleaseAssistanceInd := cr_ReleaseAssistanceInd ifpresent) := // @sic R5s170288 sic@
  {  /* @status    APPROVED (LTE_A_PRO, NBIOT) */
    eSM_DATA_TRANSPORT := {
      epsBearerId   := p_EPSBearerId,                      /* cl. 9.3.2    M V 1/2 */
      protocolDiscriminator  := tsc_PD_ESM,                /* cl. 9.2      M V 1/2 */
      procedureTransactionIdentifier := ?,                 /* cl. 9.4      M V 1   */
      messageType   := tsc_MT_EsmDataTransport,            /* cl. 9.8      M V 1   */
      userDatacontainer := p_Data,                         /* cl. 9.9.4.24 M LV-E 2-n octets */
      releaseAssistanceInd    := p_ReleaseAssistanceInd    /* cl. 9.9.4.25 O TV 1 IEI=0xF- */
    }
  };

  template (value) UserDataContainer cs_UserDataContainer(template (value) octetstring p_Data) :=
  { /* 24.301 cl. 9.9.4.24 */
     /* @status    APPROVED (LTE_A_PRO, NBIOT) */
    iei    := omit,
    iel    := int2oct(lengthof(p_Data), 2),
    dataContainer := p_Data
  };

  template (present) UserDataContainer cr_UserDataContainer(template (present) Type6Length_Type p_Len := ?,
                                                            template (present) octetstring p_Data := ?) :=
  { /* 24.301 cl. 9.9.4.24 */
    /* @status    APPROVED (LTE_A_PRO, NBIOT) */
    iei    := omit,
    iel    := p_Len,
    dataContainer := p_Data
  };

  template (present) ControlPlaneServiceType cr_CPServiceType(template (present) B1_Type p_ActiveFlag := '0'B,
                                                        template (present) B3_Type p_CPServiceType := ?) :=
  { /* 24.301 cl. 9.9.3.47 */
    /* @status    APPROVED (LTE_A_PRO, NBIOT) */
    iei                         := omit,
    activeFlag                  := p_ActiveFlag,
    controlPlaneServiceType     := p_CPServiceType // @sic R5s170597 Baseline Moving sic@
  };

  template (present) NAS_UL_Message_Type  cr_CONTROL_PLANE_SERVICE_REQUEST(template (present) NAS_KsiValue p_KsiValue,
                                                                            template (present) ControlPlaneServiceType p_CPServiceType := cr_CPServiceType,
                                                                            template NAS_MessageContainer p_NASMsg := omit,
                                                                            template EPS_BearerContextStatus p_EPS_BearerContextStatus := cr_508_EPS_BearerContextStatusTAUReq ifpresent,
                                                                            template DeviceProperties p_DeviceProperties := cr_DeviceProperties('D'H) ifpresent) :=
  { // 24.301 cl. 8.2.33
    /* @status    APPROVED (LTE_A_PRO, NBIOT) */
    cONTROL_PLANE_SERVICE_REQUEST := {
      securityHeaderType        := tsc_SHT_NoSecurityProtection,                /* cl. 9.3.1    M V 1/2 */
      protocolDiscriminator     := tsc_PD_EMM,                                  /* cl. 9.2      M V 1/2 */
      messageType               := tsc_MT_ControlPlaneServiceRequest,           /* cl. 9.8      M V 1   */
      nasKeySetId               := cr_NAS_KeySetIdentifier (p_KsiValue, tsc_NasKsi_NativeSecurityContext),  /* cl. 9.9.3.21 M V 1/2 */
      controlPlaneServiceType   := p_CPServiceType,                           /* cl. 9.9.3.47 M V 1/2 */
      esmMessage                := cr_ESM_MessageContainer ifpresent,           /* cl. 9.9.3.15 O TLV-E 3-n IEI = 78 @sic R5s170032 sic@ */
      nasMessage                := p_NASMsg,                                    /* cl. 9.9.3.22 O TLV 4-253 IEI = 67 */
      epsBearerContextStatus    := p_EPS_BearerContextStatus,                   /* cl. 9.9.2.1  O TLV 4    IEI=0x57*/
      deviceProperties          := p_DeviceProperties                           /* cl. 9.9.2.0A O TV 1 IEI=0xD- */
    }
  };

  template (value) NAS_DL_Message_Type cs_SERVICE_ACCEPT(template (omit) EPS_BearerContextStatus p_EPS_BearerContextStatus := omit) :=
  { /* 24.301 cl. 8.2.34 */
    /* @status    APPROVED (LTE_A_PRO, NBIOT) */
    sERVICE_ACCEPT := {
      securityHeaderType       := tsc_SHT_NoSecurityProtection,
      protocolDiscriminator    := tsc_PD_EMM,
      messageType              := tsc_MT_ServiceAccept,                            /* cl. 9.8      M V 1   */
      epsBearerContextStatus   := p_EPS_BearerContextStatus,   /* cl. 9.9.2.1  O TLV 4    IEI=0x57 */
      t3448                    := omit    /* cl. 9.9.3.16A O TLV 3    IEI=0x6B @sic R5s170597 Baseline Moving sic@ */
    }
  };

  /*
   * @desc      PDN Address TS 24.301 clause 9.9.4.9 (TV version IEI is omit)
   * @param     p_AssignedPdnType
   * @param     p_IPv4AllocationViaNas
   * @param     p_PdnIndex          (default value: PDN_1)
   * @param     p_PDN_TypeToBeUsed  (default value: pdnTypeAsSupportedByUE)
   * @return    template (value) PDN_Address
   * @status    APPROVED (NBIOT)
   */
  function f_CIOT_GetPDNAddress(B3_Type p_AssignedPdnType, // @sic R5s170597 sic@
                                 boolean p_IPv4AllocationViaNas,
                                 PDN_Index_Type p_PdnIndex := PDN_1,
                                 PDN_TypeToBeUsed_Type p_PDN_TypeToBeUsed := pdnTypeAsSupportedByUE) return template (value) PDN_Address
  { /* @sic R5-171559: p_PdnIndex, p_PDN_TypeToBeUsed sic@ */
    var template (value) PDN_Address v_PDN_Address;
    if (match (p_AssignedPdnType, '101'B)) { // @sic R5s170597 sic@
      v_PDN_Address := cs_PDN_Address_NonIP;
    } else {
      v_PDN_Address := f_EUTRA_NB_GetPDNAddress(p_IPv4AllocationViaNas, p_PdnIndex, p_PDN_TypeToBeUsed);
    }
    return v_PDN_Address;
  }

   function f_CIOT_GetPDNAddress2(B3_Type p_AssignedPdnType, // @sic R5s170597 sic@
                                 boolean p_IPv4AllocationViaNas,
                                 PDN_Index_Type p_PdnIndex := PDN_2,
                                 PDN_TypeToBeUsed_Type p_PDN_TypeToBeUsed := pdnTypeAsSupportedByUE) return template (value) PDN_Address
  { /* @sic R5-171559: p_PdnIndex, p_PDN_TypeToBeUsed sic@ */
    var template (value) PDN_Address v_PDN_Address;
    if (match (p_AssignedPdnType, '101'B)) { // @sic R5s170597 sic@
      v_PDN_Address := cs_PDN_Address_NonIP;
    } else {
      v_PDN_Address := f_EUTRA_NB_GetPDNAddress(p_IPv4AllocationViaNas, p_PdnIndex, p_PDN_TypeToBeUsed);
    }
    return v_PDN_Address;
  }
  
     function f_NBIOT_GetPDNAddress_IMSLess(boolean p_IPv4AllocationViaNas,
                                 PDN_Index_Type p_PdnIndex := PDN_1,
								 integer typePdn) runs on NBIOT_PTC return PDN_Address
  {
    var PDN_TypeToBeUsed_Type v_PDN_TypeToBeUsed;
    var PDN_Address v_PDN_Address;
    var B3_Type v_TypeValue; 
    //For Imsless cases, Network has to assign ipv6 address forcefully
   
      v_PDN_TypeToBeUsed := forceIPv6only;
   
    v_PDN_Address := f_EUTRA_NB_GetPDNAddress(p_IPv4AllocationViaNas, p_PdnIndex, v_PDN_TypeToBeUsed);
    v_TypeValue := v_PDN_Address.typeValue;

      vc_NBIOT_Global.MobileInfo.PDNs[0].assignedPdnType := v_TypeValue;

    return v_PDN_Address;
  }
    
  /*
   * @desc      Function used to check whether the UE requests a P-CSCF address or DNS server address in its PCO
   *            If the UE does not support IMS, or doesn't request a P-CSCF address, the function returns the default PCO, PPP
   * @param     p_ConfigOptionsRX
   * @param     p_IgnoreIM_CN_SubsystemSignalingFlag (default value: true)
   * @return    template (omit) NAS_ExtdProtocolConfigOptions_Type
   * @status    APPROVED (NBIOT)
   */
  function f_NAS_GetExtdProtocolConfigOptionList(NAS_ExtdProtocolConfigOptions_Type p_ConfigOptionsRX,
                                                 boolean p_IgnoreIM_CN_SubsystemSignalingFlag := true)
    return template (omit) NAS_ExtdProtocolConfigOptions_Type
  { /* @sic R5s170515 change 1: "template (omit)" for return type sic@ */
    var PDN_AddressInfo_Type v_PDN_AddressInfo := f_PDN_AddressInfo_Get(PDN_1);
    var template (omit) NAS_ExtdProtocolConfigOptions_Type v_ProtocolContainerList := omit;
    var integer v_PcoCnt := 0;
    var O2_Type v_ProtocolId;
    var octetstring v_Contents;
    var integer i;
    
    for (i := 0; i < lengthof(p_ConfigOptionsRX); i := i + 1) {
      
      v_ProtocolId := p_ConfigOptionsRX[i].protocolID;
      v_Contents := ''O;
      
      select (v_ProtocolId) {  // See 24.008 Table 10.5.154
        case ('0002'O) {            // IM CN Subsystem Signalling Flag, reply with an empty container
          if (not p_IgnoreIM_CN_SubsystemSignalingFlag) {
            v_ProtocolContainerList[v_PcoCnt] := cs_ProtocolContainer_Common(v_ProtocolId);
            v_PcoCnt := v_PcoCnt + 1;
            continue;
          }
        }
        case ('0003'O) {       // DNS Server IPv6 address
          v_Contents := f_Convert_IPv6Addr2OctString(v_PDN_AddressInfo.DNS_ServerAddressIPv6);
        }
        case ('000D'O) {       // DNS Server IPv4 address
          v_Contents := f_Convert_IPv4Addr2OctString(v_PDN_AddressInfo.DNS_ServerAddressIPv4);
        }
      }
      
      if (lengthof(v_Contents) > 0) {
        v_ProtocolContainerList[v_PcoCnt] := cs_ProtocolContainer(v_ProtocolId, v_Contents);
        v_PcoCnt := v_PcoCnt + 1;
      }
    }
    return v_ProtocolContainerList;
  }

  /*
   * @desc      wrapper for f_GetDefaultProtocolConfigOptionList
   * @param     p_Pco
   * @return    template (value) ExtdProtocolConfigOptions
   * @status    APPROVED (NBIOT)
   */
  function f_GetDefaultExtdProtocolConfigOptions(template (omit) ExtdProtocolConfigOptions p_Pco) return template (value) ExtdProtocolConfigOptions
  {
    var template (omit) NAS_ExtdProtocolConfigOptions_Type v_ProtocolContainerList := omit;  // @sic R5s170233 sic@
    var ExtdProtocolConfigOptions v_ProtocolConfigOptionsRX;
    
    if (isvalue(p_Pco)) {
      v_ProtocolConfigOptionsRX := valueof(p_Pco);
      if (ispresent(p_Pco.pco)) { // @sic R5s170233 sic@
        v_ProtocolContainerList := f_NAS_GetExtdProtocolConfigOptionList(v_ProtocolConfigOptionsRX.pco);
      }
    }
    
    return f_NAS_ExtdProtocolConfigOptionsTX(v_ProtocolContainerList);
  }

  /*
   * @desc      Common function to build up ProtocolConfigOptions
   * @param     p_ProtocolContainers
   * @return    template (value) ExtdProtocolConfigOptions
   * @status    APPROVED (LTE_A_PRO, NBIOT)
   */
  function f_NAS_ExtdProtocolConfigOptionsTX(template (omit) NAS_ExtdProtocolConfigOptions_Type  p_ProtocolContainers) return template (value) ExtdProtocolConfigOptions
  {
    var integer v_Length := 1;   // there are at least ext, spare, configProtocol
    var integer i;

    if (isvalue(p_ProtocolContainers)) { // @sic R5s170233 sic@
      for (i:=0; i < lengthof(p_ProtocolContainers); i:=i+1) {
        v_Length := v_Length + oct2int(valueof(p_ProtocolContainers[i].protocolLength)) + 3; // 2 octets for protocolID and 1 octet for protocolLength
      }
    }
    return cs_ExtdPCO(int2oct(v_Length, 2), p_ProtocolContainers);
  }

}
