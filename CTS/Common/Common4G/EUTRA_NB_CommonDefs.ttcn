/******************************************************************************/
// @copyright   Copyright Notification
//   No part may be reproduced except as authorized by written permission.
//   The copyright and the foregoing restriction extend to reproduction in all media.
//   Trademark 2019, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).
//   All rights reserved.
// @version: 36.523-3 v15.3.0
// $Date: 2018-09-10 13:28:12 +0200 (Mon, 10 Sep 2018) $
// $Rev: 22309 $
/******************************************************************************/

module EUTRA_NB_CommonDefs {
  import from CommonDefs all;
  import from CommonAspDefs all;
  import from EUTRA_RRC_ASN1_Definitions language "ASN.1:2002" all with {encode "UNALIGNED_PER_OctetAligned"};
  // !! Note: Only types included in NBIOT_Imported_EUTRA_ASN1_Types should be referenced in this file

  group Common_Types {

  type enumerated EUTRA_RRC_STATE_Type {RRC_IDLE, RRC_CONNECTED};
  type enumerated IDLEUPDATED_Type {PREAMBLE, NORMAL};
  type enumerated EUTRA_NAS_NumOfPLMN_Type {LTE_AllCellsOnSamePLMN, LTE_CellsOnDifferentPLMN};

  type enumerated PDN_TypeToBeUsed_Type { forceIPv4only, forceIPv6only, pdnTypeAsSupportedByUE };
  
  type enumerated EUTRA_NAS_CellSpecialFreq {
    LTE_NAS_NormalFreq,
    LTE_NAS_Usef1_f2,     // LTE NAS test case using f1/f2 instead of f3/f4. See 36.508 Table 6.3.2.2-3 Note 1
    LTE_NAS_Replacef3_f1, // LTE NAS test case: replace f3 by f1
    LTE_NAS_Replacef4_f1,  // LTE NAS test case: replace f4 by f1
    LTE_NAS_Replacef3_f2  // LTE NAS test case: replace f3 by f2
  };
  
  type record GutiParameters_Type {
    PLMN_Identity     PLMN_Identity,
    MME_GroupId_Type  MME_GroupId,
    MMEC              MME_Code,
    M_TMSI_Type       M_TMSI
  };

  type record NAS_Parameter_Type {
    GutiParameters_Type                 Guti_Parameters,             // Guti parameters: MME groupId, MME code, M_TMSI
    TrackingAreaCode                    TrackingAreaCode,            // TAC applied in the cell
    O2_Type                             LocationAreaCode             // Location Area Id, to be used in combined procedures and CS fallback
  };
   
  type integer LogicalChannelId_Type (0..10);           /* acc. TS 36.331, clause 6.3.2 and clause 6.7.3.2 for DRBs DTCH-LogicalChannelIdentity is INTEGER (3..10);
                                                         * additionally we have 0..2 for the SRBs */

  type integer HarqProcessId_Type (0..14);                              /* The values 0..7 represent the ID of HARQ process ID; value range 0..14 is for TDD */
  type bitstring ContentionResolutionId_Type length(48);                /* used in EUTRA_ASP_DrbDefs and EUTRA_ASP_Typedefs */
   
  // Reference Cell Power
  type integer AbsoluteCellPower_Type (-150..0);        /* absolute cell power (dBm) */
  
  type record CellCarrierFreqEUTRA_Type { //@sic R5-165892 Band extension sic@
    ARFCN_ValueEUTRA        dl_CarrierFreq,                 // INTEGER (0..maxEARFCN)
    ARFCN_ValueEUTRA        ul_CarrierFreq      optional,   // INTEGER (0..maxEARFCN)
    ARFCN_ValueEUTRA_v9e0   dl_CarrierFreq_v9e0 optional,   // extension used for band>64 INTEGER (maxEARFCN-Plus1..maxEARFCN2)
    ARFCN_ValueEUTRA_v9e0   ul_CarrierFreq_v9e0 optional,   // extension used for band>64 INTEGER (maxEARFCN-Plus1..maxEARFCN2)
    ARFCN_ValueEUTRA_r9     dl_CarrierFreq_r9,              // INTEGER (0..maxEARFCN2)
    ARFCN_ValueEUTRA_r9     ul_CarrierFreq_r9   optional    // INTEGER (0..maxEARFCN2)
  };
  } // End group Common_Types
  
  //----------------------------------------------------------------------------
  
  group Common_Constants {
  
  const RRC_TransactionIdentifier   tsc_RRC_TI_Def := 0;        /* considering UMTS there seems to be no reason to use a constant for the RRC-TI */

  const SubFrameNumber_Type         tsc_EUTRA_SN4 := 4;
  const SubFrameNumber_Type         tsc_EUTRA_SN8 := 8;
  
  const M_TMSI_Type tsc_M_TMSI1 := oct2bit('C2345678'O);

  template (value) PLMN_Identity cs_HPLMN_Def :=     { mcc := {3,1,1},  mnc :={4,8,0} };
 // template (value) PLMN_Identity cs_HPLMN_Def :=     { mcc := {0,0,1},  mnc :={0,1} };
  template (value) PLMN_Identity cs_HPLMN_002_11 :=  { mcc := {0,0,2},  mnc :={1,1} };
  template (value) PLMN_Identity cs_HPLMN_003_21 :=  { mcc := {0,0,3},  mnc :={2,1} };
  template (value) PLMN_Identity cs_HPLMN_004_31 :=  { mcc := {0,0,4},  mnc :={3,1} };
  template (value) PLMN_Identity cs_HPLMN_001_02 :=  { mcc := {0,0,1},  mnc :={0,2} };
  template (value) PLMN_Identity cs_HPLMN_001_03 := { mcc := {0,0,1},  mnc :={0,3} };
  template (value) PLMN_Identity cs_HPLMN_002_101 := { mcc := {0,0,2},  mnc :={1,0,1} };
  template (value) PLMN_Identity cs_HPLMN_003_101 := { mcc := {0,0,3},  mnc :={1,0,1} };
  template (value) PLMN_Identity cs_HPLMN_001_11 := { mcc := {0,0,1},  mnc :={1,1} };
  template (value) PLMN_Identity cs_HPLMN_001_21 := { mcc := {0,0,1},  mnc :={2,1} };
  template (value) PLMN_Identity cs_HPLMN_001_31 := { mcc := {0,0,1},  mnc :={3,1} };
  template (value) PLMN_Identity cs_HPLMN_001_12 :=  { mcc := {0,0,1},  mnc :={1,2} };

  //below template Added as part of Data-Retry
  template (value) PLMN_Identity cs_HPLMN_311_480 := { mcc := {3,1,1},  mnc :={4,8,0} }; // Y1=Home PLMN
  template (value) PLMN_Identity cs_RPLMN_311_479 := { mcc := {3,1,1},  mnc :={4,7,9} }; // Y2
  template (value) PLMN_Identity cs_RPLMN_311_478 := { mcc := {3,1,1},  mnc :={4,7,8} }; // Y3
  template (value) PLMN_Identity cs_HPLMN_311_481 := { mcc := {3,1,1},  mnc :={4,8,1} }; // Y4
  //template (value) PLMN_Identity cs_HPLMN_405_872 := { mcc := {4,0,5},  mnc :={8,7,2} }; // Y4
  //PLMN List for Data retry test cases   
  template (value) PLMN_Identity Y1 := { mcc := {3,1,1},  mnc :={4,8,0} };  
  template (value) PLMN_Identity Y2 := { mcc := {3,1,1},  mnc :={4,7,9} }; 
  template (value) PLMN_Identity Y3 := { mcc := {3,1,1},  mnc :={4,7,8} };
  template (value) PLMN_Identity Y4 := { mcc := {3,1,1},  mnc :={4,8,1} };
  template (value) PLMN_Identity Y5 := { mcc := {3,1,1},  mnc :={4,7,7} };     
      
  const AbsoluteCellPower_Type tsc_ServingCellRS_EPRE := -85;
  const AbsoluteCellPower_Type tsc_SuitableCellRS_EPRE := -97;
  const AbsoluteCellPower_Type tsc_NonSuitableCellRS_EPRE := -115;
  const AbsoluteCellPower_Type tsc_NonSuitableNBIOTCellRS_EPRE := -120;
  const AbsoluteCellPower_Type tsc_NonSuitableOffCellRS_EPRE := -145;
  const AbsoluteCellPower_Type tsc_NonSuitableOffNBIOTCellRS_EPRE := -150;
  const AbsoluteCellPower_Type tsc_Suitable_NeighbourIntraFreq_CellRS_EPRE := -91;
  const AbsoluteCellPower_Type tsc_CellRS_EPRE_65 := -65;

  template (value) GutiParameters_Type cs_Guti(template (value) PLMN_Identity p_PLMN,
                                               integer p_MmeGroupId,
                                               integer p_MmeCode) :=
  {
    PLMN_Identity := p_PLMN,
    MME_GroupId := int2bit(p_MmeGroupId, 16),
    MME_Code := int2bit(p_MmeCode, 8),
    M_TMSI := tsc_M_TMSI1
  };
  } // End group Common_Constants
  
  //----------------------------------------------------------------------------
  
  group RRC_Nested_Types {

  
  type S_TMSI.m_TMSI                                                            M_TMSI_Type;
  type RegisteredMME.mmegi                                                      MME_GroupId_Type;
  type SecurityAlgorithmConfig.integrityProtAlgorithm                           IntegrityProtAlgorithm_Type;
  type PhysCellIdRange.range                                                    PhysCellIdRange_Type;
  type CarrierBandwidthEUTRA.dl_Bandwidth                                       Dl_Bandwidth_Type;
  type CarrierBandwidthEUTRA.ul_Bandwidth                                       Ul_Bandwidth_Type;
  } // End group RRC_Nested_Types

  //----------------------------------------------------------------------------

  group ASP_CommonPart {
  /* Definition of ASP common parts for REQ-, CNF- and IND-ASPs */

  //----------------------------------------------------------------------------

  group ASP_CommonPart_Definitions {
  
  group Routing_Info {

  const integer tsc_SRB0_LogicalChannelPriority := 1;
  const integer tsc_SRB1_LogicalChannelPriority := 1;
      
 

  const DRB_Identity tsc_DRB1 := 1;
  const DRB_Identity tsc_DRB2 := 2;

  type record of DRB_Identity DRB_IdentityList_Type;
  
  const DRB_IdentityList_Type tsc_DrbList_Def := {tsc_DRB1};

 
  } // End sub-group Routing_Info
  
  } // End sub-group ASP_CommonPart_Definitions
  
  //----------------------------------------------------------------------------
  
  } // End group ASP_CommonPart
  
  group L2Data_CommonDefs {         /* Common definitions of L2 control elements used in L2 messages (EUTRA_NB_ASP_L2DataDefs) as well as for SS configuration (EUTRA_ASP_TypeDefs) */

  type  record  ScellBitMap_Type {
    B7_Type     Value,           /* 7 MSB bits the C Fields C7 to C1. 1 => the corresponding Scell is Active 0 => Inactive */
    B1_Type     Reserved         /* LSBit Reserved. Shall be set to 0 */
  };
  
  type ScellBitMap_Type   MAC_CTRL_ScellActDeact_Type; /* 36.321 clause 6.1.3.8 */
  
  type record PH_Record_Type {                  /* 36.321 clause 6.1.3.6a */
    B1_Type     P_Bit,                          /* P bit: 1 indicates the UE applies power backoff due to power management */
    B1_Type     V_Bit,                          /* V bit: Indicates if  the PH value is based on a real transmission or a reference format.
                                                 * For Type 1 PH, V=0 indicates real transmission on PUSCH and V=1 indicates that a PUSCH reference format is used */
    B6_Type     Valve,                          /* The power headroom level. Ph Type 2 (if configured) for Pcell and Type 1 for Pcell and Scell */
    B2_Type     Reserved optional,              /* 2 reservid bits. Present if V=1 */
    B6_Type     PCMaxc   optional               /* Present if V=1 */
  };
  
  type record length(1..9) of PH_Record_Type  PH_RecordList_Type;       /* If simultaneousPUCCH-PUSCH is not configured at least oneType 1 PH record for  Pcell is present.
                                                                         * Additional one record per Scell for which respective 'C' bit is set as 1.
                                                                         * If simultaneousPUCCH-PUSCH is configured then one PH Type 2 record for P cell followed by PH Type 1 record for P cell is present.
                                                                         * Additional one record per Scell for which respective 'C' bit is set as 1 */
  
  type record MAC_CTRL_ExtPowerHeadRoom_Type {
    ScellBitMap_Type    EPH_Octet1,
    PH_RecordList_Type  PH_RecordList           /* At least one record for Pcell is present.
                                                 * Additional one record per Scell for which respective 'C' bit is set as 1 */
  };
  
  type record length(1..10) of  PH_Record_Type  DC_PH_RecordList_Type;  /* If simultaneousPUCCH-PUSCH is not configured at least oneType 1 PH record for  Pcell is present.
                                                                         * Additional one record per PScell/Scell for which respective 'C' bit is set as 1.
                                                                         * If simultaneousPUCCH-PUSCH is configured then one PH Type 2 record for Pcell followed one PH Type 2 record for PScell followed by PH Type 1 record for Pcell is present.
                                                                         * Additional one record per PSCell/Scell for which respective 'C' bit is set as 1 */
  
  type record MAC_CTRL_DC_PowerHeadRoom_Type {
    ScellBitMap_Type        DC_PH_Octet1,
    DC_PH_RecordList_Type  DC_PH_RecordList           /* At least one record for Pcell is present.
                                                       * Additional one record per PScell/Scell for which respective 'C' bit is set as 1 */
  };

  }
  //----------------------------------------------------------------------------
  group Paging_Types {
  type integer TEDRX_CycleParameters[16];
  type float PTWLengthParameters[16];
  
  const integer tsc_SfnDelay := 13;     /* tsc_SfnDelay: Delay for calculation of the next paging frame.
                                         * Value set to 10+3 to give a minimum of 100ms (Ref: 36-523-3 cl. 7.3) to allow SS to configure the PAGING
                                         * and also to calculate for possible delay in SS & TTCN (30ms). */
  
  // Table 10.5.5.32/3GPP TS 24.008: Extended DRX parameters information element
  
  const TEDRX_CycleParameters tsc_TEDRX_CycleParameters := { 1, 1, 2, 4, 6, 8, 10, 12, 14, 16, 32, 64, 128, 256, 512, 1024 };
  
  external function fx_CalculateFCS32 (bitstring p_TMSI) return B32_Type;  /* Cyclic Redundancy Check calculation according to ITU-T Recommendation V.42 of CRC-32 Algorithm @sic R5-172046 sic@ */
  /*
   * @desc      Paging calculations on eDRX acc. to TS 36.304 cl 7.3
   * @param     p_Sfn
   * @param     p_HSFN
   * @param     p_EDRXValue
   * @param     p_H_UE_ID
   * @return    integer
   */
   function f_EUTRA_NB_Calculate_FirstPagingHSFN(SystemFrameNumber_Type  p_Sfn,
                                    SystemFrameNumber_Type  p_HSFN,
                                    integer                 p_EDRXValue,
                                    integer                 p_H_UE_ID) return integer
   {
    var integer v_FirstPagingHSFN;
    var integer v_NextHSFN := ((p_HSFN + (p_Sfn + tsc_SfnDelay)/1024) mod 1024);
    var integer v_HsfnModT;
    var integer v_TeDRX := p_EDRXValue;

    //Calculate next available PH based on v_NextHsfn and HSFN mod T = (UE_ID mod TeDRX)
    v_HsfnModT := p_H_UE_ID mod v_TeDRX; //Operands of 'mod' operation have to be integer value

    if ((v_NextHSFN mod v_TeDRX) < v_HsfnModT) { // @sic R5s170280 Ch. 2 sic@
        v_FirstPagingHSFN  := (v_NextHSFN + (v_HsfnModT - (v_NextHSFN mod v_TeDRX))) mod 1024;
    }
    else if ((v_NextHSFN mod v_TeDRX) > v_HsfnModT){
       v_FirstPagingHSFN  := ((v_NextHSFN - ((v_NextHSFN mod v_TeDRX) - (p_H_UE_ID mod v_TeDRX)))+  v_TeDRX )mod 1024;
    }
    else{
      v_FirstPagingHSFN  := (v_NextHSFN + v_TeDRX ) mod 1024;
    }

    return v_FirstPagingHSFN;
   }
  }
    
    group SC_PTM_Types
    {
        type record SC_MRB_Identity_Type {
            MBMSSessionInfo_r13 MbmsSessionInfo
        }
    }
}
