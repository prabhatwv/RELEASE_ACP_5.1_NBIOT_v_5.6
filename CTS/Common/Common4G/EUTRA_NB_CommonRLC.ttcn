/******************************************************************************/
// @copyright   Copyright Notification
//   No part may be reproduced except as authorized by written permission.
//   The copyright and the foregoing restriction extend to reproduction in all media.
//   Trademark 2019, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).
//   All rights reserved.
// @version: 36.523-3 v15.3.0
// $Date: 2018-12-05 17:01:06 +0100 (Wed, 05 Dec 2018) $
// $Rev: 23421 $
/******************************************************************************/
module EUTRA_NB_CommonRLC {

  import from CommonAspDefs all;
  import from CommonDefs all;
  import from EUTRA_NB_ASP_L2DataDefs all;
  import from EUTRA_NB_CommonL2 all;
  import from L2_Common4G5G all;

  const B1_Type tsc_E2_NoSO_Follows := '0'B;              /* @desc     Value to indicate that a set of SOstart and SOend does not follow for this NACK_SN.
                                                           *           Ref 3G TS 36.322 clause 6.2.2.17
                                                           * @status    APPROVED (LTE, NBIOT) */

  const B1_Type tsc_E2_SO_Follows := '1'B;                /* @desc     Value to indicate that a set of SOstart and SOend follows for this NACK_SN.
                                                           *           Ref 3G TS 36.322 clause 6.2.2.17
                                                           * @status    APPROVED (LTE, NBIOT) */

  const integer tsc_LI11_Size := 11;                      /* @desc     Length indicator size. Ref 3G TS 36.322 clause 6.2.2.5
                                                           * @status    APPROVED (LTE, LTE_A_R10_R11, LTE_A_R12, NBIOT) */

  const integer tsc_NACK_SN_Size := 10;                   /* @desc     The number of bits used to represent a NACK_SN sequence number.
                                                           *           Ref 3G TS 36.322 clause 6.2.2.16.
                                                           * @status    APPROVED (LTE, NBIOT) */

  const integer tsc_AM_SO_Size := 15;                     /* @desc     The number of bits used to represent a SO Segment Offset.
                                                           *           Ref 3G TS 36.322 clause 6.2.2.7, 6.2.2.18, 6.2.2.19.
                                                           * @status    APPROVED (LTE, NBIOT) */

  const B15_Type tsc_SO_Special := '111111111111111'B;    /* @desc     Value to indicate that the missing portion of the AMD PDU
                                                           *           includes all bytes to the last byte of the AMD PDU.
                                                           *           Ref 3G TS 36.322 clause 6.2.2.19
                                                           * @status    APPROVED (LTE, NBIOT) */

  const B1_Type tsc_E_BitAndLI := '1'B;                   /* @desc     Value for ExtBit in UMDPDU/AMDPDU/AMDPDUsegment when the next
                                                           *           fields are E field and LI field.
                                                           *           Ref 3G TS 36.322 clause 6.2.2.4
                                                           * @status    APPROVED (LTE, NBIOT) */

  const B1_Type tsc_P_NoPoll := '0'B;                     /* @desc     Value for PollingBit field within an AMDPDU/AMDPDUsegment
                                                           *           indicating that a status report is not requested.
                                                           *           Ref 3G TS 36.322 clause 6.2.2.11
                                                           * @status    APPROVED (LTE, NBIOT) */

  const B1_Type tsc_P_Poll := '1'B;                       /* @desc     Value for PollingBit field within an AMDPDU/AMDPDUsegment
                                                           *           indicating that a status report is requested.
                                                           *           Ref 3G TS 36.322 clause 6.2.2.11
                                                           * @status    APPROVED (LTE, NBIOT) */

  const boolean tsc_NoLI_Error := false;                  /* @desc     indication that no RLC LI error is to be generated
                                                           * @status    APPROVED (LTE, NBIOT)*/

  const integer tsc_AM_Window_Size := 512;                /* @desc     AM window size. Ref 3G TS 36.322 clause 7.2 a
                                                           * @status    APPROVED (LTE, NBIOT) */

  template (value) RLC_Status_SegOffset_Type cs_Status_SO(B15_Type p_SOstart,
                                                          B15_Type p_SOend) :=
  { /* @status    APPROVED (LTE, NBIOT) */
    Start := p_SOstart,
    End := p_SOend
  };

  template (value) RLC_Status_NACK_Type cs_RLC_Status_NACK (integer p_NACK_SN,
                                                            B1_Type  p_Extn1,
                                                            B1_Type  p_Extn2,
                                                            template (omit) RLC_Status_SegOffset_Type p_Status_SO) :=
  { /* @status    APPROVED (LTE, NBIOT) */
    NACK_SN := int2bit(p_NACK_SN, tsc_NACK_SN_Size),
    Extn1  :=  p_Extn1,
    Extn2  :=  p_Extn2,
    SO := p_Status_SO
  };

  template (value) RLC_Status_NACK_List_Type cs_NACK_List(integer p_NACK_SN,
                                                          B1_Type p_Extn2,
                                                          template (omit) RLC_Status_SegOffset_Type p_Status_SO) :=
  { /* @status    APPROVED (LTE, NBIOT) */
    cs_RLC_Status_NACK(p_NACK_SN, tsc_E1_NoNACK_Follows, p_Extn2, p_Status_SO)
  };

  template (present) RLC_Status_NACK_Type cr_RLC_Status_NACK (integer p_NACK_SN,
                                                              B1_Type  p_Extn1,
                                                              B1_Type  p_Extn2,
                                                              template (omit) RLC_Status_SegOffset_Type p_Status_SO) :=
  { /* @status    APPROVED (LTE, NBIOT) */
    NACK_SN := int2bit(p_NACK_SN, tsc_NACK_SN_Size),
    Extn1  :=  p_Extn1,
    Extn2  :=  p_Extn2,
    SO := p_Status_SO
  };

  template (present) RLC_Status_NACK_List_Type cr_NACK_List(integer p_NACK_SN,
                                                            B1_Type p_Extn2,
                                                            template (omit) RLC_Status_SegOffset_Type p_Status_SO) :=
  { /* @status    APPROVED (LTE, NBIOT) */
    cr_RLC_Status_NACK(p_NACK_SN, tsc_E1_NoNACK_Follows, p_Extn2, p_Status_SO)
  };

  template (present) RLC_Status_NACK_List_Type cr_NACK_List_2NACKs(integer p_NACK_SN_1,
                                                                   B1_Type p_Extn2_1,
                                                                   template (omit) RLC_Status_SegOffset_Type p_Status_SO_1,
                                                                   integer p_NACK_SN_2,
                                                                   B1_Type p_Extn2_2,
                                                                   template (omit) RLC_Status_SegOffset_Type p_Status_SO_2) :=
  { /* @status    APPROVED (LTE, NBIOT) */
    cr_RLC_Status_NACK(p_NACK_SN_1, tsc_E1_NACK_Follows, p_Extn2_1, p_Status_SO_1),
    cr_RLC_Status_NACK(p_NACK_SN_2, tsc_E1_NoNACK_Follows, p_Extn2_2, p_Status_SO_2)
  };

  template (present) RLC_Status_NACK_List_Type cr_NACK_List_3NACKs(integer p_NACK_SN_1,
                                                                   B1_Type p_Extn2_1,
                                                                   template (omit) RLC_Status_SegOffset_Type p_Status_SO_1,
                                                                   integer p_NACK_SN_2,
                                                                   B1_Type p_Extn2_2,
                                                                   template (omit) RLC_Status_SegOffset_Type p_Status_SO_2,
                                                                   integer p_NACK_SN_3,
                                                                   B1_Type p_Extn2_3,
                                                                   template (omit) RLC_Status_SegOffset_Type p_Status_SO_3) :=
  { /* @status    APPROVED (LTE, NBIOT) */
    cr_RLC_Status_NACK(p_NACK_SN_1, tsc_E1_NACK_Follows, p_Extn2_1, p_Status_SO_1),
    cr_RLC_Status_NACK(p_NACK_SN_2, tsc_E1_NACK_Follows, p_Extn2_2, p_Status_SO_2),
    cr_RLC_Status_NACK(p_NACK_SN_3, tsc_E1_NoNACK_Follows, p_Extn2_3, p_Status_SO_3)
  };

  template (present) RLC_Status_NACK_List_Type cr_NACK_List_4NACKs_NoSOs(integer p_NACK_SN_1,
                                                                         integer p_NACK_SN_2,
                                                                         integer p_NACK_SN_3,
                                                                         integer p_NACK_SN_4) :=
  { /* @status    APPROVED (LTE, NBIOT) */
    cr_RLC_Status_NACK(p_NACK_SN_1, tsc_E1_NACK_Follows, tsc_E2_NoSO_Follows, omit),
    cr_RLC_Status_NACK(p_NACK_SN_2, tsc_E1_NACK_Follows, tsc_E2_NoSO_Follows, omit),
    cr_RLC_Status_NACK(p_NACK_SN_3, tsc_E1_NACK_Follows, tsc_E2_NoSO_Follows, omit),
    cr_RLC_Status_NACK(p_NACK_SN_4, tsc_E1_NoNACK_Follows, tsc_E2_NoSO_Follows, omit)
  };

  template (value) RLC_LengthIndicator_LI11_Type cs_LI11(integer p_LI,
                                                         B1_Type p_Extension := tsc_E_Data) :=
  { /* serves to transmit an LI 11 Length Indicator (UM or AM)
       @sic R5s150329 - Rel-12 Baseline move sic@ */
    /* @status    APPROVED (LTE, NBIOT) */
    Extension := p_Extension,
    LengthIndicator := int2bit (p_LI, tsc_LI11_Size)
  };

  template (present) RLC_LengthIndicator_LI11_Type cr_LI11(integer p_LI,
                                                           B1_Type p_Extension := tsc_E_Data) :=
  { /* serves to receive an LI 11 Length Indicator (UM or AM)
       @sic R5s150329 - Rel-12 Baseline move sic@ */
    /* @status    APPROVED (LTE, LTE_A_R10_R11, LTE_A_R12, NBIOT) */
    Extension := p_Extension,
    LengthIndicator := int2bit (p_LI, tsc_LI11_Size)
  };

  template (value) RLC_PDU_Header_FlexPart_Type cs_FlexPart_1LI(integer p_LI) :=
  { /* serves to transmit FlexPart with 1 LI 11 Length Indicator (UM or AM)
       @status    APPROVED (LTE, NBIOT) */
    LengthIndicator := {
      LI11 := {
        cs_LI11(p_LI)
      }  // @sic R5s150329 - Rel-12 Baseline move sic@
    },
    Padding := '0000'B
  };

  template (present) RLC_PDU_Header_FlexPart_Type cr_FlexPart_1LI(integer p_LI) :=
  { /* serves to receive FlexPart with 1 LI 11 Length Indicator (UM or AM)
       @status    APPROVED (LTE, LTE_A_R10_R11, LTE_A_R12, NBIOT) */
    LengthIndicator := {   // @sic R5s150329 - Rel-12 Baseline move sic@
      LI11 := {
        cr_LI11 (p_LI)
      }
    },
    Padding := '????'B // @sic R5s100466 sic@
  };

  template (value) RLC_PDU_Header_FlexPart_Type cs_FlexPart_2LIs(integer p_LI1,
                                                                 integer p_LI2) :=
  { /* serves to transmit FlexPart with 2 LI 11 Length Indicator (UM or AM)
       @status    APPROVED (LTE, NBIOT) */
    LengthIndicator := {
      LI11 := { // @sic R5s150329 - Rel-12 Baseline move sic@
        cs_LI11 (p_LI1, tsc_E_BitAndLI),
        cs_LI11 (p_LI2)
      }
    },
    Padding := omit
  };

  template (present) RLC_PDU_Header_FlexPart_Type cr_FlexPart_2LIs(integer p_LI1,
                                                                   integer p_LI2) :=
  { /* serves to receive FlexPart with 2 LI 11 Length Indicator (UM or AM)
       @status    APPROVED (LTE, NBIOT) */
    LengthIndicator := {
      LI11 := { // @sic R5s150329 - Rel-12 Baseline move sic@
        cr_LI11 (p_LI1, tsc_E_BitAndLI),
        cr_LI11 (p_LI2)
      }
    },
    Padding := omit
  };

  template (present) RLC_AMD_PDU_Type cr_AMD_PDU_seg_NoLIs(integer p_SN,
                                                           template (present) B1_Type p_Poll,
                                                           RLC_FramingInfo_Type p_FramingInfo,
                                                           B1_Type p_LastSegmentFlag,
                                                           integer p_SegOffset,
                                                           template (present) RLC_DataFieldList_Type p_Data) :=
  { /* @status    APPROVED (LTE, NBIOT) */
    /* @sic R5s170080: replaces cr_AMD_PDU_seg sic@ */
    Header := {
      FixPart := {
        D_C := tsc_DC_DataPDU,
        ReSeg := tsc_RF_AMDPDUseg,
        Poll := p_Poll,
        FramingInfo :=  p_FramingInfo,
        Extension := tsc_E_Data,
        SN := int2bit (p_SN, tsc_AM_SN_Size)
      },
      SegmentPart := {
        LastSegmentFlag := p_LastSegmentFlag,
        SegOffset := int2bit (p_SegOffset, 15)
      },
      FlexPart := omit
    },
    Data := p_Data
  };

  template (present) RLC_AMD_PDU_Type cr_AMD_PDU_NoSeg_Common(template (present) B10_Type p_SN,
                                                              template (present) B1_Type p_Poll,
                                                              template (present) RLC_FramingInfo_Type p_FramingInfo,
                                                              template RLC_PDU_Header_FlexPart_Type p_Header_FlexPart,
                                                              template (present) RLC_DataFieldList_Type p_Data) :=
  { /* Common template to reveice AMD PDU with no segmentation  @sic R5s170080 sic@
       NOTE: p_Header_FlexPart has to be either omit or "template (present)" i.e. it shall not be "*" or "ifpresent" */
    /* @status    APPROVED (LTE, NBIOT) */
    Header := {
      FixPart := {
        D_C := tsc_DC_DataPDU,
        ReSeg := tsc_RF_AMDPDU,
        Poll := p_Poll,
        FramingInfo :=  p_FramingInfo,
        Extension := f_ConvertBoolToBit(ispresent(p_Header_FlexPart)),
        SN := p_SN
      },
      SegmentPart := omit,
      FlexPart := p_Header_FlexPart
    },
    Data := p_Data
  };

  template (present) RLC_AMD_PDU_Type cr_AMD_PDU_LIs(integer p_SN,
                                                     B1_Type p_Poll,
                                                     RLC_FramingInfo_Type p_FramingInfo,
                                                     template (present) RLC_PDU_Header_FlexPart_Type p_Header_FlexPart,
                                                     RLC_DataFieldList_Type p_Data) :=
  /* @desc      serves to receive one PDU in one AMD PDU with Length Indicators */
  /* @status    APPROVED (LTE, NBIOT) */
    cr_AMD_PDU_NoSeg_Common(int2bit(p_SN, tsc_AM_SN_Size), p_Poll, p_FramingInfo, p_Header_FlexPart, p_Data);  /* @sic R5s170080 sic@ */

  template (present) RLC_AMD_PDU_Type cr_AMD_PDUoneSDU(integer p_SN,
                                                       B1_Type p_Poll,
                                                       RLC_DataFieldList_Type p_Data) :=
  /* @desc      serves to receive one SDU in one AMD PDU */
  /* @status    APPROVED (LTE, NBIOT) */
    cr_AMD_PDU_NoSeg_Common(int2bit(p_SN, tsc_AM_SN_Size), p_Poll, tsc_FI_FullSDU, omit, p_Data);  /* @sic R5s170080 sic@ */

  template (present) RLC_AMD_PDU_Type cr_AMD_PDUoneSDU_AnySN(template (present) B10_Type p_SN,
                                                             template (present) B1_Type p_Poll,
                                                             template (present) RLC_DataFieldList_Type p_Data) :=
  /* @desc      serves to receive one SDU in one AMD PDU */
  /* @status    APPROVED (LTE, NBIOT) */
    cr_AMD_PDU_NoSeg_Common(p_SN, p_Poll, tsc_FI_FullSDU, omit, p_Data);  /* @sic R5s170080 sic@ */

  template (present) RLC_AM_StatusPDU_Type cr_STATUS_PDU_Nack(integer p_ACK_SN,
                                                              template RLC_Status_NACK_List_Type p_NACK_List,
                                                              template RLC_Status_Padding_Type p_Padding) :=   // Replace template (omit) by Template: correction done during delivery
  { /* @desc      serves to receive one STATUS PDU with NackList and Padding */
    /* @status    APPROVED (LTE, NBIOT) */
    D_C := tsc_DC_Control,
    CP_Type := tsc_CPT_STATUSPDU, //@sic R5s160711 BASELINE MOVING 2016 sic@
    Ack := {
      ACK_SN := int2bit(p_ACK_SN, tsc_AM_SN_Size),
      Extn1 := tsc_E1_NACK_Follows
    },
    NackList := p_NACK_List,
    Padding := p_Padding
  };

  template (value) RLC_AM_StatusPDU_Type cs_STATUS_PDU_Nack(integer p_ACK_SN,
                                                            template (omit) RLC_Status_NACK_List_Type p_NACK_List,
                                                            template (omit) RLC_Status_Padding_Type p_Padding) :=
  { /* @desc      serves to transmit one STATUS PDU with NackList and Padding */
    /* @status    APPROVED (LTE, NBIOT) */
    D_C := tsc_DC_Control,
    CP_Type := tsc_CPT_STATUSPDU, //@sic R5s160711 BASELINE MOVING 2016 sic@
    Ack := {
      ACK_SN := int2bit (p_ACK_SN, tsc_AM_SN_Size),
      Extn1 := tsc_E1_NACK_Follows
    },
    NackList := p_NACK_List,
    Padding := p_Padding
  };

  type record RLC_SS_State {      /* @desc      Describes the state (state variables, counters) of simulated RLC entitiy within the tester
                                   *            Relevant varibales are to be initialized with the default values from 36.508
                                   * @status    APPROVED (LTE, NBIOT) */
    // RLC AM state variables, see 36.322 cl. 7.1
    integer AM_VTS,       // Send state variable VT(S)
    integer AM_VTA,       // Acknowledgement state variable VT(A)
    // determines Maximum send state variable VT(MS)
    integer AM_VRR,       // Receive state variable VR(R)
    // determines Maximum send state variable VR(MR)
    integer AM_VRX,       // t_Reordering state variable VR(X)
    integer AM_VRMS,      // Maximum STATUS transmit state variable VR(MS)
    integer AM_VRH,       // Highest received state variable VR(H)
    // RLC UM state variables, see 36.322 cl. 7.1
    integer UM_VTUS,      // UM Send state variable VT(US)
    integer UM_VRUR,      // UM receive state variable VR(UR)
    integer UM_VRUX,      // UM t_Reordering state variable VR(UX)
    integer UM_VRUH,      // UM highest received state variable VR(UH)
    // Timers, see 36.322 cl. 7.3
    float t_PollRetransmit,   // t_PollRetransmit
    float t_PollRetransmit_r13,   // t_PollRetransmit-r13 (for NBIoT)
    float t_Reordering,       // t_Reordering
    float t_Reordering_r14,   // t_Reordering-r14 (for NBIoT)
    float t_StatusProhibit,   // t_StatusProhibit
    // Configurable parameters, see 36.322 cl. 7.4
    integer maxRetxThreshold, // maxRetxThreshold
    integer maxRetxThreshold_r13, // maxRetxThreshold-r13 (for NBIoT)
    integer pollPDU,          // pollPDU
    integer pollByte,         // pollByte
    // Other configurable parameters
    integer UM_SN_Size,    // 5 or 10, see 36.322 cl. 6.2.2.3
    boolean enableStatusReportSN_Gap_r13,  // enableStatusReportSN-Gap-r13 (for NBIoT)
    // other variables
    RLC_AMD_PDU_Type AMD_PDU,
    RLC_UMD_PDU_Type UMD_PDU,
    RLC_AM_StatusPDU_Type StatusPDU,
    RLC_DataField_Type RLC_Data,// to hold RLC data field
    RLC_DataFieldList_Type RLC_DataList,// to hold RLC data field list
    RLC_DataFieldList_Type RLC_UL_DataList,// to hold UL RLC data field list (for NB-IoT)
    SubFrameTiming_Type TimeStampLastReceivedPDU,
    integer TxPRBS_Pos,
    integer RxPRBS_Pos,
    integer TxDataSize,
    integer RxDataSize,
    // PDCP state variables, see 36.323 cl. 7.1
    integer Next_PDCP_TX_SN,  // indicates the PDCP sequence number of the next PDCP SDU
    integer Next_PDCP_RX_SN,  // indicates the next expected PDCP sequence number
    //  PDCP36.509 state variables, see 36.509 cl. 7.4
    integer UL_PDCP_SDU_size,   // UL PDCP SDU size for returned UL PDCP SDUs
    boolean UL_PDCP_SDU_scaling // to enable/disable scaling of UL PDCP SDU size
  };

  /*
   * @desc      Initialisation of configurable parameters to their defaults according to 36.058 cl. 4.8
   * @param     p_RLC_Rec           (by reference)
   * @param     p_RLC_Mode
   * @status    APPROVED (LTE, NBIOT)
   */
  function f_InitRLC_Record(out RLC_SS_State p_RLC_Rec,
                            RLC_Mode_Type p_RLC_Mode)
  {
    if  ( p_RLC_Mode == UM_Mode) {
      p_RLC_Rec.t_Reordering := 0.05;
    }
    else {
      p_RLC_Rec.t_Reordering := 0.08;
    }
    p_RLC_Rec.t_PollRetransmit := 0.08;
    p_RLC_Rec.t_StatusProhibit := 0.06; // @sic R5s100039 sic@
    p_RLC_Rec.pollPDU := 128;
    p_RLC_Rec.pollByte := 125000;
    p_RLC_Rec.maxRetxThreshold := 4;
    p_RLC_Rec.UM_SN_Size := 10;
    // Initialisation of other parameters
    p_RLC_Rec.AM_VTS := 0;
    p_RLC_Rec.AM_VRR := 0;
    p_RLC_Rec.AM_VRH := 0;
    p_RLC_Rec.UM_VTUS := 0;
    p_RLC_Rec.UM_VRUR := 0;
    p_RLC_Rec.UM_VRUX := 0;
    p_RLC_Rec.UM_VRUH := 0;
    p_RLC_Rec.TimeStampLastReceivedPDU := {
      SFN := { Number :=0 },
      Subframe := { Number := 0 },
      HSFN := { Number := 0 },
      Slot := { FirstSlot := true }   /* @sic R5w180111: Slot sic@ */
    };
    p_RLC_Rec.TxPRBS_Pos := 0;
    p_RLC_Rec.RxPRBS_Pos := 0;
    p_RLC_Rec.TxDataSize := 0;
    p_RLC_Rec.RxDataSize := 0;
    p_RLC_Rec.Next_PDCP_TX_SN := 0;
    p_RLC_Rec.Next_PDCP_RX_SN := 0;
    p_RLC_Rec.UL_PDCP_SDU_size := 100;
    p_RLC_Rec.UL_PDCP_SDU_scaling := false;
  }

  /*
   * @desc      Retrieval of a pseudo random bit sequence
   * @param     p_RLC_Rec           (by reference)
   * @status    APPROVED (LTE, NBIOT)
   */
  function f_GetTxAM_PRBS (inout RLC_SS_State p_RLC_Rec)
  {
    var integer v_TxDataSize := p_RLC_Rec.TxDataSize;
    var integer v_TxPRBS_Pos := p_RLC_Rec.TxPRBS_Pos;
    var octetstring v_RLC_Data;
  
    if (v_TxDataSize <= 0) {
      v_RLC_Data := ''O;
    } else {
      if (v_TxDataSize >= 0) {
        v_RLC_Data := f_GetN_OctetsFromPRBS( v_TxPRBS_Pos, v_TxDataSize);
        v_TxPRBS_Pos := v_TxPRBS_Pos + v_TxDataSize;
        if (v_TxPRBS_Pos >= tsc_MaxPRBS_Pos) {
          v_TxPRBS_Pos := v_TxPRBS_Pos - tsc_MaxPRBS_Pos;
        } else {}
      }
    }
    p_RLC_Rec.TxPRBS_Pos := v_TxPRBS_Pos;
    p_RLC_Rec.RLC_Data := v_RLC_Data;
  } // f_GetTxAM_PRBS

}
