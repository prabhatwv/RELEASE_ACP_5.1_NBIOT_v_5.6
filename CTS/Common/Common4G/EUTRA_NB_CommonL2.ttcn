/******************************************************************************/
// @copyright   Copyright Notification
//   No part may be reproduced except as authorized by written permission.
//   The copyright and the foregoing restriction extend to reproduction in all media.
//   Trademark 2019, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).
//   All rights reserved.
// @version: 36.523-3 v15.3.0
// $Date: 2017-12-18 08:25:49 +0100 (Mon, 18 Dec 2017) $
// $Rev: 20264 $
/******************************************************************************/
module EUTRA_NB_CommonL2 {

  import from CommonDefs all;
  import from EUTRA_NB_ASP_L2DataDefs all;

  const integer tsc_SubframeOffset0 := 0;                 /* @status    APPROVED (LTE, LTE_A_PRO, LTE_A_R10_R11, LTE_A_R12, NBIOT) */

  const integer tsc_AM_SN_Size := 10;                     /* @status    APPROVED (LTE, LTE_A_PRO, LTE_A_R10_R11, LTE_A_R12, NBIOT) */

  const RLC_FramingInfo_Type tsc_FI_FullSDU := '00'B;     /* @desc     Value to indicate that PDU contains a complete SDU. Ref 3G TS
                                                           *           36.322 clause 6.2.2.6
                                                           * @status    APPROVED (LTE, LTE_A_PRO, LTE_A_R10_R11, LTE_A_R12, NBIOT) */

  const RLC_FramingInfo_Type tsc_FI_StartOfSDU := '01'B;  /* @desc     Value to indicate that PDU contains the starting part of an SDU.
                                                           *           Ref 3G TS 36.322 clause 6.2.2.6
                                                           * @status    APPROVED (LTE, NBIOT) */

  const RLC_FramingInfo_Type tsc_FI_EndOfSDU := '10'B;    /* @desc     Value to indicate that PDU contains the ending part of an SDU.
                                                           *           Ref 3G TS 36.322 clause 6.2.2.6
                                                           * @status    APPROVED (LTE, NBIOT) */

  const RLC_FramingInfo_Type tsc_FI_MiddleOfSDU := '11'B; /* @desc     Value to indicate that PDU contains a middle part of an SDU.
                                                           *           Ref 3GTS 36.322 clause 6.2.2.6
                                                           * @status    APPROVED (LTE, NBIOT) */

  const B1_Type tsc_LSF_NotLast := '0'B;                  /* @desc     Value to indicate that last byte of the AMD PDU segment does not
                                                           *           correspond to the last byte of an AMD PDU.
                                                           *           Ref 3G TS 36.322 clause 6.2.2.8
                                                           * @status    APPROVED (LTE, NBIOT) */

  const B1_Type tsc_LSF_Last := '1'B;                     /* @desc     Value to indicate that last byte of the AMD PDU segment corresponds
                                                           *           to the last byte of an AMD PDU.
                                                           *           Ref 3G TS 36.322 clause 6.2.2.8
                                                           * @status    APPROVED (LTE, NBIOT) */

  const B1_Type tsc_DC_Control:= '0'B;                    /* @desc     Value for D/C field within an AMD Control PDU.
                                                           *           Ref 3G TS 36.322 clause 6.2.2.9
                                                           * @status    APPROVED (LTE, LTE_A_PRO, LTE_A_R10_R11, LTE_A_R12, NBIOT) */

  const B1_Type tsc_DC_DataPDU := '1'B;                   /* @desc     Value for D/C field within an AMD Data PDU.
                                                           *           Ref 3G TS 36.322 clause 6.2.2.9
                                                           * @status    APPROVED (LTE, LTE_A_PRO, LTE_A_R10_R11, LTE_A_R12, NBIOT) */

  const B1_Type tsc_E_Data := '0'B;                       /* @desc     Value for ExtBit in UMDPDU/AMDPDU/AMDPDUsegment when the next field is data.
                                                           *           Ref 3G TS 36.322 clause 6.2.2.4
                                                           * @status    APPROVED (LTE, LTE_A_R10_R11, LTE_A_R12, NBIOT) */

  const B1_Type tsc_RF_AMDPDU := '0'B;                    /* @desc     Value to indicate that the RLC PDU is an AMD PDU.
                                                           *           Ref 3G TS 36.322 clause 6.2.2.10
                                                           * @status    APPROVED (LTE, LTE_A_PRO, LTE_A_R10_R11, LTE_A_R12, NBIOT) */

  const B1_Type tsc_RF_AMDPDUseg := '1'B;                 /* @desc     Value to indicate that the RLC PDU is an AMD PDU segment.
                                                           *           Ref 3G TS 36.322 clause 6.2.2.10
                                                           * @status    APPROVED (LTE, NBIOT) */

  const B3_Type tsc_CPT_STATUSPDU := '000'B;              /* @desc     Value for CPT field to indicate that RLC Control PDU is a STATUS PDU.
                                                           *           Ref 3G TS 36.322 clause 6.2.2.13
                                                           * @status    APPROVED (LTE, LTE_A_PRO, LTE_A_R10_R11, LTE_A_R12, NBIOT) */

  const B1_Type tsc_E1_NoNACK_Follows := '0'B;            /* @desc     Value to indicate that a set of NACK_SN, E1 and E2 does not follow.
                                                           *           Ref 3G TS 36.322 clause 6.2.2.15
                                                           * @status    APPROVED (LTE, LTE_A_PRO, LTE_A_R10_R11, LTE_A_R12, NBIOT) */

  const B1_Type tsc_E1_NACK_Follows := '1'B;              /* @desc     Value to indicate that a set of NACK_SN, E1 and E2 follows.
                                                           *           Ref 3G TS 36.322 clause 6.2.2.15
                                                           * @status    APPROVED (LTE, NBIOT) */

  template (value) PDCP_SDU_Type crs_PDCP_SDU_16B   := f_GetN_OctetsFromPRBS(0,16);     /* @status    APPROVED (LTE, LTE_A_PRO, LTE_A_R10_R11, NBIOT) */

  template (present) RLC_Status_SegOffset_Type cr_Status_SO(B15_Type p_SOstart,
                                                            B15_Type p_SOend) :=
  { /* @status    APPROVED (LTE, NBIOT) */
    Start := p_SOstart,
    End := p_SOend
  };

  template (present) RLC_AM_StatusPDU_Type cr_RLC_AM_StatusPDU_ACK_SN_Bit(template (present) B10_Type p_AckSN_Bits) :=
  { /* @desc      serves to receive one STATUS PDU without NackList and Padding */
    /* @status    APPROVED (LTE, LTE_A_R12, NBIOT) */
    D_C           :=  tsc_DC_Control,             /* 0 .......... Control PDU
                                                   * 1 .......... Data PDU */
    CP_Type       :=  tsc_CPT_STATUSPDU,          /* 000 ........ STATUS PDU
                                                   * 001-111 .... Reserved (=> PDU to be discarded by the receiving entity
                                                   *                           for this release of the protocol) */
    Ack           := {
      ACK_SN      := p_AckSN_Bits,
      Extn1       := tsc_E1_NoNACK_Follows
    },
    NackList := omit,
    Padding := '?'B
  };

  template (present) RLC_AM_StatusPDU_Type cr_RLC_AM_StatusPDU_ACK_SN(integer p_AckSN) :=
  /* @status    APPROVED (LTE, LTE_A_R12, NBIOT) */
    cr_RLC_AM_StatusPDU_ACK_SN_Bit(int2bit(p_AckSN, tsc_AM_SN_Size));

  template (present) RLC_AM_StatusPDU_Type cr_RLC_AM_StatusPDU_ACK_SN_NACK(integer p_AckSN,
                                                                           template (present) RLC_Status_NACK_List_Type p_RLC_Status_NACK_List_Type) :=
  { /* @desc      serves to receive one STATUS PDU NackList and Padding */
    /* @status    APPROVED (NBIOT) */
    // @sic R5-176042, R5-177110 sic@
    D_C           :=  tsc_DC_Control,             /* 0 .......... Control PDU
                                                   * 1 .......... Data PDU */
    CP_Type       :=  tsc_CPT_STATUSPDU,          /* 000 ........ STATUS PDU
                                                   * 001-111 .... Reserved (=> PDU to be discarded by the receiving entity
                                                   *                           for this release of the protocol) */
    Ack           := {
      ACK_SN      := int2bit(p_AckSN, tsc_AM_SN_Size),
      Extn1       := tsc_E1_NACK_Follows
    },
    NackList := p_RLC_Status_NACK_List_Type,
    Padding := ?
  };

  template (value) RLC_AM_StatusPDU_Type cs_RLC_AM_StatusPDU_ACK_SN(integer p_AckSN) :=
  { /* @desc      serves to transmit one STATUS PDU without NackList */
    /* @status    APPROVED (LTE, LTE_A_PRO, LTE_A_R10_R11, LTE_A_R12, NBIOT) */
    D_C           :=  tsc_DC_Control,             /* 0 .......... Control PDU
                                                   * 1 .......... Data PDU */
    CP_Type       :=  tsc_CPT_STATUSPDU,          /* 000 ........ STATUS PDU
                                                   * 001-111 .... Reserved (=> PDU to be discarded by the receiving entity
                                                   *                           for this release of the protocol) */
    Ack           := {
      ACK_SN      := int2bit(p_AckSN, tsc_AM_SN_Size),
      Extn1       := tsc_E1_NoNACK_Follows
    },
    NackList := omit,                       /* presence depends on Extn1 bit of Ack filed (RLC_Status_ACK_Type) */
    Padding := '1'B                         /* 1..7 bit padding if needed for octet alignment */
  };

  template (value) RLC_AMD_PDU_Type cs_AMD_PDU_LIs(integer p_SN,
                                                   B1_Type p_Poll,
                                                   RLC_FramingInfo_Type p_FramingInfo,
                                                   template (omit) RLC_PDU_Header_FlexPart_Type p_Header_FlexPart,
                                                   template (value) RLC_DataFieldList_Type p_Data) :=
  { /* serves to transmit one PDU in one AMD PDU with Length Indicators */
    /* @status    APPROVED (LTE, LTE_A_PRO, LTE_A_R10_R11, LTE_A_R12, NBIOT) */
    /* @sic R5s170080: allowing p_Header_FlexPart to be omit sic@ */
    Header := {
      FixPart := {
        D_C := tsc_DC_DataPDU,
        ReSeg := tsc_RF_AMDPDU,
        Poll := p_Poll,
        FramingInfo :=  p_FramingInfo,
        Extension := f_ConvertBoolToBit(ispresent(p_Header_FlexPart)),   /* @sic R5s170080 sic@ */
        SN := int2bit(p_SN, tsc_AM_SN_Size)
      },
      SegmentPart := omit,
      FlexPart := p_Header_FlexPart
    },
    Data := p_Data
  };

  template (value) RLC_AMD_PDU_Type cs_AMD_PDU_NoLIs(integer p_SN,
                                                     B1_Type p_Poll,
                                                     RLC_FramingInfo_Type p_FramingInfo,
                                                     template (value) RLC_DataField_Type p_Data) :=
  /* @desc      serves to transmit one AMD PDU without Length Indicators */
  /* @status    APPROVED (LTE, NBIOT) */
  /* @sic R5s170080: RLC_DataField_Type instead of RLC_DataFieldList_Type sic@ */
    cs_AMD_PDU_LIs(p_SN, p_Poll, p_FramingInfo, omit, { p_Data });   /* @sic R5s170080 sic@ */

  template (value) RLC_AMD_PDU_Type cs_AMD_PDUoneSDU(integer p_SN,
                                                     B1_Type p_Poll,
                                                     RLC_DataField_Type p_Data) :=
  /* @desc      serves to transmit one SDU in one AMD PDU */
  /* @status    APPROVED (LTE, LTE_A_PRO, LTE_A_R10_R11, LTE_A_R12, NBIOT) */
  /* @sic R5s170080: RLC_DataField_Type instead of RLC_DataFieldList_Type sic@ */
    cs_AMD_PDU_LIs(p_SN, p_Poll, tsc_FI_FullSDU, omit, { p_Data });   /* @sic R5s170080 sic@ */

  template (value) RLC_AMD_PDU_Type cs_AMD_PDU_seg_LIs(integer p_SN,
                                                       B1_Type p_Poll,
                                                       RLC_FramingInfo_Type p_FramingInfo,
                                                       B1_Type p_LastSegmentFlag,
                                                       integer p_SegOffset,
                                                       template (omit) RLC_PDU_Header_FlexPart_Type p_Header_FlexPart,
                                                       RLC_DataFieldList_Type p_Data) :=
  { /* @status    APPROVED (LTE, NBIOT) */
    /* @sic R5s170080: allowing p_Header_FlexPart to be omit sic@ */
    Header := {
      FixPart := {
        D_C := tsc_DC_DataPDU,
        ReSeg := tsc_RF_AMDPDUseg,
        Poll := p_Poll,
        FramingInfo := p_FramingInfo,
        Extension := f_ConvertBoolToBit(ispresent(p_Header_FlexPart)),   /* @sic R5s170080 sic@ */
        SN := int2bit(p_SN, tsc_AM_SN_Size)
      },
      SegmentPart := {
        LastSegmentFlag := p_LastSegmentFlag,
        SegOffset := int2bit(p_SegOffset, 15)
      },
      FlexPart := p_Header_FlexPart
    },
    Data := p_Data
  };

  template (value) RLC_AMD_PDU_Type cs_AMD_PDU_seg_NoLIs(integer p_SN,
                                                         B1_Type p_Poll,
                                                         RLC_FramingInfo_Type p_FramingInfo,
                                                         B1_Type p_LastSegmentFlag,
                                                         integer p_SegOffset,
                                                         RLC_DataField_Type p_Data) :=
  /* @status    APPROVED (LTE, NBIOT) */
  /* @sic R5s170080: RLC_DataField_Type instead of RLC_DataFieldList_Type sic@ */
    cs_AMD_PDU_seg_LIs(p_SN, p_Poll, p_FramingInfo, p_LastSegmentFlag, p_SegOffset, omit, { p_Data });   /* @sic R5s170080 sic@ */

}
