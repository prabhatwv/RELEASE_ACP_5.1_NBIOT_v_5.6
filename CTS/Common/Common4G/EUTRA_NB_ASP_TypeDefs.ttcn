/******************************************************************************/
// @copyright   Copyright Notification
//   No part may be reproduced except as authorized by written permission.
//   The copyright and the foregoing restriction extend to reproduction in all media.
//   Trademark 2019, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).
//   All rights reserved.
// @version: 36.523-3 v15.3.0
// $Date: 2018-09-04 17:19:36 +0200 (Tue, 04 Sep 2018) $
// $Rev: 22128 $
/******************************************************************************/

module EUTRA_NB_ASP_TypeDefs {
  /* Type definitions for configuration of the system simulator;
   * Common design principles:
   * Semantics of OMIT: for all TTCN-3 type definitions used in ASPs omit means "keep as it is" =>
   * - on initial configuration in general all fields shall be provided
   * - no default values for fields are foreseen
   * - if necessary non-existence of information shall be explicitly configured
   *   (e.g. with a union of "no configuration" and "configuration parameters"
   * - fields within structures imported from the core spec are excepted from this rule */

  import from CommonDefs all;
  import from CommonAspDefs all;

  import from EUTRA_NB_CommonDefs all;
  import from EUTRA_RRC_ASN1_Definitions language "ASN.1:2002" all with {encode "UNALIGNED_PER_OctetAligned"};
  // !! Note: Only types included in NBIOT_Imported_EUTRA_ASN1_Types should be referenced in this file

  //****************************************************************************

  group Cell_Configuration { /* Specific Info for Cell Configuration Primitive */

  // Primitive definition covers:
  // - Initial cell configuration
  // - Cell reconfigurations, mainly:
  //   - Cell Power configuration
  //   - System information
  //   - (to be continued)
  // - Release of a cell

  //----------------------------------------------------------------------------

  group Cell_Configuration_Common {

  type union Attenuation_Type {                         /* attenuation of the reference power */
    integer Value (0..149),                             /* cell power reference power reduced by the given attenuation (value is in dB) */
    Null_Type Off                                       /* even though in TS 36.508 -145dBm for LTE and -150dBm for NB-IoT is given for a non suitable cell we specify an explicit "Off" value here */
  };
  
  type record ReferenceCellPower_Type {
    AbsoluteCellPower_Type         MaxReferencePower,
    Attenuation_Type               Attenuation
  };
  
  const Attenuation_Type tsc_CellAttenuation_Off := {Off:=true};
  type Attenuation_Type InitialAttenuation_Type (tsc_CellAttenuation_Off);  /* Attenuation restricted to 'Off' */
  
  type integer ToRS_EPRE_Ratio_Type (-35..0);           /* any-resource-element to RS ratio in dB (e.g. PDSCH-to-RS ratio; see TS 36.213, clause 5.2) */
  
  type record InitialCellPower_Type {
    AbsoluteCellPower_Type      MaxReferencePower,      /* maximum value of cell reference power (RS EPRE in dBm/15kHz as per TS 36.508, clause 4.3.4.1);
                                                         * a cell is initialised with this reference power;
                                                         * its value is the upper bound of the cell power during the test case */
    /*VZW NBIOT Modified:Initial*/Attenuation_Type     Attenuation             /* initial attenuation */
  };

  type enumerated EUTRA_CyclicPrefix_Type {normal, extended};                   /* NOTE: in DL extended cyclic prefix depends on sub-carrier spacing */

  } // End sub-group Cell_Configuration_Common
  
  //----------------------------------------------------------------------------
  
  group Uplink_Physical_Layer_Configuration {

  type union SS_TimingAdvanceConfig_Type {
    RACH_TimingAdvance_Type     InitialValue,                 /* initial value corresponding to what is sent to the UE in RACH response
                                                               * (range acc. 11 bit value; 0 in normal cases) */
    TimingAdvanceIndex_Type     Relative                      /* timing advance command to adjust changes of timing advance acc. to TS 36.213, clause 4.2.3;
                                                               * (range acc. 6 bit value: -31..32) */
  };

  } // End sub-group Uplink_Physical_Layer_Configuration
  
  //----------------------------------------------------------------------------

  group Common_MAC_Configuration {
  /* Transport channel and MAC related procedures and configuration */
  
  //----------------------------------------------------------------------------
  // common types
  type integer TimingAdvanceIndex_Type (0..63);         /* acc. to TS 36.321, clause 6.1.3.5 "Timing Advance Command MAC Control Element"
                                                           and TS 36.213, clause 4.2.3 "Transmission timing adjustments" */
  type integer TimingAdvance_Period_Type
  (400, 600, 1020, 1530, 2040, 4090, 8190);             /* the values correspond to 80 % of TimeAlignmentTimer (acc. to TS 36.523-3, clause 7.2)
                                                         * (TS 36.331, clause 6.3.2: sf500, sf750, sf1280, sf1920, sf2560, sf5120, sf10240) rounded to nearest multiple of 10 */
  
  type record UplinkTimeAlignment_AutoSynch_Type {
    TimingAdvanceIndex_Type     TimingAdvance,
    TimingAdvance_Period_Type   TA_Period,              /* time period after which TA MAC control elements need to be automatically transmitted */
    TransmissionRepetition_Type TA_Repetition           /* number of TA MAC control element repetitions to be automatically transmitted or 'Continuous' */
  };
  
  type union UplinkTimeAlignment_Synch_Type {
    Null_Type                           None,           /* no PUCCH Synchronisation applied */
    UplinkTimeAlignment_AutoSynch_Type  Auto            /* SS automatically maintains PUCCH synchronization at UE
                                                         * If the cell is a
                                                         * - Rel 10 or earlier cell
                                                         * - or Rel 11 or later Pcell
                                                         * - or the Rel-11 or later scell with no STAG-ID configured,
                                                         * the TAG-ID is set to '00' i.e. P-TAG in Timing advance MCE
                                                         * If the cell is Rel 11 scell with STAG-ID configured, the configured stag-ID is used as TAG-ID in Timing advance MCE
                                                         */
  };
  
  } // End sub-group Common_MAC_Configuration

  //----------------------------------------------------------------------------

  group Random_Access_Procedure {

  type integer   RACH_TimingAdvance_Type     (0..2047);         /* 11 bit timing advance as used in RACH response (absolute value) */

  const RACH_TimingAdvance_Type tsc_RACH_TA_Def := 0;           /* @status    APPROVED (IMS, IMS_IRAT, LTE, LTE_A_IRAT, LTE_A_R10_R11, LTE_A_R12, LTE_IRAT, POS)
                                                                   @sic R5s090180 sic@ */

  const ContentionResolutionId_Type tsc_ContentionResolutionId_Unchanged := int2bit(0, 48);
  const ContentionResolutionId_Type tsc_ContentionResolutionId_Unmatch   := (int2bit(1, 48) << 20);

  type union ContentionResolution_ContainedDlschSdu_Type {
    octetstring         RlcPduCCCH,                             /* octetstring of an RLC PDU containing e.g. the RRC Connection Setup;
                                                                 * to be sent in the same MAC PDU as the MAC Contention Resolution Control Element (Msg4) */
    octetstring         PdcpSduDCCH,                            /* octetstring of a PDCP SDU containing e.g. the RRC Connection Resume;
                                                                 * to be sent in the same MAC PDU as the MAC Contention Resolution
                                                                 * Control Element (Msg4); the SS shall
                                                                 * - apply integrity protection,
                                                                 * - add a PDCP header accordingly,
                                                                 * - add an AM RLC header,
                                                                 * according to TS 36.523-3 clause 7A.8a and clause 7A.13
                                                                 * The logical channel id to be used for the MAC DL-SCH SDU
                                                                 * shall be '00001'B corresponding to SRB1 */
    Null_Type           None                                    /* MAC PDU containing the MAC Contention Resolution Control Element does not contain an RLC PDU
                                                                 * (i.e. RRC Connection Setup is sent in another PDU) */
  };

  type union ContentionResolution_ContainedId_Type {
    ContentionResolutionId_Type               XorMask,          /* When SS receives Contention Resolution ID from the UE,
                                                                 * SS shall XOR it with the given mask and use this as Contention Resolution ID;
                                                                 * this allows to get an unmatching Contention Resolution ID;
                                                                 * in normal cases mask shall be set to tsc_ContentionResolutionId_Unchanged
                                                                 * (i.e. the Contention Resolution ID remains unchanged) */
    Null_Type                                 None              /* MAC Contention Resolution Control Element is not contained in the MAC PDU sent out as response on Msg3 */
  };

  type record TCRNTI_ContentionResolutionMacPdu_Type {          /* NOTE:
                                                                 * Either ContainedId or ContainedRlcPdu (or both) shall not be 'none';
                                                                 * (if no Contention Resolution Mac Pdu shall be sent, TCRNTI_ContentionResolutionCtrl_Type.NoContResolID shall be used instead) */
    ContentionResolution_ContainedId_Type     ContainedId,      /* Either the Contention Resolution ID as received from the UE
                                                                 * or a modified Contention Resolution ID (XorMask != tsc_ContentionResolutionId_Unchanged)
                                                                 * or no Contention Resolution ID  at all */
    ContentionResolution_ContainedDlschSdu_Type ContainedRlcPdu /* the MAC PDU containing the MAC Contention Resolution Control Element may contain the RRC Connection Setup;
                                                                 * in this case the RRC PDU shall be completely encoded been contained in an RLC PDU */
  };

  type union TCRNTI_ContentionResolutionCtrl_Type {             /* when the UE responds on a Random Access Response with a RRC Connection Request on CCCH
                                                                 * and not with a C-RNTI SS shall assume initial Random Access Procedure (TS 36.300, clause 10.1.5.1),
                                                                 * i.e. sends a ContentionResolutionId back to the UE */
    TCRNTI_ContentionResolutionMacPdu_Type    MacPdu,           /* MAC PDU containing the Contention Resolution ID and optionally an RRC PDU (RRC Connection Setup) */
    TCRNTI_ContentionResolutionMacPdu_Type    MacPdu_CRC_Error, /* same as MacPdu (see above),
                                                                 * but SS shall generate CRC error by toggling CRC bits;
                                                                 * no retransmissions shall be made as UE shall not send a NACK */
    Null_Type                                 NoContResolID     /* SS shall not include contention resolution ID (i.e. no MAC PDU shall be sent);
                                                                 * used for contention resolution fail case */
  };

  type union TempC_RNTI_Type {
    Null_Type                           SameAsC_RNTI,           /* in the RA response SS shall use the same C-RNTI as configured in ActiveCellConfig_Type;
                                                                 * this is useful for initial random access */
    C_RNTI                              Explicit                /* in the RA response SS shall use different value as configured in ActiveCellConfig_Type;
                                                                 * this can be used when the UE already is in RRC_CONNECTED to have a temporary C-RNTI different from the one used by the UE;
                                                                 * NOTE: when the UE is not in RRC_CONNECTED there shall be no explicit temp. C-RNTI since then the UE would assume this value as C-RNTI */
  };

  type union RandomAccessBackoffIndicator_Type {
    Null_Type                           None,                   /* normal case, no back off indicator included */
    integer                             Index (0..15)           /* Backoff Parameter values acc. TS 36.321, clause 7.2;
                                                                 * values 0..12 are defined, 13..15 may be used in  error case */
  };
  
  const integer tsc_RandomAccessResponseListSize := 10;         /* arbitrary value (needs to be extended, if necessary);
                                                                 * in case of RACH in idle, UE will keep on making RACH attempts until t300 expires
                                                                 * => number of PRACH preambles maybe even greater than maximum value of PREAMBLE_TRANS_MAX */

  } // End sub-group Random_Access_Procedure

  //----------------------------------------------------------------------------

  } // End group Cell_Configuration
  
}
