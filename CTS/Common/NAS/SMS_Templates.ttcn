/******************************************************************************/
// @copyright   Copyright Notification
//   No part may be reproduced except as authorized by written permission.
//   The copyright and the foregoing restriction extend to reproduction in all media.
//   Trademark 2019, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).
//   All rights reserved.
// @version: 36.523-3 v15.3.0
// $Date: 2019-01-31 19:26:23 +0100 (Thu, 31 Jan 2019) $
// $Rev: 23695 $
/******************************************************************************/

module SMS_Templates {

  import from CommonDefs all;
  import from SMS_TypeDefs all;

  template (value) TransactionIdentifier_Type cs_MT_TI0_FromSS :=
  { /* @status    APPROVED (LTE, LTE_A_PRO, NBIOT) */
    tI_Flag := '0'B,
    tI_Value := '000'B
  };

  template (present) TransactionIdentifier_Type cr_MT_TI0_FromUE :=
  { /* @status    APPROVED (LTE, LTE_A_PRO, NBIOT) */
    tI_Flag := '1'B,
    tI_Value := '000'B
  };

  template (present) TransactionIdentifier_Type cr_MO_AnyTI_FromUE :=
  { /* @status    APPROVED (LTE, LTE_A_PRO, NBIOT) */
    tI_Flag := '0'B,
    tI_Value := '???'B
  };

  template (present) TypeOfNumberingPlan cr_TypeOfNumberingPlanAny :=
  { /* @status    APPROVED (IMS, LTE, LTE_A_PRO, LTE_A_R12, NBIOT) */
    extBit := ?,
    typeOfNumber := ?,
    numberingPlanId := ?
  };

  template (value) TypeOfNumberingPlan cs_TypeOfNumberingPlan :=
  { /* @status    APPROVED (IMS, LTE, LTE_A_PRO, LTE_A_R12, NBIOT) */
    extBit := '1'B,
    typeOfNumber := '001'B, // international number
    numberingPlanId := '0001'B // ISDN/telephony numbering plan (Rec. E.164/E.163)
  };

  template (omit) CP_UserData_Type cs_CP_UserData_RP_ACK_dl (O1_Type p_MsgRef):=
  { /* @status    APPROVED (LTE, LTE_A_PRO, NBIOT) */
    // @sic R5s100604 sic@ @sic R5s110206 sic@
    spare := omit,
    iei := omit,
    iel := '02'O, // the length of RPDU is 2 as RP UserData are omitted now
    rP_PDU := {
      RP_ACK := cs_RP_ACK_dl(p_MsgRef)
    }
  };

  template (present) CP_UserData_Type cr_CP_UserData_SUBMIT(template (present) RP_DATA_ul_Type p_RP_DATA_ul := cr_RP_DATA_ul_SUBMIT) :=
  { /* @status    APPROVED (LTE, LTE_A_PRO, NBIOT) */
    spare := omit,
    iei := omit,
    iel := ?,
    rP_PDU := {
      RP_DATA_ul := p_RP_DATA_ul
    }
  };

  template (present) CP_UserData_Type cr_CP_UserData_RP_ACK_ul :=
  { /* @status    APPROVED (LTE, LTE_A_PRO, NBIOT) */
    spare := omit,
    iei := omit,
    iel := ?,
    rP_PDU := {
      RP_ACK := cr_RP_ACK_ul
    }
  };

  template (value) CP_DATA_Type cs_CP_DATA (template (value) TransactionIdentifier_Type p_TransactionIdentifier,
                                            template (omit) CP_UserData_Type p_CP_UserData) :=
  { /* @status    APPROVED (LTE, LTE_A_PRO, NBIOT) */
    transactionIdentifier := p_TransactionIdentifier,
    protocolDiscriminator := tsc_PD_SMS,
    messageType := tsc_MT_CP_DATA,
    cP_UserData := p_CP_UserData
  };

  template (present) CP_DATA_Type cr_CP_DATA (template TransactionIdentifier_Type p_TransactionIdentifier,
                                              template CP_UserData_Type p_CP_UserData) :=
  { /* @status    APPROVED (LTE, LTE_A_PRO, NBIOT) */
    transactionIdentifier := p_TransactionIdentifier,
    protocolDiscriminator := tsc_PD_SMS,
    messageType := tsc_MT_CP_DATA,
    cP_UserData := p_CP_UserData
  };

  template (value) CP_ACK_Type cs_CP_ACK(template (value) TransactionIdentifier_Type p_TransactionIdentifier) :=
  { /* @status    APPROVED (LTE, LTE_A_PRO, NBIOT) */
    transactionIdentifier := p_TransactionIdentifier,
    protocolDiscriminator := tsc_PD_SMS,
    messageType := tsc_MT_CP_ACK
  };

  template (present) CP_ACK_Type cr_CP_ACK(template TransactionIdentifier_Type p_TransactionIdentifier) :=
  { /* @status    APPROVED (LTE, LTE_A_PRO, NBIOT) */
    transactionIdentifier := p_TransactionIdentifier,
    protocolDiscriminator := tsc_PD_SMS,
    messageType := tsc_MT_CP_ACK
  };

  template (present) CP_PDU_Type cr_CP_DATA_PDU(template TransactionIdentifier_Type p_TransactionIdentifier,
                                                template CP_UserData_Type p_CP_UserData) :=
  { /* @status    APPROVED (LTE, LTE_A_PRO, NBIOT) */
    CP_DATA := cr_CP_DATA (p_TransactionIdentifier, p_CP_UserData)
  };

  template (value) CP_PDU_Type cs_CP_DATA_PDU (template (value) TransactionIdentifier_Type p_TransactionIdentifier,
                                               template (value) CP_UserData_Type p_CP_UserData) :=
  { /* @status    APPROVED (LTE, LTE_A_PRO, NBIOT) */
    CP_DATA := cs_CP_DATA (p_TransactionIdentifier, p_CP_UserData)
  };

  template (present) CP_PDU_Type cr_CP_ACK_PDU(template TransactionIdentifier_Type p_TransactionIdentifier) :=
  { /* @status    APPROVED (LTE, LTE_A_PRO, NBIOT) */
    CP_ACK := cr_CP_ACK (p_TransactionIdentifier)
  };

  template (value) CP_PDU_Type cs_CP_ACK_PDU(template (value) TransactionIdentifier_Type p_TransactionIdentifier) :=
  { /* @status    APPROVED (LTE, LTE_A_PRO, NBIOT) */
    CP_ACK := cs_CP_ACK (p_TransactionIdentifier)
  };

  template (omit) RP_OriginatorAddress_dl cs_RP_OriginatorAddress_dl :=
  { /* @status    APPROVED (IMS, LTE, LTE_A_PRO, LTE_A_R12, NBIOT) */
    spare := omit,
    iei := omit,
    iel := '04'O, // 4 semi-octets   @sic R5s100586 sic@
    typeOfNumberingPlan := cs_TypeOfNumberingPlan,
    digits := '001122'O
  };

  template (present) RP_OriginatorAddress_ul cr_RP_OriginatorAddress_ul :=
  { /* @status    APPROVED (IMS, LTE, LTE_A_PRO, LTE_A_R12, NBIOT) */
    spare := omit,
    iei := omit,
    iel := '00'O
  };

  template (present) RP_DestinationAddress_ul cr_RP_DestinationAddress_ul(template (present) octetstring p_Digits := ?) :=
  { /* @status    APPROVED (IMS, LTE, LTE_A_PRO, LTE_A_R12, NBIOT) */
    spare := omit,
    iei := omit,
    iel := ?,
    typeOfNumberingPlan := cr_TypeOfNumberingPlanAny,
    digits := p_Digits
  };

  template (omit) RP_DestinationAddress_dl cs_RP_DestinationAddress_dl :=
  { /* @status    APPROVED (IMS, LTE, LTE_A_PRO, LTE_A_R12, NBIOT) */
    spare := omit,
    iei := omit,
    iel := '00'O
  };

  template (present) RP_UserData cr_RP_UserData_SUBMIT(template (present) SMS_SUBMIT_Type p_SMS_SUBMIT := cr_SMS_SUBMIT_VPF_REF) :=
  { /* @status    APPROVED (IMS, LTE, LTE_A_PRO, LTE_A_R12, NBIOT) */
    /* NOTE: cr_SMS_SUBMIT_VPF_REF fits with AT command !! */
    spare := omit,
    iei := omit,
    iel := ?,
    tP_PDU := {
      SMS_SUBMIT := p_SMS_SUBMIT
    }
  };

  template (present) RP_DATA_ul_Type cr_RP_DATA_ul_SUBMIT(template (present) RP_UserData p_RP_UserData := cr_RP_UserData_SUBMIT,
                                                          template (present) octetstring p_Digits := ?) :=
  { /* @status    APPROVED (IMS, LTE, LTE_A_PRO, LTE_A_R12, NBIOT) */
    spare5 := '00000'B,
    rP_MessageTypeIndicator := tsc_MT_RP_DATA_ul,
    rP_MessageReference := ?,
    rP_OriginatorAddress := cr_RP_OriginatorAddress_ul,
    rP_DestinationAddress := cr_RP_DestinationAddress_ul(p_Digits),
    rP_UserData := p_RP_UserData
  };

  template (value) RP_ACK_Type cs_RP_ACK_dl(O1_Type p_MsgRef) :=
  { /* @status    APPROVED (LTE, LTE_A_PRO, NBIOT) */
    spare5 := '00000'B,
    rP_MessageTypeIndicator := tsc_MT_RP_ACK_dl,
    rP_MessageReference := p_MsgRef,   // @sic R5s100604 sic@
    rP_UserData := omit
  };

  template (present) RP_ACK_Type  cr_RP_ACK_ul :=
  { /* @status    APPROVED (IMS, LTE, LTE_A_PRO, LTE_A_R12, NBIOT) */
    spare5 := '00000'B,
    rP_MessageTypeIndicator := tsc_MT_RP_ACK_ul,
    rP_MessageReference := ?,
    rP_UserData := *
  };

  template (present) TP_ProtocolIdentifier_Type cr_TP_ProtocolIdentifier :=
  { /* @status    APPROVED (IMS, LTE, LTE_A_PRO, LTE_A_R12, NBIOT) */
    // @sic R5s100586 sic@
    pidType := '00'B,
    interworking := '0'B,
    pidValue := '00000'B  // @sic R5s100773 sic@
  };

  template (value) TP_ProtocolIdentifier_Type cs_TP_ProtocolIdentifier :=
  { /* @status    APPROVED (IMS, LTE, LTE_A_PRO, LTE_A_R12, NBIOT) */
    // @sic R5s100586 sic@
    pidType := '00'B,
    interworking := '0'B,
    pidValue := '00000'B  // @sic R5s100773 sic@
  };

  template (value) TP_DataCodingScheme_Type cs_TP_DataCodingScheme :=
  { /* @status    APPROVED (IMS, LTE, LTE_A_PRO, NBIOT) */
    codingGroup := '0000'B,
    codeValue := '0000'B
  };

  template (present) TP_Address_Type cr_TP_AddressAny :=
  { /* @status    APPROVED (IMS, LTE, LTE_A_PRO, LTE_A_R12, NBIOT) */
    iel := ?,
    typeOfNumberingPlan := cr_TypeOfNumberingPlanAny,
    digits := *
  };

  template (value) TP_Address_Type cs_TP_Address (octetstring p_Digits) :=
  { /* @status    APPROVED (IMS, LTE, LTE_A_PRO, NBIOT) */
    iel := int2oct(2 * lengthof(p_Digits), 1),
    // length is number of useful semi-octets
    // as p_digits is declared as octetstring the number must be even
    typeOfNumberingPlan := cs_TypeOfNumberingPlan,
    digits := p_Digits
  };

  template (present) SMS_SUBMIT_Type cr_SMS_SUBMIT(template (present) B2_Type p_ValidityPeriodFormat := '??'B,
                                                   template TP_ValidityPeriod_Type p_ValidityPeriod := *,
                                                   template (present) TP_UserDataLength_Type p_UserDataLength := ?) :=
  { /* @status    APPROVED (IMS, LTE, LTE_A_PRO, LTE_A_R12, NBIOT) */
    tP_ReplyPath := '?'B,
    tP_UserDataHeaderIndicator := '?'B,
    tP_StatusReportRequest := '?'B,
    tP_ValidityPeriodFormat := p_ValidityPeriodFormat,
    tP_RejectDuplicates := '?'B,
    tP_MessageTypeIndicator := tsc_MT_SMS_SUBMIT,
    tP_MessageReference := ?,
    tP_DestinationAddress := cr_TP_AddressAny,
    tP_ProtocolIdentifier := cr_TP_ProtocolIdentifier,
    tP_DataCodingScheme_Type := ?,
    tP_ValidityPeriod  := p_ValidityPeriod,
    tP_UserDataLength := p_UserDataLength, // @sic R5s120530 sic@
    tP_UserData := ? // any data will do
  };

  template (present) TP_ValidityPeriod_Type cr_TP_ValidityPeriod_Relative(integer p_Value) := { TP_ValidityPeriodRelative := int2oct(p_Value, 1) };  /* @status    APPROVED (IMS, LTE, LTE_A_PRO, LTE_A_R12, NBIOT) */

  template (present) SMS_SUBMIT_Type cr_SMS_SUBMIT_VPF_REF := cr_SMS_SUBMIT('10'B, cr_TP_ValidityPeriod_Relative(167), int2oct(160, 1));             /* @status    APPROVED (IMS, LTE, LTE_A_PRO, LTE_A_R12, NBIOT) */

  template (present) SMS_SUBMIT_Type cr_SMS_SUBMIT_AnyVP := cr_SMS_SUBMIT(-, *);          /* @status    APPROVED (LTE, LTE_A_PRO, NBIOT)
                                                                                             @sic R5s141400 sic@ @sic R5s150777 sic@ */

  /*
   * @desc      wrapper function for encvalue
   * @param     p_CP_PDU
   * @return    octetstring
   * @status    APPROVED (LTE, LTE_A_PRO, NBIOT)
   */
  function f_SMS_PDU_Encvalue(template (value) CP_PDU_Type p_CP_PDU) return octetstring
  {
    var bitstring v_Bitstring := encvalue(p_CP_PDU);
    var octetstring v_Octetstring := bit2oct(f_OctetAlignedBitString(v_Bitstring));
    return v_Octetstring;
  }

  /*
   * @desc      Decode given bitstring as CP_PDU and match it against the expected CP_PDU
   *            if the bitstring cannot be fully decoded or it does not match the expected CP_PDU verdict FAIL is assigned
   *            as the function is always used in the test body
   * @param     p_EncodedSMS_Message
   * @param     p_Expected_CP_PDU
   * @param     p_Testcase
   * @param     p_Step
   * @return    CP_PDU_Type
   * @status    APPROVED (LTE, LTE_A_PRO, NBIOT)
   */
  function f_SMS_CP_PDU_DecodeAndMatch(bitstring p_EncodedSMS_Message,
                                       template CP_PDU_Type p_Expected_CP_PDU,
                                       charstring p_Testcase,
                                       charstring p_Step) return CP_PDU_Type
  {
    var CP_PDU_Type v_Received_CP_PDU;
    var integer v_DecodeResult := decvalue(p_EncodedSMS_Message, v_Received_CP_PDU);
    
    if (v_DecodeResult != 0) {
      f_SetVerdict(fail,__FILE__, __LINE__, p_Testcase & ": SMS_CP_PDU cannot be decoded in " & p_Step);
    }
    if (not match(v_Received_CP_PDU, p_Expected_CP_PDU))  {
      //* @verdict fail Received decoded template does not match with the expected template
      f_SetVerdict(fail,__FILE__, __LINE__, p_Testcase & ": SMS_CP_PDU cannot be matched in " & p_Step);
    }
    return v_Received_CP_PDU;
  }

}
