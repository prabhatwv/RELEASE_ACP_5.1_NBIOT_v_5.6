/******************************************************************************/
// @copyright   Copyright Notification
//   No part may be reproduced except as authorized by written permission.
//   The copyright and the foregoing restriction extend to reproduction in all media.
//   Trademark 2019, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).
//   All rights reserved.
// @version: 36.523-3 v15.3.0
// $Date: 2018-12-16 11:45:57 +0100 (Sun, 16 Dec 2018) $
// $Rev: 23491 $
/******************************************************************************/

module NasEmu_Component_EUTRA {

  import from EUTRA_ASP_SrbDefs all;
  import from EUTRA_Component all;
  import from NasEmu_AspTypes_EUTRA all;
  import from NasEmu_CtrlAspTypes all;

  type component NASEMU_EUTRA_PTC { /* @status    APPROVED (ENDC, IMS, IMS_IRAT, LTE, LTE_A_IRAT, LTE_A_PRO, LTE_A_R10_R11, LTE_A_R12, LTE_IRAT, NBIOT, POS, UTRAN) */
    /* @sic R5s160711 BASELINE MOVING 2016 - NBIOT: NasSecurity no global variable anymore sic@ */
    port NASEMU_EUTRA_SYSTEM_PORT SYS_SRB;
    port NASEMU_EUTRA_SRB_PORT    TC_SRB;
    port NASEMU_CTRL_PORT         CTRL;
  };

  type component NASEMU_EUTRA_SYSTEM { /* @status    APPROVED (ENDC, IMS, IMS_IRAT, LTE, LTE_A_IRAT, LTE_A_PRO, LTE_A_R10_R11, LTE_A_R12, LTE_IRAT, NBIOT, POS, UTRAN) */
    port NASEMU_EUTRA_SYSTEM_PORT  E_SRB;
  };

  /*
   * @desc      Create NASEMU, connect it with EUTRA PTC and map the system ports
   * @param     p_System
   * @param     p_Eutra
   * @return    NASEMU_EUTRA_PTC
   * @status    APPROVED (ENDC, IMS, IMS_IRAT, LTE, LTE_A_IRAT, LTE_A_PRO, LTE_A_R10_R11, LTE_A_R12, LTE_IRAT, NBIOT, POS, UTRAN)
   */
  function f_NasEmu_CreateConnectAndMap_EUTRA(NASEMU_EUTRA_SYSTEM p_System,
                                              EUTRA_PTC p_Eutra) return NASEMU_EUTRA_PTC
  {
    var NASEMU_EUTRA_PTC v_NASEMU_EUTRA_PTC := null;
    
    if (p_Eutra != null) {
      
      // create NAS emulation:
      v_NASEMU_EUTRA_PTC := NASEMU_EUTRA_PTC.create("NASEMU_EUTRA") alive;
      
      // connect NAS emulation:
      connect(p_Eutra:NASCTRL,  v_NASEMU_EUTRA_PTC:CTRL);
      connect(p_Eutra:SRB,      v_NASEMU_EUTRA_PTC:TC_SRB);
      
      // map NASEMU system ports:
      map(v_NASEMU_EUTRA_PTC:SYS_SRB, p_System:E_SRB);
    }
    return v_NASEMU_EUTRA_PTC;
  }

}
