/******************************************************************************/
// @copyright   Copyright Notification
//   No part may be reproduced except as authorized by written permission.
//   The copyright and the foregoing restriction extend to reproduction in all media.
//   Trademark 2019, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).
//   All rights reserved.
// @version: 36.523-3 v15.3.0
// $Date: 2019-03-20 13:24:23 +0100 (Wed, 20 Mar 2019) $
// $Rev: 24274 $
/******************************************************************************/
module EUTRA_NB_CommonMAC {

  import from EUTRA_RRC_ASN1_Definitions language "ASN.1:2002" all with {encode "UNALIGNED_PER_OctetAligned"};
  import from CommonAspDefs all;
  import from CommonDefs all;
  import from EUTRA_NB_ASP_L2DataDefs all;
  import from EUTRA_NB_ASP_TypeDefs all;
  import from EUTRA_NB_CommonL2 all;

  const B5_Type tsc_LchId_TA := '11101'B;                       /* 36.321 Table 6.2.1-1   @status    APPROVED (LTE, LTE_A_R10_R11, NBIOT) */

  const B5_Type tsc_LchId_DRX := '11110'B;                      /* 36.321 Table 6.2.1-1   @status    APPROVED (LTE, NBIOT) */

  const B5_Type tsc_LchId_ShortBSR := '11101'B;                 /* 36.321 Table 6.2.1-2   @status    APPROVED (LTE, LTE_A_R10_R11, NBIOT) */

  const B5_Type tsc_LchId_CRNTI :='11011'B;                     /* @status    APPROVED (LTE, NBIOT) */

  const B1_Type tsc_Poll := '1'B;                               /* @status    APPROVED (LTE, LTE_A_R12, NBIOT) */

  const B1_Type tsc_NoPoll  := '0'B;                            /* @status    APPROVED (LTE, LTE_A_PRO, LTE_A_R10_R11, LTE_A_R12, NBIOT) */

  const B2_Type tsc_B2_Reserved := '00'B;                       /* @status    APPROVED (LTE, LTE_A_PRO, LTE_A_R10_R11, LTE_A_R12, NBIOT) */

  const B1_Type tsc_ExtensionMoreHeaders := '1'B;               /* @status    APPROVED (LTE, LTE_A_PRO, LTE_A_R10_R11, LTE_A_R12, NBIOT) */

  const B1_Type tsc_ExtensionNoMoreHeaders := '0'B;             /* @status    APPROVED (LTE, LTE_A_PRO, LTE_A_R10_R11, LTE_A_R12, NBIOT) */

  const B5_Type tsc_LchId_Padding  := '11111'B;                 /* @status    APPROVED (LTE, LTE_A_PRO, LTE_A_R10_R11, LTE_A_R12, NBIOT) */

  const MAC_CTRL_TimingAdvance_Type tsc_MAC_CTRL_TimingAdvance_0 := '00011111'B;    /* value of 31 36.213 clause 4.2.3 NTA,new = NTA,old + (TA-31)*16 results in  NTA,new = NTA,old
                                                                                       @status    APPROVED (LTE, LTE_A_R10_R11, NBIOT) */

  const MAC_CTRL_TimingAdvance_Type tsc_MAC_CTRL_TimingAdvance_Max := '00111111'B;  /* value of 63 36.213 clause 4.2.3 NTA,new = NTA,old + (63-31)*16
                                                                                       @status    APPROVED (NBIOT)*/

  template (value) PDCP_SDU_Type crs_PDCP_SDU_7B    := f_GetN_OctetsFromPRBS(40,7);     /* @status    APPROVED (LTE, NBIOT) */

  template (value) PDCP_SDU_Type crs_PDCP_SDU_10B   := f_GetN_OctetsFromPRBS(0,10);     /* @status    APPROVED (LTE, LTE_A_PRO, LTE_A_R10_R11, NBIOT) */

  template (value) PDCP_SDU_Type crs_PDCP_SDU_12B   := f_GetN_OctetsFromPRBS(100,12);   /* @status    APPROVED (LTE, NBIOT) */

  template (value) PDCP_SDU_Type crs_Padding_9Bytes := f_GetN_OctetsFromPRBS(1000, 9);  /* @status    APPROVED (LTE, NBIOT) */

  template (value) RAR_RapIdCtrl_Type cs_RapIdCtrl_UnMatched :=
  { /* @status    APPROVED (LTE, NBIOT) */
    Unmatched := true   /* SS shall use RAPID being different from preamble sent by the UE;
                           SS shall calculate this RAPID acc. to RAPID := (RAPID + 3) mod 64 */
  };

  template (value) TempC_RNTI_Type cs_TempC_RNTI_Explicit(C_RNTI p_C_RNTI) :=
  { /* @status    APPROVED (LTE, NBIOT) */
    Explicit  := p_C_RNTI
  };

  template (value) MAC_PDU_SubHeader_Type cs_MAC_PDU_PaddingSubHeader :=
  { /* @status    APPROVED (LTE, LTE_A_PRO, LTE_A_R10_R11, LTE_A_R12, NBIOT) */
    Reserved   := tsc_B2_Reserved,       /* Reserved bits */
    Extension  := tsc_ExtensionNoMoreHeaders,
    LCID       := tsc_LchId_Padding,
    Length     := omit
  };

  template (value) MAC_PDU_SubHeader_Type cds_MAC_PDU_PaddingSubHeader_MoreSubHeaders modifies cs_MAC_PDU_PaddingSubHeader :=
  { /* @status    APPROVED (LTE, LTE_A_R10_R11, NBIOT) */
    Extension          := tsc_ExtensionMoreHeaders
  };

  template (value) MAC_PDU_SubHeader_Type cs_MAC_PDU_SubHeader_TA :=
  { /* @status    APPROVED (LTE, LTE_A_R10_R11, NBIOT) */
    Reserved := tsc_B2_Reserved,       /* Reserved bits */
    Extension := tsc_ExtensionNoMoreHeaders,
    LCID := tsc_LchId_TA,
    Length := omit
  };

  template (value) MAC_PDU_SubHeader_Type cs_MAC_PDU_SubHeader_DRX_MoreSubHeaders := //@sic R5s110618 sic@
  { /* @status    APPROVED (LTE, NBIOT) */
    Reserved := tsc_B2_Reserved,       /* Reserved bits */
    Extension := tsc_ExtensionMoreHeaders,
    LCID := tsc_LchId_DRX,
    Length := omit
  };

  template (value) MAC_PDU_Length_Type cs_MAC_PDU_Length_7Bit(integer p_Length) :=
  { /* @status    APPROVED (LTE, LTE_A_PRO, LTE_A_R10_R11, LTE_A_R12, NBIOT) */
    Format := '0'B, // 7 bit Length
    Value := int2bit(p_Length,7)
  };

  template (value) MAC_PDU_Length_Type cs_MAC_PDU_Length_15Bit(integer p_Length) :=
  { /* @status    APPROVED (LTE, NBIOT) */
    Format := '1'B,                                 // 15 bit Length
    Value  := int2bit (p_Length,15)
  };

  template (present) MAC_PDU_Length_Type cr_MAC_PDU_Length_7Bit(B7_Type p_Length) :=
  { /* @status    APPROVED (LTE, LTE_A_R10_R11, NBIOT) */
    Format := '0'B, // 7 bit Length
    Value := p_Length
  };

  template (present) MAC_PDU_Length_Type cr_MAC_PDU_Length_15Bit (B15_Type p_Length) :=
  { /* @status    APPROVED (LTE, NBIOT) */
    Format := '1'B, // 7 bit Length
    Value := p_Length
  };

  template (value) MAC_CTRL_ElementList_Type cs_CTRL_Elem_TA(MAC_CTRL_TimingAdvance_Type p_TimingAdvance) :=
  { /* @status    APPROVED (LTE, LTE_A_R10_R11, NBIOT) */
    ShortBSR               := omit,        /* UL only */
    LongBSR                := omit,        /* UL only */
    C_RNTI                 := omit,        /* UL only */
    // DRX command CTRL Elem is 0 bits length
    ContentionResolutionID := omit,        /* DL only */
    TimingAdvance          := p_TimingAdvance,
    PowerHeadRoom          := omit,         /* UL only */
    ScellActDeact          := omit,        // @sic CA ASP implementation sic@
    ExtPowerHeadRoom       := omit,        // @sic CA ASP implementation sic@
    DC_PowerHeadRoom       := omit
  };

  template (value) MAC_CTRL_ElementList_Type cs_CTRL_Elem_TA_0 := cs_CTRL_Elem_TA(tsc_MAC_CTRL_TimingAdvance_0); /* @status    APPROVED (LTE, LTE_A_R10_R11, NBIOT) */

  template (present) MAC_CTRL_ShortBSR_Type cr_MAC_BSR_Short(template (present) B2_Type p_LCG,
                                                             template (present) B6_Type p_BSR_Value) :=
  { /* @status    APPROVED (LTE, LTE_A_R10_R11, NBIOT) */
    LCG     := p_LCG,
    Value   := p_BSR_Value
  };

  template (present) MAC_CTRL_ElementList_Type cr_CTRL_Elem_ShortBSR(template (present) B2_Type p_LCG,
                                                                     template (present) B6_Type p_BSR_Value) :=
  { /* @status    APPROVED (LTE, LTE_A_R10_R11, NBIOT) */
    ShortBSR               := cr_MAC_BSR_Short(p_LCG, p_BSR_Value),  /* UL only */
    LongBSR                := omit,                                  /* UL only */
    C_RNTI                 := omit,                                  /* UL only */
    ContentionResolutionID := omit,                                  /* DL only */
    TimingAdvance          := omit,
    PowerHeadRoom          := omit,                                   /* UL only */
    ScellActDeact          := omit,        // @sic CA ASP implementation sic@
    ExtPowerHeadRoom       := omit,        // @sic CA ASP implementation sic@
    DC_PowerHeadRoom       := omit
  };

  template (present) MAC_CTRL_ElementList_Type cr_MAC_CTRL_ElementList_CRNTI_BSR(template (present) C_RNTI p_C_RNTI,
                                                                                 template (present) MAC_CTRL_ShortBSR_Type p_ShortBSR) :=
  { /* @status    APPROVED (LTE, NBIOT) */
    ShortBSR               := p_ShortBSR,  /* UL only */
    LongBSR                := omit,        /* UL only */
    C_RNTI                 := p_C_RNTI,    /* UL only */

    ContentionResolutionID := omit,        /* DL only */
    TimingAdvance          := omit,        /* DL only */
    PowerHeadRoom          := omit,        /* UL only */
    ScellActDeact          := omit,        // @sic CA ASP implementation sic@
    ExtPowerHeadRoom       := omit,        // @sic CA ASP implementation sic@
    DC_PowerHeadRoom       := omit
  };

  template (value) MAC_PDU_Type cs_MAC_PDU_TimingAdvance_0 :=
  { /* @status    APPROVED (LTE, LTE_A_R10_R11, NBIOT) */
    Header                 := { cs_MAC_PDU_SubHeader_TA },      /* list of MAC PDU SubHeaders corresponding to
                                                                 * MAC control elements and MAC SDUs */
    CtrlElementList        := cs_CTRL_Elem_TA_0,                /* Mac control elements; acc. to 36.321 cl. 6.1.2
                                                                 * "MAC control elements, are always placed before any MAC SDU." */
    SduList                := omit,     /* MAC SDUs, which can typically be RLC PDUs */
    Padding                := omit      /* Octet aligned Padding if more than or equal to 2 bytes */
  };

  template (value) MAC_PDU_Type cs_MAC_PDU_TimingAdvance_1Padding(MAC_CTRL_TimingAdvance_Type p_TimingAdvance := tsc_MAC_CTRL_TimingAdvance_0) :=
  { /* @status    APPROVED (LTE, NBIOT) */
    Header := {                                                 /* list of MAC PDU SubHeaders corresponding to
                                                                 * MAC control elements and MAC SDUs */
      cds_MAC_PDU_PaddingSubHeader_MoreSubHeaders,
      cs_MAC_PDU_SubHeader_TA
      
    },
    CtrlElementList := cs_CTRL_Elem_TA(p_TimingAdvance),        /* Mac control elements; acc. to 36.321 cl. 6.1.2
                                                                 * "MAC control elements, are always placed before any MAC SDU." */
    SduList         := omit, /* MAC SDUs, which can typically be RLC PDUs */
    Padding         := omit  /* Octet aligned Padding if more than or equal to 2 bytes */
  };

  template (value) MAC_PDU_Type cs_MAC_PDU_DRX_Command_10Padding := //@sic R5s110618 sic@
  { /* @status    APPROVED (LTE, NBIOT) */
    Header := {         /* list of MAC PDU SubHeaders corresponding to
                         * MAC control elements and MAC SDUs */
      //@sic R5s100692 sic@
      cs_MAC_PDU_SubHeader_DRX_MoreSubHeaders,
      cs_MAC_PDU_PaddingSubHeader
    },
    CtrlElementList        := omit,                             /* Mac control elements; acc. to 36.321 cl. 6.1.2
                                                                 * "MAC control elements, are always placed before any MAC SDU." */
    SduList                := omit,                             /* MAC SDUs, which can typically be RLC PDUs */
    Padding                := crs_Padding_9Bytes                /* Octet aligned Padding if more than or equal to 2 bytes */
  };

  /*
   * @desc      encode RLC PDU
   * @param     p_RLC_PDU
   * @return    octetstring
   * @status    APPROVED (LTE, LTE_A_PRO, LTE_A_R10_R11, LTE_A_R12, NBIOT)
   */
  function f_RLC_PDU_Encvalue(template (value) RLC_PDU_Type p_RLC_PDU) return octetstring
  {
    var bitstring v_Bitstring := encvalue(p_RLC_PDU);
    var octetstring v_Octetstring := bit2oct(f_OctetAlignedBitString(v_Bitstring));
    return v_Octetstring;
  }

  /*
   * @desc      encode RLC data PDU with one SDU
   * @param     p_SN
   * @param     p_Poll
   * @param     p_RLC_SDU
   * @return    octetstring
   * @status    APPROVED (LTE, LTE_A_PRO, LTE_A_R10_R11, LTE_A_R12, NBIOT)
   */
  function f_RLC_AMD_1PDU_Encvalue(integer p_SN,
                                   B1_Type p_Poll,
                                   RLC_DataField_Type p_RLC_SDU) return octetstring
  { /* @sic R5s170080: new common function to improve readability sic@ */
    var template (value) RLC_PDU_Type v_RLC_PDU := {
      AMD := cs_AMD_PDUoneSDU(p_SN, p_Poll, p_RLC_SDU)
    };
    return f_RLC_PDU_Encvalue(v_RLC_PDU);
  }

  /*
   * @desc      encode RLC status PDU
   * @param     p_ACK_SN
   * @return    octetstring
   * @status    APPROVED (LTE, LTE_A_PRO, LTE_A_R10_R11, LTE_A_R12, NBIOT)
   */
  function f_RLC_Status_1PDU_Encvalue(integer p_ACK_SN) return octetstring
  {
    var template (value) RLC_PDU_Type v_RLC_PDU := {
      Status   := cs_RLC_AM_StatusPDU_ACK_SN(p_ACK_SN)
    };
    return f_RLC_PDU_Encvalue(v_RLC_PDU);
  }

  /*
   * @desc      decode MAC PDU
   * @param     p_MAC_SDU
   * @return    RLC_AM_StatusPDU_Type
   * @status    APPROVED (LTE, LTE_A_R12, NBIOT)
   */
  function f_MAC_SDU_Decode_ToRLC_AM_StatusPDU(MAC_SDU_Type p_MAC_SDU) return RLC_AM_StatusPDU_Type
  {
    var RLC_AM_StatusPDU_Type v_RLC_PDU;
    var bitstring v_Bitstring := oct2bit(p_MAC_SDU);
    var integer v_Result := decvalue(v_Bitstring, v_RLC_PDU);
    if (v_Result != 0) {
      FatalError(__FILE__, __LINE__, "RLC PDU cannot be decoded");
    }
    return v_RLC_PDU;
  }

}
