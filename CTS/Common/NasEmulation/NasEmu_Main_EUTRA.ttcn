/******************************************************************************/
// @copyright   Copyright Notification
//   No part may be reproduced except as authorized by written permission.
//   The copyright and the foregoing restriction extend to reproduction in all media.
//   Trademark 2019, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).
//   All rights reserved.
// @version: 36.523-3 v15.3.0
// $Date: 2018-12-16 11:45:57 +0100 (Sun, 16 Dec 2018) $
// $Rev: 23491 $
/******************************************************************************/

module NasEmu_Main_EUTRA {

  import from EUTRA_RRC_ASN1_Definitions language "ASN.1:2002" all with {encode "UNALIGNED_PER_OctetAligned"};
  import from Common4G5G_Templates all;
  import from EPS_NAS_MsgContainers all;
  import from EUTRA_ASP_SrbDefs all;
  import from EUTRA_CommonDefs all;
  import from EUTRA_NB_CommonDefs all;
  import from NasEmu_AspTypes_EUTRA all;
  import from NasEmu_Common all;
  import from NasEmu_Common4G5G all;
  import from NasEmu_Component_EUTRA all;

  template (present) SRB_COMMON_REQ car_EUTRA_SignallingAspFromTC :=
  { /* @status    APPROVED (ENDC, IMS, IMS_IRAT, LTE, LTE_A_IRAT, LTE_A_PRO, LTE_A_R10_R11, LTE_A_R12, LTE_IRAT, NBIOT, POS, UTRAN) */
    Common := ?,
    Signalling := {
      Rrc := *,
      Nas := *
    }
  };

  template (value) SRB_COMMON_IND cas_EUTRA_SignallingAspToTC_Init(template (value) IndAspCommonPart_Type p_Common) :=
  { /* @status    APPROVED (ENDC, IMS, IMS_IRAT, LTE, LTE_A_IRAT, LTE_A_PRO, LTE_A_R10_R11, LTE_A_R12, LTE_IRAT, NBIOT, POS, UTRAN) */
    Common := p_Common,
    Signalling := {
      Rrc := omit,
      Nas := omit
    }
  };

  template (present) EUTRA_RRC_PDU_IND car_EUTRA_PduFromSYS  :=
  { /* @status    APPROVED (ENDC, IMS, IMS_IRAT, LTE, LTE_A_IRAT, LTE_A_PRO, LTE_A_R10_R11, LTE_A_R12, LTE_IRAT, NBIOT, POS, UTRAN) */
    Common := ?,
    RrcPdu := ?
  };

  template (value) EUTRA_RRC_PDU_REQ cas_EUTRA_PduToSYS(template (value) ReqAspCommonPart_Type p_Common,
                                                        template (value) RRC_MSG_Request_Type  p_RRC_MSG_Request) :=
  { /* @status    APPROVED (ENDC, IMS, IMS_IRAT, LTE, LTE_A_IRAT, LTE_A_PRO, LTE_A_R10_R11, LTE_A_R12, LTE_IRAT, NBIOT, POS, UTRAN) */
    Common := p_Common,
    RrcPdu := p_RRC_MSG_Request
  };

  template (value) RRC_MSG_Request_Type cs_EUTRA_RRC_MSG_RequestDCCH(template (value) DL_DCCH_Message p_DcchRrcPdu) :=
  { /* @status    APPROVED (ENDC, IMS, IMS_IRAT, LTE, LTE_A_IRAT, LTE_A_PRO, LTE_A_R10_R11, LTE_A_R12, LTE_IRAT, NBIOT, POS, UTRAN) */
    Dcch := p_DcchRrcPdu
  };

  template (value) DL_DCCH_Message cs_DLInformationTransfer(RRC_TransactionIdentifier p_RRC_TI,
                                                            template (value) DedicatedInfoNAS  p_NAS_DedicatedInformation)  :=
  { /* @status    APPROVED (ENDC, IMS, IMS_IRAT, LTE, LTE_A_IRAT, LTE_A_PRO, LTE_A_R10_R11, LTE_A_R12, LTE_IRAT, NBIOT, POS, UTRAN) */
    message_ := {
      c1 := {
        dlInformationTransfer := {
          rrc_TransactionIdentifier := p_RRC_TI,
          criticalExtensions := {
            c1 := {
              dlInformationTransfer_r8 := {
                dedicatedInfoType := {
                  dedicatedInfoNAS := p_NAS_DedicatedInformation
                },
                nonCriticalExtension := omit
              }
            }
          }
        }
      }
    }
  };

  /*
   * @desc      Handling of ASPs coming from the test cases;
   *            if the ASP contains a NAS PDU this will be encoded, ciphered
   *            and either added to the given RRC PDU (piggybacking)
   *            or packed into a DLInformationTransfer PDU
   * @param     p_NasSecurityByRef  (by reference)
   * @status    APPROVED (ENDC, IMS, IMS_IRAT, LTE, LTE_A_IRAT, LTE_A_PRO, LTE_A_R10_R11, LTE_A_R12, LTE_IRAT, NBIOT, POS, UTRAN)
   */
  altstep a_AspFromTestcaseHandler_EUTRA(inout NasSecurity_Type p_NasSecurityByRef) runs on NASEMU_EUTRA_PTC
  { /* @sic R5s160711 BASELINE MOVING 2016 - NBIOT: p_NasSecurityByRef  sic@ */
    var SRB_COMMON_REQ v_AspFromTC;
    var ReqAspCommonPart_Type v_ReqAspCommonPart;
    var NAS_MSG_Request_Type v_NasPduFromTC;
    var template (value) RRC_MSG_Request_Type v_RrcPduToSYS;
    var template (value) DL_DCCH_Message v_DL_DCCH_Message;
    var DedicatedInfoNAS v_NAS_DedicatedInformation[maxDRB];   // we use an array as long as this is an inline type definition in ASN.1
    var integer v_NoOfNasPdus := 0;
    var boolean v_RrcPduIsPresent;
    var boolean v_NasPduIsPresent;
    var integer I;

    [] TC_SRB.receive(car_EUTRA_SignallingAspFromTC) -> value v_AspFromTC {

      v_ReqAspCommonPart := v_AspFromTC.Common;
      v_RrcPduIsPresent := ispresent(v_AspFromTC.Signalling.Rrc);
      v_NasPduIsPresent := ispresent(v_AspFromTC.Signalling.Nas);

      if (v_NasPduIsPresent) {
        // Note: in case of RRCConnectionReconfiguration there may be more than one NAS PDUs
        v_NoOfNasPdus := lengthof(v_AspFromTC.Signalling.Nas);       // Note: per ASN.1 definition length is restricted to maxDRB
        for (I:=0; I < v_NoOfNasPdus; I:= I + 1) {
          v_NasPduFromTC := v_AspFromTC.Signalling.Nas[I];
          v_NAS_DedicatedInformation[I] := f_EncodeAndCipherNasPdu(p_NasSecurityByRef, v_NasPduFromTC);   // encode NAS PDU; apply NAS security (if reqired)
        }
      }

      if (v_RrcPduIsPresent) {
        // ******* RRC PDU (containing RRC control information)

        v_RrcPduToSYS := v_AspFromTC.Signalling.Rrc;

        if (v_NasPduIsPresent) {
          // ***** NAS PDU BEING PIGGY BACKED
          if (not ischosen(v_RrcPduToSYS.Dcch)) {
            // ***** SRB0
            f_NasEmulationError(__FILE__, __LINE__, "no piggy-backing possible for CCCH message");
            return;     /* don't send anything */

          } else {
            // ***** SRB1/2
            v_DL_DCCH_Message := v_RrcPduToSYS.Dcch;  /* extract RRC message;
                                                         Note: since v_RrcPduToSYS is a union v_RrcPduToSYS.Dcch is never omit */

            if (ischosen(v_DL_DCCH_Message.message_.c1.rrcConnectionReconfiguration)) {     /* RRC message is RRCConnectionReconfiguration */
              // *** RRC CONNECTION RECONFIGURATION:
              for (I:=0; I < v_NoOfNasPdus; I:= I + 1) {
                v_DL_DCCH_Message.message_.c1.rrcConnectionReconfiguration.criticalExtensions.c1.rrcConnectionReconfiguration_r8.dedicatedInfoNASList[I] :=
                  v_NAS_DedicatedInformation[I];
              }

            } else if (ischosen(v_DL_DCCH_Message.message_.c1.dlInformationTransfer)) {     /* RRC message is DLInformationTransfer */
              // *** DL INFORMATION TRANSFER:
              if (v_NoOfNasPdus > 1) {
                f_NasEmulationError(__FILE__, __LINE__, "too many NAS PDUs (shall be a maximun of 1 PDU for DLInformationTransfer)");
                return;     /* don't send anything */
              } else {
                v_DL_DCCH_Message.message_.c1.dlInformationTransfer.criticalExtensions.c1.dlInformationTransfer_r8.dedicatedInfoType.dedicatedInfoNAS :=
                  v_NAS_DedicatedInformation[0];
              }

            } else {
              // *** OTHER RRC PDU:
              f_NasEmulationError(__FILE__, __LINE__, "RRC message can not carry piggy-backed NAS PDU");
              return;    /* don't do anything else */
            }
            v_RrcPduToSYS := cs_EUTRA_RRC_MSG_RequestDCCH(v_DL_DCCH_Message);
          }
        }
      } else {
        // ******* NAS PDU only:
        if (not v_NasPduIsPresent) {
          f_NasEmulationError(__FILE__, __LINE__, "neither RRC nor NAS PDU to be sent");
          return;     /* don't send anything */
        } else {
          if (v_NoOfNasPdus > 1) {
            f_NasEmulationError(__FILE__, __LINE__, "too many NAS PDUs (shall be a maximun of 1 PDU for DLInformationTransfer)");
            return;     /* don't send anything */
          } else {
            v_RrcPduToSYS := cs_EUTRA_RRC_MSG_RequestDCCH(cs_DLInformationTransfer(tsc_RRC_TI_Def, v_NAS_DedicatedInformation[0]));
          }
        }
      }
      SYS_SRB.send(cas_EUTRA_PduToSYS(v_ReqAspCommonPart, v_RrcPduToSYS));
    }
  }

  /*
   * @desc      handling of ASPs containing an RRC PDU from the system adaptor:
   *            if the RRC PDU contains a piggybacked NAS PDU or is an ULInformationTransfer PDU,
   *            the NAS PDU is extracted, deciphered (if necessary) and decoded
   * @param     p_NasSecurityByRef  (by reference)
   * @status    APPROVED (ENDC, IMS, IMS_IRAT, LTE, LTE_A_IRAT, LTE_A_PRO, LTE_A_R10_R11, LTE_A_R12, LTE_IRAT, NBIOT, POS, UTRAN)
   */
  altstep a_AspFromSystemAdaptorHandler_EUTRA(inout NasSecurity_Type p_NasSecurityByRef) runs on NASEMU_EUTRA_PTC
  { /* @sic R5s160711 BASELINE MOVING 2016 - NBIOT: p_NasSecurityByRef  sic@ */
    var EUTRA_RRC_PDU_IND v_AspFromSYS;
    var RRC_MSG_Indication_Type v_RrcIndication;
    var UL_DCCH_Message v_RrcPdu;
    var ULInformationTransfer_r8_IEs v_ULInformationTransfer;
    var template (value) SRB_COMMON_IND v_SRB_COMMON_IND;
    var template (value) NasEmu_DecodingInfo_Type v_DecodingInfo;
    var DedicatedInfoNAS v_NAS_DedicatedInformation[maxDRB];   // even though currently (DEC08) there is always only one DedicatedInfoNAS we use an array
    var integer v_NoOfNasPdus;
    var boolean v_RrcPduPresent;
    var boolean v_IntegrityError;
    var integer I;

    [] SYS_SRB.receive(car_EUTRA_PduFromSYS) -> value v_AspFromSYS {
      v_RrcIndication := v_AspFromSYS.RrcPdu;
      v_SRB_COMMON_IND := cas_EUTRA_SignallingAspToTC_Init(v_AspFromSYS.Common);   // RRC and NAS both are initialised as omit

      if (ischosen(v_RrcIndication.Ccch)) {                                     /* CCCH -> SRB0 */
        v_SRB_COMMON_IND.Signalling.Rrc := v_RrcIndication;

      } else {                                                                  /* DCCH -> SRB1/2 */

        v_RrcPdu := v_RrcIndication.Dcch;
        v_RrcPduPresent := true;
        v_NoOfNasPdus := 0;
        v_IntegrityError := false;

        if (ischosen(v_RrcPdu.message_.c1)) {

          if (ischosen(v_RrcPdu.message_.c1.rrcConnectionSetupComplete)) {
            // RRC CONNECTION SETUP COMPLETE
            if (ischosen(v_RrcPdu.message_.c1.rrcConnectionSetupComplete.criticalExtensions.c1.rrcConnectionSetupComplete_r8)) {
              v_NAS_DedicatedInformation[0] := v_RrcPdu.message_.c1.rrcConnectionSetupComplete.criticalExtensions.c1.rrcConnectionSetupComplete_r8.dedicatedInfoNAS;
              v_NoOfNasPdus := 1;
            }

          } else if (ischosen(v_RrcPdu.message_.c1.ulInformationTransfer)) {
            // UL INFORMATION TRANSFER
            if (ischosen(v_RrcPdu.message_.c1.ulInformationTransfer.criticalExtensions.c1.ulInformationTransfer_r8)) {
              v_ULInformationTransfer := v_RrcPdu.message_.c1.ulInformationTransfer.criticalExtensions.c1.ulInformationTransfer_r8;
              if (ischosen(v_ULInformationTransfer.dedicatedInfoType.dedicatedInfoNAS)) {  /* @sic R5s100135 sic@ */
                v_NAS_DedicatedInformation[0] := v_ULInformationTransfer.dedicatedInfoType.dedicatedInfoNAS;  /* @sic R5s100135 sic@ */
                v_RrcPduPresent := false;
                v_NoOfNasPdus := 1;
              }
              else {
                /* @sic R5-106675 (clause 4.4.3.2): ulInformationTransfer does not contain NAS PDU but CDMA2000 message(s) sic@ */
                /* @sic C2K TUNNELING: hand-over ulInformationTransfer to EUTRA sic@ */
              }
            }
          } else {
            // OTHER RRC PDU
          }
        } else if (ischosen(v_RrcPdu.message_.messageClassExtension.c2.rrcConnectionResumeComplete_r13)) {     /* @sic R5s160711 BASELINE MOVING 2016 sic@ */
          v_NAS_DedicatedInformation[0] := v_RrcPdu.message_.messageClassExtension.c2.rrcConnectionResumeComplete_r13.criticalExtensions.rrcConnectionResumeComplete_r13.dedicatedInfoNAS_r13;
          v_NoOfNasPdus := 1;
        }

        if (v_RrcPduPresent) {
          v_SRB_COMMON_IND.Signalling.Rrc := v_RrcIndication;
        }
        if (v_NoOfNasPdus > 0) {
          for (I := 0; I < v_NoOfNasPdus; I := I + 1) {
            v_DecodingInfo := f_DecipherAndDecodeNasPdu(p_NasSecurityByRef, v_NAS_DedicatedInformation[I]);
            v_SRB_COMMON_IND.Signalling.Nas[I] := v_DecodingInfo.NasIndication;         // omit if message cannot be decoded => shall lead to a test case error
            v_IntegrityError := v_IntegrityError or valueof(v_DecodingInfo.IntegrityError);    // valueof cannot be avoided here
          }
          if (v_IntegrityError) {                                                       // set Error choice of common part only if there is an error
            /* @sic R5s100024 sic@ */
            if (ischosen(v_SRB_COMMON_IND.Common.Status.Error)) {     /* there is already an error flagged by the SA */
              v_SRB_COMMON_IND.Common.Status.Error.Integrity.Nas := true;
            } else {                                                  /* the error needs to be set */
              v_SRB_COMMON_IND.Common.Status := cs_IndicationStatus_NasIntegrityError;
            }
          }
        }
      }
      TC_SRB.send(v_SRB_COMMON_IND);
    }
  }

  /*
   * @desc      NAS emulation main loop (started by the MTC)
   * @status    APPROVED (ENDC, IMS, IMS_IRAT, LTE, LTE_A_IRAT, LTE_A_PRO, LTE_A_R10_R11, LTE_A_R12, LTE_IRAT, NBIOT, POS, UTRAN)
   */
  function f_NASEMU_MainLoop_EUTRA() runs on NASEMU_EUTRA_PTC
  { /* @sic R5-106675 (clause 4.4.3.2): New parameter to tell the NAS emulator whether C2K pre-registration shall be supported or not sic@
       @sic C2K TUNNELING: parameter removed again sic@ */
    var NasSecurity_Type v_NasSecurityByRef := f_NasEmu_NasSecurity_Init();  /* @sic R5s160711 BASELINE MOVING 2016 - NBIOT: NasSecurity no global variable anymore sic@ */

    while (true) {
      alt {
        [] a_NasEmu_ConfigurationHandler(CTRL, v_NasSecurityByRef);
        [] a_AspFromTestcaseHandler_EUTRA(v_NasSecurityByRef);
        [] a_AspFromSystemAdaptorHandler_EUTRA(v_NasSecurityByRef);
        [] any port.receive {
          f_NasEmulationError(__FILE__, __LINE__, "unexpected message (skipped)");
          repeat;
        }
      }
    }
  }

}
