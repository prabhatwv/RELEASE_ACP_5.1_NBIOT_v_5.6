/******************************************************************************/
// @copyright   Copyright Notification
//   No part may be reproduced except as authorized by written permission.
//   The copyright and the foregoing restriction extend to reproduction in all media.
//   Trademark 2019, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).
//   All rights reserved.
// @version: 36.523-3 v15.3.0
// $Date: 2018-11-16 11:23:06 +0100 (Fri, 16 Nov 2018) $
// $Rev: 22934 $
/******************************************************************************/

module NBIOT_Component {

  import from NBIOT_RRC_ASN1_Definitions language "ASN.1:2002" all with {encode "UNALIGNED_PER_OctetAligned"};
  import from CommonAspDefs all;
  import from CommonDefs all;
  import from CommonIratDefs all;
  import from EUTRA_NB_ASP_TypeDefs all;
  import from EUTRA_NB_CommonDefs all;
  import from NAS_CommonTypeDefs all;
  import from NBIOT_ASP_L2DataDefs all;
  import from NBIOT_ASP_SrbDefs all;
  import from NBIOT_ASP_TypeDefs all;
  import from NBIOT_ASP_VirtualNoiseDefs all;
  import from NBIOT_CommonDefs all;
  import from NBIOT_Imported_EUTRA_ASN1_Types all;
  import from NBIOT_SecurityFunctions all;
  import from NasEmu_CtrlAspTypes all;
  import from NasEmu_L2Test_NBIOT all;
  import from TestcaseProperties all;
  import from UpperTesterPtcToMtcDefs all;

  type enumerated NB_Combination_Type { /* Combinations of system information blocks acc. to 36.508 clause 8.1.4.3.1.2
                                           @status    APPROVED (NBIOT) */
    c1,     /* SI1: SIB2-NB */
    c2,     /* SI1: SIB2-NB, SI2: SIB3-NB, SI3: SIB4-NB */
    c3,     /* SI1: SIB2-NB, SI2: SIB3-NB, SI3: SIB5-NB */
    c4,     /* SI1: SIB2-NB, SI2: SIB3-NB, SI3: SIB14-NB */
    c5,     /* SI1: SIB2-NB, SI2: SIB20-NB @sic R5-185113 sic@ */
    c6,      /* SI1: SIB2-NB, SI2: SIB22-NB @sic R5-185113 sic@ */
    c7      /*VZW NBIOT ADDED FOR TC 22.2 Supplementary Signalling*/
  };

  type  record NBIOT_CellSysInfo_Type { /* type defined to contain all sysinfo related to  a cell
                                           @status    APPROVED (NBIOT) */
    NB_BcchInfo_Type            BCCH_Info,                      // BCCH PDUs
    NB_Combination_Type         Combination                     // Combinations of system information blocks  (combinition acc. 36.508 cl. 4.4.3.1.1)
  };

  type record NB_Frequency_IE_Type {    /* @status    APPROVED (NBIOT) */
    integer                     FrequencyBandIndicator,         // Frequency band indicator
    NB_CarrierFreq_Type         UL_DL_Earfcn                    // UL & DL EARFCN
  };

  type record NB_CellIdentities_Type {  /* @status    APPROVED (NBIOT) */
    EUTRA_ASN1_CellIdentity_Type        CellIdentity,           // Cell ID
    EUTRA_ASN1_PhysCellId_Type          PhysicalCellId          // Physical cell ID
  };

  type record NB_PhysicalParameters_Type { /* @status    APPROVED (NBIOT) */
    NB_SubCarrierSpacingUL_Type      SubCarrierSpacingUL,
    RACH_TimingAdvance_Type          RAR_TA   // Random access response Timing Advance
  };

  type record NBIOT_CellInfo_Type {     /* this structure contain the information describing an NBIOT cell configuration
                                           @status    APPROVED (NBIOT) */
    NB_CellIdentities_Type         CellIds,                     // cell ID + physical cell ID
    NB_Frequency_IE_Type           Frequency,                   // Band, UL EARFCN, DL EARFCN
    NBIOT_CellSysInfo_Type         Sysinfo,                     // Sysinfo
    NAS_Parameter_Type             NAS_Parameters,              // PLMN_List, TAC, Guti
    CellTimingInfo_Type            CellTimingInfo,              // Tcell and SFN offset
    ReferenceCellPower_Type        ReferencePower,              // Cell power configuration
    EUTRA_ASN1_C_RNTI_Type         RNTI,                        // RNTI associated to the cell
    NB_PhysicalParameters_Type     PhysicalParameters,          // Additional physical parameters
    AntennaConfig_Type             AntennaInfo,                 // Parameters for antenna info
    NB_DrxCtrl_Type                DrxCtrl,                     // DRX support
    integer                        SelectedPlmnIndex,           // Set to the selected PLMN Id of the cell as selectedPLMN-Identity used in RRCConnectionSetupComplete
    integer                        EUTRA_DL_ARFCN,              // Used for configuration of in-band and guard band cells  @sic R5w180205r1 sic@
    integer                        NumberOfHarqProcesses        // one process per default; for rel-14 the UE can be configured to use two HARQ processes what needs to be reflected in UL/DL DCI @sic R5w180305 sic@
  };

  type record of NBIOT_CellInfo_Type NBIOT_CellInfoList_Type;   /* @status    APPROVED (NBIOT) */

  type enumerated NBIOT_Default_Enum_Type {             /* refers to common default alt_NBIOT_Standard_Default
                                                           @status    APPROVED (NBIOT) */
    StandardDefault
  };

  type record NBIOT_MobileInfo_Type {                   /* @status    APPROVED (NBIOT) */
    NAS_Tmsi    Tmsi,
    NAS_P_Tmsi  P_Tmsi,
    UE_Capability_NB_r13 NBIOT_Capability,
    NBIOT_PDNList_Type PDNs  optional
  };

  type record of NBIOT_PDN_Type NBIOT_PDNList_Type;     /* @status    APPROVED (NBIOT) */

  type record NBIOT_PDN_Type {                          /* @status    APPROVED (NBIOT) */
    B3_Type     assignedPdnType,                        /* tsc_PdnType_IPv4v6, tsc_PdnType_IPv4v6, tsc_PdnType_IPv4v6 as assigned to the UE;*/
    ProcedureTransactionIdentifier  pti,
    AccessPointName accessPointName  optional,
    ExtdProtocolConfigOptions protocolConfigurationOptions  optional
  };

  type record NBIOT_Ctrl_Type {                         /* @status    APPROVED (NBIOT) */
    default                             Default,                        /* default behaviour being activated on NBIOT */
    boolean                             TestBody,                       /* true:  => fail may be assigend
                                                                           false: => inconc is assigned instead of fail */
    VerdictCtrl_Type                    VerdictCtrl,                    /* Control the assignment of FAIL/INCONC in default behaviour */
    HarqErrorHandling_Type              HarqErrorHandling,
    boolean                             LoopbackIsActivated
  };

  type record NBIOT_Global_Type {  /* @status    APPROVED (NBIOT) */
    NBIOT_Ctrl_Type             Ctrl,
    NBIOT_SecurityParams_Type   Security,
    NBIOT_CellInfoList_Type     CellArray,
    NBIOT_MobileInfo_Type       MobileInfo
  };

  type component NBIOT_PTC {  /* @status    APPROVED (NBIOT) */
    var  NBIOT_Global_Type vc_NBIOT_Global;

    port NBIOT_SYSTEM_PORT       SYS;
    port NBIOT_SYSIND_PORT       SYSIND;
    port NBIOT_VNG_PORT          VNG;
    port NBIOT_SRB_PORT          SRB;
    port EUTRA_NB_NASCTRL_PORT   NASCTRL;
    port NBIOT_L2DATA_PORT       L2DATA;
    
    port NASEMU_NBIOT_L2TEST_PORT  NASEMU_L2TEST;
    
    port IRAT_CO_ORD_PORT        EUTRA;  // @sic R5-181279 sic@
    port UT_PTC_MTC_PORT         UT;
    var GSMA_IotStateMap         v_GSMA_IotStateMap;//VZW NBIOT GSMA Added
  };

  type record   GSMA_IotStateMap {
    integer    v_GSMA_Duration_Timer,
    boolean    v_GSMA_State_Timer_Expired,
    integer    v_Back_off_Itr_Cntr,
    CONN_ATTEMPT_STATS_List  v_Conn_Attempt,
    integer    v_sms_retry_Cntr,
    boolean    b_UL_ReportsRequired
  };
    
   type record of CONN_ATTEMPT_STATS CONN_ATTEMPT_STATS_List;
    
   type record CONN_ATTEMPT_STATS
    {
      float delta_bw_Conn_Attempts,
      integer num_of_pkts_rcvd_for_serv_pltf
    
    };
  
  
    
    
  type component NBIOT_SYSTEM {  /* @status    APPROVED (NBIOT) */
    port NBIOT_SYSTEM_PORT       N_SYS;
    port NBIOT_SYSIND_PORT       N_SYSIND;
    port NBIOT_L2DATA_PORT       N_L2DATA;
    port NBIOT_VNG_PORT          N_VNG; // @sic R5s170763 sic@
  };

  /*
   * @desc      Map NBIOT's system ports
   * @param     p_System
   * @param     p_Nbiot
   * @status    APPROVED (NBIOT)
   */
  function f_NBIOT_PTC_Map(NBIOT_SYSTEM p_System,
                           NBIOT_PTC p_Nbiot)
  {
    map(p_Nbiot:SYS,    p_System:N_SYS);
    map(p_Nbiot:SYSIND, p_System:N_SYSIND);
    map(p_Nbiot:L2DATA, p_System:N_L2DATA);

    if (f_GetTestcaseAttrib_Qbased_Rsrq(testcasename())) {    // virtual noise generator for RSRQ test cases @sic R5s170763 sic@
      map(p_Nbiot:VNG,  p_System:N_VNG);
    }
  }

  template (present) NB_SYSTEM_CTRL_CNF cr_NB_SYSTEM_CTRL_CNF_Any := ?;     /* @status    APPROVED (NBIOT) */

  template (present) NB_SYSTEM_IND      cr_NB_SYSTEM_IND_Any := ?;          /* @status    APPROVED (NBIOT) */

  template (present) NB_SRB_COMMON_IND  cr_NB_SRB_COMMON_IND_Any := ?;      /* @status    APPROVED (NBIOT) */

  template (present) NAS_CTRL_CNF       cr_NB_NAS_CTRL_CNF_Any := ?;        /* @status    APPROVED (NBIOT) */

  template (present) NB_L2_DATA_IND     cr_NB_L2_DATA_IND_Any := ?;         /* @status    APPROVED (NBIOT) */

  /*
   * @desc      default behaviour does not cover coordination ports to other PTCs;
   *            this is to allow other PTCs to send sync mssages at any time:
   *            these messages are in the port's queue until being handled by the NBIOT PTC
   * @status    APPROVED (NBIOT)
   */
  altstep a_NBIOT_StandardDefault() runs on NBIOT_PTC
  {
    var NB_SYSTEM_IND v_SYSTEM_IND;
    var NB_SRB_COMMON_IND v_SRB_COMMON_IND;
    var charstring v_Msg;

    [] SYS.receive (cr_NB_SYSTEM_CTRL_CNF_Any) {
      /* unexpected CNF shall always result in INCONC */
      all timer.stop;
      f_SetVerdictInconc(__FILE__, __LINE__, "unexpected receive event at port SYS");
    }
    
    [] SYSIND.receive (cr_NB_SYSTEM_IND_Any) -> value v_SYSTEM_IND {
      all timer.stop;
      if (ischosen(v_SYSTEM_IND.Indication.Error)) {
        /* error indicated by the system simulator shall always result in INCONC */
        f_SetVerdictInconc(__FILE__, __LINE__, "error indicated at port SYS");
      } else {
        f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, "unexpected system indication at port SYSIND");
      }
    }
    [] SRB.receive (cr_NB_SRB_COMMON_IND_Any) -> value v_SRB_COMMON_IND {
      /* unexpected L3 signalling message */
      all timer.stop;
      if (not ispresent(v_SRB_COMMON_IND.Signalling.Rrc)) {
        /* unexpected NAS message received in ULInformationTransfer => shall cause a FAIL when received in the test body */
        f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, "unexpected NAS PDU at port SRB");
      } else if (not ispresent(v_SRB_COMMON_IND.Signalling.Nas)) {
        /* unexpected RRC message received => shall cause a FAIL when received in the test body */
        f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, "unexpected RRC PDU at port SRB");
      } else {
        /* unexpected RRC message with piggybacked NAS PDU received => shall cause a FAIL when received in the test body */
        f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, "unexpected RRC PDU with piggybacked NAS PDU at port SRB");
      }
    }
    [] NASCTRL.receive (cr_NB_NAS_CTRL_CNF_Any) {
      /* unexpected CNF shall always result in INCONC */
      all timer.stop;
      f_SetVerdictInconc(__FILE__, __LINE__, "unexpected receive event at port NASCTRL");
    }
    [] L2DATA.receive (cr_NB_L2_DATA_IND_Any) {
      /* unexpected data at the DRB port */
      all timer.stop;
      
      v_Msg := "unexpected data at port L2DATA";
      if (vc_NBIOT_Global.Ctrl.VerdictCtrl == layer2) {         /* layer 2 data is part of the test purpose */
        f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, v_Msg);
      } else {                                                  /* layer 2 plane data is not part of the test purpose */
        f_SetVerdictInconc(__FILE__, __LINE__, v_Msg);
      }
    }
    [] any timer.timeout {
      /* Note: there is no way to distinguish local timers in the default behaviour
       *       => there can be either an INCONC or a FAIL in the default behaviour;
       *       => we assign an INCONC - when there shall be FAIL in case of a timeout
       *          this needs to be handled where the timer is declared */
      all timer.stop;
      f_SetVerdictInconc(__FILE__, __LINE__, "unexpected timeout");
    }
  }

  /*
   * @desc      to activate the standard default behaviour
   * @param     p_Default   identifies a standard behaviour to be activated
   * @status    APPROVED (NBIOT)
   */
  function f_NBIOT_ActivateDefault(NBIOT_Default_Enum_Type p_Default) runs on NBIOT_PTC
  {
    deactivate(vc_NBIOT_Global.Ctrl.Default);

    select (p_Default) {
      case (StandardDefault) {
        vc_NBIOT_Global.Ctrl.Default := activate(a_NBIOT_StandardDefault());
      }
      case else {
        FatalError (__FILE__, __LINE__, "unknown default behaviour");
      }
    }
  }

  /*
   * @desc      to deal with entry and exit of the test body
   * @param     p_TestBodyFlag
   * @param     p_VerdictCtrl       (default value: normal)
   * @status    APPROVED (NBIOT)
   */
  function f_NBIOT_TestBody_Set(boolean p_TestBodyFlag,
                                VerdictCtrl_Type p_VerdictCtrl := normal) runs on NBIOT_PTC
  {
    vc_NBIOT_Global.Ctrl.TestBody := p_TestBodyFlag;
    vc_NBIOT_Global.Ctrl.VerdictCtrl := p_VerdictCtrl;
    if (p_TestBodyFlag) {
      f_NBIOT_PreliminaryPass(__FILE__, __LINE__, "initial preliminary pass");
    }
  }

  /*
   * @desc      Enable error handling for HARQ
   * @param     p_HarqErrorHandling
   * @status    APPROVED (NBIOT)
   */
  function f_NBIOT_HarqErrorHandling_Set(HarqErrorHandling_Type p_HarqErrorHandling) runs on NBIOT_PTC
  {
    vc_NBIOT_Global.Ctrl.HarqErrorHandling := p_HarqErrorHandling;
  }

  /*
   * @desc      Flag loopback mode being activated
   * @param     p_LoopbackIsActivated
   * @status    APPROVED (NBIOT)
   */
  function f_NBIOT_LoopbackIsActivated_Set(boolean p_LoopbackIsActivated)  runs on NBIOT_PTC
  {
    vc_NBIOT_Global.Ctrl.LoopbackIsActivated := p_LoopbackIsActivated;
  }

  /*
   * @desc      check whether test body is active
   * @return    boolean
   * @status    APPROVED (NBIOT)
   */
  function fl_NBIOT_TestBody_Check() runs on NBIOT_PTC return boolean {
    return vc_NBIOT_Global.Ctrl.TestBody;
  }

  /*
   * @desc      set correct verdict: FAIL is assigned only when being in the test body
   * @param     p_FileName
   * @param     p_LineNo
   * @param     p_Msg
   * @status    APPROVED (NBIOT)
   */
  function f_NBIOT_SetVerdictFailOrInconc(charstring p_FileName,
                                          LineNo_Type p_LineNo,
                                          charstring p_Msg) runs on NBIOT_PTC
  {
    if (fl_NBIOT_TestBody_Check()) {
      f_SetVerdict(fail, p_FileName, p_LineNo, p_Msg);
    } else {
      f_SetVerdict(inconc, p_FileName, p_LineNo, p_Msg);
    }
    self.kill;    // => test case will be terminated immediately
  }

  /*
   * @desc      set correct verdict: prelininary PASS is only be assigned when being in the test body
   * @param     p_FileName
   * @param     p_LineNo
   * @param     p_Msg
   * @status    APPROVED (NBIOT)
   */
  function f_NBIOT_PreliminaryPass(charstring p_FileName,
                                   LineNo_Type p_LineNo,
                                   charstring p_Msg) runs on NBIOT_PTC
  {
    if (fl_NBIOT_TestBody_Check()) {
      f_SetVerdict(pass, p_FileName, p_LineNo, p_Msg);
    }
  }

}
