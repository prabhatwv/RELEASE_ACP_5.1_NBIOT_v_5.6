/******************************************************************************/
// @copyright   Copyright Notification
//   No part may be reproduced except as authorized by written permission.
//   The copyright and the foregoing restriction extend to reproduction in all media.
//   Trademark 2019, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).
//   All rights reserved.
// @version: 36.523-3 v15.3.0
// $Date: 2019-03-01 08:47:46 +0100 (Fri, 01 Mar 2019) $
// $Rev: 23782 $
/******************************************************************************/

module NBIOT_MAC_Common {

  import from Common4G5G_Templates all;
  import from CommonAspDefs all;
  import from CommonDefs all;
  import from EPS_NAS_MsgContainers all;
  import from EUTRA_NB_ASP_L2DataDefs all;
  import from EUTRA_NB_CommonL2 all;
  import from EUTRA_NB_CommonMAC all;
  import from NBIOT_ASP_L2DataDefs all;
  import from NBIOT_ASP_TypeDefs all;
  import from NBIOT_AspCommon_Templates all;
  import from NBIOT_CommonDefs all;
  import from NBIOT_Component all;
  import from NBIOT_L2_Common all;

  template (value) PDCP_SDU_Type crs_PDCP_SDU_8B    := f_GetN_OctetsFromPRBS(40,8);      /* @status    APPROVED (NBIOT) */

  template (value) PDCP_SDU_Type crs_PDCP_SDU_11B   := f_GetN_OctetsFromPRBS(40,11);     /* @status    APPROVED (NBIOT) */

  template (value) PDCP_SDU_Type crs_PDCP_SDU_14B   := f_GetN_OctetsFromPRBS(100,14);    /* @status    APPROVED (NBIOT) */

  template (value) PDCP_SDU_Type crs_PDCP_SDU_15B   := f_GetN_OctetsFromPRBS(0,15);      /* @status    APPROVED (NBIOT) */

  const B5_Type tsc_LchId_SIB1bis := '00011'B;   /* according to 36.331 clause 9.1.2.1a
                                                    @status    APPROVED (NBIOT) */

  const B2_Type tsc_NBIOT_BSR_LCG := '00'B;      /* logical channel group 0 for NBIOT
                                                    @status    APPROVED (NBIOT) */

  template (present) MAC_CTRL_ShortBSR_Type cr_NBIOT_MAC_CTRL_ShortBSR(template (present) B6_Type p_BSR_Value := ?) := cr_MAC_BSR_Short(tsc_NBIOT_BSR_LCG, p_BSR_Value);               /* @status    APPROVED (NBIOT) */

  template (present) MAC_CTRL_ElementList_Type cr_NBIOT_MAC_CTRL_ElementList_AnyBSR := cr_CTRL_Elem_ShortBSR(tsc_NBIOT_BSR_LCG, ?);               /* @status    APPROVED (NBIOT) */

  template (present) MAC_CTRL_ElementList_Type cr_NBIOT_MAC_CTRL_ElementList_ZeroBSR := cr_CTRL_Elem_ShortBSR(tsc_NBIOT_BSR_LCG, '000000'B);      /* @status    APPROVED (NBIOT) */

  type enumerated NBIOT_MacPdu_PaddingType_Type {noPadding, singleBytePadding, twoBytePadding, normalPadding}; /* @status    APPROVED (NBIOT) */

  type enumerated NBIOT_MacPdu_BSR_Type {noBSR, anyBSR, zeroBSR};                                              /* @status    APPROVED (NBIOT) */

  template (value) MAC_PDU_SubHeader_Type cs_MAC_PDU_SubHeader(B2_Type p_Reserved := '00'B,
                                                               B1_Type p_Extension,
                                                               B5_Type p_LCID,
                                                               template (omit) MAC_PDU_Length_Type p_Length := omit) :=
  { /* @status    APPROVED (NBIOT) */
    Reserved := p_Reserved,
    Extension := p_Extension,
    LCID := p_LCID,
    Length := p_Length
  };

  template (value) MAC_PDU_Type cs_MAC_PDU(template (value) MAC_Header_Type p_Header,
                                           template (omit) MAC_CTRL_ElementList_Type p_CtrlElementList := omit,
                                           template (omit) MAC_SDUList_Type p_SduList := omit,
                                           template (omit) octetstring p_Padding := omit) :=
  { /* @status    APPROVED (NBIOT) */
    Header := p_Header,
    CtrlElementList := p_CtrlElementList,
    SduList := p_SduList,
    Padding := p_Padding
  };

  template (value) DRB_DataPerSubframe_DL_Type cs_NBIOT_DataPerDownlinkTransmission(NPdcchSearchSpaceCandidateIndex_Type p_SearchSpaceCandidateOffset,
                                                                                    template (value) MAC_PDU_Type p_MAC_PDU) :=
  { /* @status    APPROVED (NBIOT) */
    SubframeOffset := p_SearchSpaceCandidateOffset,
    HarqProcess := omit,
    PduSduList := {
      MacPdu := {
        p_MAC_PDU
      }
    }
  };

  template (value) L2Data_Request_Type cs_NBIOT_L2Data_Request_MacPdu(template (value)  MAC_PDU_Type p_MAC_PDU,
                                                                      integer p_SearchSpaceCandidateOffset := tsc_NPdcchSearchSpaceCandidateIndex_0) :=
  { /* @status    APPROVED (NBIOT) */
    SubframeDataList := {
      cs_NBIOT_DataPerDownlinkTransmission(p_SearchSpaceCandidateOffset, p_MAC_PDU)
    }
  };

  template (present) MAC_PDU_SubHeader_Type cr_MAC_PDU_SubHeader(template (present) B2_Type p_Reserved := tsc_B2_Reserved,
                                                                 template (present) B1_Type p_Extension,
                                                                 template (present) B5_Type p_LCID,
                                                                 template MAC_PDU_Length_Type p_Length := omit) :=
  { /* @status    APPROVED (NBIOT) */
    Reserved := p_Reserved,
    Extension := p_Extension,
    LCID := p_LCID,
    Length := p_Length
  };

  template (present) MAC_PDU_SubHeader_Type cr_MAC_PDU_SubHeader_AnySDU(template (present) B5_Type p_LCID) := cr_MAC_PDU_SubHeader(-, ?, p_LCID, *); /* @status    APPROVED (NBIOT) */

  template (present) MAC_PDU_Type cr_MAC_PDU(template (present) MAC_Header_Type p_Header,
                                             template MAC_CTRL_ElementList_Type p_CtrlElementList := *,
                                             template MAC_SDUList_Type p_SduList := omit,
                                             template octetstring p_Padding := *) :=
  { /* @status    APPROVED (NBIOT) */
    Header := p_Header,
    CtrlElementList := p_CtrlElementList,
    SduList := p_SduList,
    Padding := p_Padding
  };

  template (present) L2Data_Indication_Type cr_NBIOT_L2Data_Indication_MacPdu(template (present) MAC_PDU_Type p_MAC_PDU) :=
  { /* @status    APPROVED (NBIOT) */
    SubframeData := {
      PduSduList := {
        MacPdu := {
          p_MAC_PDU
        }
      },
      NoOfTTIs := ?
    }
  };

  /*
   * @desc      return next TBS according to 36.523-3 Table 7A.6.2-1 (number of bits)
   * @param     p_SizeOfHeadersAndPayload
   * @return    integer
   * @status    APPROVED (NBIOT)
   */
  function fl_NBIOT_TransportBlockSize(integer p_SizeOfHeadersAndPayload) return integer
  { /* p_SizeOfHeadersAndPayload  ..  number of octets for MAC headers and payload without padding */
    var integer v_MinNoOfBits := p_SizeOfHeadersAndPayload * 8;
    var IntegerList_Type v_TBS_List := {16, 24, 32, 40, 56, 72, 88, 104, 120, 136, 144, 176, 208, 224, 256, 296, 328, 392, 456, 472, 504, 536, 616, 680}; // @sic R5s170757 sic@
    var integer i;
    
    for (i:=0; i < lengthof(v_TBS_List); i:=i+1) {
      if (v_MinNoOfBits <= v_TBS_List[i]) {
        return v_TBS_List[i];
      }
    }
    FatalError(__FILE__, __LINE__, "MAC PDU does not fit into maximum transport block");
    return 0;
  }

  /*
   * @desc      build up a MAC PDU containing several MAC SDUs and padding if needed
   * @param     p_LchId
   * @param     p_MAC_SDUList
   * @param     p_TBS               (default value: omit)
   * @return    template (value) MAC_PDU_Type
   * @status    APPROVED (NBIOT)
   */
  function f_NBIOT_MAC_PDU_WithSDUs_TX(B5_Type p_LchId,
                                       template (value) MAC_SDUList_Type p_MAC_SDUList,
                                       template (omit) integer p_TBS := omit) return template (value) MAC_PDU_Type
  {
    /* Notes:
     * - for NBIOT the SDU length is 7 bits only (max TBS is 680; SDU length is in bytes)
     * - when there are no MAC CTRL elements, the min. header size is ((2 * number of SDUs) - 1) as the header of the last SDU does not have a length field
     * - in case of no padding at all or single-byte or two-byte padding the header of the last SDU does not have a length field
     *   for all other cases all SDU headers have a length, there is a (final) R/R/E/LCID header for padding (1 octet) and padding at the end of the MAC PDU */
    var integer v_MinNoOfOctets := 0;
    var integer v_NoOfSDUs := lengthof(p_MAC_SDUList);
    var IntegerList_Type v_SduLength;
    var template (value) MAC_Header_Type v_MAC_Header;
    var template (omit) MAC_CTRL_ElementList_Type v_CtrlElementList := omit;
    var template (omit) octetstring v_Padding;
    var template (value) MAC_PDU_Length_Type v_MAC_PDU_Length;
    var integer v_LastHeaderSize;
    var integer v_TBS;
    var integer v_TotalPaddingSize;
    var integer v_NoOfSduHeadersWithLength;
    var integer i;
    var integer k;
    
    for (i := 0; i < v_NoOfSDUs; i := i + 1) {
      v_SduLength[i] := lengthof(p_MAC_SDUList[i]);
      if (v_SduLength[i] < 128) {             // 7 bit length
        v_LastHeaderSize := 2;
      } else {                                // @sic R5s190041: v_SduLength > 127 sic@
        v_LastHeaderSize := 3;
      }
      v_MinNoOfOctets := v_MinNoOfOctets + v_SduLength[i] + v_LastHeaderSize;  /* 2 or 3 octets for R/R/E/LCID/F/L header (7bit length or 15bit length) */
    }
    v_MinNoOfOctets := v_MinNoOfOctets - (v_LastHeaderSize - 1); /* header for the last SDU may be R/R/E/LCID header, i.e. just one octet */
    
    if (isvalue(p_TBS)) {
      v_TBS := valueof(p_TBS);
    } else {
      v_TBS := fl_NBIOT_TransportBlockSize(v_MinNoOfOctets);
    }
    v_TotalPaddingSize := (v_TBS / 8) - v_MinNoOfOctets;

    k := 0;
    if (v_TotalPaddingSize < 0) {
      FatalError(__FILE__, __LINE__, "TBS too small");
    } else if (v_TotalPaddingSize <= 2) {  /* single-byte or two-byte padding at the beginning of the MAC PDU according to 36.321 clause 6.1.6
                                              or no padding at all */
      for (i := 0; i < v_TotalPaddingSize; i := i + 1) {     /* 0, 1, or 2 padding headers at the beginning of the MAC PDU */
        v_MAC_Header[k] := cs_MAC_PDU_SubHeader(tsc_B2_Reserved, tsc_ExtensionMoreHeaders, tsc_LchId_Padding);
        k := k + 1;
      }
      v_NoOfSduHeadersWithLength := v_NoOfSDUs - 1;     /* header of the last SDU does not have a length field */
      v_Padding := omit;
    } else {
      v_NoOfSduHeadersWithLength := v_NoOfSDUs;         /* all SDU headers have a length field */
      v_Padding := f_GetN_OctetsFromPRBS(1000, v_TotalPaddingSize - v_LastHeaderSize);   /* "- v_LastHeaderSize" as there is the length for the last SDU and the header for the padding */
    }

    for (i := 0; i < v_NoOfSduHeadersWithLength; i := i + 1) { /* R/R/E/LCID/LEN headers */
      if (v_SduLength[i] < 128) {             // 7 bit length
        v_MAC_PDU_Length := cs_MAC_PDU_Length_7Bit(v_SduLength[i]);
      } else {                                // @sic R5s190041: v_SduLength > 127 sic@
        v_MAC_PDU_Length := cs_MAC_PDU_Length_15Bit(v_SduLength[i]);
      }
      v_MAC_Header[k] := cs_MAC_PDU_SubHeader(tsc_B2_Reserved, tsc_ExtensionMoreHeaders, p_LchId, v_MAC_PDU_Length);
      k := k + 1;
    }
    if (isvalue(v_Padding)) {
      v_MAC_Header[k] := cs_MAC_PDU_SubHeader(tsc_B2_Reserved, tsc_ExtensionNoMoreHeaders, tsc_LchId_Padding);
    } else {
      v_MAC_Header[k] := cs_MAC_PDU_SubHeader(tsc_B2_Reserved, tsc_ExtensionNoMoreHeaders, p_LchId);
    }
    
    return cs_MAC_PDU(v_MAC_Header, v_CtrlElementList, p_MAC_SDUList, v_Padding);
  }

  /*
   * @desc      retrieve encoded DL RLC SDU from NAS emulator and encode MAC SDU
   * @param     p_TestLoopMode
   * @param     p_RlcSdu
   * @param     p_SN
   * @param     p_PollBit           (default value: tsc_NoPoll)
   * @return    MAC_SDU_Type
   * @status    APPROVED (NBIOT)
   */
  function f_NBIOT_MAC_CPMode_EncodeMacSdu(NBIOT_IDLEUPDATED_STATE_Type p_TestLoopMode,
                                           template (value) RLC_SDU_Type p_RlcSdu,
                                           integer p_SN,
                                           B1_Type p_PollBit := tsc_NoPoll) runs on NBIOT_PTC return MAC_SDU_Type
  {
    var template (value) NAS_MSG_Request_Type v_NasRequest := f_NBIOT_L2_CPMode_DL_NAS_Message(p_TestLoopMode, p_RlcSdu);
    var octetstring v_EncodedL3Msg := f_NBIOT_L2_CPMode_EncodeL3Message(v_NasRequest);
    return f_RLC_AMD_1PDU_Encvalue(p_SN, p_PollBit, v_EncodedL3Msg);
  }

  /*
   * @desc      send MAC PDU to the UE
   * @param     p_CellId
   * @param     p_TimingInfo        (default value: cs_TimingInfo_Now)
   * @param     p_MAC_PDU
   * @param     p_SearchSpaceCandidateOffset (default value: tsc_NPdcchSearchSpaceCandidateIndex_0)
   * @status    APPROVED (NBIOT)
   */
  function f_NBIOT_MAC_CPMode_SendMacPdu(NBIOT_CellId_Type p_CellId,
                                         template (value) TimingInfo_Type p_TimingInfo := cs_TimingInfo_Now,
                                         template (value) MAC_PDU_Type p_MAC_PDU,
                                         integer p_SearchSpaceCandidateOffset := tsc_NPdcchSearchSpaceCandidateIndex_0) runs on NBIOT_PTC
  {
    L2DATA.send(cas_NB_L2_DATA_REQ(cs_NB_ReqAspCommonPart_RB(p_CellId, tsc_NB_RbId_SRB1bis, p_TimingInfo),
                                   cs_NBIOT_L2Data_Request_MacPdu(p_MAC_PDU, p_SearchSpaceCandidateOffset)));
  }

  /*
   * @desc      send MAC PDU with RLC status PDU to the UE
   * @param     p_RLC_CountsInfoList
   * @param     p_CellId
   * @param     p_TimingInfo        (default value: cs_TimingInfo_Now)
   * @param     p_DL_TBS            (default value: omit)
   * @status    APPROVED (NBIOT)
   */
  function f_NBIOT_MAC_CPMode_SendRlcStatus(NB_RLC_CountsInfoList_Type p_RLC_CountsInfoList,
                                            NBIOT_CellId_Type p_CellId,
                                            template (value) TimingInfo_Type p_TimingInfo := cs_TimingInfo_Now,
                                            template (omit) integer p_DL_TBS := omit) runs on NBIOT_PTC
  { /* @sic R5s170234: p_DL_TBS sic@ */
    var integer v_AckSN := p_RLC_CountsInfoList.AM_VRR;
    var octetstring v_EncodedRlcPdu := f_RLC_Status_1PDU_Encvalue(v_AckSN);
    var MAC_SDUList_Type v_MAC_SDUList := { v_EncodedRlcPdu };

    f_NBIOT_MAC_CPMode_SendMacPdu(p_CellId, p_TimingInfo, f_NBIOT_MAC_PDU_WithSDUs_TX(tsc_LchId_SIB1bis, v_MAC_SDUList, p_DL_TBS));
  }

  /*
   * @desc      The given RLC SDUs are packed into NAS messages which are encoded and sent together in one MAC PDU
   *            => This works only if the resulting NAS message are not getting to big (i.e. the RLC SDUs shall be small
   * @param     p_RLC_CountsInfoList (by reference)
   * @param     p_CellId
   * @param     p_TestLoopMode
   * @param     p_TimingInfo        (default value: cs_TimingInfo_Now)
   * @param     p_SDUList
   * @param     p_PollBitforLastAMDPDU (default value: tsc_NoPoll)
   * @status    APPROVED (NBIOT)
   */
  function f_NBIOT_MAC_CPMode_SendRlcSdus(inout NB_RLC_CountsInfoList_Type p_RLC_CountsInfoList,
                                          NBIOT_CellId_Type p_CellId,
                                          NBIOT_IDLEUPDATED_STATE_Type p_TestLoopMode,
                                          template (value) TimingInfo_Type p_TimingInfo := cs_TimingInfo_Now,
                                          template (value) RLC_SDUList_Type p_SDUList,
                                          B1_Type p_PollBitforLastAMDPDU := tsc_NoPoll) runs on NBIOT_PTC
  {
    var template (value) MAC_PDU_Type v_MAC_PDU;
    var MAC_SDUList_Type v_MAC_SDUList;
    var B1_Type v_PollBit := tsc_NoPoll;
    var integer i;

    for (i := 0; i < lengthof(p_SDUList); i := i + 1) {
      if (i == lengthof(p_SDUList) - 1) {
        v_PollBit := p_PollBitforLastAMDPDU;
      }
      v_MAC_SDUList[i] := f_NBIOT_MAC_CPMode_EncodeMacSdu(p_TestLoopMode, p_SDUList[i], p_RLC_CountsInfoList.AM_VTS, v_PollBit);
      p_RLC_CountsInfoList.AM_VTS := p_RLC_CountsInfoList.AM_VTS + 1;
    }
    v_MAC_PDU := f_NBIOT_MAC_PDU_WithSDUs_TX(tsc_LchId_SIB1bis, v_MAC_SDUList);
    
    f_NBIOT_MAC_CPMode_SendMacPdu(p_CellId, p_TimingInfo, v_MAC_PDU);
  }

  /*
   * @desc      to add a sub-header to a MAC header
   * @param     p_MacPduHeader
   * @param     p_LCID
   * @param     p_ExtensionBit      (default value: tsc_ExtensionMoreHeaders)
   * @param     p_Length            (default value: omit)
   * @return    template (present) MAC_Header_Type
   * @status    APPROVED (NBIOT)
   */
  function f_NBIOT_MacPduHeader_AddSubheader_RX(template (present) MAC_Header_Type p_MacPduHeader,
                                                template (present) B5_Type p_LCID,
                                                B1_Type p_ExtensionBit := tsc_ExtensionMoreHeaders,
                                                template (omit) integer p_Length := omit) return template (present) MAC_Header_Type
  {
    var template (present) MAC_Header_Type v_MacPduHeader := p_MacPduHeader;
    var integer i := lengthof(v_MacPduHeader);
    var integer v_Length;
    var template MAC_PDU_Length_Type v_SubheaderLength := omit;
    var bitstring v_LengthBits;
    
    if (ispresent(p_Length) and (p_ExtensionBit == tsc_ExtensionMoreHeaders)) {
      v_Length := valueof(p_Length);
      if (v_Length < 128) {
        v_LengthBits :=  int2bit(v_Length, 7);
        v_SubheaderLength := cr_MAC_PDU_Length_7Bit(v_LengthBits);
      } else  {                                // @sic R5s190041: v_Length > 127 sic@
        v_LengthBits :=  int2bit(v_Length, 15);
        v_SubheaderLength := cr_MAC_PDU_Length_15Bit(v_LengthBits);
      }
    }

    v_MacPduHeader[i] := cr_MAC_PDU_SubHeader(tsc_B2_Reserved, p_ExtensionBit, p_LCID, v_SubheaderLength);
    return v_MacPduHeader;
  }

  /*
   * @desc      build receive template of MAC PDU containing specific kind of padding (or no padding at all), short BSR or no BSR and 0, 1 or several MAC SDUs
   *            NOTE: Due to the fact that there is only one logical channel there should be just one RLC AM PDU (if any) i.e. a maximum of one MAC SDU
   * @param     p_LCID              (default value: tsc_LchId_SIB1bis)
   * @param     p_PaddingType
   * @param     p_BSR
   * @param     p_MacSduList        (default value: {})
   * @return    template (present) MAC_PDU_Type
   * @status    APPROVED (NBIOT)
   */
  function f_NBIOT_MacPdu_BSR_MacSdus_Padding_RX(B5_Type p_LCID := tsc_LchId_SIB1bis,
                                                 NBIOT_MacPdu_PaddingType_Type p_PaddingType,
                                                 NBIOT_MacPdu_BSR_Type p_BSR,
                                                 template (present) MAC_SDUList_Type p_MacSduList := {}) return template (present) MAC_PDU_Type
  {
    var template (present) MAC_Header_Type v_MacPduHeader := {};
    var template MAC_SDUList_Type v_MacSduList := omit;
    var template MAC_CTRL_ElementList_Type v_CtrlElementList := omit;
    var template octetstring v_PaddingAtEndOfPDU := omit;
    var integer v_NoOfSDUs := lengthof(p_MacSduList);
    var B1_Type v_ExtensionBit := tsc_ExtensionMoreHeaders;
    var template (omit) integer v_Length;
    var integer i;
    
    select (p_PaddingType) {
      case (noPadding) {
      }
      case (singleBytePadding) {
        v_MacPduHeader := f_NBIOT_MacPduHeader_AddSubheader_RX(v_MacPduHeader, tsc_LchId_Padding, v_ExtensionBit);
      }
      case (twoBytePadding) {
        v_MacPduHeader := f_NBIOT_MacPduHeader_AddSubheader_RX(v_MacPduHeader, tsc_LchId_Padding, v_ExtensionBit);
        v_MacPduHeader := f_NBIOT_MacPduHeader_AddSubheader_RX(v_MacPduHeader, tsc_LchId_Padding, v_ExtensionBit);
      }
      case (normalPadding) {
        v_PaddingAtEndOfPDU := ?;
      }
    }
    
    if (p_BSR != noBSR) {
      if ((v_NoOfSDUs == 0) and not ispresent(v_PaddingAtEndOfPDU)) {
        v_ExtensionBit := tsc_ExtensionNoMoreHeaders;
      }
      v_MacPduHeader := f_NBIOT_MacPduHeader_AddSubheader_RX(v_MacPduHeader, tsc_LchId_ShortBSR, v_ExtensionBit);
      if (p_BSR == zeroBSR) {
        v_CtrlElementList := cr_NBIOT_MAC_CTRL_ElementList_ZeroBSR;
      } else {
        v_CtrlElementList := cr_NBIOT_MAC_CTRL_ElementList_AnyBSR;
      }
    }
    
    for (i := 0; i < v_NoOfSDUs; i := i + 1) {
      if (not ispresent(v_PaddingAtEndOfPDU) and (i == v_NoOfSDUs - 1)) {
        v_ExtensionBit := tsc_ExtensionNoMoreHeaders;
        v_Length := omit;
      } else {
        v_Length := lengthof(p_MacSduList[i]);
      }
      v_MacPduHeader := f_NBIOT_MacPduHeader_AddSubheader_RX(v_MacPduHeader, p_LCID, v_ExtensionBit, v_Length);
      v_MacSduList[i] := p_MacSduList[i];   /* @sic R5170234 sic@ */
    }
    if (ispresent(v_PaddingAtEndOfPDU)) {
      v_ExtensionBit := tsc_ExtensionNoMoreHeaders;
      v_MacPduHeader := f_NBIOT_MacPduHeader_AddSubheader_RX(v_MacPduHeader, tsc_LchId_Padding, v_ExtensionBit);
    }

    return cr_MAC_PDU(v_MacPduHeader, v_CtrlElementList, v_MacSduList, v_PaddingAtEndOfPDU);
  }

  /*
   * @desc      build up octetstring pattern for an expected MAC SDU
   * @param     p_RlcSduList
   * @return    template (present) octetstring
   * @status    APPROVED (NBIOT)
   */
  function f_NBIOT_MacSdu_RlcAmdPdu_RX(template (value) RLC_SDUList_Type p_RlcSduList) return template (present) octetstring
  { /* in NBIOT for CP mode all RLC SDUs are on the same logical channel i.e. send in one RLC PDU by the UE
       =>  for a single RLC SDU the AM PDU has 2 bytes fixed header part only, but for more than one RLC SDUs there is a flex header part with LIs for the first N-1 SDUs
       function returns an octetstring with any content but with the fix length of the expected AM PDU
       => the content is not checked (could be enhanced in the future if needed) */
    var integer v_NoOfSDUs := lengthof(p_RlcSduList);
    var integer v_NoOfLIs := v_NoOfSDUs - 1;                    /* LIs for all SDUs but not the last one */
    var integer v_FixPartLength := 2;                           /* 2 bytes for RLC AM PDU header fixed part */
    var integer v_FlexPartLength := (12 * v_NoOfLIs + 7) / 8;   /* see 36.322 clause 6.2.1.4 */
    var integer v_RlcAmHeaderLength := v_FixPartLength + v_FlexPartLength;
    var template (present) octetstring v_RlcAmPdu;
    var integer i;

    v_RlcAmPdu := ? length(v_RlcAmHeaderLength);     // RLC header: Any octets
    for (i := 0; i < v_NoOfSDUs; i := i + 1) {
      v_RlcAmPdu := v_RlcAmPdu & p_RlcSduList[i];    // RLC SDUs
    }
    return v_RlcAmPdu;
  }

  /*
   * @desc      build receive template of MAC PDU to be used to receive a single MAC SDU (RLC AM PDU) allowing any padding and any CTRL elements
   * @param     p_LCID              (default value: tsc_LchId_SIB1bis)
   * @param     p_RlcSdu
   * @return    template (present) MAC_PDU_Type
   * @status    APPROVED (NBIOT)
   */
  function f_NBIOT_MacPdu_SingleRlcAmdPdu_RX(B5_Type p_LCID := tsc_LchId_SIB1bis,
                                             template (value) RLC_SDU_Type p_RlcSdu) return template (present) MAC_PDU_Type
  {
    var template (present) MAC_Header_Type v_Header := {*, cr_MAC_PDU_SubHeader_AnySDU(p_LCID), *};
    var template (value) RLC_SDUList_Type v_RlcSduList := { p_RlcSdu };
    var template (present) octetstring v_RlcAmPdu := f_NBIOT_MacSdu_RlcAmdPdu_RX(v_RlcSduList);
    var template (present) MAC_SDUList_Type v_SduList := { v_RlcAmPdu };

    return cr_MAC_PDU(v_Header, -, v_SduList);
  }

  /*
   * @desc      wrapper function to receive UL MAC PDU increment AM_VRR if necessary
   * @param     p_RLC_CountsInfoList (by reference)
   * @param     p_CellId
   * @param     p_MAC_PDU
   * @param     p_IncrementVRR      (default value: 1)
   * @return    NB_L2_DATA_IND
   * @status    APPROVED (NBIOT)
   */
  function f_NBIOT_MAC_CPMode_MacPdu_Receive(inout NB_RLC_CountsInfoList_Type p_RLC_CountsInfoList,
                                             NBIOT_CellId_Type p_CellId,
                                             template (present) MAC_PDU_Type p_MAC_PDU,
                                             integer p_IncrementVRR := 1) runs on NBIOT_PTC return NB_L2_DATA_IND
  {
    var NB_L2_DATA_IND v_NB_L2_DATA_IND;

    L2DATA.receive(car_NB_L2_DATA_IND(cr_NB_IndAspCommonPart_RB(p_CellId, tsc_NB_RbId_SRB1bis),
                                      cr_NBIOT_L2Data_Indication_MacPdu(p_MAC_PDU))) -> value v_NB_L2_DATA_IND;
    p_RLC_CountsInfoList.AM_VRR := p_RLC_CountsInfoList.AM_VRR + p_IncrementVRR;
    
    return v_NB_L2_DATA_IND;
  }

  /*
   * @desc      wrapper function to receive RLC status PDU for control plane mode
   * @param     p_RLC_CountsInfoList (by reference)
   * @param     p_CellId
   * @param     p_LCID              (default value: tsc_LchId_SIB1bis)
   * @status    APPROVED (NBIOT)
   */
  function f_NBIOT_MAC_CPMode_RlcStatusPdu_ReceiveAndCheck(inout NB_RLC_CountsInfoList_Type p_RLC_CountsInfoList,
                                                           NBIOT_CellId_Type p_CellId,
                                                           B5_Type p_LCID := tsc_LchId_SIB1bis) runs on NBIOT_PTC
  {
    var integer v_IncrementVRR := 0;    /* VRR shall not be incremented as there is no AMD PDU */
    var template (present) MAC_Header_Type v_Header := {*, cr_MAC_PDU_SubHeader_AnySDU(p_LCID), *};
    var template (present) MAC_SDUList_Type v_SduList := { ? };   // one SDU only
    var template (present) MAC_PDU_Type v_MAC_PDU := cr_MAC_PDU(v_Header, -, v_SduList);
    var NB_L2_DATA_IND v_NB_L2_DATA_IND := f_NBIOT_MAC_CPMode_MacPdu_Receive(p_RLC_CountsInfoList, p_CellId, v_MAC_PDU, v_IncrementVRR);
    var RLC_AM_StatusPDU_Type v_RLC_AM_StatusPDU := f_MAC_SDU_Decode_ToRLC_AM_StatusPDU(v_NB_L2_DATA_IND.L2Data.SubframeData.PduSduList.MacPdu[0].SduList[0]);
    var B10_Type v_AckSN_Bits := int2bit(p_RLC_CountsInfoList.AM_VTS, 10);

    if (not match(v_RLC_AM_StatusPDU, cr_RLC_AM_StatusPDU_ACK_SN_Bit(v_AckSN_Bits))) {
      f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, "Invalid RLC Status PDU");
    }
  }

  /*
   * @desc      receive MAC PDU containing RLC Status PDU
   * @param     p_RLC_CountsInfoList (by reference)
   * @param     p_CellId
   * @param     p_RlcSduList
   * @param     p_PaddingType       (default value: noPadding)
   * @param     p_BSR               (default value: noBSR)
   * @status    APPROVED (NBIOT)
   */
  function f_NBIOT_MAC_CPMode_RlcStatusPdu_RlcAmdPdu_Receive(inout NB_RLC_CountsInfoList_Type p_RLC_CountsInfoList,
                                                             NBIOT_CellId_Type p_CellId,
                                                             template (value) RLC_SDUList_Type p_RlcSduList,
                                                             NBIOT_MacPdu_PaddingType_Type p_PaddingType := noPadding,
                                                             NBIOT_MacPdu_BSR_Type p_BSR := noBSR) runs on NBIOT_PTC
  {
    var template (present) octetstring v_RlcAmdPdu := f_NBIOT_MacSdu_RlcAmdPdu_RX(p_RlcSduList);
    var template (present) octetstring v_AnyRlcStatusPdu := ? length(2);
    var template (present) MAC_SDUList_Type v_MAC_SDUList_RX_1 := { v_RlcAmdPdu, v_AnyRlcStatusPdu };
    var template (present) MAC_SDUList_Type v_MAC_SDUList_RX_2 := { v_AnyRlcStatusPdu, v_RlcAmdPdu };
    var template (present) MAC_PDU_Type v_MAC_PDU_RX := (f_NBIOT_MacPdu_BSR_MacSdus_Padding_RX(-, p_PaddingType, p_BSR, v_MAC_SDUList_RX_1),
                                                         f_NBIOT_MacPdu_BSR_MacSdus_Padding_RX(-, p_PaddingType, p_BSR, v_MAC_SDUList_RX_2));
    f_NBIOT_MAC_CPMode_MacPdu_Receive(p_RLC_CountsInfoList, p_CellId, v_MAC_PDU_RX);
  }

}
