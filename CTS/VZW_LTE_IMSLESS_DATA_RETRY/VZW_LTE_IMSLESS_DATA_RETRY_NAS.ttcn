/*
 * @author
 *     
 * @version
 *     1.0
 * @desc
 *     
 * @remark
 *     
 * @see
 *     
 */ 
module VZW_LTE_IMSLESS_DATA_RETRY_NAS 
{
    import from EUTRA_RRC_ASN1_Definitions language "ASN.1:2002" all with {encode "UNALIGNED_PER_OctetAligned"};
    import from NBIOT_RRC_ASN1_Definitions language "ASN.1:2002" all with {encode "UNALIGNED_PER_OctetAligned"};
  import from CIOT_NASTemplates all;
  import from CommonDefs all;
  import from CommonAspDefs all;
  import from Common4G5G_Templates all;
  import from Common4G5G_Timing all;
  import from EPS_NAS_Constants all;
  import from EPS_NAS_LoopBack_Templates all;
  import from EPS_NAS_MsgContainers all;
  import from EPS_NAS_Templates all;
  import from EPS_NAS_TypeDefs all;
  import from EUTRA_NB_CommonDefs all;
  import from EUTRA_NB_Parameters all;
  import from EUTRA_NB_CommonDefs all;
  import from EUTRA_Component all;
  import from EUTRA_NB_SecurityDefinitionsAndExternalFunctions all;
  import from LoopbackIP all;
  import from NAS_CommonTemplates all;  
  import from NBIOT_ASP_SrbDefs all;
  import from NBIOT_ASP_TypeDefs all;
  import from NBIOT_AspCommon_Templates all;
  import from NBIOT_CellCfg_Templates all;
  import from NBIOT_CellInfo all;
 /* import from EUTRA_CellInfoInit all; */
  import from NBIOT_CommonDefs all;
  import from NBIOT_CommonProcedures all;
  import from NBIOT_Component all;
  import from EUTRA_Component all;
  import from NBIOT_ConfigurationSteps all;
  import from NBIOT_Imported_EUTRA_ASN1_Types all;
  import from NBIOT_LoopBack all;
  import from NBIOT_NASSteps all;
  import from NBIOT_Parameters all;
  import from NBIOT_RRCSteps all;
  import from NBIOT_RRC_Common all;
  import from NBIOT_RRC_Templates all;
  import from NBIOT_SRB_DRB_Templates all;
  import from NBIOT_SecurityFunctions all;
  import from NBIOT_SysInfo_Templates all;
/*  import from EUTRA_SRB_Templates all;*/
  import from NBIOT_Timing all;
  import from NAS_CommonTypeDefs all;
  import from Parameters all;
  import from UpperTesterFunctions all;
  import from UpperTesterPtcToMtcDefs all;
  import from EUTRA_NB_NASSteps all;
 /* import from EUTRA_InitialRegistration all;*/
  import from EUTRA_NB_ASP_Templates all;
  import from NBIOT_Paging all;
  import from EUTRA_NB_RRC_Templates all;
/*  import from VZW_LTE_DATA_RETRY_CommonDefs all;  */
  import from IMS_PTC_CoordMsg all;
  /*import from VZW_LTE_IMSLESS_DATA_RETRY_CommonDefs all;  */
  /*import from VZ_LTE_CommonDefs all;*/
  import from EUTRA_NB_AuxiliaryFunctions all;
  import from MTC_Component_NBIOT all;
  import from MTC_Main_NBIOT all;
  import from NBIOT_General_CP all;
  import from NBIOT_ESM_Testcases all;
  import from UpperTesterCommon all;
  import from NBIOT_NAS_TrackingArea all;
  import from NBIOT_SecuritySteps all;
  import from NBIOT_NAS_Authentication_Security all;
  import from NasEmu_CtrlFunctions all;
  import from VZW_LTE_IMSLESS_DATA_RETRY_COMMON all;

    
    function f_VZ_TC_3_1_NBIOT_Test(charstring p_APN := px_IMS_APN, charstring TestPlan_Name, boolean CellChange) runs on NBIOT_PTC
  {
    var charstring v_TcName := testcasename() & ": ";
      
    log(v_TcName, "UE FAILS TO AUTHENTICATE THE NETWORK INVALID MAC CODE");

    
    f_NBIOT_Init( c1);
    
    log(v_TcName, "Step1: Configuring test setup so that the DUT finds service on a single eNodeB with cell id equal to value :", tsc_TAC1,
                  " and PLMN id Y1 = ", f_ConvertPLMNtoString(f_Asn2Nas_PlmnId(valueof(cs_HPLMN_Def))));      
    f_NBIOT_CellConfig_Def(nbiot_Cell1, CONTROL_PLANE);
    f_NBIOT_SetCellPower ( nbiot_Cell1, tsc_ServingCellRS_EPRE );
    log(v_TcName, "Step2: Configure the test equipment such that the MAC code in the AUTN information element of the NAS Authentication Request message is set to an invalid value");  
    log(v_TcName, "Step3: Verify that the device under test (DUT) has an Internet application that will
     attempt to connect to the Internet PDN as soon as the DUT is powered on and
     finds service on the LTE network."); 
    log(v_TcName, "Step4: Power the DUT on and allow it to find LTE service");
    f_UT_SwitchOnUE(UT, true);
    
    // MAC Failure with Cell Id change in step 12
   
    f1_VZ_TC_3_1_TwoCellChange_NBIOT_Body(CellChange, p_APN, TestPlan_Name);
    f_NBIOT_TestBody_Set(false);
    f_UT_SwitchOffUE (UT, false);  
 	log(v_TcName," Switch off the device");
  }
    
 function f1_VZ_TC_3_1_TwoCellChange_NBIOT_Body(boolean CellChange, charstring p_APN := px_IMS_APN, charstring TestPlan_Name) runs on NBIOT_PTC
  {
    timer t_WaitTime;
    timer t_5MinWaitTime := 300.0;
    timer t_60sec := 60.0;
    var NAS_MSG_Indication_Type v_NasInd;
    var EUTRA_ASN1_RRC_TransactionIdentifier_Type v_RRC_TI := tsc_RRC_TI_Def;
   
   var boolean isInternetAttempt := true;
    var charstring v_TcName := testcasename() & ": ";
    var charstring v_sApn := "vzwadmin";
    timer t_Procedure_Guard_Timer;
    var float tsc_GuardProcedureTimer_240 := 240.0;
     var template (present) B3_Type v_PDNType := (f_GetPdnType(), '101'B, '001'B);
    var template (present) NAS_UL_Message_Type v_ESMMessage := cr_CIOT_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach, v_PDNType);
    var integer i:=0;
  
    t_Procedure_Guard_Timer.start(tsc_GuardProcedureTimer_240); //Guard Procedure Started
    

      
    log(v_TcName, "Step5: Verify that the DUT successfully establishes an RRC connection and sends a NAS Attach Request message");
    v_NasInd:=  f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell1,
                                                  cr_EstablishmentCause_NB_Any,
                                                  cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                    cr_CIOT_ATTACH_REQUEST(cr_AdditionalUpdateType_CIOT), //Table 22.5.7a.3.3-4
                                                                                    v_ESMMessage)); 

      
      
    log(v_TcName, "Step5: UE establishes an RRC Conn and sends an Attach Request mesasge");
    log(v_TcName," Default Procedure Guard Timer Stopped");
    
    t_Procedure_Guard_Timer.stop; //Guard Procedure Ended

    log(v_TcName, "Step6: Verify that network sends a NAS Authentication Request message in which the MAC code in the AUTN information element is set to an invalid value."); 
    f_NBIOT_InitialRegistration_Step5_6_MAC_Failure(nbiot_Cell1, v_NasInd, false);
      
    //t_5MinWaitTime.start;
    f_NBIOT_RRC_ConnectionRelease_MAC_Failure(nbiot_Cell1);  
    log(v_TcName, "Step7: verified that UE has sent a NAS Authentication Failure message to the network in which the EMM cause code is #20 (MAC failure).");  
    
    log(v_TcName, "Step8: Ensuring that the network does not transmit any further UE-directed NAS messages for at least 25 seconds which will cause timer T3418 to expire.");
    t_5MinWaitTime.start;
    log(v_TcName, "Step9: Monitor the DUT for at least 5 minutes and verify that it does not attempt to attach to the LTE network for at least 300 seconds after the initial failure."); 
  
      
      t_60sec.start;
    alt{
      []SRB.receive(car_NB_SRB0_RrcPdu_IND(nbiot_Cell1, cr_RRCConnectionRequest_NB ( cr_EstablishmentCause_NB_Any, ? ) )) 
       {
           repeat;
       }
       []t_60sec.timeout{
          log(v_TcName, "Step8: 60 seconds elapsed");
       }
    
    }
      
    alt
    {
       []SRB.receive(car_NB_SRB0_RrcPdu_IND(nbiot_Cell1, cr_RRCConnectionRequest_NB ( cr_EstablishmentCause_NB_Any, ? ) ))
      {
        t_5MinWaitTime.stop;
       
        f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, v_TcName & "Step9: UE sending unexpected RRC Connection Request while timer running");
      }
      []t_5MinWaitTime.timeout
      {
        log(v_TcName, "Successfully Verified Step9");
      }
     
    }  

    log(v_TcName,"Step10: Attempt to initiate a connection to the ",v_sApn," PDN from the DUT.");      
     fl_UT_ApplyCommand(UT, cas_UT_Req(INITIATE_ADMIN_TEST_APP, NO_CNF_REQUIRED));
     
     t_Procedure_Guard_Timer.start(tsc_GuardProcedureTimer_240);
    f_NBIOT_TriggerAdditionalPDN_Modified_for_TCs_3_DR_IMSLESS (nbiot_Cell1, CONTROL_PLANE, ?, cs_AccessPointName (tsc_Octet_Lower_ADMIN_APN), v_sApn);
      log("Default Procedure Guard Timer Stopped");
    t_Procedure_Guard_Timer.stop; //Guard Procedure Ended
    
    if(CellChange)
    {
      log(v_TcName, "Step12: Reconfigure the test setup so that the DUT now finds service on a different eNodeB with cell id X2 = 2");
      
       f_NBIOT_CellInfo_SetCellId(nbiot_Cell1, nbiot_Cell2);
    }
    else
    {
     
        log(v_TcName, "Step12: Reconfigure the test setup such that the cell id equal to X1 with PLMN ID " &
                      "Y4 (HPLMN/EHPLMN) = ", f_ConvertPLMNtoString(f_Asn2Nas_PlmnId(valueof(cs_HPLMN_311_481))));
         f_NBIOT_CellInfo_SetPLMN_Common(nbiot_Cell1, {cs_HPLMN_311_481}, -, false);
      
    }        
    f_NBIOT_CellConfig_Def( nbiot_Cell1, CONTROL_PLANE);   
   f_Delay(2.0); 
    f_NBIOT_SetCellPower ( nbiot_Cell1, tsc_ServingCellRS_EPRE );
    log(v_TcName, "Step12: Cell Reconfiguration Successful");  
    fl_UT_ApplyCommand(UT, cas_UT_Req(POWER_CYCLE, NO_CNF_REQUIRED));
     t_Procedure_Guard_Timer.start(tsc_GuardProcedureTimer_240); //Guard Procedure Started
   
    if (CellChange)
    {
       log(v_TcName, "Step13: Verify that the DUT attempts to attach to the LTE network on the new eNB");   
    }
    else
    {
       log(v_TcName, "Step15: Verify that the DUT attempts to attach to the LTE network on the new eNB");   
    }
      
    v_NasInd:= f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell1,
                                                  cr_EstablishmentCause_NB_Any,
                                                  cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                    cr_CIOT_ATTACH_REQUEST(cr_AdditionalUpdateType_CIOT), //Table 22.5.7a.3.3-4
                                                                                    v_ESMMessage)); 



    log(v_TcName, "Default Procedure Guard Timer Stopped");
    t_Procedure_Guard_Timer.stop; //Guard Procedure Ended

   
      
    if (CellChange)
    {
        log(v_TcName, "Step13: Verified that the DUT attempts to attach to the LTE network on the new eNB");
    }
    else
    {
        log(v_TcName, "Step15: Verified that the DUT attempts to attach to the LTE network on the new eNB");
    }
      
    f_NBIOT_InitialRegistration_Step5_6_MAC_Failure(nbiot_Cell1, v_NasInd, false);

    f_NBIOT_RRC_ConnectionRelease_MAC_Failure(nbiot_Cell1);
    f_NBIOT_ReleaseAllCells(); 
   }
    
  function f_TC_3_2_NBIOT(charstring p_APN := px_IMS_APN, charstring TestPlan_Name) runs on NBIOT_PTC
  { 
    var NAS_MSG_Indication_Type v_NasInd;  
    var EUTRA_ASN1_RRC_TransactionIdentifier_Type v_RRC_TI := tsc_RRC_TI_Def;
    var EPS_UpdateTypeValue v_UpdateType;
    var GutiParameters_Type v_Guti1_Params;
    timer t_5MinWaitTime := 300.0;
    timer t_T3418Val := 25.0; 
    timer t_WaitTime; 
    timer t_60sec := 60.0;
    var boolean isInternetAttempt := true;
    timer t_Procedure_Guard_Timer;
    var charstring v_TcName := testcasename()&": ";
    var float v_wait_timer := 10.0;
    var charstring v_PDN := "vzwinternet";
    var template (present) B3_Type v_PDNType := (f_GetPdnType(), '101'B, '001'B);
    var template (present) NAS_UL_Message_Type v_ESMMessage := cr_CIOT_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach, v_PDNType);
    var float tsc_GuardProcedureTimer_240 := 240.0;
    var charstring v_sApn := "vzwadmin";

    f_NBIOT_Init (c1);  // @sic R5s106627 sic@
    
    
    log(v_TcName,"Step1: Configure the test setup so that the DUT finds service on a single eNodeB with cell_id " &
                 "(where cell_id refers to the CellIdentity parameter that is broadcast in SIB1) equal to value " &
                 "X1 = 1 and PLMN id equal to value Y1 = ",f_ConvertPLMNtoString(f_Asn2Nas_PlmnId(valueof(cs_HPLMN_Def))));
    log(v_TcName,"Step2: Configure the Cell to send separation bit in the AMF field of the AUTN IE in the NAS Authentication Request message is set to 0");
    f_NBIOT_CellConfig_Def (nbiot_Cell1, CONTROL_PLANE);
    f_NBIOT_SetCellPower ( nbiot_Cell1, tsc_ServingCellRS_EPRE ); 
    v_UpdateType := tsc_EpsUpdate_TaUpdate;
    v_Guti1_Params := f_NBIOT_CellInfo_GetGuti(nbiot_Cell1);  

    t_Procedure_Guard_Timer.start(tsc_GuardProcedureTimer_240); //Guard Procedure Started  //Guard Procedure Started
  
    log(v_TcName,"Step3: Verify that the DUT has an IMS/INTERNET application that will attempt to connect to the ",p_APN," PDN as soon as the DUT is powered on");
    log(v_TcName,"Step4: Power the DUT on and allow it to find LTE service.");
    
    f_UT_SwitchOnUE(UT);
    log(v_TcName,"Step5: Verify that the DUT successfully establishes an RRC connection and sends a NAS Attach Request message");              
    v_NasInd:=   f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell1,
                                                  cr_EstablishmentCause_NB_Any,
                                                  cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                    cr_CIOT_ATTACH_REQUEST(cr_AdditionalUpdateType_CIOT), //Table 22.5.7a.3.3-4
                                                                                    v_ESMMessage)); 
                                                                                                 
      
    log(v_TcName, "Default Procedure Guard Timer Stopped");
    t_Procedure_Guard_Timer.stop; //Guard Procedure Ended
    
    log(v_TcName,"Step5: Received NAS Attach Request"); 
    log(v_TcName,"Step6: Send NAS Authentication Request message with AMF field in the AUTN IE set to 0");  
    f_NBIOT_InitialRegistration_EMMCause26(nbiot_Cell1, v_NasInd, false); 
    log(v_TcName,"Step7: UE Sent NAS Authentication Failure message with EMM Cause Code #26 Non-EPS authentication not acceptable");  
	//t_5MinWaitTime.start;  
      f_NBIOT_RRC_ConnectionRelease_MAC_Failure(nbiot_Cell1); 
    
      
    log(v_TcName,"Step8: Ensure that the network does not transmit any further UE-directed NAS messages for at least 25 seconds");
      t_5MinWaitTime.start;
    // verify that UE does not attempt to attach to the LTE network for at least 300 seconds after the initial failure.
    log(v_TcName,"Step9: Monitor the DUT for more than 5 minutes and verify that it does not attempt to attach to the LTE network for at least 300 seconds after the initial failure."); 
  
      t_60sec.start;
    alt{
      []SRB.receive(car_NB_SRB0_RrcPdu_IND(nbiot_Cell1, cr_RRCConnectionRequest_NB ( cr_EstablishmentCause_NB_Any, ? ) )) 
       {
           repeat;
       }
       []t_60sec.timeout{
          log(v_TcName, "Step8: 60 seconds elapsed");
       }
    
    }
      
      
    alt
    {
       []SRB.receive(car_NB_SRB0_RrcPdu_IND(nbiot_Cell1, cr_RRCConnectionRequest_NB ( cr_EstablishmentCause_NB_Any, ? ) ))
     {
            f_NBIOT_StopTimer(t_T3418Val);
            t_5MinWaitTime.stop;
            f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, v_TcName &"Step9: UE sending unexpected RRC Connection Request while timer running");
        }
     
      []t_5MinWaitTime.timeout
        {
            log(v_TcName,"5 Minute expired. Successfully verified Step9");
        }
     }  
   
    log(v_TcName,"Step10: Attempt to initiate a connection to the ",v_sApn," PDN from the DUT.");      
     fl_UT_ApplyCommand(UT, cas_UT_Req(INITIATE_ADMIN_TEST_APP, NO_CNF_REQUIRED));
     
     t_Procedure_Guard_Timer.start(tsc_GuardProcedureTimer_240);
    f_NBIOT_TriggerAdditionalPDN_Modified_for_TCs_3_DR_IMSLESS (nbiot_Cell1, CONTROL_PLANE, ?, cs_AccessPointName (tsc_Octet_Lower_ADMIN_APN), v_sApn);
      log("Default Procedure Guard Timer Stopped");
    t_Procedure_Guard_Timer.stop; //Guard Procedure Ended
    
      
   
    log(v_TcName,"Step12: power cycle the UE");
    log(v_TcName,"Step12: Verify that the UE finds service on the same eNodeB, that the UE attempts to attach, and that during the authentication portion of the attachment process, the network sends a NAS Authentication Request message in which the AMF field in the AUTN information element is set to a value of 0.");  
    //f_EUTRA_ResetIPandIMS(eutra_Cell1, PDN_1, tsc_DRB1, true); // Resetting IP PTC
    
    fl_UT_ApplyCommand(UT, cas_UT_Req(POWER_CYCLE, NO_CNF_REQUIRED));
    
          
    //  Check that After Reboot UE is sending Attach Req without waiting for 5 minute to expire. 
    //  If UE sendd Attach Req after 5 minute from previous failure then need to fail TC   
    alt
    {
      []SRB.receive(car_NB_SRB0_RrcPdu_IND(nbiot_Cell1, cr_RRCConnectionRequest_NB ( cr_EstablishmentCause_NB_Any, ? ) ))
       {
          t_5MinWaitTime.stop; // It was started during Step 11
          v_NasInd:=  f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell1,
                                                  cr_EstablishmentCause_NB_Any,
                                                  cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                    cr_CIOT_ATTACH_REQUEST(cr_AdditionalUpdateType_CIOT), //Table 22.5.7a.3.3-4
                                                                                    v_ESMMessage)); 
                                                                                   
    
         log(v_TcName,"Step12a: Received Attach Request, Verified that the UE attempts to attach");
         // log(v_TcName,"Step13: send NAS Authentication Request message with AMF field in the AUTN IE set to 0");  
         // log(v_TcName,"Step13: NAS Authentication Failure message to the network with EMM Cause Code #26 ");
         f_NBIOT_InitialRegistration_EMMCause26(nbiot_Cell1, v_NasInd, false); 
         log(v_TcName,"Step12b: Verified that during the authentication portion of the attachment process, the network sends a NAS Authentication Request message in which the AMF field in the AUTN information element is set to a value of 0");     
         log(v_TcName,"Step13: UE Sent NAS Authentication Failure message with EMM Cause Code #26 Non-EPS authentication not acceptable");  
       }
       []t_5MinWaitTime.timeout
       {
            f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, v_TcName &"Step12: UE is not sending RRC connection after Reboot");
       }
    }
      
    t_5MinWaitTime.start; 
    
       f_NBIOT_RRC_ConnectionRelease_MAC_Failure(nbiot_Cell1); 
    
      
    log(v_TcName,"Step14: Ensure that the network does not transmit any further UE-directed messages for at least 60 seconds");
    log(v_TcName,"Step15: Monitor the DUT for 5 minutes and verify that it does not attempt to attach to the LTE network");
 
      t_60sec.start;
    alt{
      []SRB.receive(car_NB_SRB0_RrcPdu_IND(nbiot_Cell1, cr_RRCConnectionRequest_NB ( cr_EstablishmentCause_NB_Any, ? ) )) 
       {
           repeat;
       }
       []t_60sec.timeout{
          log(v_TcName, "Step14: 60 seconds elapsed");
       }
    
    }
      
      
    
    alt
    {
       []SRB.receive(car_NB_SRB0_RrcPdu_IND(nbiot_Cell1, cr_RRCConnectionRequest_NB ( cr_EstablishmentCause_NB_Any, ? ) )) 
       {
            f_NBIOT_StopTimer(t_T3418Val);
            t_5MinWaitTime.stop;
            f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, v_TcName &"Step9: UE sending unexpected RRC Connection Request while timer running");
        }
     
      []t_5MinWaitTime.timeout
        {
            log(v_TcName,"5 Minute expired. Successfully verified Step15");
        }
     }  
   
    // verify that UE does not attempt to attach to the LTE network for at least 300 seconds after the initial failure.
    log(v_TcName,"Step16: Attempt to initiate a connection to the ",v_sApn," PDN from the DUT.");      
     fl_UT_ApplyCommand(UT, cas_UT_Req(INITIATE_ADMIN_TEST_APP, NO_CNF_REQUIRED));
     
     t_Procedure_Guard_Timer.start(tsc_GuardProcedureTimer_240);
    f_NBIOT_TriggerAdditionalPDN_Modified_for_TCs_3_DR_IMSLESS (nbiot_Cell1, CONTROL_PLANE, ?, cs_AccessPointName (tsc_Octet_Lower_ADMIN_APN), v_sApn);
      log("Default Procedure Guard Timer Stopped");
    t_Procedure_Guard_Timer.stop; //Guard Procedure Ended
    
      
      
      t_Procedure_Guard_Timer.start(tsc_GuardProcedureTimer_240);
    


    // 18. Reconfigure the test setup so that the DUT now finds service on a different eNodeB with cell_id 
     // equal to value X2 where X2 is not equal to X1. X1 and X2 are on the same frequency. 
    //The PLMN id is still equal to Y1 
    log(v_TcName,"Step18a: Reconfigure the test setup so that the DUT now finds service on a different eNodeB " &
                 "with cell id equal to value X2=2 where X2 is not equal to X1. X1 and X2 are on the same frequency. " &
                 "The PLMN id is still equal to Y1 = ",f_ConvertPLMNtoString(f_Asn2Nas_PlmnId(valueof(cs_HPLMN_Def))));
    
      f_NBIOT_CellInfo_SetCellId(nbiot_Cell1, nbiot_Cell2);
    f_NBIOT_CellConfig_Def( nbiot_Cell1, CONTROL_PLANE);
    f_Delay(2.0);
    f_NBIOT_SetCellPower ( nbiot_Cell1, tsc_ServingCellRS_EPRE );
      
    // f_UT_PowerOffUE(UT); // @sic R5s120520 sic@ 
    fl_UT_ApplyCommand(UT, cas_UT_Req(POWER_CYCLE, NO_CNF_REQUIRED));
     // This is deviation taken from TP, otherwise UE is not reading SIBs
    //  Check that After Cell Change UE is sending Attach Req without waiting for 5 minute to expire. 
    //  If UE sendd Attach Req after 5 minute from previous failure then need to fail TC   
    alt
    {
       []SRB.receive(car_NB_SRB0_RrcPdu_IND(nbiot_Cell1, cr_RRCConnectionRequest_NB ( cr_EstablishmentCause_NB_Any, ? ) )) 
       {
          t_5MinWaitTime.stop; // It was started during Step 17
          log(v_TcName,"Step19: Verify that DUT attempts to attach to the LTE network on the new eNodeB");
          v_NasInd:= f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell1,
                                                  cr_EstablishmentCause_NB_Any,
                                                  cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                    cr_CIOT_ATTACH_REQUEST(cr_AdditionalUpdateType_CIOT), //Table 22.5.7a.3.3-4
                                                                                    v_ESMMessage)); 
         log(v_TcName,"Step19: DUT attempted to attach to the LTE network on the new eNodeB");
    
       }
       []t_5MinWaitTime.timeout
       {
          f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, v_TcName &"Step19: UE is not sending Attach Req immediately after Cell Change");
       }
    }
    // f_NBIOT_RRC_ConnectionRelease(nbiot_Cell1);
    f_NBIOT_ReleaseAllCells(); 
      f_NBIOT_TestBody_Set(false);
    f_UT_SwitchOffUE (UT, false);  
 	log(v_TcName," Switch off the device");
    f_NBIOT_PreliminaryPass(__FILE__, __LINE__, v_TcName&": PASSED");
  } 
    
     function f_TC_3_3_IMSLESS_NBIOT(charstring p_APN := px_IMS_APN, charstring TestPlan_Name) runs on NBIOT_PTC
  {       
    var NAS_MSG_Indication_Type v_NasInd;  
    var EUTRA_ASN1_RRC_TransactionIdentifier_Type v_RRC_TI := tsc_RRC_TI_Def;
    timer t_WaitTime;
    timer t_5MinWaitTime := 300.0;
    var DelayForUserPlaneSignalling_Type isWait := waitForIMS;
    var float v_T3420Val := 25.0;
    var boolean v_WaitForTimeout := true;
    var boolean isInternetAttempt := true;
    var charstring v_TcName := testcasename()&": ";
    timer t_Procedure_Guard_Timer;
    timer t_60sec := 60.0;
    var charstring v_sApn := "vzwadmin";
    var template (present) B3_Type v_PDNType := (f_GetPdnType(), '101'B, '001'B);
    var template (present) NAS_UL_Message_Type v_ESMMessage := cr_CIOT_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach, v_PDNType);
    var float tsc_GuardProcedureTimer_240 := 240.0;
  
      
    log(v_TcName," UE FAILS TO AUTHENTICATE THE NETWORK INVALID VALUE FOR SQN FIELD");
    
    f_NBIOT_Init (c1);
    
    log(v_TcName,"Step1: Configure the test setup do that the DUT finds service on a single eNodeB with cell id X1 = 1",
                  " and PLMN id Y1 = ", f_ConvertPLMNtoString(f_Asn2Nas_PlmnId(valueof(cs_HPLMN_Def))));
    f_NBIOT_CellConfig_Def(nbiot_Cell1, CONTROL_PLANE);
    f_NBIOT_SetCellPower(nbiot_Cell1, tsc_ServingCellRS_EPRE); 
    log(v_TcName,"Step1: Cell Configuration Successful");
      
    log(v_TcName,"Step2: Configure TE such that SQN field of the AUTN IE in the NAS Authentication Request message is set to an invalid value");

    log(v_TcName,"Step3: Verify that the device under test (DUT) has an Internet application that will attempt to connect to the " &
                   "Internet PDN as soon as the DUT is powered on and finds service on the LTE network");        
    
    log(v_TcName,"Step4: Power the DUT on and allow it to find LTE service.");
    f_UT_SwitchOnUE(UT);

    t_Procedure_Guard_Timer.start(tsc_GuardProcedureTimer_240); //Guard Procedure Started
    
    log(v_TcName,"Step5: Verify that the DUT successfully establishes an RRC connection and sends a NAS Attach Request message.");         
    v_NasInd:= f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell1,
                                                  cr_EstablishmentCause_NB_Any,
                                                  cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                    cr_CIOT_ATTACH_REQUEST(cr_AdditionalUpdateType_CIOT), //Table 22.5.7a.3.3-4
                                                                                    v_ESMMessage)); 

                                                                                                

    log(v_TcName,"Default Procedure Guard Timer Stopped");

    t_Procedure_Guard_Timer.stop; //Guard Procedure Ended

    log(v_TcName,"Step5: UE has successfully established RRC connection and sent NAS Attach Request message.");
    log(v_TcName,"Step6: Verifying that, during the authentication portion of the attachment process, the network sends a NAS Authentication Request message in which the SQN code in the AUTN information element is set to an invalid value."); 
    f_NBIOT_InitialRegistration_SyncFailure(nbiot_Cell1, v_NasInd, false);   
    //t_5MinWaitTime.start;
    log(v_TcName,"Step7: UE sent NAS Authentication Failure message with an EMM cause code of #21 Sync failure"); 
      
    f_NBIOT_RRC_ConnectionRelease_MAC_Failure(nbiot_Cell1);
     
    log(v_TcName,"Step8: Ensuring that the network does not transmit any further UE-directed NAS messages for at least 60 seconds which will cause timer T3420 to expire.");
     t_5MinWaitTime.start;
    log(v_TcName,"Step9: Monitor the DUT for at least 5 minutes and verify that it does not attempt to attach to the LTE network for at least 300 seconds after the initial failure."); 
  
      t_60sec.start;
    alt{
      []SRB.receive(car_NB_SRB0_RrcPdu_IND(nbiot_Cell1, cr_RRCConnectionRequest_NB ( cr_EstablishmentCause_NB_Any, ? ) )) 
       {
           repeat;
       }
       []t_60sec.timeout{
          log(v_TcName, "Step8: 60 seconds elapsed");
       }
    
    }
     alt
    {
     []SRB.receive(car_NB_SRB0_RrcPdu_IND(nbiot_Cell1, cr_RRCConnectionRequest_NB ( cr_EstablishmentCause_NB_Any, ? ) )) 
       {
        t_5MinWaitTime.stop;
        f_NBIOT_StopTimer(t_WaitTime);
        f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, v_TcName &" Step 9: UE sending unexpected RRC Connection Request while timer running");
      }
      []t_5MinWaitTime.timeout
      {
        log(v_TcName, "Successfully Verified Step9");
        log(v_TcName, "5 minutes passed after the previous failure");
           v_WaitForTimeout := false;  
      }
     
    }  
     log(v_TcName,"Step10: Attempt to initiate a connection to the ",v_sApn," PDN from the DUT.");      
     fl_UT_ApplyCommand(UT, cas_UT_Req(INITIATE_ADMIN_TEST_APP, NO_CNF_REQUIRED));
     
     t_Procedure_Guard_Timer.start(tsc_GuardProcedureTimer_240);
    f_NBIOT_TriggerAdditionalPDN_Modified_for_TCs_3_DR_IMSLESS (nbiot_Cell1, CONTROL_PLANE, ?, cs_AccessPointName (tsc_Octet_Lower_ADMIN_APN), v_sApn);
      log(v_TcName,"Default Procedure Guard Timer Stopped");
    t_Procedure_Guard_Timer.stop; //Guard Procedure Ended
      //f_NBIOT_RRC_ConnectionRelease(nbiot_Cell1);
     
          
    log(v_TcName,"Step12: Reconfigure the test setup so that attach attempts will succeed and the UE will now "& 
                             "successfully authenticate the network.");  
       t_Procedure_Guard_Timer.start(tsc_GuardProcedureTimer_240);
   
      fl_UT_ApplyCommand(UT, cas_UT_Req(POWER_CYCLE, NO_CNF_REQUIRED));  
      v_NasInd := f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell1,
                                                  cr_EstablishmentCause_NB_Any,
                                                  cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                    cr_CIOT_ATTACH_REQUEST(cr_AdditionalUpdateType_CIOT), //Table 22.5.7a.3.3-4
                                                                                    v_ESMMessage)); 

    f_NBIOT_InitialRegistration_Step5_14(nbiot_Cell1, CONTROL_PLANE, STATE2_NB_CONNECTED_UPDATED, v_NasInd); 
    
        log(v_TcName,"Step13: Reconfigure the test setup so that the DUT now finds service on a different eNodeB with cell id X2 = 2",
                     " where X2 is not equal to X1. X1 and X2 are on the same frequency. The PLMN id is still " &
                     "Y1 = ", f_ConvertPLMNtoString(f_Asn2Nas_PlmnId(valueof(cs_HPLMN_Def))));
    
    /*   SRB.send(cas_NB_SRB1bis_NasPdu_REQ(nbiot_Cell1, cs_TimingInfo_Now,
                                 cs_NAS_Request(tsc_SHT_IntegrityProtected_Ciphered,
                                                cs_508_DETACH_REQUEST_MT(cs_DetachType(tsc_DetachMT_ReAttach), omit))));
    
    log (v_TcName, "Step13: Verify that the UE sends a Detach Accept message");
    SRB.receive(car_NB_SRB1bis_NasPdu_IND(
                nbiot_Cell1,
                cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered,
                                  cr_508_DETACH_ACCEPT)));
    
       log (v_TcName, "Releasing the RRC Connection");
        f_NBIOT_RRC_ConnectionRelease(nbiot_Cell1);*/
         f_NBIOT_RRC_ConnectionRelease_MAC_Failure(nbiot_Cell1);
   
        f_NBIOT_ReleaseAllCells();
        
        f_NBIOT_CellInfo_SetCellId(nbiot_Cell1, nbiot_Cell2);
        f_NBIOT_CellConfig_Def( nbiot_Cell1, CONTROL_PLANE);      
        f_Delay(2.0);  
        f_NBIOT_SetCellPower ( nbiot_Cell1, tsc_ServingCellRS_EPRE );
        log(v_TcName,"Step13: Cell Configuration Sucessful");
      
     
     log(v_TcName,"Default Procedure Guard Timer Stopped");
    
    t_Procedure_Guard_Timer.stop; //Guard Procedure Ended
   fl_UT_ApplyCommand(UT, cas_UT_Req(POWER_CYCLE, NO_CNF_REQUIRED));
   
    log(v_TcName,"Step14: Verify that the DUT attempts to attach to the LTE network on the new eNodeB");
    alt
    {
     []SRB.receive(car_NB_SRB0_RrcPdu_IND(nbiot_Cell1, cr_RRCConnectionRequest_NB ( cr_EstablishmentCause_NB_Any, ? ) )) 
       {
         v_NasInd := f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell1,
                                                  cr_EstablishmentCause_NB_Any,
                                                  cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                    cr_CIOT_ATTACH_REQUEST(cr_AdditionalUpdateType_CIOT), //Table 22.5.7a.3.3-4
                                                                                    v_ESMMessage)); 

        f_NBIOT_InitialRegistration_Step5_14(nbiot_Cell1, CONTROL_PLANE, STATE2_NB_CONNECTED_UPDATED, v_NasInd); 
    
        log(v_TcName,"Step15: Verified that the DUT is successful in attaching to the network and connecting to the ",p_APN," PDN.");
        
        log(v_TcName,"Step16: Reconfigure the test setup so that the DUT finds service on the original eNodeB with cell id X1 = 1",
                     " and PLMN id Y1 = ", f_ConvertPLMNtoString(f_Asn2Nas_PlmnId(valueof(cs_HPLMN_Def))));
        //f_VZ_EUTRA_RRC_ConnectionRelease_Common_No_Wait(eutra_Cell1, cs_RRCConnectionRelease(tsc_RRC_TI_Def, other), cs_TimingInfo_Now);
        /* TODO - AS - Need to discuss this with Debal. UE is not reading the updated SIB info even after Paging. Need to verify the same with Smart Phone as well */
        //f_EUTRA_UE_Detach_SwitchOffUe_Generic(eutra_Cell1, RRC_CONNECTED, NORMAL);  
        
        f_NBIOT_CellInfo_SetCellId(nbiot_Cell1, nbiot_Cell1);
        
        f_NBIOT_CellConfig_Def( nbiot_Cell1, CONTROL_PLANE);
        f_NBIOT_SetCellPower ( nbiot_Cell1, tsc_ServingCellRS_EPRE );
      }
      []t_5MinWaitTime.timeout
      {
        v_WaitForTimeout := false; 
        log(v_TcName, "5 minutes passed after the previous failure");
        repeat;
      }
    }
    
    log(v_TcName,"Step17: Attempt to initiate a connection to the ",v_sApn," PDN from the DUT.");      
    fl_UT_ApplyCommand(UT, cas_UT_Req(APP_TRANSMIT_STATE_ON, NO_CNF_REQUIRED,{cs_Ut_Parameter_Common ("ACTIVATE_ADMIN_APN", "10")}));
    
     
     
     
   // f_EUTRA_InitiatePdnConn("Step17");
    log(v_TcName,"Step18: Verify that the DUT does not attempt to connect to the LTE network until at least 5 minutes after the previous failure");  
    
  //  t_WaitTime.start(10.0);        
    alt
    {
     []SRB.receive(car_NB_SRB0_RrcPdu_IND(nbiot_Cell1, cr_RRCConnectionRequest_NB ( cr_EstablishmentCause_NB_Any, ? ) )) 
       {
         if(v_WaitForTimeout == true)
        {
            f_NBIOT_StopTimer(t_5MinWaitTime);
            f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, v_TcName &" Step 17: UE sending unexpected RRC Connection Request while 5 min timer is running");
        }
        else
        {
            log(v_TcName,"Step17: UE Attempted to initiate a connection to the ",v_sApn," PDN from the DUT after 5 min timer expiry.");
        }
        
        }
     
      []t_5MinWaitTime.timeout
      {
        log(v_TcName, "5 minute elapsed. Step18 Successfully Verified");
       } 
    }
      
     f_UT_SwitchOffUE(UT, false);
    
    f_NBIOT_ReleaseAllCells(); 
   
     fl_UT_ApplyCommand(UT, cas_UT_Req(APP_TRANSMIT_STATE_OFF, NO_CNF_REQUIRED,{cs_Ut_Parameter_Common ("ACTIVATE_ADMIN_APN", "0")}));
   
    f_NBIOT_TestBody_Set(false);
    f_NBIOT_PreliminaryPass(__FILE__, __LINE__, v_TcName & "Successfully Verified Expected Result : UE does not attempt any further "
                                                         & "connections with an LTE eNodeB for at least 300 seconds if it is unable "
                                                         & "to authenticate the network. UE will attempt connections on a different eNodeB.");
  }
    
    
    
    
    function f_TC_3_4_IMSLESS_NBIOT(charstring p_APN := px_IMS_APN, charstring TestPlan_Name) runs on NBIOT_PTC
  { 
     var EUTRA_ASN1_RRC_TransactionIdentifier_Type v_RRC_TI := tsc_RRC_TI_Def;
    
    var integer p_SelectedPlmnId;
    log(testcasename()," Guard time is one hour");  
    p_SelectedPlmnId := 1; // <Value 1 to maxPLMN-r11, Default is 1>
      
        // Preamble 
    // Cell init
    f_NBIOT_Init (c1);
            
    // 1.Configure the test setup so that the device under test (DUT) finds service on a single eNodeB with PLMN id equal to value Y1.
    // 2.Configure the test equipment such that the network will allow the UE to attach and connect to PDNs.
    
    //Cell Config
    f_NBIOT_CellConfig_Def (nbiot_Cell1, CONTROL_PLANE);  
    f1_VZ_TC_3_4_IMSLESS_NBIOT_Body(p_APN);
    f_NBIOT_TestBody_Set(false);
   // f_VZ_Ignore_Rach_Enable_Ind_Disable(eutra_Cell1);            //added for LCCP-2346 
    f_UT_SwitchOffUE (UT, false);
    f_NBIOT_ReleaseAllCells();
    f_NBIOT_PreliminaryPass(__FILE__, __LINE__, testcasename() &" PASSED");

    log(testcasename()," Postamble Execution Done");      
 
  
  }
    
  function f1_VZ_TC_3_4_IMSLESS_NBIOT_Body(charstring p_APN) runs on NBIOT_PTC
  {

    template (value) GPRS_Timer v_GT3402 := cs_GprsTimer_tv('17'O, tsc_GprsTimerUnit_1min, '00100'B); 
    var template (omit) EMM_Cause v_EMMCause :=cs_EMM_Cause_tv(tsc_Cause_EPSServNotAllowed);
 
    timer t_Procedure_Guard_Timer;
    var UE_SecurityCapability v_UeSecurityCapabilities;
    var NAS_MSG_Indication_Type v_NasInd;
    var NAS_UL_Message_Type v_PdnConnectivityRequest;
    var template (omit) ProtocolConfigOptions v_Pco := omit;
    var ProcedureTransactionIdentifier v_EpsPti := tsc_PTI_1;
    var boolean v_EIT_Flag := false;
    var NBIOT_SecurityParams_Type v_SecurityParams := f_NBIOT_Security_Get();    
    var GutiParameters_Type v_GutiParams := f_NBIOT_CellInfo_GetGuti(nbiot_Cell1);
    var NAS_PlmnId v_PLMN := f_Asn2Nas_PlmnId(v_GutiParams.PLMN_Identity);
    var float tsc_GuardProcedureTimer_240 := 240.0;
    var NAS_MSG_Indication_Type v_NAS_Ind; 
    
    var float v_T3411 := 10.0;  
    timer t_T3411;
    var float v_T3402 := (4.0 * 60.0); 
    timer t_T3402;
    var float v_Time10Sec := 10.0;
    timer t_Time10sec := v_Time10Sec;    
    var integer v_loop :=1;
    var charstring vTcName := testcasename()&": ";
    var template (present) B3_Type v_PDNType := (f_GetPdnType(), '101'B, '001'B);
    var template (present) NAS_UL_Message_Type v_ESMMessage := cr_CIOT_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach, v_PDNType);
   
      
    log(vTcName,"Step1: Configured the test setup so that the device under test (DUT) finds service on a single eNodeB 
        with PLMN id equal to value Y1. Configure the test equipment such that the network sets the T3402 
        timer to 4 minutes in the Attach Accept message.");
    
    log(vTcName,"Step2: Verify that the device under test (DUT) has an", p_APN ,"application that will attempt to connect to the ",p_APN," PDN as soon as the DUT is powered on and finds service on the LTE network.");
    f_NBIOT_SetCellPower(nbiot_Cell1, tsc_ServingCellRS_EPRE); 
    // 3. Power the DUT on and allow it to find LTE service.     
    log(vTcName,"Step3: . Power the DUT on and allow it to find LTE service");
    f_UT_SwitchOnUE(UT); 
    
    t_Procedure_Guard_Timer.start(tsc_GuardProcedureTimer_240); //Guard Procedure Started

    // 4. Verify that the DUT sends an Attach Request and that the network responds with 
    // an Attach Accept with the T3402 timer set to 4 minutes. 
     v_NAS_Ind :=  f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell1,
                                               cr_EstablishmentCause_NB_Any,
                                               cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                  cr_CIOT_ATTACH_REQUEST(cr_AdditionalUpdateType_CIOT),
                                                                                  v_ESMMessage)); 


    f_NBIOT_InitialRegistration_Step5_14(nbiot_Cell1, CONTROL_PLANE, STATE2_NB_CONNECTED_UPDATED, v_NAS_Ind, v_GT3402);
  
    
    
    log(vTcName,"Step4: Verified that the DUT sends an Attach Request and that the network responds with an Attach Accept with the T3402 timer set to 4 minutes.");    
    log(vTcName, "Default Procedure Guard Timer Stopped");
    t_Procedure_Guard_Timer.stop; //Guard Procedure Ended

    log(vTcName,"Step4: UE Attach Success.");
    //f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "VZW TC 3.5 Step 4");
    
    
    // 5. Configure the test equipment such that the network sends a Detach Request to the DUT 
     // with "re-attach required" in the Detach Type IE. 
    log(vTcName,"Step5: Network sends a Detach Request to the DUT with re-attach required in the Detach Type IE.");
    SRB.send(cas_NB_SRB1bis_NasPdu_REQ(nbiot_Cell1,
                                       cs_TimingInfo_Now,
                                       cs_NAS_Request(tsc_SHT_IntegrityProtected_Ciphered,
                                                      cs_508_DETACH_REQUEST_MT(cs_DetachType(tsc_DetachMT_ReAttach), omit))));

    //log("Step 5: Detach Request sent from SS");
    //f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "VZW TC 3.5 Step 5");
    
    
    // 6. Verify that the DUT detaches from the LTE network. 
    log(vTcName,"Step6: Verify that the DUT detaches from the LTE network. ");
    SRB.receive(car_NB_SRB1bis_NasPdu_IND(nbiot_Cell1,
                                          cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered,
                                                            cr_508_DETACH_ACCEPT)));
    log(vTcName,"Step6: UE Detached");
    f_NBIOT_PreliminaryPass(__FILE__, __LINE__, testcasename()&": Step6: PASS ");
    
    
    // 7. Configure the test equipment such that the network proposes capabilities that the UE does not support 
     // when sending a NAS Security Mode Command message. 
    //8. Verify that the DUT successfully establishes an RRC connection and sends a NAS Attach Request message. 
    
    f_NBIOT_RRC_ConnectionRelease( nbiot_Cell1);
    
   
    for (var integer cluster_loop :=1; cluster_loop<3; cluster_loop:=cluster_loop+1) 
    {   
        if (cluster_loop == 2)
        {
            log(vTcName,"Step18 : Verify that the UE sends a second cluster of 5 more attach requests with each individual attempt separated by at least T3411=10 Seconds.");            
        }           
        v_loop :=1;
        for (v_loop :=1;v_loop<6;v_loop:=v_loop+1) 
        { 
            v_NasInd := f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell1,
                                               cr_EstablishmentCause_NB_Any,
                                               cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                  cr_CIOT_ATTACH_REQUEST(cr_AdditionalUpdateType_CIOT),
                                                                                  v_ESMMessage));                                                   
            v_PdnConnectivityRequest := v_NasInd.Pdu.PiggybackedPduList[0].Msg;
            v_EpsPti := v_PdnConnectivityRequest.pDN_CONNECTIVITY_REQUEST.procedureTransactionIdentifier; // Use this value in SS responses
            // Get the PCO to be used later (TS 36.508 v.8.2.2 Table 4.7.3-6)
            if (ispresent( v_PdnConnectivityRequest.pDN_CONNECTIVITY_REQUEST.protocolConfigurationOptions)) {
              v_Pco := v_PdnConnectivityRequest.pDN_CONNECTIVITY_REQUEST.protocolConfigurationOptions;
            }
            v_EIT_Flag := f_CheckEsmInfoTransferFlag(v_PdnConnectivityRequest.pDN_CONNECTIVITY_REQUEST);
            v_UeSecurityCapabilities := f_EUTRA_NB_FillNAS_SecurityCapability(v_NasInd.Pdu.Msg.aTTACH_REQUEST);    

            if ((v_loop == 1) and (cluster_loop == 1))
            {
               log(vTcName,"Step7: Configure the test equipment such that the network proposes capabilities that the UE does not support when sending a NAS Security Mode Command message.");
               log(vTcName,"Step8: DUT successfully establishes an RRC connection and sends a NAS Attach Request message.");
            }
            f_NBIOT_PreliminaryPass(__FILE__, __LINE__, vTcName&"Step7,8: PASS");

        
            // 9. Verify that the network sends a NAS Authentication Request message and that the UE responds by sending 
             // a NAS Authentication Response message. 
 
        
            v_SecurityParams := f_NBIOT_Security_Get(); 
            if ((v_loop == 1) and (cluster_loop == 1))
            {
                log(vTcName,"step9(a): Verify that the network sends a NAS Authentication Request message");
            }
            
            log("Loop=",v_loop);
            log("v_SecurityParams=",v_SecurityParams);
            log("f_Asn2Nas_PlmnId(v_GutiParams.PLMN_Identity)=",f_Asn2Nas_PlmnId(v_GutiParams.PLMN_Identity));
            v_SecurityParams :=  f_NBIOT_NAS_Authentication(nbiot_Cell1,
                                               tsc_SRB1bis,
                                               v_SecurityParams,
                                               tsc_SHT_IntegrityProtected_Ciphered,
                                               (tsc_SHT_NoSecurityProtection, tsc_SHT_IntegrityProtected),
                                               f_Asn2Nas_PlmnId(v_GutiParams.PLMN_Identity));   
        
            if ((v_loop == 1) and (cluster_loop == 1))
            {  
               log(vTcName,"Step9(b): the UE responds by sending a NAS Authentication Response message");            
               f_NBIOT_PreliminaryPass(__FILE__, __LINE__, vTcName&"Step9: PASS");
            }

            if ((v_loop == 1) and (cluster_loop == 1))
            {            
               log(vTcName,"Step10(a): Verify that the network then sends a NAS Security Mode Command message");
            }
           /* f_EUTRA_NB_SS_NAS_ConfigureSecurity(NASCTRL,
                                        v_SecurityParams.NAS_Integrity,
                                        v_SecurityParams.NAS_Ciphering);  // @sic R5s170254 sic@*/
            v_SecurityParams.NAS_Ciphering.Algorithm := px_NAS_CipheringAlgorithm; // @sic R5s180448 sic@
   
           
           SRB.send(cas_NB_SRB1bis_NasPdu_REQ(nbiot_Cell1,
                                       cs_TimingInfo_Now,
                                       cs_NAS_Request(tsc_SHT_IntegrityProtected_NewSecurityContext, // @sic R5-171417 sic@
                                                      cs_508_SECURITY_MODE_COMMAND(v_SecurityParams.NAS_Ciphering.Algorithm,
                                                                                   v_SecurityParams.NAS_Integrity.Algorithm,
                                                                                   v_SecurityParams.KSIasme,
                                                                                   fl_InvalidateUeSecurityCap(v_UeSecurityCapabilities),
                                                                                   omit)))); // @sic R5s180271 Baseline Moving 2018 Phase 1 sic@
      
          
            if ((v_loop == 1) and (cluster_loop == 1))
            {            
               log(vTcName,"Step10(a): Network sent NAS Security Mode Command message to UE");
            }
        
            //+   Check: Does the UE transmit a NAS SECURITY MODE REJECT message with
            //+   cause 'UE security capabilities mismatch'? --> SECURITY MODE REJECT
            if ((v_loop == 1) and (cluster_loop == 1))
            {
                log(vTcName,"Step10(b): UE transmit a NAS SECURITY MODE REJECT message with cause 'UE security capabilities mismatch");
            }
            SRB.receive(car_NB_SRB1bis_NasPdu_IND(nbiot_Cell1,
                                          cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered, // @sic R5-171417 sic@
                                                            cr_SECURITY_MODE_REJECT(tsc_UeSecurityCapsMismatch))));
   
            t_T3411.start ( f_NBIOT_SetTimerToleranceMin( nonProtocolTimer, v_T3411 ) );
              
            if ((v_loop == 1) and (cluster_loop == 1))
            {
                log(vTcName,"Step10(b): received Security mode command reject from UE");            
                f_NBIOT_PreliminaryPass(__FILE__, __LINE__, vTcName&"Step10: PASS");
            }

            if ((v_loop == 1) and (cluster_loop == 1))
            {
                log(vTcName,"Step11: Verified that the attachment attempt is aborted by the network per 3GPP TS24.301."); 
                log(vTcName,"Step12: Configured the application transmitting state with a retransmission timer set to 10 seconds.");
              //  fl_UT_ApplyCommand(UT, cas_UT_Req(APP_TRANSMIT_STATE_ON, NO_CNF_REQUIRED,{cs_Ut_Parameter_Common ("ACTIVATE_INTERNET_APN", "10")}));
    
            //    fl_UT_ApplyCommand(UT, cas_UT_Req(INITIATE_ADMIN_TEST_APP, NO_CNF_REQUIRED));
     
            }

            if (cluster_loop == 1)
            {
               log(vTcName,"Step",13+(v_loop-1),"(a): Verify that the UE attempts to attach on behalf of the test application after a time defined by timer T3411=10 sec");
               log(vTcName,"Step",13+(v_loop-1),"(b): Verify that the UE again sends a NAS Security Mode Reject message during the Authentication/Security stage of the attach process" 
                                                             &" and the network aborts the attachment attempt.");
               log(vTcName,"Step",13+(v_loop-1),"(c): t_T3411 timer is started for 10 sec");
            }
            f_Delay(1.0);   
            f_NBIOT_RRC_ConnectionRelease( nbiot_Cell1 );
           // log(vTcName,"Released RRC Connection Release #Retry", (v_loop-1) );
     
            alt 
            {
               []SRB.receive(car_NB_SRB0_RrcPdu_IND(nbiot_Cell1, cr_RRCConnectionRequest_NB ( cr_EstablishmentCause_NB_Any, ? ) ))
               {
                    t_T3411.stop;
                    if (cluster_loop == 1)
                    {
                        log(vTcName,"Step",13+(v_loop-1),": UE Triggers unexpected Attach Request while T3411=10 Sec timer is running during #retry ",v_loop);
                        f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, vTcName&"PASS");
                    }
                    else
                    {
                        log(vTcName,"Step18: UE Triggers unexpected Attach Request while T3411=10 Sec timer is running during #retry ",v_loop);
                        f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, vTcName&"PASS");
                    }
                 }
               []t_T3411.timeout
                 {
                     if (cluster_loop == 1)
                     {
                         if (v_loop < 5)
                         {
                             //log(vTcName,"Step",13+(v_loop-1),": T3411 Successful Timeout. Waiting for Attach Retry #",v_loop);
                             log(vTcName,"Step",13+(v_loop-1),": T3411 Successful Timeout. Waiting for Attach Request");
                             f_NBIOT_PreliminaryPass(__FILE__, __LINE__, vTcName&"PASS");
                         }
                     }
                     else
                     {
                         if (v_loop < 5)
                         {
                             //log(vTcName,"Step18: T3411 Successful Timeout. Waiting for Attach Retry #",v_loop+1);
                             log(vTcName,"Step18: T3411 Successful Timeout. Waiting for Attach Request");
                             f_NBIOT_PreliminaryPass(__FILE__, __LINE__, vTcName&"PASS");
                         }
                         else
                         {
                             log(vTcName,"Step18: T3411 Successful Timeout.");
                         }
                     }

                 }
            }
            
        } // End of v_loop
        
        if (cluster_loop == 1)
        {
            log(vTcName,"Step17: Fourth retry attempt fails verify that the next attempt does not occur for T3402 minutes (4 minutes).");
        }
        else
        {
            log(vTcName,"Step18: Verify that the UE sends no additional attach attempts for at least T3402 minutes (4 minutes).");
        }
        //v_T3411 Secs are taken out as after the fourth retry attempt, T3402 timer 
         // should have been started but we are waiting for extra v_T3411 Secs in loop
        // Hence taking out v_T3411 seconds from V-T3402
        //t_T3402.start (  (v_T3402 - v_T3411) );
        t_T3402.start ((v_T3402));
        log(vTcName,"Timer T3402 (4 minutes) started.");
          
        alt {
          []SRB.receive(car_NB_SRB0_RrcPdu_IND(nbiot_Cell1, cr_RRCConnectionRequest_NB ( cr_EstablishmentCause_NB_Any, ? ) ))
          {
               t_T3402.stop;
                if (cluster_loop == 1)
                {
                    log(vTcName,"Step17: UE Triggers unexpected Attach Request while T3402 timer is running");
                    f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, vTcName&"Step17: PASS");            
                }
                else
                {
                    log(vTcName,"Step18: UE Triggers unexpected Attach Request while T3402 timer is running");
                    f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, vTcName&"Step18: PASS");            
                }
            }
          []t_T3402.timeout
            {
         
                if (cluster_loop == 1)
                {

                    log(vTcName,"Step17: Successful Timeout detected for Timer T3402");
                    f_NBIOT_PreliminaryPass(__FILE__, __LINE__, vTcName&"Step17: PASS");
                }
                else
                {
                    log(vTcName,"Step18: Successful Timeout detected for Timer T3402.");
                    f_NBIOT_PreliminaryPass(__FILE__, __LINE__, vTcName&"Step18: PASS");
                }
            }

        }
    }//End of cluster_loop

    log(vTcName,"Step18: Verified that the UE sends a second cluster of 5 more attach requests with each individual attempt separated by at least T3411=10 Seconds.");
    log(vTcName,"Step18: Verified that the UE sends no additional attach attempts for at least T3402 minutes (4 minutes).");
    
    fl_UT_ApplyCommand(UT, cas_UT_Req(APP_TRANSMIT_STATE_OFF, NO_CNF_REQUIRED,{cs_Ut_Parameter_Common ("ACTIVATE_INTERNET_APN", "0")}));
   
    f_NBIOT_PreliminaryPass(__FILE__, __LINE__, vTcName&"Step 18: PASS");

  }// End 
    
    // TC 4.1 - UE RECEIVES ATTACH REJECT MESSAGE FROM THE NETWORK CODE 19      
  function f_TC_4_1_NBIOT(charstring p_APN := px_INTERNET_APN) runs on NBIOT_PTC
  {
    
    
    
    log("TC_4_1_NBIOT: UE RECEIVES ATTACH REJECT MESSAGE FROM THE NETWORK CODE 19");
    
    f_NBIOT_Init (c1);
      
    // 1. Configure the test setup so that the device under test (DUT) finds service on a single eNodeB 
     //    with cell_id equal to value X1, PLMN id equal to value Y1, TAI equal to value Z1. 
     //    Configure the test system such that timer T3411 is set to 10 seconds.
    //    Configure the test equipment such thbat the network sets the T3402 timer to 4 minutes in the Attach Accept message.
     // 2. Verify that the device under test (DUT) has an Internet application that will attempt to connect to the IMS PDN 
     //    as soon as the DUT is powered on and finds service on the LTE network. 
       
      
     
     
    log("TC_4_1_NBIOT Step 1: Configure the test setup so that the device under test (DUT) finds service on a single eNodeB 
           with cell_id equal to value X1, PLMN id equal to value Y1, TAI equal to value Z1. 
           Configure the test system such that timer T3411 is set to 10 seconds.
           Configure the test equipment such thbat the network sets the T3402 timer to 4 minutes in the Attach Accept message.
           
           Step2: Verify that the device under test (DUT) has an Internet application that will attempt to connect to the IMS PDN 
           as soon as the DUT is powered on and finds service on the LTE network. 
       ");
   
    f_NBIOT_CellConfig_Def(nbiot_Cell1, CONTROL_PLANE);
    
    
      
    
    f_NBIOT_SetCellPower(nbiot_Cell1, tsc_ServingCellRS_EPRE);
     
    
    //TEST BODY
    f1_VZ_TC_4_1_NBIOT_Body(p_APN);
    
    f_NBIOT_TestBody_Set(false);
   
    log("TC_4_1_NBIOT: Postamble Execution started");
   
    f_NBIOT_ReleaseAllCells();
    f_UT_PowerOffUE (UT);
    f_NBIOT_SS_SRBs_DRBs_Release(nbiot_Cell1, CONTROL_PLANE);
    f_NBIOT_PreliminaryPass(__FILE__, __LINE__, " PASSED");
   
    log("TC_4_1_NBIOT: Postamble Execution done");
  } 

 function f1_VZ_TC_4_1_NBIOT_Body(charstring p_APN) runs on NBIOT_PTC
  {
    var NAS_AttDetValue_Type v_AttachType := tsc_EAttachType_EpsOnly;
   // var NAS_MSG_Indication_Type v_NasInd_Rxd; 
    //var template AdditionalUpdateType v_AdditionalUpdateType := f_GetAdditionalUpdateType (NORMAL);
    var NAS_MSG_Indication_Type v_NAS_Ind;       
    var ProcedureTransactionIdentifier v_PTId_UE;
    var PDN_CONNECTIVITY_REQUEST v_PDNConnReq;
   
     var template (present) B3_Type v_PDNType := (f_GetPdnType(), '101'B, '001'B);
    var template (present) NAS_UL_Message_Type v_ESMMessage := cr_CIOT_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach, v_PDNType);
   
    var float tsc_GuardProcedureTimer_240 := 240.0;
    var float tsc_GuardProcedureTimer_60 := 60.0;
    var integer v_XtdWaitTime := 10;
    
     var EUTRA_ASN1_RRC_TransactionIdentifier_Type v_RRC_TI := tsc_RRC_TI_Def;
    template (value) GPRS_Timer v_GT3402 := cs_GprsTimer_tv('17'O, tsc_GprsTimerUnit_1min, '00100'B);
    template (value) GPRS_Timer2 v_GT2_T3402 := cr_GPRS_Timer2_3('16'O, tsc_GprsTimerUnit_1min, '00100'B);
    const B8_Type tsc_EmmCause_EsmFailure := '00010011'B;
    const B8_Type tsc_Cause_Pdn_Conn_Doesnot_Exist := '00110110'B;
    var float v_T3402 := (4.0 * 60.0);
   
    var float v_T3411 := 10.0;
    timer t_T3411;
    timer t_T3402;
    var float v_T2sec := 10.0;      
    timer t_T2sec := v_T2sec;      
    var charstring v_TcName := testcasename() &": ";
    timer t_Procedure_Guard_Timer;
     var NB_SRB_Identity_Type v_SrbId := f_NBIOT_GetSrb1Id(CONTROL_PLANE);
     
      
      
    log("TC_4_1_NBIOT Step2: Verify that the device under test (DUT) has an application that will attempt to connect to the ",p_APN," as soon as the DUT is powered on and finds service on the LTE network");
    
    log("TC_4_1_NBIOT Step3: Power on the DUT and allow it to find LTE service");    
      
    f_UT_SwitchOnUE(UT, true);
      
    t_Procedure_Guard_Timer.start(tsc_GuardProcedureTimer_240); //Guard Procedure Started 
      
    v_NAS_Ind := f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell1,
                                                  cr_EstablishmentCause_NB_Any,
                                                  cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                    cr_CIOT_ATTACH_REQUEST(cr_AdditionalUpdateType_CIOT), //Table 22.5.7a.3.3-4
                                                                                    v_ESMMessage)); 

   f_NBIOT_InitialRegistration_Step5_14(nbiot_Cell1, CONTROL_PLANE, STATE2_NB_CONNECTED_UPDATED, v_NAS_Ind, v_GT3402);
  

    log(v_TcName,"Step4: Verified that the DUT sends an Attach Request and that the network responds with an Attach Accept");
   
    //log(v_TcName, "Default Procedure Guard Timer Stopped");
    log("TC_4_1_NBIOT: Default Procedure Guard Timer Stopped");
    t_Procedure_Guard_Timer.stop; //Guard Procedure Ended

    log("TC_4_1_NBIOT Step5: Configure the test equipment such that the network sends a Detach Request to the DUT with re-attach required in the Detach Type IE");      
    log("TC_4_1_NBIOT Sending Detach Request to UE with reattach required in the Detach Type");  

    SRB.send(cas_NB_SRB1bis_NasPdu_REQ(nbiot_Cell1,
                                       cs_TimingInfo_Now,
                                       cs_NAS_Request(tsc_SHT_IntegrityProtected_Ciphered,
                                                      cs_508_DETACH_REQUEST_MT(cs_DetachType(tsc_DetachMT_ReAttach), omit))));

    
    log("TC_4_1_NBIOT Expecting Detach Accept from the UE");

    SRB.receive(car_NB_SRB1bis_NasPdu_IND(nbiot_Cell1,
                                          cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered,
                                                            cr_508_DETACH_ACCEPT)));



    log("TC_4_1_NBIOT Step6: Verified that the DUT detaches from the LTE network.");
      
    log("TC_4_1_NBIOT Step7: Configured the test equipment such that the network will respond to attach attempts with NAS Attach Reject message"&
      " with EMM Cause Code 19 and respond to a piggybacked PDN connectivity request with NAS PDN Connectivity Reject"&
      " with an ESM Cause Code to 54");
      
    f_NBIOT_RRC_ConnectionRelease(nbiot_Cell1);
    
    t_Procedure_Guard_Timer.start(tsc_GuardProcedureTimer_240); //Guard Procedure Started 

    log("TC_4_1_NBIOT Step8: Verify that the DUT successfully establishes an RRC connection and sends a NAS Attach Request message.");
    log("TC_4_1_NBIOT Waiting to receive Attach Request");
    
    v_NAS_Ind := f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell1,
                                               cr_EstablishmentCause_NB_Any,
                                               cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                  cr_CIOT_ATTACH_REQUEST(cr_AdditionalUpdateType_CIOT),
                                                                                  v_ESMMessage)); 


  
    log("TC_4_1_NBIOT Verified that the DUT successfully establishes an RRC connection and sends a NAS Attach Request message.");
    
    //f_Procedure_Guard_Timer();
    log("TC_4_1_NBIOT: Default Procedure Guard Timer Stopped");
    t_Procedure_Guard_Timer.stop; //Guard Procedure Ended
  
    v_PDNConnReq := v_NAS_Ind.Pdu.PiggybackedPduList[0].Msg.pDN_CONNECTIVITY_REQUEST;  
    v_PTId_UE := v_PDNConnReq.procedureTransactionIdentifier;

    log("TC_4_1_NBIOT Sending Attach Reject to UE");   
   
    SRB.send (cas_NB_SRB_NasPdu_REQ (nbiot_Cell1,
                                     v_SrbId,
                                     cs_TimingInfo_Now,
                                     cs_NAS_RequestWithPiggybacking(v_NAS_Ind.SecurityProtection.Status,
                                                                    cs_508_AttachReject(cs_EMM_Cause_v(tsc_EmmCause_EsmFailure),-, v_GT2_T3402),
                                                                    cs_PdnConnectReject('0'H, // no EPS bearer assigned
                                                                    v_PTId_UE, // @sic R5s170962 sic@
                                                                    cs_ESM_Cause_v (tsc_Cause_Pdn_Conn_Doesnot_Exist), -, -,
                                                                    omit))));
                                    
                                                
                                                

  
    t_T3411.start(f_NBIOT_SetTimerToleranceMin(nonProtocolTimer, v_T3411));
    log("TC_4_1_NBIOT Step9: Verified that the network responds with a NAS Attach Reject message in which the EMM Cause Code is set to a "&
      "value of 19 and a NAS PDN Connectivity Reject message in which the ESM Cause Code is set to a value of 54.");
 
      
    log("TC_4_1_NBIOT Step10: Verify that the UE waits at least T3411 seconds before attempting to attach again."&
      " The next attempt is considered attempt #2. Verify that the Request Type IE in the PDN Connectivity Request"&
      " message is set to Initial Request.");
    log("TC_4_1_NBIOT Starting timer T3411 for 10 seconds");
    log("TC_4_1_NBIOT Monitoring that UE waits atleast T3411 seconds before attempting to attach again");
      
   // f_EUTRA_RRC_ConnectionRelease_Local(eutra_Cell1,f_EUTRA_GetNextSendOccasion(eutra_Cell1));
      f_NBIOT_RRC_ConnectionRelease( nbiot_Cell1 );  
      
    alt{
   //   []SRB.receive( car_SRB0_RrcPdu_IND(eutra_Cell1, cr_RRCConnectionRequest(cr_EstablishmentCause_Any)))      
    []SRB.receive(car_NB_SRB0_RrcPdu_IND(nbiot_Cell1, cr_RRCConnectionRequest_NB ( cr_EstablishmentCause_NB_Any, ? ) ))
      {
        t_T3411.stop;
        f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, "TC_4_1_NBIOT UE sent unexpected Attach Request before expiry of T3411 timer");
      }
      []t_T3411.timeout
      {
        log("TC_4_1_NBIOT Successfully Timer expired 10 seconds");
      }
    }
    //f_NBIOT_RRC_ConnectionRelease( nbiot_Cell1 );
    log("TC_4_1_NBIOT Waiting to receive Attach Request");
   
    //t_Procedure_Guard_Timer.start(tsc_GuardProcedureTimer_240); //Guard Procedure Started
    t_Procedure_Guard_Timer.start(tsc_GuardProcedureTimer_240); //Guard Procedure Started 
 
    v_NAS_Ind := f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell1,
                                               cr_EstablishmentCause_NB_Any,
                                               cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                  cr_CIOT_ATTACH_REQUEST(cr_AdditionalUpdateType_CIOT),
                                                                                  v_ESMMessage)); 

    log("TC_4_1_NBIOT Received Attach Request and Verified the Request Type IE in PDN Conn Request is set to Initial Request");
    
    //f_Procedure_Guard_Timer();
    log("TC_4_1_NBIOT: Default Procedure Guard Timer Stopped");
    t_Procedure_Guard_Timer.stop; //Guard Procedure Ended
    
    v_PDNConnReq := v_NAS_Ind.Pdu.PiggybackedPduList[0].Msg.pDN_CONNECTIVITY_REQUEST;
    v_PTId_UE := v_PDNConnReq.procedureTransactionIdentifier;
    

    log("TC_4_1_NBIOT Sending Attach Reject (EMM Cause Code 19) and PDN Conn Reject (ESM Cause Code 54)");

    
      
    SRB.send (cas_NB_SRB_NasPdu_REQ (nbiot_Cell1,
                                     v_SrbId,
                                     cs_TimingInfo_Now,
                                     cs_NAS_RequestWithPiggybacking(v_NAS_Ind.SecurityProtection.Status,
                                                                    cs_508_AttachReject(cs_EMM_Cause_v(tsc_EmmCause_EsmFailure),-, v_GT2_T3402),
                                                                    cs_PdnConnectReject('0'H, // no EPS bearer assigned
                                                                    v_PTId_UE, // @sic R5s170962 sic@
                                                                    cs_ESM_Cause_v (tsc_Cause_Pdn_Conn_Doesnot_Exist), -, -,
                                                                    omit))));

         t_T3411.start(f_NBIOT_SetTimerToleranceMin(nonProtocolTimer, v_T3411));
    log("TC_4_1_NBIOT Step11: Verified that the network again responds with a NAS Attach Reject message in which the "&
      "EMM Cause Code is set to a value of 19 and a NAS PDN Connectivity Reject message in which the ESM Cause Code"&
      " is set to a value of 54.");      


    log("TC_4_1_NBIOT Step12: Verify that the UE waits at least T3411 seconds before attempting to attach again. "&
      "The next attempt is considered attempt #3. Verify that the Request Type IE in the PDN Connectivity Request message is set to 'Initial Request'.");
    log("TC_4_1_NBIOT Starting timer T3411 for 10 seconds");      
    log("TC_4_1_NBIOT Monitoring that UE waits atleast T3411 seconds before attempting to attach again");
    
    
    //f_EUTRA_RRC_ConnectionRelease_Local (eutra_Cell1,f_EUTRA_GetNextSendOccasion(eutra_Cell1));
    f_NBIOT_RRC_ConnectionRelease( nbiot_Cell1 );
    
      alt {
      //[]SRB.receive( car_SRB0_RrcPdu_IND(eutra_Cell1, cr_RRCConnectionRequest(cr_EstablishmentCause_Any))) 
       []SRB.receive(car_NB_SRB0_RrcPdu_IND(nbiot_Cell1, cr_RRCConnectionRequest_NB ( cr_EstablishmentCause_NB_Any, ? ) ))     
      {
        t_T3411.stop;
        f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__,"TC_4_1_NBIOT UE sent unexpected Attach Request before expiry of T3411 timer");
      }
      []t_T3411.timeout
      {
          log("TC_4_1_NBIOT Successfully Timer expired 10 seconds");
      }
    }
    //f_NBIOT_RRC_ConnectionRelease( nbiot_Cell1 );
    log("TC_4_1_NBIOT Waiting to receive Attach Request");  
  
    //t_Procedure_Guard_Timer.start(tsc_GuardProcedureTimer_240); //Guard Procedure Started
    t_Procedure_Guard_Timer.start(tsc_GuardProcedureTimer_240); //Guard Procedure Started 


    v_NAS_Ind := f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell1,
                                               cr_EstablishmentCause_NB_Any,
                                               cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                  cr_CIOT_ATTACH_REQUEST(cr_AdditionalUpdateType_CIOT),
                                                                                 v_ESMMessage));

    log("TC_4_1_NBIOT Received Attach Request and Verified the Request Type IE in PDN Conn Request is set to Initial Request");
  
    //f_Procedure_Guard_Timer();
    log("TC_4_1_NBIOT: Default Procedure Guard Timer Stopped");
    t_Procedure_Guard_Timer.stop; //Guard Procedure Ended

    v_PDNConnReq := v_NAS_Ind.Pdu.PiggybackedPduList[0].Msg.pDN_CONNECTIVITY_REQUEST;
    v_PTId_UE := v_PDNConnReq.procedureTransactionIdentifier;
                
    log("TC_4_1_NBIOT Sending Attach Reject (EMM Cause Code 19) and PDN Conn Reject (ESM Cause Code 54)");
      
  SRB.send (cas_NB_SRB_NasPdu_REQ (nbiot_Cell1,
                                     v_SrbId,
                                     cs_TimingInfo_Now,
                                     cs_NAS_RequestWithPiggybacking(v_NAS_Ind.SecurityProtection.Status,
                                                                    cs_508_AttachReject(cs_EMM_Cause_v(tsc_EmmCause_EsmFailure),-, v_GT2_T3402),
                                                                    cs_PdnConnectReject('0'H, // no EPS bearer assigned
                                                                    v_PTId_UE, // @sic R5s170962 sic@
                                                                    cs_ESM_Cause_v (tsc_Cause_Pdn_Conn_Doesnot_Exist), -, -,
                                                                    omit))));


    t_T3402.start ( f_NBIOT_SetTimerToleranceMin ( nonProtocolTimer, v_T3402 ) );
    log("TC_4_1_NBIOT Step13: Verified that the network again responds with a NAS Attach Reject message in which the "&
      "EMM Cause Code is set to a value of 19 and a NAS PDN Connectivity Reject message in which the ESM Cause Code"&
      " is set to a value of 54.");       

    f_NBIOT_RRC_ConnectionRelease( nbiot_Cell1 );
    log("TC_4_1_NBIOT Step14: Verify the DUT does not send an Attach Request while T3402 is running.");
    log("TC_4_1_NBIOT Started timer T3402 for 4 minutes");
    log("TC_4_1_NBIOT Monitoring that UE waits atleast T3402 seconds before attempting to attach again");
       
   
     
      
    alt {
      //[]SRB.receive(car_NB_SRB0_RrcPdu_IND(eutra_Cell1, cr_RRCConnectionRequest(cr_EstablishmentCause_Any)))
      []SRB.receive(car_NB_SRB0_RrcPdu_IND(nbiot_Cell1, cr_RRCConnectionRequest_NB ( cr_EstablishmentCause_NB_Any, ? ) ))
      {
        t_T3402.stop;
        f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, "TC_4_1_NBIOT UE sent unexpected Attach Request before expiry of T3402 timer");
      }
      []t_T3402.timeout
      {
        log("TC_4_1_NBIOT Successfully Timer expired T3402 4 minutes");
      }
    }
    /* UE Attempting to attach immediately after expiry of T3402 timer.
       So receiving the Request and dropping it */
    t_T2sec.start;
    alt {
      //[]SRB.receive(car_SRB0_RrcPdu_IND(eutra_Cell1, cr_RRCConnectionRequest(cr_EstablishmentCause_Any)))
      []SRB.receive(car_NB_SRB0_RrcPdu_IND(nbiot_Cell1, cr_RRCConnectionRequest_NB ( cr_EstablishmentCause_NB_Any, ? ) ))
      {
          t_T2sec.stop;
         // f_VZ_Ignore_Rach_Enable_Ind_Disable(eutra_Cell1);            //added for LCCP-2346
          //f_NBIOT_SS_ConfigRachPreambleIgnoreIndMode(nbiot_Cell1, disable);
          //SRB.send(cas_NB_SRB0_RrcPdu_REQ(nbiot_Cell1, cs_TimingInfo_Now, cs_RRCConnectionReject_NB));
          log("TC_4_1_NBIOT f_NBIOT_SS_ConfigRachPreambleIndMode");
          f_NBIOT_SS_ConfigRachPreambleIndMode(nbiot_Cell1, disable);
          
          
      }
      []t_T2sec.timeout{
        log("TC_4_1_NBIOT timeout");
      }
    }
  }
    
     function f_TC_4_2_NBIOT_Code3(charstring TestPlan_Name) runs on NBIOT_PTC
  {
    var charstring v_TcName := "TC_4_2_NBIOT_Code3: ";
    
    log (v_TcName , "UE RECEIVES DETACH REQUEST MESSAGE FROM THE NETWORK CODE 3");
    f_NBIOT_Init (c1);
      
    log(v_TcName, "Step1: Configure the test setup so that the DUT finds service on a single eNodeB with cell_id X1 = 1, PLMN id Y1 = ", 
                  f_ConvertPLMNtoString(f_Asn2Nas_PlmnId(valueof(cs_HPLMN_Def))) & ", and TAI Z1 = ", oct2int(tsc_TAC1));
    f_NBIOT_CellConfig_Def(nbiot_Cell1, CONTROL_PLANE);      
    f_NBIOT_SetCellPower ( nbiot_Cell1, tsc_ServingCellRS_EPRE );
    
    log(v_TcName, "Step1: Cell Configuration Successful");
      
    
    fl_VZ_TC_4_2_Body(tsc_EmmCause_IllegalUe, px_INTERNET_APN, TestPlan_Name);
    f_NBIOT_TestBody_Set(false);
    
     log(v_TcName, "Postamble Execution started");
   
    f_NBIOT_ReleaseAllCells();
    f_UT_PowerOffUE (UT);  
    f_NBIOT_PreliminaryPass(__FILE__, __LINE__, v_TcName & "Successfully Verified Expected Result: UE does not attempt any further " &
                                                           "connections with an LTE system if it receives a NAS Detach Request message " &
                                                           "with cause code 3");
  }

  function f_TC_4_2_NBIOT_Code6(charstring TestPlan_Name) runs on NBIOT_PTC
  {
    var charstring v_TcName := "TC_4_2_NBIOT_Code6: ";
    
    log (v_TcName , "UE RECEIVES DETACH REQUEST MESSAGE FROM THE NETWORK CODE 6");
    f_NBIOT_Init (c1);
      
    
      
    log(v_TcName, "Step1: Configure the test setup so that the DUT finds service on a single eNodeB with cell_id X1 = 1, PLMN id Y1 = ", 
                  f_ConvertPLMNtoString(f_Asn2Nas_PlmnId(valueof(cs_HPLMN_Def))) & ", and TAI Z1 = ", oct2int(tsc_TAC1));
          
    f_NBIOT_CellConfig_Def(nbiot_Cell1, CONTROL_PLANE);   
    f_NBIOT_SetCellPower ( nbiot_Cell1, tsc_ServingCellRS_EPRE );
    log(v_TcName, "Step1: Cell Configuration Successful");
    
    fl_VZ_TC_4_2_Body(tsc_EmmCause_IllegalMe, px_INTERNET_APN , TestPlan_Name);
   
    f_NBIOT_TestBody_Set(false);
    log(v_TcName, "Postamble Execution started");
   
    f_NBIOT_ReleaseAllCells();
    f_UT_PowerOffUE (UT);  
   f_NBIOT_PreliminaryPass(__FILE__, __LINE__, v_TcName & "Successfully Verified Expected Result: UE does not attempt any further " &
                                                           "connections with an LTE system if it receives a NAS Detach Request message " &
                                                           "with cause code 6");
  }

  function f_TC_4_2_NBIOT_Code7(charstring TestPlan_Name) runs on NBIOT_PTC
  {
    var charstring v_TcName := "TC_4_2_NBIOT_Code7: ";
    
    log (v_TcName , "UE RECEIVES DETACH REQUEST MESSAGE FROM THE NETWORK CODE 7");
    f_NBIOT_Init (c1);
      
     
    log(v_TcName, "Step1: Configure the test setup so that the DUT finds service on a single eNodeB with cell_id X1 = 1, PLMN id Y1 = ", 
                  f_ConvertPLMNtoString(f_Asn2Nas_PlmnId(valueof(cs_HPLMN_Def))) & ", and TAI Z1 = ", oct2int(tsc_TAC1));
     f_NBIOT_CellConfig_Def(nbiot_Cell1, CONTROL_PLANE); 
    f_NBIOT_SetCellPower ( nbiot_Cell1, tsc_ServingCellRS_EPRE );
    log(v_TcName, "Step1: Cell Configuration Successful");
      
      
    fl_VZ_TC_4_2_Body(tsc_Cause_EPSServNotAllowed, px_INTERNET_APN, TestPlan_Name);
      
    f_NBIOT_TestBody_Set(false);
    log(v_TcName, "Postamble Execution started");
   
    f_NBIOT_ReleaseAllCells();
    f_UT_PowerOffUE (UT);   
    f_NBIOT_PreliminaryPass(__FILE__, __LINE__, v_TcName & "Successfully Verified Expected Result: UE does not attempt any further " &
                                                           "connections with an LTE system if it receives a NAS Detach Request message " &
                                                           "with cause code 7");
  }

  function f_TC_4_2_NBIOT_Code8(charstring TestPlan_Name) runs on NBIOT_PTC
  {
    var charstring v_TcName := "TC_4_2_NBIOT_Code8: ";
    
    log (v_TcName , "UE RECEIVES DETACH REQUEST MESSAGE FROM THE NETWORK CODE 8");
    f_NBIOT_Init (c1);
      
    
    log(v_TcName, "Step1: Configure the test setup so that the DUT finds service on a single eNodeB with cell_id X1 = 1, PLMN id Y1 = ", 
                  f_ConvertPLMNtoString(f_Asn2Nas_PlmnId(valueof(cs_HPLMN_Def))) & ", and TAI Z1 = ", oct2int(tsc_TAC1));
     f_NBIOT_CellConfig_Def(nbiot_Cell1, CONTROL_PLANE); 
   // f_Default_Handler_StartStop(eutra_Cell1, true, TestPlan_Name);  //Function for Multi-PDN Default Handler
    f_NBIOT_SetCellPower ( nbiot_Cell1, tsc_ServingCellRS_EPRE );
    log(v_TcName, "Step1: Cell Configuration Successful");
    
    
  
    fl_VZ_TC_4_2_Body(tsc_Cause_EPSandNonEPSServNotAllowed, px_INTERNET_APN, TestPlan_Name);
    f_NBIOT_TestBody_Set(false);
    log(v_TcName, "Postamble Execution started");
   
    f_NBIOT_ReleaseAllCells();
    f_UT_PowerOffUE (UT);  
    f_NBIOT_PreliminaryPass(__FILE__, __LINE__, v_TcName & "Successfully Verified Expected Result: UE does not attempt any further " &
                                                           "connections with an LTE system if it receives a NAS Detach Request message " &
                                                           "with cause code 8");
  }
    
  
    
 function fl_VZ_TC_4_2_Body(NAS_CauseValue_Type emm_detach_cause, charstring v_Apn_LogStr := px_ADMIN_APN, 
                             charstring TestPlan_Name) runs on NBIOT_PTC
  {
    var float v_Timer_1 := 5.0 * 60.0;
    var float v_Timer_2 := 30.0;
    timer t_WaitTime;
    var EPS_BearerIdentity v_EpsBearerId1 := '5'H;
    var EPS_BearerIdentity v_EpsBearerId2 := '6'H;
    var integer codevalue := bit2int(emm_detach_cause);
    //var NAS_AttDetValue_Type v_AttachType := f_GetEAttachType(NORMAL);
    //var template AdditionalUpdateType v_AdditionalUpdateType := f_GetAdditionalUpdateType (NORMAL);
    var charstring v_TcName := testcasename() & ": ";
    timer t_Procedure_Guard_Timer;
    var float tsc_GuardProcedureTimer_240 := 240.0;
    var float tsc_GuardProcedureTimer_300 := 300.0;
    var float tsc_GuardProcedureTimer_60 := 60.0;
    var integer v_XtdWaitTime := 10;
    var NAS_MSG_Indication_Type v_NAS_Ind;  
    var template (present) B3_Type v_PDNType := (f_GetPdnType(), '101'B, '001'B);
    template (value) GPRS_Timer v_GT3402 := cs_GprsTimer_tv('17'O, tsc_GprsTimerUnit_1min, '00100'B); /* T3402 Set to 4 min in Attach Accept*/
    template (value) GPRS_Timer2 v_GT2_T3402 := cr_GPRS_Timer2_3('16'O, tsc_GprsTimerUnit_1min, '00100'B);      
   
    var template (present) NAS_UL_Message_Type v_ESMMessage := cr_CIOT_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach, v_PDNType);
     var charstring v_sApn := "vzwadmin";
      
    log(v_TcName, "Step2: Configure the test equipment such that the network will allow the UE to attach successfully");
    log(v_TcName, "Step3: Power the DUT on and allow it to find LTE service.");
    //f_EUTRA_SwitchOnUEandStartIP(eutra_Cell1);
    f_UT_SwitchOnUE(UT, true);
      
    

    t_Procedure_Guard_Timer.start(tsc_GuardProcedureTimer_240); //Guard Procedure Started

    log(v_TcName, "Step4: Verify that the DUT successfully establishes an RRC connection and attaches to the LTE network");
    //f_EUTRA_AttachProcedure_ConnectedUpdated(eutra_Cell1, NORMAL, v_AttachType, v_AdditionalUpdateType,-,-,v_Apn_LogStr);
    
    v_NAS_Ind :=    f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell1,
                                                  cr_EstablishmentCause_NB_Any,
                                                  cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                    cr_CIOT_ATTACH_REQUEST(cr_AdditionalUpdateType_CIOT), //Table 22.5.7a.3.3-4
                                                                                    v_ESMMessage)); 
    f_NBIOT_InitialRegistration_Step5_14(nbiot_Cell1, CONTROL_PLANE, STATE2_NB_CONNECTED_UPDATED, v_NAS_Ind, v_GT3402);
  
      
    log (v_TcName, "Step4: Verified that the DUT successfully establishes an RRC connection and attaches to the LTE network");

    log(v_TcName, "Default Procedure Guard Timer Stopped");
    t_Procedure_Guard_Timer.stop; //Guard Procedure Ended

    log (v_TcName, "Step5a: From the network, send a NAS Detach Request message to the DUT. Configure the message such that ",
                   "re-attach is not required and the EMM Cause Code = ", codevalue);
    SRB.send(cas_NB_SRB1bis_NasPdu_REQ(nbiot_Cell1, cs_TimingInfo_Now,
                                 cs_NAS_Request(tsc_SHT_IntegrityProtected_Ciphered,
                                                cs_508_DETACH_REQUEST_MT(cs_DetachType(tsc_DetachMT_NoReAttach), /*omit*/ cs_EMM_Cause_tv(emm_detach_cause)))));
    
    log (v_TcName, "Step5b: Verify that the UE sends a Detach Accept message");
    SRB.receive(car_NB_SRB1bis_NasPdu_IND(
                nbiot_Cell1,
                cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered,
                                  cr_508_DETACH_ACCEPT)));
    log (v_TcName, " Step5b: Verified that the UE sends a Detach Accept message");  
    
    log (v_TcName, "Releasing the RRC Connection");
    f_NBIOT_RRC_ConnectionRelease(nbiot_Cell1);
    
    log(v_TcName, "Step6: Monitor the DUT for 5 minutes and verify that it does not attempt to attach to the LTE network"); 
    t_WaitTime.start(v_Timer_1);
    alt
    {
      []SRB.receive(car_NB_SRB0_RrcPdu_IND(nbiot_Cell1, cr_RRCConnectionRequest_NB ( cr_EstablishmentCause_NB_Any, ? ) ))
      {
        t_WaitTime.stop;
        f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, v_TcName & " : Step6: DUT unexpectedly attempted to connect to the LTE Network");
      }
      []t_WaitTime.timeout
      {
        f_NBIOT_PreliminaryPass(__FILE__, __LINE__,v_TcName & " : Step6: 5 minutes timed out. Successfully verified that the DUT did not attempt to attach to the LTE network");
      }
    }

    log (v_TcName, "Step7: Attempt to initiate a connection to the Internet PDN from the DUT");
    /*if(pc_IMS == true)
    {
         f_UT_RequestAdditionalPDNConnectivity(UT, hex2int('6'H), px_INTERNET_APN, -, -, -, 1);
    }/*
    //else
    {
      /* TODO - AS - There may be an issue with the test plan. Discuss with Debal */
        //AT MMI mapping for additional PDN
        /*
        if((f_GetTestcaseAttrib_Additional_PDN_AddAct(testcasename())) and (pc_AddActAdditionalPDN_EnableDisable == true)) 
        { 
            f_UT_RequestAdditionalPDNConnectivity_NoCnf_VZ_Additional_PDN_AddAct(UT,
                                                                                 cas_UT_Req(ACTIVATE_BEARER, NO_CNF_REQUIRED, cs_PDP_Cid(int2str(hex2int(v_EpsBearerId1)))),
                                                                                 -,
                                                                                 -,
                                                                                 -,
                                                                                 true, 1);
        }
	    else
        {
            fl_UT_ApplyCommand(UT, cas_UT_Req(ACTIVATE_BEARER, NO_CNF_REQUIRED, cs_PDP_Cid(int2str(hex2int(v_EpsBearerId1)))));
        }
        */
        //f_UT_TriggerInternetTestApp(UT);
         fl_UT_ApplyCommand(UT, cas_UT_Req(INITIATE_INTERNET_TEST_APP, NO_CNF_REQUIRED));
    //}
    
    log(v_TcName, "Step8: Verify that the DUT does not attempt to connect to the LTE network");
    log(v_TcName, "Monitoring the DUT for ",float2int(v_Timer_2)," sec to verify that it does not attempt to connect to the LTE network");
    t_WaitTime.start(v_Timer_2);
    alt
    {
       []SRB.receive(car_NB_SRB0_RrcPdu_IND(nbiot_Cell1, cr_RRCConnectionRequest_NB ( cr_EstablishmentCause_NB_Any, ? ) ))
      {
        t_WaitTime.stop;
        f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, v_TcName & " : Step8: DUT unexpectedly attempted to connect to the LTE Network");
      }
      []t_WaitTime.timeout
      {
        f_NBIOT_PreliminaryPass(__FILE__, __LINE__, v_TcName & " : Step8: Timed out. Successfully verified that the DUT did not attempt to attach to the LTE network");
      }
    }
    //DeleteApn_NoCnf(UT,6);pc_AddActAdditionalPDN_EnableDisable is false
    log (v_TcName, "Step9a: Reconfigure the test setup so that the DUT now finds service on a different eNodeB with cell_id X2 = 2.", 
                   "The PLMN Id is still Y1 = ", f_ConvertPLMNtoString(f_Asn2Nas_PlmnId(valueof(cs_HPLMN_Def))));
    
    f_NBIOT_SetCellPower ( nbiot_Cell1, tsc_NonSuitableOffCellRS_EPRE );    
    f_NBIOT_ReleaseAllCells();
    //f_Default_Handler_StartStop(eutra_Cell1, -, TestPlan_Name);  //Function for Multi-PDN Default Handler
    //log(testcasename()," : Stopping IP and Closing TCP Connection");

      
    //TBD f_IP_Handling_StopPDN(IP);   
    //f_EUTRA_ResetIPandIMS (eutra_Cell1);          
    f_NBIOT_CellInfo_SetCellId(nbiot_Cell1, nbiot_Cell2);
    //f_EUTRA_ModifySIB1_CellId (eutra_Cell1, eutra_Cell2);    
    //f_EUTRA_CellConfig_Def( eutra_Cell1);
    f_NBIOT_CellConfig_Def(nbiot_Cell1, CONTROL_PLANE);

    log(v_TcName, "Step9b: Cell Reconfiguration Successful. Waiting for the DUT to read the new configuration");
    //f_Default_Handler_StartStop(eutra_Cell1, true, TestPlan_Name);  //Function for Multi-PDN Default Handler
    f_Delay(2.0);
    f_NBIOT_SetCellPower ( nbiot_Cell1, tsc_ServingCellRS_EPRE );

    log(v_TcName, "Step10: Verify that the DUT does not attempt to attach to the LTE network on the new eNodeB");
    log (v_TcName, "Monitoring the DUT for ",float2int(v_Timer_2)," sec to verify that it does not attempt to attach to the LTE network on the new cellId X2. Executing Error Code - ", codevalue);
    t_WaitTime.start(v_Timer_2);  
    alt
    {
      []SRB.receive(car_NB_SRB0_RrcPdu_IND(nbiot_Cell1, cr_RRCConnectionRequest_NB ( cr_EstablishmentCause_NB_Any, ? ) ))
      {
        t_WaitTime.stop;
        f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, v_TcName & " Step10: DUT unexpectedly attempted to connect to the LTE Network");
      }
      []t_WaitTime.timeout
      {
        f_NBIOT_PreliminaryPass(__FILE__, __LINE__, v_TcName & " Step10: Timed out. Successfully verified that the DUT did not attempt to attach to the LTE network");
      }
    }

    f_NBIOT_InitiatePdnConn("Step11");  
   
    log(v_TcName, "Step12: Verify that the DUT does not attempt to connect to the LTE network.");
    log(v_TcName, "Monitoring the DUT for ",float2int(v_Timer_2)," sec to verify that it does not attempt to connect to the LTE network");
    t_WaitTime.start(f_NBIOT_SetTimerToleranceMax ( nonProtocolTimer, v_Timer_2));
    
    alt
    {
       []SRB.receive(car_NB_SRB0_RrcPdu_IND(nbiot_Cell1, cr_RRCConnectionRequest_NB ( cr_EstablishmentCause_NB_Any, ? ) ))
      {
        t_WaitTime.stop;
        f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, v_TcName & " : Step12: DUT unexpectedly attempted to connect to the LTE Network");
      }
      []t_WaitTime.timeout
      {
        f_NBIOT_PreliminaryPass(__FILE__, __LINE__, v_TcName & " : Step12: Successfully verified that the DUT did not attempt to attach to the LTE network");
      }
    }
    //DeleteApn_NoCnf(UT,6);
    
    f_NBIOT_SetCellPower ( nbiot_Cell1, tsc_NonSuitableOffCellRS_EPRE );    
    f_NBIOT_ReleaseAllCells();
    //f_Default_Handler_StartStop(eutra_Cell1, -, TestPlan_Name);  //Function for Multi-PDN Default Handler
    //f_IP_Handling_StopPDN(IP);   
    //f_EUTRA_ResetIPandIMS (eutra_Cell1);          
    /*if(pc_IMS == true)
    {
      log (v_TcName, "Step13a : Reconfigure the test setup so that the DUT now finds service on a different PLMN Id Y4 = ",
                     f_ConvertPLMNtoString(f_Asn2Nas_PlmnId(valueof(cs_HPLMN_311_481))));
    
      f_EUTRA_ModifySIB1_PLMN (eutra_Cell1, cs_HPLMN_311_481);
    }
    else
    {*/
      log (v_TcName, "Step13a : Reconfigure the test setup so that the DUT now finds service on a different PLMN Id Y4 = ",
                     f_ConvertPLMNtoString(f_Asn2Nas_PlmnId(valueof(cs_HPLMN_311_481))));
    
      //f_EUTRA_ModifySIB1_PLMN (eutra_Cell1, cs_HPLMN_002_11);
      f_NBIOT_CellInfo_SetPLMN_Common(nbiot_Cell1, {cs_HPLMN_311_481}, -, false);
    //}
    log(v_TcName, "Step13c: Cell Reconfiguration Successful. Waiting for the DUT to read the new configuration");
    f_NBIOT_CellConfig_Def(nbiot_Cell1, CONTROL_PLANE);
    //f_Default_Handler_StartStop(eutra_Cell1, true, TestPlan_Name);  //Function for Multi-PDN Default Handler
    f_Delay(2.0);
    f_NBIOT_SetCellPower ( nbiot_Cell1, tsc_ServingCellRS_EPRE ); 
    
    log(v_TcName, "Step14: Verify that the DUT does not attempt to attach to the LTE network on the new network");
    log(v_TcName, "Monitoring the DUT for ",float2int(v_Timer_2)," sec to verify that it does not attempt to attach to the LTE network on the new PLMN Y4. Executing Error Code - ", emm_detach_cause);
    t_WaitTime.start(v_Timer_2);  
    alt {
      [] SRB.receive(car_NB_SRB0_RrcPdu_IND(nbiot_Cell1, cr_RRCConnectionRequest_NB ( cr_EstablishmentCause_NB_Any, ? ) ))
      {
        t_WaitTime.stop;
        f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, v_TcName & " Step14: DUT unexpectedly attempted to connect to the LTE Network");
      }
      []t_WaitTime.timeout
      {
        f_NBIOT_PreliminaryPass(__FILE__, __LINE__, v_TcName & " Successfully verified that the DUT did not attempt to attach to the LTE network");
      }
    }
    
    f_NBIOT_InitiatePdnConn("Step15");
    
    log(v_TcName, "Step16: Verify that the DUT does not attempt to connect to the LTE network");
    log(v_TcName, "Monitoring the DUT for ",float2int(v_Timer_2)," sec to verify that it does not attempt to connect to the LTE network");
    t_WaitTime.start(v_Timer_2); 
    alt {
      [] SRB.receive(car_NB_SRB0_RrcPdu_IND(nbiot_Cell1, cr_RRCConnectionRequest_NB ( cr_EstablishmentCause_NB_Any, ? ) ))
      {
        t_WaitTime.stop;
        f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, v_TcName & " : Step16: DUT unexpectedly attempted to connect to the LTE Network");
      }
      []t_WaitTime.timeout
      {
        f_NBIOT_PreliminaryPass(__FILE__, __LINE__, v_TcName & " : Step16: Successfully verified that the DUT did not attempt to attach to the LTE network");
      }
    }
//    DeleteApn_NoCnf(UT,6);
    
    log (v_TcName, "Step17a: Reconfigure the test setup so that the DUT now finds service on a different Tracking Area with id Z2 = ", oct2int(tsc_TAC2));      
    f_NBIOT_SetCellPower(nbiot_Cell1, tsc_NonSuitableOffCellRS_EPRE);
    f_NBIOT_ReleaseAllCells();      
        f_NBIOT_CellInfo_SetTAC(nbiot_Cell1, oct2bit(tsc_TAC6));
      
    log(v_TcName, "Step17b: Cell Reconfiguration Successful. Waiting for the DUT to read the new configuration");
    f_NBIOT_CellConfig_Def(nbiot_Cell1, CONTROL_PLANE);

//    f_Default_Handler_StartStop(eutra_Cell1, true, TestPlan_Name);  //Function for Multi-PDN Default Handler
    f_Delay(2.0);
    f_NBIOT_SetCellPower ( nbiot_Cell1, tsc_ServingCellRS_EPRE );

    log(v_TcName, "Step18: Verify that the DUT does not attempt to attach to the LTE network on the new network");
    log (v_TcName, "Monitoring the DUT for ",float2int(v_Timer_2)," sec to verify that it does not attempt to attach to the LTE network on the new PLMN Y4. Executing Error Code - ", emm_detach_cause);
    t_WaitTime.start(v_Timer_2);  
    alt
    {
      []SRB.receive(car_NB_SRB0_RrcPdu_IND(nbiot_Cell1, cr_RRCConnectionRequest_NB ( cr_EstablishmentCause_NB_Any, ? ) ))
      {
        t_WaitTime.stop;
        f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__,  v_TcName & " : Step18: DUT unexpectedly attempted to connect to the LTE Network");
      }
      []t_WaitTime.timeout
      {
        f_NBIOT_PreliminaryPass(__FILE__, __LINE__, v_TcName & " : Step18: Successfully verified that the DUT did not attempt to attach to the LTE network");
      }
    }

    f_NBIOT_InitiatePdnConn("Step19");
    
    log(v_TcName, "Step20: Verify that the DUT does not attempt to connect to the LTE network");
    log(v_TcName, "Monitoring the DUT for ",float2int(v_Timer_2)," sec to verify that it does not attempt to connect to the LTE network");
    t_WaitTime.start(v_Timer_2); 
    alt
    {
      []SRB.receive(car_NB_SRB0_RrcPdu_IND(nbiot_Cell1, cr_RRCConnectionRequest_NB ( cr_EstablishmentCause_NB_Any, ? ) ))
      {
        t_WaitTime.stop;
        f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, v_TcName & " : Step20: DUT unexpectedly attempted to connect to the LTE Network");
      }
      []t_WaitTime.timeout
      {
        f_NBIOT_PreliminaryPass(__FILE__, __LINE__, v_TcName & " : Step20: Successfully verified that the DUT did not attempt to attach to the LTE network");
      }
    }
   // DeleteApn_NoCnf(UT,6);
    log(v_TcName, "Step21: Power cycle the DUT");  
      fl_UT_ApplyCommand(UT, cas_UT_Req(POWER_CYCLE, NO_CNF_REQUIRED));
    
    t_Procedure_Guard_Timer.start(tsc_GuardProcedureTimer_300); //Guard Procedure Started
      

    log (v_TcName, "Step22: Verify that the DUT successfully establishes an RRC connection and sends a NAS Attach Request message.");   
     v_NAS_Ind := f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell1,
                                                  cr_EstablishmentCause_NB_Any,
                                                  cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                    cr_CIOT_ATTACH_REQUEST(cr_AdditionalUpdateType_CIOT), //Table 22.5.7a.3.3-4
                                                                                    v_ESMMessage)); 


    f_NBIOT_InitialRegistration_Step5_14(nbiot_Cell1, CONTROL_PLANE, STATE2_NB_CONNECTED_UPDATED, v_NAS_Ind); 
      log(v_TcName, "Step22: DUT successfully establishes an RRC connection and sends a NAS Attach Request message.");
    //}
    log(v_TcName, "Step23: Verified that the DUT attaches to the LTE network successfully");  
    
    log(v_TcName, "Default Procedure Guard Timer Stopped");
    t_Procedure_Guard_Timer.stop; //Guard Procedure Ended
	
    
    t_Procedure_Guard_Timer.start(tsc_GuardProcedureTimer_240); //Guard Procedure Started
  
   // f_NBIOT_InitiatePdnConn("Step24");
    log(v_TcName, "Step24: Initiating test application will cause the UE to connect to the ",v_sApn); 
       fl_UT_ApplyCommand(UT, cas_UT_Req(INITIATE_ADMIN_TEST_APP, NO_CNF_REQUIRED));
     
    /*if(pc_IMS == true)
    {
      log(v_TcName, "Step25: Verify that the DUT connects to the Internet PDN");
      f_EUTRA_ActivateAdditionalPDN (eutra_Cell1, '6'H, tsc_Octet_INTERNET_APN, tsc_DRB2, RRC_CONNECTED);
      log(v_TcName, "Step25: Verified that the DUT connects to the Internet PDN");
    }
    else
    {*/
      log(v_TcName, "Step25: Verify that the DUT connects to the Admin PDN");
      f_NBIOT_TriggerAdditionalPDN_Modified (nbiot_Cell1, CONTROL_PLANE, ?, cs_AccessPointName (tsc_Octet_Lower_ADMIN_APN), v_sApn);
    
      //f_NBIOT_ActivateAdditionalPDN (eutra_Cell1, '6'H, tsc_Octet_ADMIN_APN, tsc_DRB2, RRC_CONNECTED);
      log(v_TcName, "Step25: Verified that the DUT connects to the Admin PDN");
    //}
    
    log(v_TcName, "Default Procedure Guard Timer Stopped");
    t_Procedure_Guard_Timer.stop; //Guard Procedure Ended
    
    //f_NBIOT_ReleaseAllCells();
    log(v_TcName, "Step26: 26.	Power the device off");
//    f_EUTRA_Postamble(eutra_Cell1, E2_CONNECTED, -, -, -, '6'H);
   // f_UT_PowerOffUE (UT);
    
  if(pc_IMS)
  {
    if(codevalue == 3)
    {
      log(v_TcName, "Step27: Repeating the test for EMM Cause Code 6");
    }
    else if(codevalue == 6)
    {
      log(v_TcName, "Step27: Repeating the test for EMM Cause Code 7");
    }
    else if(codevalue == 7)
    {
      log(v_TcName, "Step27: Repeating the test for EMM Cause Code 8");
    }
    else
    {
      log(v_TcName, "Step27: Successfully repeated the test for EMM Cause Codes of 3, 6, 7, and 8");
    }      
  } 
  }    
    
     function f_TC_4_3_NBIOT_Code11(charstring TestPlan_Name) runs on NBIOT_PTC
 {
   
    var EUTRA_ASN1_RRC_TransactionIdentifier_Type v_RRC_TI := tsc_RRC_TI_Def;

   // var DRB_IdentityList_AllAndAMonly_Type v_DRB_IdentityList;
   // template (value) RadioBearerList_Type p_DrbConfigList := cs_DrbConfigList_DRB1;
    var charstring v_TcName := "TC_4_3_Code11_NBIOT: ";
    log (v_TcName,"<<<<<<<<<< Test Execution Started >>>>>>>>>>");  
    f_NBIOT_Init(c1);
   // f_NBIOT_CellConfig_Def(nbiot_Cell1, CONTROL_PLANE);
    log (v_TcName, "UE RECEIVES DETACH REQUEST MESSAGE FROM THE NETWORK CODE 11");  
    //f_NBIOT_SetCellPower ( nbiot_Cell1, tsc_ServingCellRS_EPRE );
    
    log (v_TcName, "Execution started for UE receives a NAS Detach Request message from the network with cause value 11");
   
    fl_TC_4_3_NBIOT_Body(tsc_Cause_PLMN_NotAllowed, px_ADMIN_APN, TestPlan_Name);
    f_NBIOT_TestBody_Set(false);
    log (v_TcName, "Execution complete for UE receives a NAS Detach Request message from the network with cause value 11");
    f_NBIOT_Postamble (nbiot_Cell1, CONTROL_PLANE, N1_IDLE);
    f_NBIOT_PreliminaryPass(__FILE__, __LINE__, v_TcName & "Expected Result : Successfully verified that the UE " & 
                            "does not attempt any further connections within a roaming PLMN if it receives a NAS " & 
                            "Detach Request message with cause codes 11"); 
     
    log (v_TcName,"<<<<<<<<<< Test Execution Finished >>>>>>>>>>");  
 }
 
    function f_TC_4_3_NBIOT_Code14(charstring TestPlan_Name) runs on NBIOT_PTC
 {
    //var RRC_TransactionIdentifier v_RRC_TI := tsc_RRC_TI_Def;
    //var DRB_IdentityList_AllAndAMonly_Type v_DRB_IdentityList;
    //template (value) RadioBearerList_Type p_DrbConfigList := cs_DrbConfigList_DRB1;
    var charstring v_TcName := "TC_4_3_Code14_NBIOT: ";
    log (v_TcName,"<<<<<<<<<< Test Execution Started >>>>>>>>>>");  
      f_NBIOT_Init(c1);
     f_NBIOT_CellConfig_Def(nbiot_Cell1, CONTROL_PLANE);
    log (v_TcName, "UE RECEIVES DETACH REQUEST MESSAGE FROM THE NETWORK CODE 11");  
      f_NBIOT_Preamble(nbiot_Cell1, CONTROL_PLANE);
    f_NBIOT_UE_Detach_SwitchOffUe(nbiot_Cell1, CONTROL_PLANE, RRC_CONNECTED);
    log (v_TcName, "Execution started for UE receives a NAS Detach Request message from the network with cause value 11");
    
    fl_TC_4_3_NBIOT_Body(tsc_Cause_EPSServNotAllowedInThisPLMN, px_ADMIN_APN, TestPlan_Name);
    f_NBIOT_TestBody_Set(false);
    log (v_TcName, "Execution complete for UE receives a NAS Detach Request message from the network with cause value 11");
     f_NBIOT_Postamble (nbiot_Cell1, CONTROL_PLANE, N1_IDLE);
    f_NBIOT_PreliminaryPass(__FILE__, __LINE__, v_TcName & "Expected Result : Successfully verified that the UE " & 
                            "does not attempt any further connections within a roaming PLMN if it receives a NAS " & 
                            "Detach Request message with cause codes 14"); 
    log (v_TcName,"<<<<<<<<<< Test Execution Finished >>>>>>>>>>");  
 }
    
    function fl_TC_4_3_NBIOT_Body(NAS_CauseValue_Type emm_detach_cause, 
                                   charstring v_Apn_LogStr := px_INTERNET_APN, 
                                   charstring TestPlan_Name) runs on NBIOT_PTC
  {
    var EUTRA_ASN1_RRC_TransactionIdentifier_Type v_RRC_TI := tsc_RRC_TI_Def;
    var NAS_MSG_Indication_Type v_NAS_Ind; 
    timer t_WaitTime, t_Timer_1;
    var float v_Wait5Min := 5.0 * 60.0;
	var float v_WaitTime := 30.0;
    var template (present) B3_Type v_PDNType := (f_GetPdnType(), '101'B, '001'B);
    var template (present) NAS_UL_Message_Type v_ESMMessage := cr_CIOT_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach, v_PDNType);
   
    var float tsc_GuardProcedureTimer_240 := 240.0;
     var float v_T3411 := 10.0;  /* T3411 timer set to 10s */
    timer t_T3411;
    
    
    //template (value) RadioBearerList_Type p_DrbConfigList := cs_DrbConfigList_DRB1;
    
    var template (present) SecurityHeaderType v_AttReqSecurityHeader := (tsc_SHT_NoSecurityProtection, tsc_SHT_IntegrityProtected);    
    var ProcedureTransactionIdentifier v_EpsTi := tsc_PTI_Unassigned; 
    var charstring v_UpperCasePattern_apn;
    var charstring v_exapn;
    var charstring v_Int_apnUpper;
    var charstring v_Ims_apnUpper;
    var template (value) ESM_Cause v_EsmCause39 := cs_ESM_Cause_v('00100111'B); /* Reactivation Requested */
    var charstring v_TcName := "fl_TC_4_3_NBIOT_Body: ";
    var boolean isIMSReg := true;
    timer t_Procedure_Guard_Timer;
    var integer v_TypeActPDN := 1;
    
    
    
     log(v_TcName, "Step1: Configure the test setup so that the DUT finds service on a single eNodeB with cell_id X1 = 1, PLMN id Y4 = ", 
                     f_ConvertPLMNtoString(f_Asn2Nas_PlmnId(valueof(cs_HPLMN_311_481))) & ", and TAI Z1 = ", oct2int(tsc_TAC1));
         f_NBIOT_CellInfo_SetPLMN_1Entry (nbiot_Cell1, Y4 );
    
    f_NBIOT_CellConfig_Def(nbiot_Cell1, CONTROL_PLANE);
      
    f_NBIOT_SetCellPower(nbiot_Cell1, tsc_ServingCellRS_EPRE);
    log(v_TcName, "Step1: Cell Configuration Successful");
      
    log(v_TcName, "Step2: Configured the test equipment to allow the DUT to attach successfully");
 
    log(v_TcName, "Step3: Powering ON the DUT and allowing it to find LTE service");
    f_UT_SwitchOnUE(UT, true);

    t_Procedure_Guard_Timer.start(tsc_GuardProcedureTimer_240); //Guard Procedure Started

    v_NAS_Ind :=  f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell1,
                                               cr_EstablishmentCause_NB_Any,
                                               cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                  cr_CIOT_ATTACH_REQUEST(cr_AdditionalUpdateType_CIOT),
                                                                                  v_ESMMessage));

     if (not match(v_NAS_Ind.Pdu.PiggybackedPduList[0].Msg.pDN_CONNECTIVITY_REQUEST.pdnType.typeValue, tsc_PdnType_IPv4))
    {
        f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, v_TcName &"PDN Type used is not IPV4 as expected!");
    }
    f_NBIOT_InitialRegistration_Step5_14(nbiot_Cell1, CONTROL_PLANE, STATE2_NB_CONNECTED_UPDATED, v_NAS_Ind);   
    log(v_TcName, "Step4: DUT successfully establishes an RRC connection, attaches to the LTE network, and.connects to the Internet PDN using PDN Type IPv4");
    
    log(v_TcName, "Default Procedure Guard Timer Stopped");
    t_Procedure_Guard_Timer.stop; //Guard Procedure Ended

   
    log(v_TcName, "Step5a: Sending a NAS Detach Request message to the DUT");
    log(v_TcName, "Step5b: Configured the NAS Detach Request msg with re-attach not required and EMM Cause Code = 11");

    SRB.send(cas_NB_SRB1bis_NasPdu_REQ(nbiot_Cell1, cs_TimingInfo_Now,
                                 cs_NAS_Request(tsc_SHT_IntegrityProtected_Ciphered,
                                                cs_508_DETACH_REQUEST_MT(cs_DetachType(tsc_DetachMT_NoReAttach),
                                                cs_EMM_Cause_tv(emm_detach_cause)))));
      
    log(v_TcName, "Step5c: Expecting Detach Accept msg from the DUT");  
    SRB.receive(car_NB_SRB1bis_NasPdu_IND(nbiot_Cell1,
                                    cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered, cr_508_DETACH_ACCEPT)));
    log(v_TcName, "Step5c: Received Detach Accept msg from the DUT");        
    log(v_TcName, "Step5: Verified Step5");  
    
    f_Delay(0.2);
	f_NBIOT_RRC_ConnectionRelease(nbiot_Cell1);
    t_T3411.start ( f_NBIOT_SetTimerToleranceMin( nonProtocolTimer, v_T3411 ) );
               
            alt {
             // []SRB.receive( car_NB_SRB0_RrcPdu_IND(eutra_Cell1, cr_RRCConnectionRequest(cr_EstablishmentCause_Any)))
              []SRB.receive(car_NB_SRB0_RrcPdu_IND(nbiot_Cell1, cr_RRCConnectionRequest_NB ( cr_EstablishmentCause_NB_Any, ? ) ))

                {
                      t_T3411.stop;
                      log("Received message during attempt# ");
                      f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__,v_TcName & "UE Triggers unexpected Attach Request while T3411 timer is running");
                }
              []t_T3411.timeout
                {
                      log ("Attach request not recevied after attempt# ");
                      f_NBIOT_PreliminaryPass(__FILE__, __LINE__,v_TcName & "T3411 Successful Timeout Detected");
                }
            }  
    
    log(v_TcName, "Step6: Monitoring the DUT for ", float2int(v_Wait5Min/60.0), " minutes to verify that it does not attempt to attach to the LTE network");
    f_NBIOT_CheckNoAttachOn1Cell(nbiot_Cell1, v_Wait5Min, "Step 6");
    log(v_TcName, "Step6: Successfully verified that the DUT does not attempt to attach to the LTE network for ", float2int(v_Wait5Min/60.0), " minutes");

    log(v_TcName, "Step7: Attempting to initiate a connection to ", v_Apn_LogStr, " PDN from the DUT.");
    f_UT_RequestAdditionalPDNConnectivity(UT, hex2int('6'H), v_Apn_LogStr,-,-,-);
      
    log(v_TcName, "Step8: Verifying that the DUT does not attempt to connect to the LTE network.");
    f_NBIOT_CheckNoAttachOn1Cell(nbiot_Cell1, v_WaitTime, "Step8");
    log(v_TcName, "Step8: Successfully Verified Step8 for ", float2int(v_WaitTime)," sec");
     
    //DeleteApn_NoCnf(UT,6);

    log(v_TcName, "Step9: Reconfiguring the test setup for the DUT to find service on a different eNodeB with Cell Id = X2");
    f_NBIOT_SetCellPower(nbiot_Cell1, tsc_NonSuitableOffCellRS_EPRE);
    f_NBIOT_ReleaseAllCells();
    f_NBIOT_CellInfo_SetCellId(nbiot_Cell1, nbiot_Cell2);
      
  
      f_NBIOT_CellInfo_SetPLMN_1Entry(nbiot_Cell1, Y4);
      log(v_TcName, "Step9: The PLMN id is still equal to Y4");
   
    f_NBIOT_CellConfig_Def( nbiot_Cell1, CONTROL_PLANE);
    //f_Default_Handler_StartStop(eutra_Cell1, true, TestPlan_Name);  //Function for Multi-PDN Default Handler
 
    f_Delay(2.0);
    f_NBIOT_SetCellPower(nbiot_Cell1, tsc_ServingCellRS_EPRE);
    log(v_TcName, "Step9: Cell Reconfiguration Successful");      
    
    log(v_TcName, "Step10: Verifing that the DUT does not attempt to connect to the LTE network");
    f_NBIOT_CheckNoAttachOn1Cell(nbiot_Cell1, v_WaitTime, "Step10");
    log(v_TcName, "Step10: Successfully Verified Step10 for ", float2int(v_WaitTime)," sec");
    
    log(v_TcName, "Step11: Attempting to initiate a connection to ", v_Apn_LogStr, " PDN from the DUT");
    f_UT_RequestAdditionalPDNConnectivity(UT, hex2int('6'H), v_Apn_LogStr,-,-,-);
     
    log(v_TcName, "Step12: Verifying that the DUT does not attempt to connect to the LTE network");
    f_NBIOT_CheckNoAttachOn1Cell(nbiot_Cell1, v_WaitTime, "Step12 ");
    log(v_TcName, "Step12: Successfully Verified Step12 for ", float2int(v_WaitTime)," sec");
        
    //DeleteApn_NoCnf(UT,6);
      
    log(v_TcName, "Step13: Reconfiguring the test setup for the DUT to find service on a different Tracking Area with TAI = Z2");
    f_NBIOT_SetCellPower(nbiot_Cell1, tsc_NonSuitableOffCellRS_EPRE);
    f_NBIOT_ReleaseAllCells();
  
      f_NBIOT_CellInfo_SetPLMN_1Entry(nbiot_Cell1, Y4);
      log(v_TcName, "Step13: PLMN is Y4");
  
    f_NBIOT_CellInfo_SetTAC(nbiot_Cell1, oct2bit(tsc_TAC2));
    f_NBIOT_CellConfig_Def(nbiot_Cell1, CONTROL_PLANE);
   
    f_Delay(2.0);
    f_NBIOT_SetCellPower(nbiot_Cell1, tsc_ServingCellRS_EPRE);
    log(v_TcName, "Step13: Cell Reconfiguration Successful");      
	
    log(v_TcName, "Step14: Verifying that the DUT does not attempt to attach to the LTE network on the new Tracking Area");
    f_NBIOT_CheckNoAttachOn1Cell(nbiot_Cell1, v_WaitTime, "Step14 ");
    log(v_TcName, "Step14: Successfully Verified Step14 for ", float2int(v_WaitTime)," sec");
	
    log(v_TcName, "Step15: Attempting to initiate a connection to ", v_Apn_LogStr, " PDN from the DUT");
    f_UT_RequestAdditionalPDNConnectivity(UT, hex2int('6'H), v_Apn_LogStr,-,-,-);
	
    log(v_TcName, "Step16: Verifying that the DUT does not attempt to connect to the LTE network");
    f_NBIOT_CheckNoAttachOn1Cell(nbiot_Cell1, v_WaitTime, "Step 16");
    log(v_TcName, "Step16: Successfully Verified Step16 for ", float2int(v_WaitTime)," sec");
    
    //DeleteApn_NoCnf(UT,6);

    log(v_TcName, "Step17: Reconfiguring the test setup for the DUT to find service on a different PLMN with PLMN Id = Y1");
    f_NBIOT_SetCellPower(nbiot_Cell1, tsc_NonSuitableOffCellRS_EPRE);
    f_NBIOT_ReleaseAllCells();
    //f_Default_Handler_StartStop(eutra_Cell1, -, TestPlan_Name);  //Function for Multi-PDN Default Handler
    //f_IP_Handling_StopPDN(IP);   
    //f_EUTRA_ResetIPandIMS (eutra_Cell1);         
    f_NBIOT_CellInfo_SetPLMN_1Entry(nbiot_Cell1, Y1);
    f_NBIOT_CellConfig_Def(nbiot_Cell1, CONTROL_PLANE);
    //f_Default_Handler_StartStop(eutra_Cell1, true, TestPlan_Name);  //Function for Multi-PDN Default Handler
    
    f_Delay(2.0);
    f_NBIOT_SetCellPower ( nbiot_Cell1, tsc_ServingCellRS_EPRE );
    log(v_TcName, "Step17: Cell Reconfiguration Successful");
    
    // log(v_TcName, "Step21: Power cycle the DUT");  
   // f_UT_TriggerPowerCycle(UT);
    //fl_UT_ApplyCommand(UT, cas_UT_Req(POWER_CYCLE, NO_CNF_REQUIRED));  
    //t_Procedure_Guard_Timer.start(f_Procedure_Guard_Timer(tsc_GuardProcedureTimer_240, true)); //Guard Procedure Started
    t_Procedure_Guard_Timer.start(tsc_GuardProcedureTimer_240);//Guard Procedure Started

      
      
    log(v_TcName, "Step18: Verifying that the DUT now attempts to attach to the LTE network and is successful");
    v_NAS_Ind := f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell1,
                                                  cr_EstablishmentCause_NB_Any,
                                                  cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                    cr_CIOT_ATTACH_REQUEST(cr_AdditionalUpdateType_CIOT), //Table 22.5.7a.3.3-4
                                                                                     cr_CIOT_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach, (f_GetPdnType(), '101'B, '001'B)))); 



    f_NBIOT_InitialRegistration_Step5_14(nbiot_Cell1, CONTROL_PLANE, STATE2_NB_CONNECTED_UPDATED, v_NAS_Ind);   
      
    //v_ReceivedApn := f_EUTRA_AttachProcedure_ConnectedUpdated_Roaming(eutra_Cell1, p_ForcedAttach, v_AttachType, v_AdditionalUpdateType );	  
    log(v_TcName, "Step18: DUT attached to LTE network");
     log(v_TcName, "Step19: Verify that the DUT connects to the Internet PDN.");
      
    log(v_TcName, "Default Procedure Guard Timer Stopped");
    t_Procedure_Guard_Timer.stop; //Guard Procedure End

    
    log(v_TcName, "Default Procedure Guard Timer Stopped");
    t_Procedure_Guard_Timer.stop; //Guard Procedure Ended
  
    f_NBIOT_SetCellPower(nbiot_Cell1, tsc_NonSuitableOffCellRS_EPRE);
    f_NBIOT_ReleaseAllCells();
    //f_Default_Handler_StartStop(eutra_Cell1, -, TestPlan_Name);  //Function for Multi-PDN Default Handler
    //f_IP_Handling_StopPDN(IP);   
    //f_EUTRA_ResetIPandIMS (eutra_Cell1);          
    /*if (emm_detach_cause == tsc_Cause_PLMN_NotAllowed) 
    { 
      log(v_TcName, "Step20: Reconfiguring the test setup for the DUT to again find service on the original PLMN = Y3");
      f_NBIOT_CellInfo_SetPLMN_1Entry(nbiot_Cell1, Y3);
    } 
    else if (emm_detach_cause == tsc_Cause_EPSServNotAllowedInThisPLMN)
    {*/
      log(v_TcName, "Step20: Reconfiguring the test setup for the DUT to again find service on the original PLMN = Y4");
      f_NBIOT_CellInfo_SetPLMN_1Entry(nbiot_Cell1, Y4);
    //}    
    f_NBIOT_CellConfig_Def(nbiot_Cell1, CONTROL_PLANE);
    //f_Default_Handler_StartStop(eutra_Cell1, true, TestPlan_Name);  //Function for Multi-PDN Default Handler
    f_Delay(2.0);
    f_NBIOT_SetCellPower(nbiot_Cell1, tsc_ServingCellRS_EPRE );

    log(v_TcName, "Step21: Cell Reconfiguration Successful");
   
    /*if (emm_detach_cause == tsc_Cause_PLMN_NotAllowed) 
    { 
        log(v_TcName, "Step21: Verifying that the DUT does not attempt to attach on PLMN Y3");
    }
    else if (emm_detach_cause == tsc_Cause_EPSServNotAllowedInThisPLMN)
    {*/
        log(v_TcName, "Step21: Verifying that the DUT does not attempt to attach on PLMN Y4");
    //}
      
    f_NBIOT_CheckNoAttachOn1Cell(nbiot_Cell1, v_WaitTime, "Step 21");  
  
     /*if (emm_detach_cause == tsc_Cause_PLMN_NotAllowed) 
    { 
       log(v_TcName, "Step21: Verified for ",float2int(v_WaitTime)," sec that the DUT does not attempt to attach on PLMN Y3");
    }
    else if (emm_detach_cause == tsc_Cause_EPSServNotAllowedInThisPLMN)
    {*/
       log(v_TcName, "Step21: Verified for ",float2int(v_WaitTime)," sec that the DUT does not attempt to attach on PLMN Y4");
    //}

    //f_VZ_Ignore_Rach_Enable_Ind_Disable(eutra_Cell1);            //added for LCCP-2346
  //  f_NBIOT_SS_ConfigRachPreambleIndMode(nbiot_Cell1, disable);
    log(v_TcName, "Step22: Powering off the device");
    
    //f_Default_Handler_StartStop(eutra_Cell1, -, TestPlan_Name);  //Function for Multi-PDN Default Handler
    /* Step 24 will be taken care when the test is repeated for Cause Code 14 in the next iteration */
 }
    
    function f_TC_4_4_NBIOT_Code12(charstring TestPlan_Name) runs on NBIOT_PTC
  {      
    f_NBIOT_Init (c1);

    
    log(TestPlan_Name,"Executing Test Case with EMM Cause 12");
    
    
    fl_VZ_TC_4_4_NBIOT_Body(tsc_Cause_TA_NotAllowed, px_INTERNET_APN, TestPlan_Name);     
    f_NBIOT_TestBody_Set(false);
    f_NBIOT_ReleaseAllCells();
    f_UT_PowerOffUE (UT);
    
      
    f_NBIOT_PreliminaryPass(__FILE__, __LINE__, TestPlan_Name &" :Successfully Verified Expected Result - UE does not attempt any further connections within a TAI if it receives a NAS Detach Request message with cause code 12");
  }
    
    
    
    function f_TC_4_4_NBIOT_Code13(charstring TestPlan_Name) runs on NBIOT_PTC
  {      
    f_NBIOT_Init (c1);
      
    log(TestPlan_Name,"Executing Test Case with EMM Cause 13");
    
    
    fl_VZ_TC_4_4_NBIOT_Body(tsc_Cause_Roaming_NotAllowed, px_INTERNET_APN, TestPlan_Name);     
    f_NBIOT_TestBody_Set(false);
     f_NBIOT_ReleaseAllCells();
    f_UT_PowerOffUE (UT);
      
    f_NBIOT_PreliminaryPass(__FILE__, __LINE__, TestPlan_Name &" :Successfully Verified Expected Result - UE does not attempt any further connections within a TAI if it receives a NAS Detach Request message with cause code 13");
  }
    
    
    function f_TC_4_4_NBIOT_Code15(charstring TestPlan_Name) runs on NBIOT_PTC
  {      
    f_NBIOT_Init (c1);
    log(TestPlan_Name,"Executing Test Case with EMM Cause 15");
    
    
    fl_VZ_TC_4_4_NBIOT_Body(tsc_Cause_NoSuitableCells, px_INTERNET_APN, TestPlan_Name);     
    f_NBIOT_TestBody_Set(false);
     f_NBIOT_ReleaseAllCells();
    log(TestPlan_Name, " Step 19: Power the device off.");
    f_UT_PowerOffUE (UT);
    
      
    f_NBIOT_PreliminaryPass(__FILE__, __LINE__, TestPlan_Name &" :Successfully Verified Expected Result - UE does not attempt any further connections within a TAI if it receives a NAS Detach Request message with cause code 15");
  }
    
   function fl_VZ_TC_4_4_NBIOT_Body(NAS_CauseValue_Type emm_detach_cause, charstring p_APN := px_IMS_APN,
                                    charstring TestPlan_Name) runs on NBIOT_PTC
  {
    var EUTRA_ASN1_RRC_TransactionIdentifier_Type v_RRC_TI := tsc_RRC_TI_Def;
    var NAS_MSG_Indication_Type v_NAS_Ind; 
    var default v_MyDefaultVar := null;
    var float v_Timer_1 := 5.0 * 60.0; // 5 minutes actual value, for local testing less
	var float v_Timer_2 := 30.0 ; // 30s timer for checking immediate actions
    //var GutiParameters_Type v_GutiParameters;
    var NAS_AttDetValue_Type v_AttachType;
    timer t_WaitTime;
    timer t_Timer_1;
    var charstring v_sApn := "vzwadmin";
    var EPS_BearerIdentity v_EpsBearerId2;
    var charstring v_TcName;
      
    var float tsc_GuardProcedureTimer_240 := 240.0;
    var float tsc_GuardProcedureTimer_300 := 300.0;
    timer t_Procedure_Guard_Timer;
    timer t_T2sec := 2.0;
      var template (present) B3_Type v_PDNType := (f_GetPdnType(), '101'B, '001'B);
       var template (present) NAS_UL_Message_Type v_ESMMessage := cr_CIOT_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach, v_PDNType);
   
    //var template AdditionalUpdateType v_AdditionalUpdateType := f_GetAdditionalUpdateType (NORMAL);
    //template (value) RadioBearerList_Type p_DrbConfigList := cs_DrbConfigList_DRB1;
    //var DRB_IdentityList_AllAndAMonly_Type v_DRB_IdentityList;
    var template (present) SecurityHeaderType v_AttReqSecurityHeader;
    //var EUTRA_ATTACH_Type p_ForcedAttach := NORMAL;
    //v_GutiParameters := f_EUTRA_CellInfo_GetGuti (eutra_Cell1);
    v_AttReqSecurityHeader := (tsc_SHT_NoSecurityProtection, tsc_SHT_IntegrityProtected);
   // v_AttachType := f_GetEAttachType(NORMAL);
    v_EpsBearerId2 := '6'H;
    v_TcName := TestPlan_Name &" :";
      
   
      
    log(v_TcName, "Step1: Configure the test setup so that the DUT finds service on a single eNodeB with cell_id X1 = 1, PLMN id Y1 = ", 
                  f_ConvertPLMNtoString(f_Asn2Nas_PlmnId(valueof(cs_HPLMN_Def))) & ", and TAI Z1 = ", oct2int(tsc_TAC1));
    f_NBIOT_CellInfo_SetPLMN_1Entry(nbiot_Cell1, cs_HPLMN_Def);
    f_NBIOT_CellInfo_SetCellId(nbiot_Cell1, nbiot_Cell1);    
    f_NBIOT_CellInfo_SetTAC(nbiot_Cell1, oct2bit(tsc_TAC1));
 
    f_NBIOT_CellConfig_Def(nbiot_Cell1, CONTROL_PLANE);
    f_Delay(10.0); 
    f_NBIOT_SetCellPower(nbiot_Cell1, tsc_ServingCellRS_EPRE);
   
    log(v_TcName, "Step2: Configured the test equipment to allow the DUT to attach successfully");

    log(v_TcName, "Step3: Powering ON the DUT and allowing it to find LTE service");
     f_UT_SwitchOnUE(UT, true);

    t_Procedure_Guard_Timer.start(tsc_GuardProcedureTimer_240); //Guard Procedure Started

    log(v_TcName, "Step4: Verifying that the DUT successfully establishes an RRC connection and attaches to the LTE network");
     v_NAS_Ind :=  f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell1,
                                               cr_EstablishmentCause_NB_Any,
                                               cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                  cr_CIOT_ATTACH_REQUEST(cr_AdditionalUpdateType_CIOT),
                                                                                  v_ESMMessage)); 


    f_NBIOT_InitialRegistration_Step5_14(nbiot_Cell1, CONTROL_PLANE, STATE2_NB_CONNECTED_UPDATED, v_NAS_Ind); 
    log(v_TcName, "Step4: DUT successfully attached to the LTE network");

    //f_Procedure_Guard_Timer();
    log(v_TcName, "Default Procedure Guard Timer Stopped");

    t_Procedure_Guard_Timer.stop; //Guard Procedure Ended
     
    log(v_TcName, "Step5a: Sending Detach request to DUT with detach type as Re-Attach Not Required and EMM Cause Code = ", bit2int(emm_detach_cause));
    
    SRB.send(cas_NB_SRB1bis_NasPdu_REQ(nbiot_Cell1,
                                       cs_TimingInfo_Now,
                                       cs_NAS_Request(tsc_SHT_IntegrityProtected_Ciphered,
                                                      cs_508_DETACH_REQUEST_MT(cs_DetachType(tsc_DetachMT_NoReAttach), 
                                                      cs_EMM_Cause_tv(emm_detach_cause)))));


     
    log(v_TcName, "Step5b: Expecting Detach Accept msg from the DUT");
    SRB.receive(car_NB_SRB1bis_NasPdu_IND(nbiot_Cell1,
                                          cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered,
                                                            cr_508_DETACH_ACCEPT)));
    
    log(v_TcName, "Step5c: Verified that the UE sends a Detach Accept message");
    
    f_NBIOT_RRC_ConnectionRelease(nbiot_Cell1);
    log(v_TcName, "Step6: Monitoring the DUT for 5 mins to verify that it does not attempt to re-attach to the LTE network"); 
    fl_NBIOT_CheckNoAttach_Common(nbiot_Cell1, v_Timer_1, "Step6");
    log(v_TcName, "Step6: Verified that the DUT does not attempt to attach to the LTE network");
    
    if(pc_IMS == true)
    {
      log(v_TcName, "Step7: Attempting to initiate a connection to the Internet PDN from the DUT");
      fl_UT_ApplyCommand(UT, cas_UT_Req(ACTIVATE_INTERNET_APN, NO_CNF_REQUIRED));
    }
    else
    {
      log(v_TcName, "Step7: Attempting to initiate a connection to the Admin PDN from the DUT");
       fl_UT_ApplyCommand(UT, cas_UT_Req(ADD_ADMIN_APN, NO_CNF_REQUIRED));          
    }
    
    log(v_TcName, "Step8: Verifying that the DUT does not attempt to connect to the LTE network"); 
    log(v_TcName, "Monitoring the DUT for ",float2int(v_Timer_2)," sec");      
    fl_NBIOT_CheckNoAttach_Common(nbiot_Cell1, v_Timer_2, "Step8"); 
    log(v_TcName, "Step8: Verified that the DUT does not attempt to connect to the LTE network"); 

   
    log(v_TcName, "Step9:  Reconfigure the test setup so that the DUT now finds service on a different
         eNodeB with cell_id equal to value X2 where X2 is not equal to X1. X1 and X2
         are on the same frequency. The PLMN id is still equal to Y1. The TAI is still equal to Z1.");
    f_NBIOT_SetCellPower(nbiot_Cell1, tsc_NonSuitableOffCellRS_EPRE);
    f_NBIOT_ReleaseAllCells();
     f_NBIOT_CellInfo_SetCellId(nbiot_Cell1, nbiot_Cell2); 
    f_NBIOT_CellConfig_Def( nbiot_Cell1, CONTROL_PLANE);
    //f_Default_Handler_StartStop(eutra_Cell1, true, TestPlan_Name);  //Function for Multi-PDN Default Handler
    f_Delay(2.0);  
    f_NBIOT_SetCellPower ( nbiot_Cell1, tsc_ServingCellRS_EPRE );

    
    log(v_TcName, "Step10: Verifying that the DUT does not attempt to attach to the LTE network on the new eNodeB");
    log(v_TcName, "Monitoring the DUT for ",float2int(v_Timer_2)," sec");      
    fl_NBIOT_CheckNoAttach_Common(nbiot_Cell1, v_Timer_2, "Step10");
    log(v_TcName, "Step10: successfully verified that the DUT does not attempt to attach to the LTE network on the new eNodeB");
        
    if(pc_IMS == true)
    {
      log(v_TcName, "Step11: Attempting to initiate a connection to the Internet PDN from the DUT");
      fl_UT_ApplyCommand(UT, cas_UT_Req(ACTIVATE_INTERNET_APN, NO_CNF_REQUIRED));
    }
    else
    {
      log(v_TcName, "Step11: Attempting to initiate a connection to the Admin PDN from the DUT");
      fl_UT_ApplyCommand(UT, cas_UT_Req(ADD_ADMIN_APN, NO_CNF_REQUIRED));           
    }
    
    log(v_TcName, "Step12: Verifying that the DUT does not attempt to connect to the LTE network"); 
    log(v_TcName, "Monitoring the DUT for ",float2int(v_Timer_2)," sec");
    fl_NBIOT_CheckNoAttach_Common(nbiot_Cell1, v_Timer_2, "Step12");    
    log(v_TcName, "Step12: Verified that the DUT does not attempt to connect to the LTE network"); 

    //DeleteApn_NoCnf(UT,6);

    log(v_TcName, "Step13: Reconfigure the test setup for the DUT to find service on a different TAC = Z2 and PLMN = Y1");
    f_NBIOT_SetCellPower(nbiot_Cell1, tsc_NonSuitableOffCellRS_EPRE);
    f_NBIOT_ReleaseAllCells();
    f_NBIOT_CellInfo_SetTAC(nbiot_Cell1, oct2bit(tsc_TAC2));
    f_NBIOT_CellConfig_Def( nbiot_Cell1, CONTROL_PLANE);  
    //f_Default_Handler_StartStop(eutra_Cell1, true, TestPlan_Name);  //Function for Multi-PDN Default Handler
    f_Delay(2.0);  
    f_NBIOT_SetCellPower ( nbiot_Cell1, tsc_ServingCellRS_EPRE );
     fl_UT_ApplyCommand(UT, cas_UT_Req(POWER_CYCLE, NO_CNF_REQUIRED));  
    log(v_TcName, "Step13: Reconfigure the test setup so that the DUT now finds service on a different Tracking Area with TAI equal to value Z2 where Z2 is not equal to Z1. Note that only the TAC portion of the TAI will be different; the PLMN id is still equal to Y1.");
    
    t_Procedure_Guard_Timer.start(tsc_GuardProcedureTimer_240); //Guard Procedure Started
    
    log(v_TcName, "Step14: Verify that the DUT now attempts to attach to the LTE network");
      v_NAS_Ind := f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell1,
                                                  cr_EstablishmentCause_NB_Any,
                                                  cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                    cr_CIOT_ATTACH_REQUEST(cr_AdditionalUpdateType_CIOT), //Table 22.5.7a.3.3-4
                                                                                    cr_CIOT_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach, (f_GetPdnType(), '101'B, '001'B))));
 

    f_NBIOT_InitialRegistration_Step5_14(nbiot_Cell1, CONTROL_PLANE, STATE2_NB_CONNECTED_UPDATED, v_NAS_Ind); 
      
    log(v_TcName, "Step14: Verified that the DUT attaches to the LTE Network");
    
    log(v_TcName, "Default Procedure Guard Timer Stopped");

    t_Procedure_Guard_Timer.stop; //Guard Procedure Ended
  
    t_Procedure_Guard_Timer.start(tsc_GuardProcedureTimer_300); //Guard Procedure Started

    
      log(v_TcName, "Step15: Attempting to initiate a connection to the Admin PDN from the DUT");
      //f_UT_RequestAdditionalPDNConnectivity_NoCnf(UT, hex2int(v_EpsBearerId2), px_ADMIN_APN, -, -, -, 2);
      
      f_NBIOT_TriggerAdditionalPDN_Modified (nbiot_Cell1, CONTROL_PLANE, ?, cs_AccessPointName (tsc_Octet_Lower_ADMIN_APN), v_sApn);
    
     //f_EUTRA_ActivateAdditionalPDN(eutra_Cell1, v_EpsBearerId2, tsc_Octet_ADMIN_APN, tsc_DRB2, RRC_CONNECTED);  
      log(v_TcName, "Step16: The DUT connects to the Admin PDN");
    
    
    log(v_TcName, "Default Procedure Guard Timer Stopped");
    t_Procedure_Guard_Timer.stop; //Guard Procedure Ended
  
    log(v_TcName, "Step17: Reconfiguring the test setup so that the DUT again finds service on the original TAI with id equal to Z1");  
     f_NBIOT_RRC_ConnectionRelease(nbiot_Cell1);
    
    f_NBIOT_ReleaseAllCells();
     f_NBIOT_CellInfo_SetTAC(nbiot_Cell1, oct2bit(tsc_TAC1));
    f_NBIOT_CellConfig_Def(nbiot_Cell1, CONTROL_PLANE); 
    //f_Default_Handler_StartStop(eutra_Cell1, true, TestPlan_Name);  //Function for Multi-PDN Default Handler
    f_Delay(2.0);
    f_NBIOT_SetCellPower(nbiot_Cell1, tsc_ServingCellRS_EPRE);
    log(v_TcName, "Step18: Verify that the DUT does not attempt to attach on TAI Z1");    
/*    log(v_TcName, "Step18: Verify that the DUT does not attempt to attach on TAI Z1");    
    fl_NBIOT_CheckNoAttach_Common(nbiot_Cell1, v_Timer_2, "Step18");
    log(v_TcName, "Step18: Verified for ",float2int(v_Timer_2)," sec that the DUT does not attempt to attach on TAI Z1");    
 */ 
 //f_VZ_Ignore_Rach_Enable_Ind_Disable(eutra_Cell1);            //added for LCCP-2346
    
     t_T2sec.start;
    alt {
      //[]SRB.receive(car_SRB0_RrcPdu_IND(eutra_Cell1, cr_RRCConnectionRequest(cr_EstablishmentCause_Any)))
      []SRB.receive(car_NB_SRB0_RrcPdu_IND(nbiot_Cell1, cr_RRCConnectionRequest_NB ( cr_EstablishmentCause_NB_Any, ? ) ))
      {
          t_T2sec.stop;
         // f_VZ_Ignore_Rach_Enable_Ind_Disable(eutra_Cell1);            //added for LCCP-2346
          //f_NBIOT_SS_ConfigRachPreambleIgnoreIndMode(nbiot_Cell1, disable);
          //f_NBIOT_SS_ConfigRachPreambleIndMode(nbiot_Cell1, disable);
           SRB.send(cas_NB_SRB0_RrcPdu_REQ(nbiot_Cell1, cs_TimingInfo_Now, cs_RRCConnectionReject_NB));
      
          
          
      }
      []t_T2sec.timeout{} ; 
    }   
      
   
      
    
    //f_EUTRA_ReleaseAllCells();
    //f_Default_Handler_StartStop(eutra_Cell1, -, TestPlan_Name);  //Function for Multi-PDN Default Handler
    //f_UT_SwitchOffUE(UT, false);          
  } 
    
     function f_TC_4_5_NBIOT_Code17(charstring TestPlan_Name) runs on NBIOT_PTC
  {      
    var charstring v_TcName :=  TestPlan_Name & ":";
    log(v_TcName, "UE RECEIVES ATTACH REJECT MESSAGE FROM THE NETWORK CODE 17");  
    log(v_TcName, "Step1: Configure the test setup so that the DUT finds service on a single eNodeB with cell_id X1 = 1, PLMN id Y1 = ", 
                  f_ConvertPLMNtoString(f_Asn2Nas_PlmnId(valueof(cs_HPLMN_Def))) & ", and TAI Z1 = ", oct2int(tsc_TAC1));
    log(v_TcName, "Configure the test equipment such that the network sets the T3402 timer to 4 minutes in the Attach Accept message");
     f_NBIOT_Init (c1);
   
    /* 1. Configure the test setup so that the device under test (DUT) finds service on a single eNodeB 
     *    with cell_id equal to value X1, PLMN id equal to value Y1, TAI equal to value Z1. 
     *    Configure the test system such that timer T3411 is set to 10 seconds.
     *    Configure the test equipment such that the network sets the T3402 timer to 4 minutes in the Attach Accept message.
     * 2. Verify that the device under test (DUT) has an IMS application that will attempt to connect to the IMS PDN 
     *    as soon as the DUT is powered on and finds service on the LTE network. 
     */  
    f_NBIOT_CellConfig_Def(nbiot_Cell1, CONTROL_PLANE);
    
    log(v_TcName, "Step1: Cell Configuration Successful"); 
    f_NBIOT_SetCellPower(nbiot_Cell1, tsc_ServingCellRS_EPRE);

    
    /* ATTACH REJECT MESSAGE FROM THE NETWORK CODE 17*/ 
    
    f1_VZ_TC_4_5_NBIOT_Body();
    f_NBIOT_TestBody_Set(false);
      
      log("TC_4_5_NBIOT: Postamble Execution started");
     
     f_NBIOT_ReleaseAllCells();
     f_UT_PowerOffUE (UT);
    f_NBIOT_PreliminaryPass(__FILE__, __LINE__, " PASSED");
    
    log("TC_4_5_NBIOT: Postamble Execution done");    
  }
    
    function f1_VZ_TC_4_5_NBIOT_Body() runs on NBIOT_PTC
  {

    var NAS_MSG_Indication_Type v_Nas_Ind; //@sic R5-102180 sic@      
    var ProcedureTransactionIdentifier v_PTId_UE;
    var PDN_CONNECTIVITY_REQUEST v_PDNConnReq;
    var template (present) B3_Type v_PDNType := (f_GetPdnType(), '101'B, '001'B);
    var template (present) NAS_UL_Message_Type v_ESMMessage := cr_CIOT_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach, v_PDNType);
   
    var EUTRA_ASN1_RRC_TransactionIdentifier_Type v_RRC_TI := tsc_RRC_TI_Def;
    template (value) GPRS_Timer v_GT3402 := cs_GprsTimer_tv('17'O, tsc_GprsTimerUnit_1min, '00100'B); /* T3402 Set to 4 min in Attach Accept*/
    template (value) GPRS_Timer2 v_GT2_T3402 := cr_GPRS_Timer2_3('16'O, tsc_GprsTimerUnit_1min, '00100'B);      
    var float v_T3402 := (4.0 * 60.0); /* T3402 set to 4 min(240s) */
    var float v_T3411 := 10.0;  /* T3411 timer set to 10s */
    timer t_T3411;
    timer t_T3402;
    var charstring v_TcName := testcasename() & ": ";
    timer t_Procedure_Guard_Timer;
    var float tsc_GuardProcedureTimer_240 := 180.0;
    var float v_T2sec := 2.0;      
    timer t_T2sec := v_T2sec;
    var NB_SRB_Identity_Type v_SrbId := f_NBIOT_GetSrb1Id(CONTROL_PLANE);
    const B8_Type tsc_Cause_Pdn_Conn_Doesnot_Exist := '00110110'B;
      
    /* 3. Power the DUT on and allow it to find LTE service. */     
    log(v_TcName, "Step3: Power the DUT on and allow it to find LTE service");
    
    f_UT_SwitchOnUE(UT, true);

     
    
    t_Procedure_Guard_Timer.start(tsc_GuardProcedureTimer_240); //Guard Procedure Started

    /* 4. Verify that the DUT sends an Attach Request and that the network responds with 
     * an Attach Accept with the T3402 timer set to 4 minutes. */
      

    
     v_Nas_Ind := f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell1,
                                               cr_EstablishmentCause_NB_Any,
                                               cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                  cr_CIOT_ATTACH_REQUEST(cr_AdditionalUpdateType_CIOT),
                                                                                  v_ESMMessage)); 
      
    f_NBIOT_InitialRegistration_Step5_14(nbiot_Cell1, CONTROL_PLANE, STATE2_NB_CONNECTED_UPDATED, v_Nas_Ind, v_GT3402);
  
    log(v_TcName, "Step4: Verified that the DUT sends an Attach Request and that the network responds with 
    an Attach Accept with the T3402 timer set to 4 minutes.");    
    log(v_TcName, "Default Procedure Guard Timer Stopped");
    t_Procedure_Guard_Timer.stop; //Guard Procedure Ended

    f_NBIOT_PreliminaryPass(__FILE__, __LINE__,v_TcName & "4.9 Step 4: UE Attach Success");
      
    /* 5 Configure the test equipment such that the network sends a Detach Request to the DUT with 
     * "re-attach required" in the Detach Type IE.*/
    log(v_TcName, "Step5: Configure the test equipment such that the network sends a Detach Request to the DUT with 
     re attach required in the Detach Type IE.");
      
    SRB.send(cas_NB_SRB1bis_NasPdu_REQ(nbiot_Cell1,
                                       cs_TimingInfo_Now,
                                       cs_NAS_Request(tsc_SHT_IntegrityProtected_Ciphered,
                                                      cs_508_DETACH_REQUEST_MT(cs_DetachType(tsc_DetachMT_ReAttach), omit))));

      
    /* 6. Verify that the DUT detaches from the LTE network.*/
    log(v_TcName, "Step6: Verify that the DUT detaches from the LTE network.");
      
     SRB.receive(car_NB_SRB1bis_NasPdu_IND(nbiot_Cell1,
                                          cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered,
                                                            cr_508_DETACH_ACCEPT)));

     
    f_NBIOT_RRC_ConnectionRelease( nbiot_Cell1 );
      
    f_NBIOT_PreliminaryPass(__FILE__, __LINE__,v_TcName & "Step 6: UE Detaches Successfully from the SS.");
    
    /* 7. Configure the test equipment such that the network will respond to attach attempts by sending a 
     * NAS Attach Reject message with an EMM Cause Code equal to 17. 
     * Configure the test equipment such that the network will respond to a piggybacked PDN connectivity request 
     * by sending a NAS PDN Connectivity Reject message with an ESM Cause Insufficent resources.*/
      
    /* 8. Verify that the DUT successfully establishes an RRC connection and sends a NAS Attach Request message. */  
    
      
      log(v_TcName, "Step7: Configure the test equipment such that the network will respond to attach attempts by sending a NAS Attach Reject message with an EMM Cause Code equal to 17.");
      
      for (var integer v_loop :=1;v_loop<6;v_loop:=v_loop+1) {
      
        t_Procedure_Guard_Timer.start(tsc_GuardProcedureTimer_240); //Guard Procedure Started
          
         v_Nas_Ind := f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell1,
                                               cr_EstablishmentCause_NB_Any,
                                               cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                  cr_CIOT_ATTACH_REQUEST(cr_AdditionalUpdateType_CIOT),
                                                                                  v_ESMMessage)); 
          
        if(v_loop == 1)
        {
            log(v_TcName, "Step8: Verified that the DUT successfully establishes an RRC connection and sends a NAS Attach Request message");   
        } 
        /* 9. Verify that the network responds with a 
         * NAS Attach Reject message in which the " EMM Cause Code is set to 17 (NETWORK Failure) " 
          */
      
        log(v_TcName, "Default Procedure Guard Timer Stopped");
        t_Procedure_Guard_Timer.stop; //Guard Procedure Ended
    
        v_PDNConnReq := v_Nas_Ind.Pdu.PiggybackedPduList[0].Msg.pDN_CONNECTIVITY_REQUEST;  
        v_PTId_UE := v_PDNConnReq.procedureTransactionIdentifier;  

        SRB.send(cas_NB_SRB1bis_NasPdu_REQ(nbiot_Cell1,
                                       cs_TimingInfo_Now,
                                       cs_NAS_Request(v_Nas_Ind.SecurityProtection.Status,
                                                     cs_508_AttachReject ( cs_EMM_Cause_v(tsc_EmmCause_NetworkFailure),-,
                                                                             v_GT2_T3402))));
        
         
                                                      

        if(v_loop < 5)
        {
            t_T3411.start ( f_NBIOT_SetTimerToleranceMin( nonProtocolTimer, v_T3411 ) );
            if(v_loop == 1)
            {
                log(v_TcName, "Step9: Verified that the network responds with a NAS Attach Reject message in which the  EMM Cause Code is set to 17 (NETWORK Failure) ");
                log(v_TcName, "Step10: UE waits atleast T3411 (10) seconds before attempting to attach again");
            }
            else if(v_loop == 2)
            {
                log(v_TcName, "Step10: Verified that the network responds with a NAS Attach Reject message in which the  EMM Cause Code is set to 17 (NETWORK Failure) ");
                log(v_TcName, "Step10: UE waits atleast T3411 (10) seconds before attempting to attach again");                
            }
            else
            {
                log(v_TcName, "Step11: Verified that the network responds with a NAS Attach Reject message in which the  EMM Cause Code is set to 17 (NETWORK Failure) ");
                log(v_TcName, "Step11: UE waits atleast T3411 (10) seconds before attempting to attach again");                
            }
            /* 10a. Verify that the UE waits at least T3411 seconds before attempting to attach again.
             * The next attempt is considered attempt #2. */
            
            f_NBIOT_RRC_ConnectionRelease(nbiot_Cell1);          
            alt {
             // []SRB.receive( car_NB_SRB0_RrcPdu_IND(eutra_Cell1, cr_RRCConnectionRequest(cr_EstablishmentCause_Any)))
              []SRB.receive(car_NB_SRB0_RrcPdu_IND(nbiot_Cell1, cr_RRCConnectionRequest_NB ( cr_EstablishmentCause_NB_Any, ? ) ))

                {
                      t_T3411.stop;
                      log("Received message during attempt# ",v_loop);
                      f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__,v_TcName & "UE Triggers unexpected Attach Request while T3411 timer is running");
                }
              []t_T3411.timeout
                {
                      log ("Attach request not recevied after attempt# ",v_loop);
                      f_NBIOT_PreliminaryPass(__FILE__, __LINE__,v_TcName & "T3411 Successful Timeout Detected");
                }
            }
           //f_NBIOT_RRC_ConnectionRelease(nbiot_Cell1);  
            log("Waiting to receive Attach Request");
            
        }
        else
        {
            if(pc_IMS)
            {
                t_T3402.start ( f_NBIOT_SetTimerToleranceMin( rrcTimer, v_T3402 ) );
            }
            else
            {
                t_T3402.start ( f_NBIOT_SetTimerToleranceMin( nonProtocolTimer, v_T3402 ) );
            }
            log(v_TcName, "t_T3402 is started for 4 min");
             /*t_T3411.start ( f_NBIOT_SetTimerToleranceMin( nonProtocolTimer, v_T3411 ) );
            alt {
             // []SRB.receive( car_NB_SRB0_RrcPdu_IND(eutra_Cell1, cr_RRCConnectionRequest(cr_EstablishmentCause_Any)))
              []SRB.receive(car_NB_SRB0_RrcPdu_IND(nbiot_Cell1, cr_RRCConnectionRequest_NB ( cr_EstablishmentCause_NB_Any, ? ) ))

                {
                      t_T3411.stop;
                      log("Received message during attempt# ",v_loop);
                      f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__,v_TcName & "UE Triggers unexpected Attach Request while T3411 timer is running");
                }
              []t_T3411.timeout
                {
                      log ("Attach request not recevied after attempt# ",v_loop);
                      f_NBIOT_PreliminaryPass(__FILE__, __LINE__,v_TcName & "T3411 Successful Timeout Detected");
                }
            }*/
            f_NBIOT_RRC_ConnectionRelease(nbiot_Cell1, CONTROL_PLANE);
            log(v_TcName, "Step11: Verified that the network responds with a NAS Attach Reject message in which the  EMM Cause Code is set to 17 (NETWORK Failure) ");
            log(v_TcName, "Step12a: Fifth attempt fails");

        }
               
    } 
    log(v_TcName, "Step12b: verify the UE does not send an Attach Request while T3402 is running.");  
    alt {
      //[]SRB.receive( car_SRB0_RrcPdu_IND(eutra_Cell1, cr_RRCConnectionRequest(cr_EstablishmentCause_Any))) 
      []SRB.receive(car_NB_SRB0_RrcPdu_IND(nbiot_Cell1, cr_RRCConnectionRequest_NB ( cr_EstablishmentCause_NB_Any, ? ) ))
        {
              t_T3402.stop;
              f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__,v_TcName & "UE Triggers unexpected Attach Request while T3402 timer is running");
        }
      []t_T3402.timeout
        {
            log(v_TcName, "Timer T3402 expired Successfully.");
            setverdict(pass);
        }
    }
      /* UE Attempting to attach immediately after expiry of T3402 timer.
       So receiving the Request and dropping it */
    t_T2sec.start;
    alt {
      //[]SRB.receive(car_SRB0_RrcPdu_IND(eutra_Cell1, cr_RRCConnectionRequest(cr_EstablishmentCause_Any)))
      []SRB.receive(car_NB_SRB0_RrcPdu_IND(nbiot_Cell1, cr_RRCConnectionRequest_NB ( cr_EstablishmentCause_NB_Any, ? ) ))
      {
          t_T2sec.stop;
         // f_VZ_Ignore_Rach_Enable_Ind_Disable(eutra_Cell1);            //added for LCCP-2346
          //f_NBIOT_SS_ConfigRachPreambleIgnoreIndMode(nbiot_Cell1, disable);
         // f_NBIOT_SS_ConfigRachPreambleIndMode(nbiot_Cell1, disable);  
          SRB.send(cas_NB_SRB0_RrcPdu_REQ(nbiot_Cell1, cs_TimingInfo_Now, cs_RRCConnectionReject_NB));
      
      }
      []t_T2sec.timeout{}
    }
      
  }
    
    
      function f_TC_4_6_NBIOT_Code22(charstring TestPlan_Name) runs on NBIOT_PTC
  {
    /* Reference Data retry 5.15 */
    var charstring v_TcName := TestPlan_Name & ": ";
    
    log(v_TcName, "UE WITH T3346 TIMER SUPPORT RECEIVES ATTACH REJECT MESSAGE FROM THE NETWORK CODE 22");  
    log(v_TcName, "Step1: Configure the test setup so that the DUT finds service on a single eNodeB with cell_id X1 = 1, PLMN id Y1 = ", 
                  f_ConvertPLMNtoString(f_Asn2Nas_PlmnId(valueof(cs_HPLMN_Def))) & ", and TAI Z1 = ", oct2int(tsc_TAC1));
    log(v_TcName, "Configure the test system such that timer T3411 is set to 10 seconds");
    
    f_NBIOT_Init (c1);
    
    /* 1. Configure the test setup so that the device under test (DUT) finds service on a single eNodeB 
     *    with cell_id (where "cell_id" refers to the "CellIdentity" parameter that is broadcast in SIB1) equal to value X1, 
     *    PLMN id equal to value Y1, and TAI equal to value Z1. 
     * 2. Configure the test equipment such that the network will allow the UE to attach and connect to PDNs.
    */
       f_NBIOT_CellInfo_SetPLMN_1Entry(nbiot_Cell1, cs_HPLMN_Def);
    f_NBIOT_CellInfo_SetCellId(nbiot_Cell1, nbiot_Cell2);    
    f_NBIOT_CellInfo_SetTAC(nbiot_Cell1, oct2bit(tsc_TAC1));
    f_NBIOT_SS_ConfigureSysinfo (nbiot_Cell1);
    
    log(v_TcName, "Step2: Configure the test equipment such that the network will respond to attach attempts by sending a NAS Attach Reject message with an EMM Cause Code equal to 22 and a T3346 Timer value set to 15 minutes");
    f_NBIOT_CellConfig_Def (nbiot_Cell1, CONTROL_PLANE);
    //f_Default_Handler_StartStop(eutra_Cell1, true, TestPlan_Name);  //Function for Multi-PDN Default Handler
    f_NBIOT_SetCellPower ( nbiot_Cell1, tsc_ServingCellRS_EPRE );
  
    f_NBIOT_TestBody_Set(true);
    f1_VZ_TC_4_6_NBIOT_Body(TestPlan_Name);
    f_NBIOT_TestBody_Set(false);
    f_NBIOT_ReleaseAllCells();
    f_UT_PowerOffUE (UT); 
    log(v_TcName,"Cell is released"); 
    log(v_TcName,"Step15: UE is Powered off");
    //f_Default_Handler_StartStop(eutra_Cell1, -, TestPlan_Name);  //Function for Multi-PDN Default Handler
  } 
    
  /* After receiving the NAS Attach Reject message, the UE waits T3346 minutes before its next attach attempt in that PLMN. 
   * If the UE enters a new PLMN, it shall stop timer T3346 before issuing an attach attempt in that PLMN.
   */    
  function f1_VZ_TC_4_6_NBIOT_Body(charstring TestPlan_Name) runs on NBIOT_PTC
  {
    var EUTRA_ASN1_RRC_TransactionIdentifier_Type v_RRC_TI := tsc_RRC_TI_Def;
    var NAS_MSG_Indication_Type v_NasInd;
//    var template AdditionalUpdateType v_AdditionalUpdateType := f_GetAdditionalUpdateType (NORMAL);
//    var NAS_AttDetValue_Type v_AttachType := f_GetEAttachType(NORMAL);
    timer t_Procedure_Guard_Timer;
  
    template (value) GPRS_Timer2 v_GT3346 := cs_GprsTimer_v1_T3346(tsc_GprsTimerUnit_1min, '01111'B); /* T3346 Set to 15 min in Attach Reject*/
    var float v_T3346 := (15.0 * 60.0); //15 Minutes
    timer t_T3346;
    var float v_Timer_1 := 120.0; 
    timer t_T2sec := 10.0;
	timer t_WaitTime;
    var float tsc_GuardProcedureTimer_240 := 360.0;
  
    var GutiParameters_Type v_Guti1_Params;  
    var GutiParameters_Type v_Guti2_Params;  
    //var EPS_UpdateTypeValue v_UpdateType := f_GetEPSTAUType(EPS_Only);
    var charstring v_TcName := TestPlan_Name & ": ";
    var template (present) B3_Type v_PDNType := (f_GetPdnType(), '101'B, '001'B);
    var template (present) NAS_UL_Message_Type v_ESMMessage := cr_CIOT_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach, v_PDNType);
   
    /* 3. Power the DUT on and allow it to find LTE service. */    
    log(v_TcName, "Step3: Power the DUT on and allow it to find LTE service");
    //f_EUTRA_SwitchOnUEandStartIP(eutra_Cell1);
    f_UT_SwitchOnUE(UT, true);

    t_Procedure_Guard_Timer.start(tsc_GuardProcedureTimer_240); //Guard Procedure Started

         
    /* 4. Verify that the DUT successfully establishes an RRC connection and sends a NAS Attach Request message. */
    log(v_TcName, "Step4: Verify that the DUT successfully establishes an RRC connection and sends a NAS Attach Request message.");
    
    v_NasInd := f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell1,
                                               cr_EstablishmentCause_NB_Any,
                                               cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                  cr_CIOT_ATTACH_REQUEST(cr_AdditionalUpdateType_CIOT),
                                                                                  v_ESMMessage)); 
    
    log(v_TcName, "Step4: UE Sent Attach Request to SS.");
    
   
    log(v_TcName, "Default Procedure Guard Timer Stopped");

    t_Procedure_Guard_Timer.stop; //Guard Procedure Ended
  
    /* 5. Verify that the network responds with a NAS Attach Reject message in which the EMM Cause Code is set to a value of 22. */
    log(v_TcName, "Step5: Network responds with a NAS Attach Reject Message in which the EMM Cause Code is set to a value of 22.");

    SRB.send(cas_NB_SRB_NasPdu_REQ(nbiot_Cell1,
                                   tsc_SRB1bis,
                                   cs_TimingInfo_Now,
                                   cs_NAS_Request(tsc_SHT_NoSecurityProtection, // @sic R5-174501 sic@
                                                  cs_508_AttachReject(cs_EMM_Cause_v(tsc_Cause_Congestion), v_GT3346))));

    t_T3346.start ( f_NBIOT_SetTimerToleranceMin(nonProtocolTimer, v_T3346 ) );
    log(v_TcName, "Step5: SS Sent Attach Reject Message with cause 'Congestion' to UE.");
    log(v_TcName, "Step6: Verify that the UE does not re-issue an Attach Request while the T3346 timer is running ");
    
    f_NBIOT_RRC_ConnectionRelease(nbiot_Cell1);
    
    /* 6. Verify that the UE does not re-issue a Attach Request while the T3346 timer is running.*/
    /* We wait for 1 min(Defined by us) to see any Attach Request shoud not come */  
    log(v_TcName,"Step6: WaitTimer started for ",float2int(60.0)," seconds");
    t_WaitTime.start(f_NBIOT_SetTimerToleranceMax ( nonProtocolTimer, 60.0));
    alt {
       []SRB.receive(car_NB_SRB0_RrcPdu_IND(nbiot_Cell1, cr_RRCConnectionRequest_NB(cr_EstablishmentCause_NB_Any, ?)))
      {
        t_WaitTime.stop;
        log(v_TcName, "Step6: UE is triggering Attach Request unexpectedly");
        f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__,v_TcName & "Step6 FAIL");
      }
      []t_WaitTime.timeout
      {
        log(v_TcName, "Step6: UE not triggering Attach Request while T3346 timer running - Success");
        f_NBIOT_PreliminaryPass(__FILE__, __LINE__, v_TcName & "Step6 PASS");
      }
    }
    
    /* 7. While the T3346 timer is running, power cycle the UE. */    
    log(v_TcName, "Step7: While the T3346 timer is running, power cycle the UE.");
    fl_UT_ApplyCommand(UT, cas_UT_Req(POWER_CYCLE, NO_CNF_REQUIRED));
    
    /* 8. Verify that the UE does not issue a Attach Request. */
    log(v_TcName, "Step8: Verify that the UE does not issue a Attach Request for ",float2int(v_Timer_1)," seconds");
    log(v_TcName, "Step8: Timer started for ",float2int(v_Timer_1)," seconds");
    t_WaitTime.start(f_NBIOT_SetTimerToleranceMax ( nonProtocolTimer, v_Timer_1));
      
    alt {
       []SRB.receive(car_NB_SRB0_RrcPdu_IND(nbiot_Cell1, cr_RRCConnectionRequest_NB(cr_EstablishmentCause_NB_Any, ?)))
      {
        t_WaitTime.stop;
        log(v_TcName, "Step8: UE is triggering Attach Request unexpectedly");
        f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__,v_TcName & "Step8 FAIL");
      }
      []t_WaitTime.timeout
      {
        log(v_TcName, "Step8: UE not triggering Attach Request while T3346 timer running - Success");
        f_NBIOT_PreliminaryPass(__FILE__, __LINE__,v_TcName & "Step8 PASS");
      }
    }      
    
    /* 9. While the T3346 timer is running, re-configure the test setup so that the DUT now finds 
     *    service on a different Tracking Area with id equal to value Z2 where Z2 is not equal to Z1 
     *    and Z2 is not on the UEs list of tracking areas. Note that only the TAC portion of 
     *    the TAI will be different. The PLMN id is still equal to Y1. */
    log(v_TcName, "Step9 : While the T3346 timer is running, re-configure the test setup so that the DUT now finds " 
                   & "service on a different Tracking Area with id equal to value Z2 = ", oct2int(tsc_TAC2));
    f_NBIOT_CellInfo_SetTAC(nbiot_Cell1, oct2bit(tsc_TAC2));
    
    f_NBIOT_SS_ConfigureSysinfo (nbiot_Cell1);
    log(v_TcName, "Step9: TAC Modified to Z2");
    
    /* 10. Verify that the UE does not issue Attach Request. */
    log(v_TcName, "Step10: Verify that the UE does not issue Attach Request."); 
    log(v_TcName, "Step10: Timer is started for ",float2int(v_Timer_1)," seconds"); 
    t_WaitTime.start(f_NBIOT_SetTimerToleranceMax ( nonProtocolTimer, v_Timer_1));
     
    alt {
      []SRB.receive(car_NB_SRB0_RrcPdu_IND(nbiot_Cell1, cr_RRCConnectionRequest_NB(cr_EstablishmentCause_NB_Any, ?)))
      {
        t_WaitTime.stop;
        log(v_TcName, "Step10: UE is triggering Attach Request unexpectedly");
        f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__,v_TcName & "Step10 FAIL");
      }
      []t_WaitTime.timeout
      {
        log(v_TcName, "Step10: UE not triggering Attach Request while T3346 timer running - Success");
        f_NBIOT_PreliminaryPass(__FILE__, __LINE__,v_TcName & "Step10 PASS");
      }
    }    

    /* 11. While the T3346 timer is running, re-configure the network so that the UE finds service 
     *   on an eNodeB with a PLMN id equal to Y2 where Y2 is not equal to Y1. PLMN Y2 shall not be 
     *   a home PLMN. The frequency of the second PLMN shall be the same as the first. 
     *   T3346 shall not be running in this second PLMN.
     */      

    log(v_TcName, "Step11: While the T3346 timer is running, re-configure the network so that the UE finds service on an eNodeB with a PLMN id equal to Y4 = " & f_ConvertPLMNtoString(f_Asn2Nas_PlmnId(valueof(cs_HPLMN_311_481)))
                  & " where Y4 is not equal to Y1. The frequency of the second PLMN shall be the same as the first");
    f_NBIOT_SetCellPower ( nbiot_Cell1, tsc_NonSuitableOffCellRS_EPRE );
    f_NBIOT_ReleaseAllCells();
   // f_Default_Handler_StartStop(eutra_Cell1, -, TestPlan_Name);  //Function for Multi-PDN Default Handler
    //f_IP_Handling_StopPDN(IP);   
    //f_EUTRA_ResetIPandIMS (eutra_Cell1);          
    
    f_NBIOT_CellInfo_SetPLMN_1Entry(nbiot_Cell1, cs_HPLMN_311_481);
    f_NBIOT_CellConfig_Def( nbiot_Cell1, CONTROL_PLANE);
    //f_Default_Handler_StartStop(eutra_Cell1, true, TestPlan_Name);  //Function for Multi-PDN Default Handler
    f_Delay(2.0); 
    f_NBIOT_SetCellPower (nbiot_Cell1, tsc_ServingCellRS_EPRE );         
    
    log(v_TcName, "Step11: PLMN-Id Modified for Roaming PLMN");
      
    f_NBIOT_PreliminaryPass(__FILE__, __LINE__,v_TcName & "Step11 PASS");

    v_Guti2_Params := f_NBIOT_CellInfo_GetGuti(nbiot_Cell1);
    
    /* 12. Verify that the DUT now attempts to connect to the LTE network and is successful. */
    log(v_TcName, " Step12: Verify that the DUT now attempts to connect to the LTE network");
    // If the UE supports IMS roaming, verify that the UE connects to the IMS PDN using PDN Type IPv6.
    // If the UE does not support IMS roaming, verify that the UE connects to the Internet PDN using PDN Type IPv4. 
    //log(v_TcName, "Step21: Power cycle the DUT");  
   // f_UT_TriggerPowerCycle(UT);
    fl_UT_ApplyCommand(UT, cas_UT_Req(POWER_CYCLE, NO_CNF_REQUIRED));
    t_Procedure_Guard_Timer.start(tsc_GuardProcedureTimer_240); //Guard Procedure Started

//    f_EUTRA_AttachProcedure_ConnectedUpdated_Roaming (eutra_Cell1, NORMAL, v_AttachType, v_AdditionalUpdateType);
    v_NasInd := f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell1,
                                               cr_EstablishmentCause_NB_Any,
                                               cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                  cr_CIOT_ATTACH_REQUEST(cr_AdditionalUpdateType_CIOT),
                                                                                  v_ESMMessage)); 
   

     if (not match(v_NasInd.Pdu.PiggybackedPduList[0].Msg.pDN_CONNECTIVITY_REQUEST.pdnType.typeValue, tsc_PdnType_IPv4))
    {
        f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, v_TcName &"PDN Type used is not IPV4 as expected!");
    }

    f_NBIOT_InitialRegistration_Step5_14(nbiot_Cell1, CONTROL_PLANE, STATE2_NB_CONNECTED_UPDATED, v_NasInd);

    
    log(v_TcName, "Default Procedure Guard Timer Stopped");
   
    t_Procedure_Guard_Timer.stop; //Guard Procedure Ended
  
    log(v_TcName, "Step12: Connection to the LTE network and is successful"); 
    /* 13. While the T3346 timer is running, re-configure the test setup so that 
     * the DUT again finds service on PLMN Y1.*/

    f_NBIOT_SetCellPower ( nbiot_Cell1, tsc_NonSuitableOffCellRS_EPRE );
    f_NBIOT_ReleaseAllCells();
    //f_Default_Handler_StartStop(eutra_Cell1, -, TestPlan_Name);  //Function for Multi-PDN Default Handler
    //f_IP_Handling_StopPDN(IP);   
    //f_EUTRA_ResetIPandIMS (eutra_Cell1);        
    f_NBIOT_CellInfo_SetPLMN_1Entry(nbiot_Cell1, cs_HPLMN_Def);
    f_NBIOT_CellConfig_Def( nbiot_Cell1, CONTROL_PLANE);
    //f_Default_Handler_StartStop(eutra_Cell1, true, TestPlan_Name);  //Function for Multi-PDN Default Handler
    f_Delay(2.0);
    f_NBIOT_SetCellPower (nbiot_Cell1, tsc_ServingCellRS_EPRE );
    
    log(v_TcName, "Step13: Re-configured the network so that the UE again finds service on PLMN Y1 = "& f_ConvertPLMNtoString(f_Asn2Nas_PlmnId(valueof(cs_HPLMN_311_480))));
    f_NBIOT_PreliminaryPass(__FILE__, __LINE__,v_TcName & "Step13 PASS");

    /* 14. Verify that the UE issues a Attach Request without waiting for T3346 to expire.*/
    /* Reference Data retry 5.15 */
    log(v_TcName, "Step14: Verify that the UE issues an Attach Request without waiting for T3346 to expire");   
    
      
    //Deviation
    /* As per test plan, UE has to send Attach request in Step 14. 
     * Instead of Attach request, UE doing Tracking Area Update procedure.
     * If Tracking Area request received from UE, do following procedure as Deviation,
     * - Send Tracking Area Reject with cause code 9 to UE
     * - Send RRC Connection Release to UE
     * - Wait for Attach request from UE
     */
    t_Procedure_Guard_Timer.start(tsc_GuardProcedureTimer_240); //Guard Procedure Started

    v_NasInd := f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell1,
                                                cr_EstablishmentCause_NB_Any,?);

    log(v_TcName, "Default Procedure Guard Timer Stopped");

    t_Procedure_Guard_Timer.stop; //Guard Procedure Ended
      
    if(isvalue(v_NasInd.Pdu.Msg.aTTACH_REQUEST))
    {
        log(v_TcName,"Received Attach Request from UE");
        f_NBIOT_PreliminaryPass(__FILE__, __LINE__,v_TcName & "Step14 PASS");
    }
    else if(isvalue(v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST))
    {
        log(v_TcName,"Received Tracking Area Update Request");
        log(v_TcName,"Responding to Tracking Area Update with Tracking Area Reject");
        SRB.send(cas_NB_SRB_NasPdu_REQ(nbiot_Cell1,
                                     tsc_SRB1bis,
                                     cs_TimingInfo_Now,
                                     cs_NAS_Request(tsc_SHT_NoSecurityProtection,
                                         cs_508_TRACKING_AREA_UPDATE_REJECT(tsc_EmmCause_UEIdentityNotDerived)))); //cause code : 9
        
        f_NBIOT_RRC_ConnectionRelease(nbiot_Cell1);
        log(v_TcName,"RRC Connection Release sent to UE");
        log(v_TcName,"Step14: Waiting for Attach request from UE");
        v_NasInd := f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell1,
                                            cr_EstablishmentCause_NB_Any,?);
        if(not isvalue(v_NasInd.Pdu.Msg.aTTACH_REQUEST))
        {
            f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, v_TcName & "Step14: Unexpected Message Received");
        }
        log(v_TcName,"Received Attach Request from UE");
        f_NBIOT_PreliminaryPass(__FILE__, __LINE__,v_TcName & "Step14 PASS");      
    }
    else
    {
        f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, v_TcName & "Step14: Unexpected Message Received");
    }
    
    t_T3346.stop;
      
     /*t_T2sec.start;
    alt {
      //[]SRB.receive(car_SRB0_RrcPdu_IND(eutra_Cell1, cr_RRCConnectionRequest(cr_EstablishmentCause_Any)))
      []SRB.receive(car_NB_SRB0_RrcPdu_IND(nbiot_Cell1, cr_RRCConnectionRequest_NB ( cr_EstablishmentCause_NB_Any, ? ) ))
      {
          t_T2sec.stop;
          log(v_TcName,"f_NBIOT_SS_ConfigRachPreambleIndMode");
        
        f_NBIOT_SS_ConfigRachPreambleIndMode(nbiot_Cell1, disable);
      
          //f_VZ_Ignore_Rach_Enable_Ind_Disable(eutra_Cell1);            //added for LCCP-2346
          //f_NBIOT_SS_ConfigRachPreambleIgnoreIndMode(nbiot_Cell1, disable);
          // SRB.send(cas_NB_SRB0_RrcPdu_REQ(nbiot_Cell1, cs_TimingInfo_Now, cs_RRCConnectionReject_NB));
      
          
          
      }
      []t_T2sec.timeout{
             log(v_TcName,"timeout");
      }
    }*/
    //f_VZ_Ignore_Rach_Enable_Ind_Disable(eutra_Cell1);            //added for LCCP-2346
     f_NBIOT_SS_ConfigRachPreambleIndMode(nbiot_Cell1, disable);
      
  } // End of f1_VZ_TC_4_6_NBIOT_Body  
 
    
    
    
    
     function f_TC_4_7_NBIOT(charstring TestPlan_Name) runs on NBIOT_PTC
  {
    var charstring v_TcName :=  "TC_4_7_NBIOT: ";
    f_NBIOT_Init (c1);
    
    log(v_TcName, "UE RECEIVES ATTACH REJECT AND PDN CONNECTIVITY REJECT MESSAGES FROM THE NETWORK");
    log(v_TcName, "Step1: Configure the test setup so that the DUT finds service on a single eNodeB with cell_id X1 = 1, PLMN id Y1 = ", 
                  f_ConvertPLMNtoString(f_Asn2Nas_PlmnId(valueof(cs_HPLMN_Def))) & ", and TAI Z1 = ", oct2int(tsc_TAC1));
    log(v_TcName, "Configure the test equipment such that the network sets the T3402 timer to 4 minutes in the Attach Accept message");
    f_NBIOT_CellConfig_Def (nbiot_Cell1, CONTROL_PLANE);
    
   
   f_NBIOT_SetCellPower ( nbiot_Cell1, tsc_ServingCellRS_EPRE );
    
    log(v_TcName, "Verify that the device under test (DUT) has an Internet application that will
     attempt to connect to the Internet PDN as soon as the DUT is powered on and
     finds service on the LTE network");
    
    f1_VZ_TC_4_7_NBIOT_Body();
    f_NBIOT_TestBody_Set(false);
     log(v_TcName, "Postamble Execution started");
   
    f_NBIOT_ReleaseAllCells();
    f_UT_PowerOffUE (UT); 
    
    f_NBIOT_PreliminaryPass(__FILE__, __LINE__,v_TcName & " PASSED");
    log(v_TcName, "Postamble Execution Done");      
  }

  /* UE sets the attach attempt counter to 5 after receiving 3 NAS Attach Reject messages 
   * with EMM Cause Code of 19. The first three attachment attempts are separated by T3411 
   * seconds. The next attempt does not occur for at least T3402 minutes. 
   * All attachment attempts after the first and prior to T3402 expiry use the Internet PDN. 
   * After T3402 expiry, the UE attempts to attach using the IMS PDN.
   */
  function f1_VZ_TC_4_7_NBIOT_Body() runs on NBIOT_PTC
  {
    var EUTRA_ASN1_RRC_TransactionIdentifier_Type v_RRC_TI := tsc_RRC_TI_Def;
    timer t_WaitTime;
    var float v_Timer_1 := 300.0;
    
   // var NAS_AttDetValue_Type v_AttachType := f_GetEAttachType(NORMAL);
    //var template AdditionalUpdateType v_AdditionalUpdateType := f_GetAdditionalUpdateType (NORMAL);
    template (value) GPRS_Timer v_GT3402 := cs_GprsTimer_tv('17'O, tsc_GprsTimerUnit_1min, '00100'B); /* T3402 Set to 4 min in Attach Accept*/  
    template (value) GPRS_Timer2 v_GT2_T3402 := cr_GPRS_Timer2_3('16'O, tsc_GprsTimerUnit_1min, '00100'B);
    var template (omit) EMM_Cause v_EMMCause :=cs_EMM_Cause_tv(tsc_Cause_EPSServNotAllowed);

    timer t_Procedure_Guard_Timer;
    var NAS_MSG_Indication_Type v_NasInd;
    var NAS_UL_Message_Type v_PdnConnectivityRequest;
    var ProcedureTransactionIdentifier v_PTId_UE;
    var template (value) ESM_Cause v_EsmCause111;
    var B3_Type v_Request_Type;
    var B3_Type v_pdnType;  
    var octetstring tsc_APN1_string;
    var charstring v_UpperCasePattern_apn;
    var charstring v_exapn;  
    var float v_T3411 := 10.0 - 1.0;  /* T3411 timer set to 10s - 10% tolerance*/
    timer t_T3411;
    var float v_T3402 := (4.0 * 60.0) - 3.0; /* T3402 set to 4 min(240s) - 1% tolerance*/
    timer t_T3402;
    var integer v_loop := 1;
    var charstring v_TcName := testcasename() & ": ";
    var charstring v_appName := " IMS ";
    var integer v_stepno := 0;
    var float tsc_GuardProcedureTimer_240 := 240.0;
    var float tsc_GuardProcedureTimer_300 := 300.0;
    var PDN_TypeToBeUsed_Type p_PDN_TypeToBeUsed := pdnTypeAsSupportedByUE;
    var template (present) B3_Type v_PDNType := (f_GetPdnType(), '101'B, '001'B);
    var template (present) NAS_UL_Message_Type v_ESMMessage := cr_CIOT_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach, v_PDNType);
   


    if(pc_IMS == false)
     {
         v_appName := " Internet " ;
     }
     
    log(v_TcName, "Step3: Power the DUT on and allow it to find LTE service");
    
    f_UT_SwitchOnUE(UT, true);

    t_Procedure_Guard_Timer.start(tsc_GuardProcedureTimer_240); //Guard Procedure Started
  
    log(v_TcName, "Step4: Waiting for UE to attach");
  
    v_NasInd := f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell1,
                                               cr_EstablishmentCause_NB_Any,
                                               cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                  cr_CIOT_ATTACH_REQUEST(cr_AdditionalUpdateType_CIOT),
                                                                                  v_ESMMessage)); 
      
    f_NBIOT_InitialRegistration_Step5_12(nbiot_Cell1, CONTROL_PLANE, STATE2_NB_CONNECTED_UPDATED, v_NasInd);
    
      
    f_NBIOT_InitialRegistration_Step13(nbiot_Cell1,
                                       CONTROL_PLANE,
                                       v_NasInd,
                                       pdnTypeAsSupportedByUE,-,-,-,-,-,v_GT3402);
    
    f_NBIOT_InitialRegistration_Step14(nbiot_Cell1, CONTROL_PLANE, tsc_EpsDefaultBearerId);
    log(v_TcName, "Step4: Verified that the DUT sends an Attach Request and that the network responds with "&
      "an Attach Accept with the T3402 timer set to 4 minutes.");      
    log(v_TcName, "Step4: UE Attached");
    
    log(v_TcName, "Default Procedure Guard Timer Stopped");

    t_Procedure_Guard_Timer.stop; //Guard Procedure Ended
  
    log(v_TcName, "Step5: Configure the test equipment such that the network sends a Detach Request to the DUT "&
      "with re-attach required in the Detach Type IE.");
    
    log(v_TcName, "Sending Detach Req to UE");
    SRB.send(cas_NB_SRB_NasPdu_REQ(nbiot_Cell1,
                                 tsc_SRB1bis,
                                 cs_TimingInfo_Now,
                                 cs_NAS_Request(tsc_SHT_IntegrityProtected_Ciphered,
                                                cs_508_DETACH_REQUEST_MT(cs_DetachType(tsc_DetachMT_ReAttach), omit))));
    
    log(v_TcName, "Expecting Detach Accept from UE");
    SRB.receive(car_NB_SRB_NasPdu_IND(nbiot_Cell1,
                                     tsc_SRB1bis,
                                    cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered, cr_508_DETACH_ACCEPT)));        
    log(v_TcName, "Step 6: Verify that the DUT detaches from the LTE network.");
          
    /* 7. Configure the test equipment such that the network will respond to attach attempts 
     * by sending a NAS Attach Reject message with an EMM Cause Code equal to 19. 
     * Configure the test equipment such that the network will respond to a piggybacked PDN connectivity request 
     * by sending a NAS PDN Connectivity Reject message with an ESM Cause Code equal to 26.
     * Note that the T3396 Value IE is not included in the PDN Connectivity Reject message. */
    log(v_TcName, "Step7a: Configure the test equipment such that the network will respond to attach attempts by sending a NAS Attach Reject message with an EMM Cause Code equal to 19.");
     
    log(v_TcName, "Step7b: Configure the test equipment such that the network will respond to a piggybacked PDN connectivity request by sending a NAS PDN Connectivity Reject message with an ESM Cause Code equal to 26.");  
    
    log(v_TcName, "Step7c: Note that the T3396 Value IE is not included in the PDN Connectivity Reject message.");  
    f_NBIOT_RRC_ConnectionRelease( nbiot_Cell1);
    log(v_TcName, "Step8: Verify that the DUT successfully establishes an RRC connection and sends a NAS Attach Request message.");
    /*
    if (not pc_Automatic_Re_Attach) 
    { 
        f_UT_TriggerAttach (UT);
    }
    */

    v_stepno := 8;
    for (var integer cluster_loop :=1; cluster_loop<3; cluster_loop:=cluster_loop+1) 
    {   
        v_loop :=1;
        
        for (v_loop :=1;v_loop<=3;v_loop:=v_loop+1) 
        {
            log("v_loop = ",v_loop," cluster_loop = ",cluster_loop);
            log(v_TcName, "Step"& int2str(v_stepno) &": Expecting Attach Request from UE");
            t_Procedure_Guard_Timer.start(tsc_GuardProcedureTimer_300); //Guard Procedure Started

            v_NasInd := f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell1,
                                               cr_EstablishmentCause_NB_Any,
                                               cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                  cr_CIOT_ATTACH_REQUEST(cr_AdditionalUpdateType_CIOT),
                                                                                  v_ESMMessage));                            
        
            log(v_TcName, "Step"& int2str(v_stepno) &": UE Sent Attach Request with PDN Connectivity Request");
            
    
            log(v_TcName, "Default Procedure Guard Timer Stopped");
            t_Procedure_Guard_Timer.stop; //Guard Procedure Ended
        
            v_PdnConnectivityRequest := v_NasInd.Pdu.PiggybackedPduList[0].Msg;
            
            /* Verify that the Request Type IE in the PDN Connectivity Request message is set to "Initial Request." 
             * Verify that the PDN Type is set to the class 3 (Internet) PDN. */
            if(v_loop > 1) // From second attempt only, need to check this
            {
                log(v_TcName, "Verifying if the request type is Initial Req");
                v_Request_Type := v_PdnConnectivityRequest.pDN_CONNECTIVITY_REQUEST.requestType.typeValue;
                if(v_Request_Type != '001'B) 
                {
                    //log("v_loop = ",v_loop," cluster_loop = ",cluster_loop);
                    log("Request type is not 'Initial request(001)'");
                    log("Received Request type = ",v_Request_Type);
                    f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__,v_TcName & "Step" & int2str(v_stepno)& " failed");
                }
                
                log(v_TcName, "Request type is Initial Req");
                
                log(v_TcName, "Verifying if the PDN Type is Class 3");
                if(isvalue (v_PdnConnectivityRequest.pDN_CONNECTIVITY_REQUEST.accessPointName))
                {
                    tsc_APN1_string := v_PdnConnectivityRequest.pDN_CONNECTIVITY_REQUEST.accessPointName.nameValue;
                    v_UpperCasePattern_apn := f_StringToUpper(oct2char(tsc_APN1_string));
                    v_exapn := substr(v_UpperCasePattern_apn,1,lengthof(v_UpperCasePattern_apn)-1);
                    if(v_exapn != px_INTERNET_APN) 
                    {
                        //log("v_loop = ",v_loop," cluster_loop = ",cluster_loop);
                        log("PDN type is not",px_INTERNET_APN);
                        log("Received PDN type = ",v_exapn);
                        f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__,v_TcName & "Step"&int2str(v_stepno)& " failed");  //step 19         
                    }
                }
                else
                {
                    log(v_TcName, "APN Name not received in PDN Connectivity request");
                }
    
            }
            v_stepno := v_stepno+1;
            v_PTId_UE := v_PdnConnectivityRequest.pDN_CONNECTIVITY_REQUEST.procedureTransactionIdentifier;    
        
            /* 9. Verify that the network responds with a NAS Attach Reject message in which the EMM Cause Code is set to 
             * a value of 19 and a NAS PDN Connectivity Reject message in which the ESM Cause Code is set to a value of 26.*/
            v_EsmCause111 := cs_ESM_Cause_v ('00011010'B); //26 : insufficient resources
            log(v_TcName, "Step",int2str(v_stepno),": Verify that the network responds with a NAS Attach Reject message in which the EMM Cause Code is set to a value of 19 and a NAS PDN Connectivity Reject message in which the ESM Cause Code is set to a value of 26.");
            v_stepno := v_stepno+1;
            
            log(v_TcName, "Sending Attach and PDN Conn Reject to UE");
            SRB.send(cas_NB_SRB_NasPdu_REQ(nbiot_Cell1,
                                         tsc_SRB1bis,
                                         cs_TimingInfo_Now,
                                         cs_NAS_RequestWithPiggybacking(v_NasInd.SecurityProtection.Status,//tsc_SHT_NoSecurityProtection,
                                                                        cs_508_AttachReject(cs_EMM_Cause_v(tsc_Cause_ESMFailure),-,v_GT2_T3402),
                                                                        cs_PdnConnectReject('0'H,v_PTId_UE,v_EsmCause111))));
            log(v_TcName, "Sent attach Reject to UE");

            if(v_loop != 3)
            {
                //f_NBIOT_RRC_ConnectionRelease(nbiot_Cell1);
                t_T3411.start ( f_NBIOT_SetTimerToleranceMin(  nonProtocolTimer, v_T3411 ) );
                log ("Timer T3411 is started for 10 secs");
               
                log(v_TcName, "Step",int2str(v_stepno),": Verify that the UE waits at least T3411 seconds before attempting to attach again");                
                log(v_TcName, "Should not receive Attach for atleast T3411 seconds");
                alt {
                  [] SRB.receive(car_NB_SRB0_RrcPdu_IND(nbiot_Cell1, cr_RRCConnectionRequest_NB ( cr_EstablishmentCause_NB_Any, ? ) ))  
                  {
                    t_T3411.stop;
                    //log("v_loop = ",v_loop," cluster_loop = ",cluster_loop);
                    log(v_TcName, "Step",int2str(v_stepno),": UE Triggers unexpected Attach Request while T3411 timer is running during #retry ",v_loop);
                    f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__,v_TcName & "Step"& int2str(v_stepno) & " failed");
                  }
                  []t_T3411.timeout
                  {
                    //log("v_loop = ",v_loop," cluster_loop = ",cluster_loop);
                    log(v_TcName, "Step",int2str(v_stepno),": T3411 Successful Timeout Detected");
                    f_NBIOT_PreliminaryPass(__FILE__, __LINE__,v_TcName & "Step"& int2str(v_stepno)& " failed");
                  }
                }
                 f_NBIOT_RRC_ConnectionRelease(nbiot_Cell1);
                log("Waiting for next attach" );
            }
        } // End of v_loop
        
        /* 14. Monitor the DUT and verify that it does not attempt to attach to the LTE network for 
         * at least T3402 minutes.*/
        t_T3402.start ( f_NBIOT_SetTimerToleranceMin( nonProtocolTimer, v_T3402 ) );
        log(v_TcName, "Step",int2str(v_stepno),": Monitor the DUT and verify that it does not attempt to attach to the LTE network for "&
        "at least T3402 minutes");
        log ("T3402 timer is started for 4 min");
        /*f_NBIOT_RRC_ConnectionRelease(nbiot_Cell1);
        t_T3411.start ( f_NBIOT_SetTimerToleranceMin(  nonProtocolTimer, v_T3411 ) );
        alt {
                  [] SRB.receive(car_NB_SRB0_RrcPdu_IND(nbiot_Cell1, cr_RRCConnectionRequest_NB ( cr_EstablishmentCause_NB_Any, ? ) ))  
                  {
                    t_T3411.stop;
                    //log("v_loop = ",v_loop," cluster_loop = ",cluster_loop);
                    log(v_TcName, "Step",int2str(v_stepno),": UE Triggers unexpected Attach Request while T3411 timer is running during #retry ",v_loop);
                    f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__,v_TcName & "Step"& int2str(v_stepno) & " failed");
                  }
                  []t_T3411.timeout
                  {
                    //log("v_loop = ",v_loop," cluster_loop = ",cluster_loop);
                    log(v_TcName, "Step",int2str(v_stepno),": T3411 Successful Timeout Detected");
                    f_NBIOT_PreliminaryPass(__FILE__, __LINE__,v_TcName & "Step"& int2str(v_stepno)& " failed");
                  }
                }*/
        f_NBIOT_RRC_ConnectionRelease(nbiot_Cell1);
        log("Monitoring that UE waits atleast T3402 seconds (4 min) before attempting to attach again");
        alt {
            [] SRB.receive(car_NB_SRB0_RrcPdu_IND(nbiot_Cell1, cr_RRCConnectionRequest_NB ( cr_EstablishmentCause_NB_Any, ? ) ))
              {
                  t_T3402.stop;
                  //log("v_loop = ",v_loop," cluster_loop = ",cluster_loop);
                  log(v_TcName, "Step",int2str(v_stepno),": UE Triggers unexpected Attach Request while T3402 timer is running");
                  f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__,v_TcName);            
              }
            []t_T3402.timeout
              {
                  //log("v_loop = ",v_loop," cluster_loop = ",cluster_loop);
                  log(v_TcName, "Step",int2str(v_stepno),": Successful Timeout detected for Timer T3402");
                  f_NBIOT_PreliminaryPass(__FILE__, __LINE__,v_TcName);
              }
            }
        v_stepno := v_stepno+1;
        if(v_stepno != 22)
        {
            log(v_TcName, "Step",int2str(v_stepno),": After T3402 expires, verify that the DUT successfully establishes an RRC connection and sends a NAS Attach Request message.");
        }   
         fl_UT_ApplyCommand(UT, cas_UT_Req(POWER_CYCLE, NO_CNF_REQUIRED));
    } // End of Cluster_loop

    /* 22. While the T3402 timer is running, re-configure the network so that the network accepts the attach request and 
     * PDN connectivity request. */
    /* 23. After T3402 expires, verify that the DUT attempts to attach to the LTE network using the IMS PDN, and that 
     * the network accepts the requests.*/
    log(v_TcName, "Step22: while the T3402 timer is running, re-configure the network so that the network accepts the attach request and "&
      "PDN connectivity request.");

   
    log(v_TcName, "Step23: After T3402 expires, verify that the DUT attempts to attach to the LTE network using the"&v_appName&"PDN, and that the network accepts the requests");
    
    t_Procedure_Guard_Timer.start(tsc_GuardProcedureTimer_240); //Guard Procedure Started
      
    
     v_NasInd := f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell1,
                                               cr_EstablishmentCause_NB_Any,
                                               cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                  cr_CIOT_ATTACH_REQUEST(cr_AdditionalUpdateType_CIOT),
                                                                                  v_ESMMessage)); 
      f_NBIOT_InitialRegistration_Step5_14(nbiot_Cell1, CONTROL_PLANE, STATE2_NB_CONNECTED_UPDATED, v_NasInd);
    
    log(v_TcName, "Default Procedure Guard Timer Stopped");

    t_Procedure_Guard_Timer.stop; //Guard Procedure Ended

    log(v_TcName, "Step23 :UE attached Successfully");
    f_NBIOT_PreliminaryPass (__FILE__, __LINE__,v_TcName & "Step 23");

    /* The SS transmits an RRCConnectionRelease message on Cell 1. */
    f_NBIOT_RRC_ConnectionRelease(nbiot_Cell1); 
      
  } // End of f1_VZ_TC_4_7_NBIOT_Body
    
   // TC 4.8 - UE RECEIVES ATTACH REJECT MESSAGE FROM THE NETWORK CODES 95, 96, 97, 99 AND 111      
  function f_TC_4_8_NBIOT(NAS_CauseValue_Type p_attachReject_CauseCode, charstring TestPlan_Name) runs on NBIOT_PTC
  {
   /* var RRC_TransactionIdentifier v_RRC_TI := tsc_RRC_TI_Def;
    var DRB_IdentityList_AllAndAMonly_Type v_DRB_IdentityList;
    template (value) RadioBearerList_Type p_DrbConfigList := cs_DrbConfigList_DRB1;
    */
    var integer v_EMM_CauseCode := bit2int(p_attachReject_CauseCode);
    var charstring v_TcName := "TC_4_8: ";

    // Cell Init
    log(v_TcName, "UE RECEIVES ATTACH REJECT MESSAGE FROM THE NETWORK CODE ", v_EMM_CauseCode," ");
    f_NBIOT_Init (c1);
      
    log(v_TcName,"Step1: Configure the test setup so that the device under test (DUT) finds service on a single eNodeB " & 
                 "with cell_id equal to value X1, PLMN id equal to value Y1, and TAI equal to value Z1.");
    log(v_TcName,"Step1: Configure the test equipment such that the network sets the T3402 timer to 4 minutes in " & 
                 "the Attach Accept message.");

    f_NBIOT_CellConfig_Def (nbiot_Cell1, CONTROL_PLANE);
    f_NBIOT_SetCellPower ( nbiot_Cell1, tsc_ServingCellRS_EPRE );
    
    log(v_TcName, "Cell Configuration Successful");
         
    
    fl_VZ_IMSLess_TC_4_8_NBIOT_Body(p_attachReject_CauseCode);
    f_NBIOT_TestBody_Set(false);
    log(v_TcName, "Postamble Execution started");
   
    f_NBIOT_ReleaseAllCells();
    f_UT_PowerOffUE (UT); 
  
    f_NBIOT_PreliminaryPass(__FILE__, __LINE__, v_TcName &" PASSED");
  } 

  function fl_VZ_IMSLess_TC_4_8_NBIOT_Body(NAS_CauseValue_Type p_tsc_EmmCause_Code) runs on NBIOT_PTC
  {
    //var NAS_AttDetValue_Type v_AttachType := f_GetEAttachType(NORMAL);
    //var template AdditionalUpdateType v_AdditionalUpdateType := f_GetAdditionalUpdateType (NORMAL);
    var NAS_MSG_Indication_Type v_NasInd;       
    var ProcedureTransactionIdentifier v_PTId_UE;
    var PDN_CONNECTIVITY_REQUEST v_PDNConnReq;
//    var RRC_TransactionIdentifier v_RRC_TI := tsc_RRC_TI_Def;
    template (value) GPRS_Timer v_GT3402 := cs_GprsTimer_tv('17'O, tsc_GprsTimerUnit_1min, '00100'B);
    template (value) GPRS_Timer2 v_GT2_T3402 := cr_GPRS_Timer2_3('16'O, tsc_GprsTimerUnit_1min, '00100'B);
    var float v_T3402 := (4.0 * 60.0);
    var float v_T3411 := 10.0;
    timer t_T3411;
    timer t_T3402;
    var charstring v_TcName := testcasename() &": ";
    var integer v_attachReject_EMMCode;
    timer t_Procedure_Guard_Timer;
    var float tsc_GuardProcedureTimer_240 := 240.0;
    var template (present) B3_Type v_PDNType := (f_GetPdnType(), '101'B, '001'B);
    var template (present) NAS_UL_Message_Type v_ESMMessage := cr_CIOT_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach, v_PDNType);
   


    v_attachReject_EMMCode := bit2int(p_tsc_EmmCause_Code);
      
    log(v_TcName,"Step2: Verify that the device under test (DUT) has an Internet application that will attempt to " & 
                 "connect to the Internet PDN as soon as the DUT is powered on and finds service on the LTE network");
    
    log(v_TcName,"Step3: Power the DUT on and allow it to find LTE service");    
    
    f_UT_SwitchOnUE(UT, true);

    t_Procedure_Guard_Timer.start(tsc_GuardProcedureTimer_240); //Guard Procedure Started
   
    //f_EUTRA_AttachProcedure_ConnectedUpdated(eutra_Cell1, NORMAL, v_AttachType, v_AdditionalUpdateType, v_GT3402 ); // @sic R5s110176 sic@
     v_NasInd := f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell1,
                                               cr_EstablishmentCause_NB_Any,
                                               cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                  cr_CIOT_ATTACH_REQUEST(cr_AdditionalUpdateType_CIOT),
                                                                                  v_ESMMessage)); 
      
    f_NBIOT_InitialRegistration_Step5_12(nbiot_Cell1, CONTROL_PLANE, STATE2_NB_CONNECTED_UPDATED, v_NasInd);
    
      
    f_NBIOT_InitialRegistration_Step13(nbiot_Cell1,
                                       CONTROL_PLANE,
                                       v_NasInd,
                                       pdnTypeAsSupportedByUE,-,-,-,-,-,v_GT3402);
      
    f_NBIOT_InitialRegistration_Step14(nbiot_Cell1, CONTROL_PLANE, tsc_EpsDefaultBearerId);  
    log(v_TcName,"Step4: Verified that the DUT sends an Attach Request and that the network responds with an Attach Accept with the T3402 timer set to 4 minutes.");    
    log(v_TcName,"Step4: UE Attached Successfully");

    log(v_TcName, "Default Procedure Guard Timer Stopped");
    t_Procedure_Guard_Timer.stop; //Guard Procedure Ended
      
    log(v_TcName,"Step5: Sending Detach Request to UE with reattach required in the Detach Type IE");  
      
    SRB.send(cas_NB_SRB1bis_NasPdu_REQ(nbiot_Cell1,
                                       cs_TimingInfo_Now,
                                       cs_NAS_Request(tsc_SHT_IntegrityProtected_Ciphered,
                                                      cs_508_DETACH_REQUEST_MT(cs_DetachType(tsc_DetachMT_ReAttach), omit))));
    
    log(v_TcName, "Step6: Expecting Detach Accept from the UE");
    SRB.receive(car_NB_SRB1bis_NasPdu_IND(nbiot_Cell1,
                                          cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered,
                                                            cr_508_DETACH_ACCEPT)));
    
    log(v_TcName,"Step6: Verified that the DUT detaches from the LTE network.");
    
    log(v_TcName,"Step7: Configured the test equipment such that the network will respond to attach attempts with NAS Attach Reject message with EMM Cause Code ",v_attachReject_EMMCode," ");
    
    f_NBIOT_RRC_ConnectionRelease( nbiot_Cell1 );
    
    t_Procedure_Guard_Timer.start(tsc_GuardProcedureTimer_240); //Guard Procedure Started
          
    log(v_TcName,"Step8: Waiting to receive Attach Request from UE ");
    
    v_NasInd :=  f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell1,
                                               cr_EstablishmentCause_NB_Any,
                                               cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                  cr_CIOT_ATTACH_REQUEST(cr_AdditionalUpdateType_CIOT),
                                                                                  v_ESMMessage)); 
  
      
      
   log(v_TcName, "Default Procedure Guard Timer Stopped");
    t_Procedure_Guard_Timer.stop; //Guard Procedure Ended
      
    log(v_TcName,"Step8: Verified that the DUT successfully establishes an RRC connection and sends a NAS Attach Request message.");
      
    v_PDNConnReq := v_NasInd.Pdu.PiggybackedPduList[0].Msg.pDN_CONNECTIVITY_REQUEST;  
    v_PTId_UE := v_PDNConnReq.procedureTransactionIdentifier;

    log(v_TcName,"Step9: Sending Attach Reject to UE ");   
    SRB.send (cas_NB_SRB_NasPdu_REQ(nbiot_Cell1,
                                 tsc_SRB1bis,
                                 cs_TimingInfo_Now,
                                 cs_NAS_Request(v_NasInd.SecurityProtection.Status,//tsc_SHT_IntegrityProtected,
                                                cs_508_AttachReject(cs_EMM_Cause_v(p_tsc_EmmCause_Code),-,v_GT2_T3402))));

    
      
    t_T3402.start(f_NBIOT_SetTimerToleranceMin(nonProtocolTimer, v_T3402));
    log(v_TcName,"Step9: Sent Attach Reject message with EMM Cause Code set to ",v_attachReject_EMMCode," ");
    log(v_TcName,"Step10: Monitoring that UE waits atleast T3402 minutes(4 mins) before attempting to attach to the network again");
    
    /*t_T3411.start ( f_NBIOT_SetTimerToleranceMin( nonProtocolTimer, v_T3411 ) );
alt {
             // []SRB.receive( car_NB_SRB0_RrcPdu_IND(eutra_Cell1, cr_RRCConnectionRequest(cr_EstablishmentCause_Any)))
              []SRB.receive(car_NB_SRB0_RrcPdu_IND(nbiot_Cell1, cr_RRCConnectionRequest_NB ( cr_EstablishmentCause_NB_Any, ? ) ))

                {
                      t_T3411.stop;
                      
                      f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__,v_TcName & "UE Triggers unexpected Attach Request while T3411 timer is running");
                }
              []t_T3411.timeout
                {
                      f_NBIOT_PreliminaryPass(__FILE__, __LINE__,v_TcName & "T3411 Successful Timeout Detected");
                }
            }*/  
    f_NBIOT_RRC_ConnectionRelease( nbiot_Cell1 );   
    log("Monitoring that UE waits atleast T3402 seconds (4 min) before attempting to attach again - 1st time");
    alt{
      //[]SRB.receive( car_SRB0_RrcPdu_IND(eutra_Cell1, cr_RRCConnectionRequest(cr_EstablishmentCause_Any)))  
      [] SRB.receive(car_NB_SRB0_RrcPdu_IND(nbiot_Cell1, cr_RRCConnectionRequest_NB ( cr_EstablishmentCause_NB_Any, ? ) ))
      {
        t_T3402.stop;
        f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, v_TcName&" UE sent unexpected Attach Request before expiry of T3402 timer");
      }
      []t_T3402.timeout
      {
        log(v_TcName,"Timer T3402 for 4 Minutes Successfully Expired");
      }
    }
    
    log(v_TcName,"Step11: Waiting to receive Attach Request from UE");

    t_Procedure_Guard_Timer.start(tsc_GuardProcedureTimer_240); //Guard Procedure Started
          
    v_NasInd := f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell1,
                                               cr_EstablishmentCause_NB_Any,
                                               cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                  cr_CIOT_ATTACH_REQUEST(cr_AdditionalUpdateType_CIOT),
                                                                                  v_ESMMessage)); 
    log(v_TcName,"Step11: Verified that the DUT successfully establishes an RRC connection and sends a NAS Attach Request message. ");

     log(v_TcName, "Default Procedure Guard Timer Stopped");
    t_Procedure_Guard_Timer.stop; //Guard Procedure Ended
      
    v_PDNConnReq := v_NasInd.Pdu.PiggybackedPduList[0].Msg.pDN_CONNECTIVITY_REQUEST;
    v_PTId_UE := v_PDNConnReq.procedureTransactionIdentifier;
    
    log(v_TcName,"Step11: Sending Attach Reject message to UE again");
      
    SRB.send (cas_NB_SRB_NasPdu_REQ(nbiot_Cell1,
                                 tsc_SRB1bis,
                                 cs_TimingInfo_Now,
                                 cs_NAS_Request(v_NasInd.SecurityProtection.Status,//tsc_SHT_IntegrityProtected,
                                                cs_508_AttachReject(cs_EMM_Cause_v(p_tsc_EmmCause_Code),-,v_GT2_T3402))));
  
    log(v_TcName,"Step11: Sent Attach Reject message with EMM Cause Code set to ",v_attachReject_EMMCode," ");
    
    log(v_TcName,"Step12: Starting timer T3402 for 4 Minutes");      
    
    log(v_TcName,"Step12: Monitoring that UE waits atleast T3402 4 minutes before attempting to attach again");
    
    t_T3402.start(f_NBIOT_SetTimerToleranceMin(nonProtocolTimer, v_T3402));
    
    log(v_TcName,"Step12: While the T3402 timer is running, re-configure the network so that the network accepts" & 
                 "the attach request and configure the test equipment such that the network sets the T3402 timer to " & 
                 "4 minutes in the Attach Accept message");

     /*t_T3411.start ( f_NBIOT_SetTimerToleranceMin( nonProtocolTimer, v_T3411 ) );
alt {
             // []SRB.receive( car_NB_SRB0_RrcPdu_IND(eutra_Cell1, cr_RRCConnectionRequest(cr_EstablishmentCause_Any)))
              []SRB.receive(car_NB_SRB0_RrcPdu_IND(nbiot_Cell1, cr_RRCConnectionRequest_NB ( cr_EstablishmentCause_NB_Any, ? ) ))

                {
                      t_T3411.stop;
                      
                      f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__,v_TcName & "UE Triggers unexpected Attach Request while T3411 timer is running");
                }
              []t_T3411.timeout
                {
                      f_NBIOT_PreliminaryPass(__FILE__, __LINE__,v_TcName & "T3411 Successful Timeout Detected");
                }
            }  */
    f_NBIOT_RRC_ConnectionRelease( nbiot_Cell1 );
    log("Monitoring that UE waits atleast T3402 seconds (4 min) before attempting to attach again - 2nd time");
    alt {
       []SRB.receive(car_NB_SRB0_RrcPdu_IND(nbiot_Cell1, cr_RRCConnectionRequest_NB ( cr_EstablishmentCause_NB_Any, ? ) ))      
      {
        t_T3402.stop;
        f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, v_TcName&"UE sent unexpected Attach Request before expiry of T3402 timer");
      }
      []t_T3402.timeout
      {
          log(v_TcName,"Timer T3402 for 4 Minutes Successfully Expired");
      }
    }
    fl_UT_ApplyCommand(UT, cas_UT_Req(POWER_CYCLE, NO_CNF_REQUIRED));
    t_Procedure_Guard_Timer.start(tsc_GuardProcedureTimer_240); //Guard Procedure Started
      
    
    log(v_TcName,"Step13: After T3402 expires, Verify that the DUT attempts to attach to the LTE network and " & 
                 "that the network accepts the attach request.");  
    
     v_NasInd := f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell1,
                                               cr_EstablishmentCause_NB_Any,
                                               cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                  cr_CIOT_ATTACH_REQUEST(cr_AdditionalUpdateType_CIOT),
                                                                                  v_ESMMessage)); 
      
      
    f_NBIOT_InitialRegistration_Step5_12(nbiot_Cell1, CONTROL_PLANE, STATE2_NB_CONNECTED_UPDATED, v_NasInd);
    
      
    f_NBIOT_InitialRegistration_Step13(nbiot_Cell1,
                                       CONTROL_PLANE,
                                       v_NasInd,
                                       pdnTypeAsSupportedByUE,-,-,-,-,-,v_GT3402);
      
    f_NBIOT_InitialRegistration_Step14(nbiot_Cell1, CONTROL_PLANE, tsc_EpsDefaultBearerId);
      
    log(v_TcName,"Step13 : UE Successfully Attached to the LTE Network ");

    log(v_TcName, "Default Procedure Guard Timer Stopped");
    t_Procedure_Guard_Timer.stop; //Guard Procedure Ended  
      
    log(v_TcName,"Step14 : . Power the device off. ");

    
  }
    
    
     function f_TC_VZ_DATARETRYIMSLESS_4_9_NBIOT(charstring TestPlan_Name) runs on NBIOT_PTC
 {
     var charstring v_TcName := testcasename() & ": ";
    
    log (v_TcName, "UE WITH T3245 TIMER RECEIVES ATTACH REJECT MESSAGE FROM THE NETWORK CODE 11");  

    
    fl_VZ_DATARETRYIMSLESS_4_9_NBIOT_Body(tsc_Cause_PLMN_NotAllowed, TestPlan_Name);
    f_NBIOT_TestBody_Set(false);

    f_NBIOT_PreliminaryPass(__FILE__, __LINE__, v_TcName &"PASSED");
 }
    
    function fl_VZ_DATARETRYIMSLESS_4_9_NBIOT_Body(NAS_CauseValue_Type rejectCause, charstring TestPlan_Name) runs on NBIOT_PTC
  {
//    var template (omit) AccessStratumRelease v_Rel := omit;
    var charstring v_TcName := testcasename() & ": ";
    var EUTRA_ASN1_RRC_TransactionIdentifier_Type v_RRC_TI := tsc_RRC_TI_Def;
    var NAS_MSG_Indication_Type v_NasInd;
    var charstring v_UpperCasePattern_apn;
    var charstring v_exapn;
    var charstring v_Step;
    var charstring v_Int_apnUpper;
//    var APNandPCOs_Type v_ReceivedApn;
    var boolean isIMSReg := true;
    var B3_Type v_PDNType2;   /* IPv4, IPv6 or IPv4v6 */
    timer t_T3245;
    timer t_WaitHours;
    timer t_WaitTime;
    var float v_Timer1 := (1410.0 * 60.0); //23 Hour 30 Minutes
    //var float v_Timer1 := (60.0);
    var float v_Timer2 := (1440.0 * 60.0); //24 Hours
    //var float v_Timer2 := (60.0);
    var float v_Timer3 := (690.0 * 60.0); //11 Hour 30 Minutes
      
    var float v_Timer4 := (720.0 * 60.0); //12 Hours
    //var float v_Timer4 := (60.0);
    var float v_Timer5 := (1425.0 * 60.0); //23 Hour 45 Minutes
   // var float v_Timer5 := ( 60.0);
    var float v_Timer6 := (705.0 * 60.0); // 11 Hour 45 Minutes
    //var float v_Timer6 := ( 60.0);     
    var float v_WaitTime := 60.0;
    var float v_T3245 := (15.0 * 60.0); //15 Minutes
    var float v_current;
    var float v_Remaining;
    var integer v_StepNo;
       
    var template (value) PLMN_Identity v_PLMN1 := Y4;
    var template (value) PLMN_Identity v_PLMN2 := Y1;
    var charstring v_Plmn1 := "Y4";
    var charstring v_Plmn2 := "Y1";
    var charstring v_Plmn1Val;
    var charstring v_Plmn2Val;
    var charstring v_Ipv4Valid := "and requests a connection to the Internet PDN using PDN Type IPv4";
    timer t_Procedure_Guard_Timer;
    var float tsc_GuardProcedureTimer_240 := 240.0;
    var template (present) B3_Type v_PDNType := (f_GetPdnType(), '101'B, '001'B);
    var template (present) NAS_UL_Message_Type v_ESMMessage := cr_CIOT_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach, v_PDNType);
   
          
    if(match(testcasename(), "TC_VZ_DATARETRYIMSLESS_4_9_Test2"))
    {
        v_PLMN1 := Y1;
        v_PLMN2 := Y4;
        v_Plmn1 := "Y1";
        v_Plmn2 := "Y4";
        v_Ipv4Valid := "";
    }
    v_Plmn1Val := f_ConvertPLMNtoString(f_Asn2Nas_PlmnId(valueof(v_PLMN1)));
    v_Plmn2Val := f_ConvertPLMNtoString(f_Asn2Nas_PlmnId(valueof(v_PLMN2)));

    log(v_TcName, "######## Prerequisite: This testcase requires special SIM and USIM has to be configured for Timer T3245 Behaviour parameter " &
                  "in the EFNASConfig file as enabled.");

    f_NBIOT_Init (c1);
    log(v_TcName, "Step1: Configure the test setup so that the DUT finds service on a single eNodeB with cell_id X1 = 1, PLMN id ",v_Plmn1," = ", 
                   v_Plmn1Val & ", and TAI Z1 = ", oct2int(tsc_TAC1));
    
      f_NBIOT_CellInfo_SetPLMN_Common(nbiot_Cell1, {v_PLMN1}, -, false);
    

    f_NBIOT_CellConfig_Def(nbiot_Cell1, CONTROL_PLANE);
    f_NBIOT_SetCellPower(nbiot_Cell1, tsc_ServingCellRS_EPRE);
    

    log(v_TcName, "Step2: Configure the test equipment such that the network will respond to attach attempts by sending a NAS Attach Reject message " &
                  "with an EMM Cause Code equal to ", bit2int(rejectCause));

    log(v_TcName, "Step3: Configure the USIM on the DUT such that the Timer T3245 Behaviour parameter in the EFNASConfig file is enabled.");

    log(v_TcName, "Step4: Power the DUT on and allow it to find LTE service.");
    
    f_UT_SwitchOnUE(UT, true);

    t_Procedure_Guard_Timer.start(tsc_GuardProcedureTimer_240); //Guard Procedure Started

    log(v_TcName, "Step5: Verify that the DUT successfully establishes an RRC connection and sends a NAS Attach Request message ",v_Ipv4Valid);

    v_NasInd := f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell1,
                                                  cr_EstablishmentCause_NB_Any,
                                                  cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                    cr_CIOT_ATTACH_REQUEST(cr_AdditionalUpdateType_CIOT), //Table 22.5.7a.3.3-4
                                                                                    v_ESMMessage)); 
   
 
    log(v_TcName, "Default Procedure Guard Timer Stopped");
    t_Procedure_Guard_Timer.stop; //Guard Procedure Ended

    if(match(testcasename(), "TC_VZ_DATARETRYIMSLESS_4_9_Test1"))
    {
        v_PDNType2 := v_NasInd.Pdu.PiggybackedPduList[0].Msg.pDN_CONNECTIVITY_REQUEST.pdnType.typeValue;
        if(match(v_PDNType2,tsc_PdnType_IPv4) or match(v_PDNType2,tsc_PdnType_IPv4v6))
        {
           log(v_TcName, "Received APN VZWINTERNET with PdnType IPV4");
        }    
        else
        {
           log("Received PdnType: ",v_PDNType2);
           f_NBIOT_SetVerdictFailOrInconc(__FILE__,__LINE__, v_TcName & "Invalid PdnType Received for VZWINTERNET");
        }
    }
    log(v_TcName, "Step5: UE Sent Attach Request to SS.");

    log(v_TcName, "Step6: Verify that the network responds with a NAS Attach Reject message in which the EMM Cause Code is set to a value of ", bit2int(rejectCause));
     
     SRB.send(cas_NB_SRB1bis_NasPdu_REQ(nbiot_Cell1,
                                       cs_TimingInfo_Now,
                                       cs_NAS_Request(tsc_SHT_NoSecurityProtection,
                                                     cs_508_AttachReject ( cs_EMM_Cause_v(rejectCause)))));
          
    log(v_TcName, "Step6: Sent Attach Reject message with EMM Cause Code set to ", bit2int(rejectCause));

    //f_EUTRA_RRC_ConnectionRelease_Local (eutra_Cell1,f_EUTRA_GetNextSendOccasion(eutra_Cell1));
    f_NBIOT_RRC_ConnectionRelease(nbiot_Cell1);
      
    log(v_TcName, "Step7: Set a timer for 15 minutes and execute the following steps 8 through 22 within the 15 minutes.");
    t_T3245.start(v_T3245);
    log(v_TcName, "Step8: Verify that the DUT does not attempt to attach to the LTE network after receiving the NAS Attach Reject message.");

    f_NBIOT_CheckNoAttachOn1Cell(nbiot_Cell1, v_WaitTime, "Step8");
    log(v_TcName, "Step8: Successfully verified that the DUT does not attempt to attach to the LTE network for ", float2int(v_WaitTime), " seconds");

    log(v_TcName, "Step9: Attempt to initiate a connection to the Admin PDN from the DUT.");
    fl_UT_ApplyCommand(UT, cas_UT_Req(INITIATE_ADMIN_TEST_APP, NO_CNF_REQUIRED));

    log(v_TcName, "Step10: Verify that the DUT does not attempt to connect to the LTE network.");
    f_NBIOT_CheckNoAttachOn1Cell(nbiot_Cell1, v_WaitTime, "Step10");
    log(v_TcName, "Step10: Successfully Verified Step10 for ", float2int(v_WaitTime)," sec");

    log(v_TcName, "Step11: Reconfigure the test setup for the DUT to find service on a different eNodeB with Cell Id = X2 with a PLMN id ",v_Plmn1," = " &
                  v_Plmn1Val);
    
     f_NBIOT_ReleaseAllCells();
     f_NBIOT_CellInfo_SetCellId(nbiot_Cell1, nbiot_Cell2);
   
    f_NBIOT_CellConfig_Def( nbiot_Cell1, CONTROL_PLANE);
    f_Delay(2.0);
    f_NBIOT_SetCellPower(nbiot_Cell1, tsc_ServingCellRS_EPRE);
    log(v_TcName, "Step11: Cell Reconfiguration Successful");

    log(v_TcName, "Step12: Verify that the DUT does not attempt to attach to the LTE network on the new eNodeB.");
    f_NBIOT_CheckNoAttachOn1Cell(nbiot_Cell1, v_WaitTime, "Step12");
    log(v_TcName, "Step12: Successfully Verified Step12 for ", float2int(v_WaitTime)," sec");

    log(v_TcName, "Step13: Attempt to initiate a connection to the Admin PDN from the DUT.");
    fl_UT_ApplyCommand(UT, cas_UT_Req(INITIATE_ADMIN_TEST_APP, NO_CNF_REQUIRED));

    log(v_TcName, "Step14: Verify that the DUT does not attempt to connect to the LTE network.");
    f_NBIOT_CheckNoAttachOn1Cell(nbiot_Cell1, v_WaitTime, "Step14");
    log(v_TcName, "Step14: Successfully Verified Step14 for ", float2int(v_WaitTime)," sec");

    log(v_TcName, "Step15: Reconfigure the test setup for the DUT to find service on a different Tracking Area with TAI = Z2");
     f_NBIOT_ReleaseAllCells();
     f_NBIOT_CellInfo_SetTAC(nbiot_Cell1, oct2bit(tsc_TAC2));
    
    f_NBIOT_CellConfig_Def(nbiot_Cell1, CONTROL_PLANE);
    f_Delay(2.0);
    f_NBIOT_SetCellPower(nbiot_Cell1, tsc_ServingCellRS_EPRE);
    log(v_TcName, "Step15: Cell Reconfiguration Successful");

    log(v_TcName, "Step16: Verify that the DUT does not attempt to attach to the LTE network on the new Tracking Area.");
    f_NBIOT_CheckNoAttachOn1Cell(nbiot_Cell1, v_WaitTime, "Step16");
    log(v_TcName, "Step16: Successfully Verified Step16 for ", float2int(v_WaitTime)," sec");

    log(v_TcName, "Step17: Attempt to initiate a connection to the Admin PDN from the DUT.");
    fl_UT_ApplyCommand(UT, cas_UT_Req(INITIATE_ADMIN_TEST_APP, NO_CNF_REQUIRED));

    log(v_TcName, "Step18: Verify that the DUT does not attempt to connect to the LTE network.");
    f_NBIOT_CheckNoAttachOn1Cell(nbiot_Cell1, v_WaitTime, "Step18");
    log(v_TcName, "Step18: Successfully Verified Step18 for ", float2int(v_WaitTime)," sec");

    log(v_TcName, "Step19: Reconfigure the test setup for the DUT to find service on a different PLMN with PLMN Id ",v_Plmn2," = " &
                  v_Plmn2Val);
    
    f_NBIOT_ReleaseAllCells();
      f_NBIOT_CellInfo_SetPLMN_1Entry (nbiot_Cell1, v_PLMN2 );
  
    f_NBIOT_CellConfig_Def(nbiot_Cell1, CONTROL_PLANE);
     f_Delay(2.0);
    f_NBIOT_SetCellPower ( nbiot_Cell1, tsc_ServingCellRS_EPRE );
    log(v_TcName, "Step19: Cell Reconfiguration Successful");
      //fl_UT_ApplyCommand(UT, cas_UT_Req(POWER_CYCLE, NO_CNF_REQUIRED));
   
    log(v_TcName, "Step20: Verify that the DUT now attempts to attach to the LTE network and is successful.");
   // v_ReceivedApn := f_EUTRA_AttachProcedure_ConnectedUpdated_Roaming(eutra_Cell1, p_ForcedAttach, v_AttachType, v_AdditionalUpdateType );	  
      v_NasInd := f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell1,
                                                  cr_EstablishmentCause_NB_Any,
                                                  cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                    cr_CIOT_ATTACH_REQUEST(cr_AdditionalUpdateType_CIOT), //Table 22.5.7a.3.3-4
                                                                                    v_ESMMessage)); 
     f_NBIOT_InitialRegistration_Step5_14(nbiot_Cell1, CONTROL_PLANE, STATE2_NB_CONNECTED_UPDATED, v_NasInd);   
    
      
      
    log(v_TcName, "Step20: DUT attached to LTE network");

    v_StepNo := 21;
    /*if(match(testcasename(), "TC_VZ_DATARETRYIMSLESS_4_9_Test1"))
    {        
        v_UpperCasePattern_apn := f_StringToUpper(oct2char(v_ReceivedApn.accessPointName.nameValue));
        v_exapn := substr(v_UpperCasePattern_apn,1,lengthof(v_UpperCasePattern_apn)-1); //trimming 1st character from apn name.    
        v_Int_apnUpper := f_StringToUpper(px_INTERNET_APN);
    
        if(v_Int_apnUpper == v_exapn)
        {
           log(v_TcName, "Step",v_StepNo,": DUT connected to the Internet PDN with PdnType IPV4");
        }
        else
        {
           log(v_TcName, "Step",v_StepNo,": Received attach with an unexpected APN := ", v_exapn);
           f_EUTRA_SetVerdictFailOrInconc(__FILE__, __LINE__, v_TcName & " Step" & int2str(v_StepNo) &": DUT triggered attach with an unexpected APN");  
        }
        v_StepNo := v_StepNo+1;
    }*/
      v_StepNo := v_StepNo+1;
    log(v_TcName, "Step",v_StepNo,": Reconfigure the test setup so that the DUT again finds service on the original PLMN with PLMN Id ",v_Plmn1," = " &
                  v_Plmn1Val);
 
    f_NBIOT_ReleaseAllCells();
      f_NBIOT_CellInfo_SetPLMN_Common(nbiot_Cell1, {v_PLMN1}, -, false);
 
    f_NBIOT_CellConfig_Def(nbiot_Cell1, CONTROL_PLANE);
    f_NBIOT_SetCellPower(nbiot_Cell1, tsc_ServingCellRS_EPRE );
    log(v_TcName, "Step",v_StepNo,": Cell Reconfiguration Successful");

    v_StepNo := v_StepNo+1;
    log(v_TcName, "Step",v_StepNo,": Verify that the DUT does not attempt to attach on PLMN ",v_Plmn1," for the remaining duration of the 15 minute timer.");

    v_current := t_T3245.read;
    v_Remaining := v_T3245 - v_current;   
    log(v_TcName, "Timer T3245 with remaining value :",float2int(v_Remaining)," Sec.");

    alt
    {
      [] SRB.receive(car_NB_SRB0_RrcPdu_IND(nbiot_Cell1, cr_RRCConnectionRequest_NB ( cr_EstablishmentCause_NB_Any, ? ) ))
       {
        t_T3245.stop;
        f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, v_TcName & "Step" & int2str(v_StepNo) &": Received Attach Request while Timer T3245 running");
      }
      []t_T3245.timeout
      {
        f_NBIOT_PreliminaryPass(__FILE__, __LINE__, v_TcName & "Step" & int2str(v_StepNo) &": PASS");
      }
    }

      
    if(match(testcasename(), "TC_VZ_DATARETRYIMSLESS_4_9_Test1"))
    {    
      
          log(v_TcName, "Step24: Not Applicable as it is not Rel 12 UE");
          log(v_TcName, "For release 13 or later UEs, perform the following steps:");
          v_Timer1 := v_Timer3;
          v_Timer2 := v_Timer4;
          v_Step := "Step25";
        
      
        log(v_TcName, v_Step &".1: Power the device off and turn off the test script, and keep the device and test script off for ", float2int(v_Timer1/3600.0)," hour and 30 minute"); 
        f_UT_SwitchOffUE (UT, false);
        log(v_TcName, v_Step &".1: UE is Powered off");      
        f_Delay(v_Timer1);
    
        log(v_TcName, v_Step &".2: After ", float2int(v_Timer1)," seconds have elapsed, resume the test script then power the device on.");
        f_UT_SwitchOnUE(UT);
        log(v_TcName, v_Step &".3: Monitor the device for 15 minutes and verify that it does not attempt to attach on PLMN Y2.");
        f_NBIOT_CheckNoAttachOn1Cell(nbiot_Cell1, v_T3245, v_Step &".3");
        log(v_TcName, v_Step &".3: Successfully Verified ", v_Step &".3 for ", float2int(v_T3245/60.0)," minute");
    
         f_NBIOT_ReleaseAllCells();
      
        log(v_TcName, v_Step &".4: Power the device off and turn off the test script, and keep the device and test script off for an additional 24 hours.");
        f_UT_SwitchOffUE (UT, false);
        log(v_TcName, v_Step &".4: UE is Powered off");
        f_Delay(v_Timer2);
    
        log(v_TcName, v_Step &".5: While the device is powered off, configure the test equipment such that the network will allow the UE to " &
                      "attach successfully on PLMN Y2 = " & f_ConvertPLMNtoString(f_Asn2Nas_PlmnId(valueof(cs_RPLMN_311_479))));
         f_NBIOT_CellConfig_Def(nbiot_Cell1, CONTROL_PLANE);
         f_NBIOT_SetCellPower(nbiot_Cell1, tsc_ServingCellRS_EPRE );
        log(v_TcName, v_Step &".5: Cell Reconfiguration Successful");
    
        log(v_TcName, v_Step &".6: After ", float2int(v_Timer2)," seconds have expired, resume the test script then power the device on, " &
                      "and verify that the device successfully attaches to the LTE network.");
        f_UT_SwitchOnUE(UT, true);
    
        t_Procedure_Guard_Timer.start(tsc_GuardProcedureTimer_240); //Guard Procedure Started
         v_NasInd := f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell1,
                                                  cr_EstablishmentCause_NB_Any,
                                                  cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                    cr_CIOT_ATTACH_REQUEST(cr_AdditionalUpdateType_CIOT), //Table 22.5.7a.3.3-4
                                                                                    v_ESMMessage)); 
    f_NBIOT_InitialRegistration_Step5_14(nbiot_Cell1, CONTROL_PLANE, STATE2_NB_CONNECTED_UPDATED, v_NasInd);
   log(v_TcName, v_Step &".6: DUT attached to LTE network");

        log(v_TcName, "Default Procedure Guard Timer Stopped");
   
        t_Procedure_Guard_Timer.stop; //Guard Procedure Ended
    
        /*v_UpperCasePattern_apn := f_StringToUpper(oct2char(v_ReceivedApn.accessPointName.nameValue));
        v_exapn := substr(v_UpperCasePattern_apn,1,lengthof(v_UpperCasePattern_apn)-1); //trimming 1st character from apn name.    
        
        if(v_Int_apnUpper == v_exapn)
        {
           log(v_TcName, v_Step &".7: DUT connected to the Internet PDN with PdnType IPV4");
        }
        else
        {
           log(v_TcName, v_Step &".7: Received attach with an unexpected APN := ", v_exapn);
           f_EUTRA_SetVerdictFailOrInconc(__FILE__, __LINE__, v_TcName& v_Step &".7: DUT triggered attach with an unexpected APN");  
        }*/
    
        f_NBIOT_ReleaseAllCells();
      
        log(v_TcName, v_Step &".8: Power the device off."); 
        f_UT_SwitchOffUE (UT, false);
        log(v_TcName, v_Step &".8: UE is Powered off");
    }
    else //TC_VZ_DATARETRYIMSLESS_4_9_Test2
    {
       
          log(v_TcName, "Step23: Not Applicable as it is not Rel 12 UE");
          log(v_TcName, "Step24: For release 13 or later UEs, perform the following steps:");
          v_Timer1 := v_Timer6;  //11 hrs and 45 minutes
          v_Timer2 := v_Timer4;  //12 hrs
          v_Step := "Step24";
        
        log(v_TcName, v_Step &".1: Power the device off and then power the device on"); 
        f_UT_SwitchOffUE (UT, false);
        f_Delay(3.0);
        f_UT_SwitchOnUE(UT);
        log(v_TcName, v_Step &".2: Monitor the device for ",float2int(v_Timer1/60.0)," minutes and verify that it does not attempt to attach on PLMN Y3");        
        f_NBIOT_CheckNoAttachOn1Cell(nbiot_Cell1, v_Timer1, v_Step &".2");
        log(v_TcName, v_Step &".2: Successfully Verified ", v_Step &".2 for ", float2int(v_Timer1/60.0)," minute");       
        
        log(v_TcName,v_Step &".3: Power the device off");
        f_UT_SwitchOffUE (UT, false);
        f_Delay(3.0);
        
        log(v_TcName,v_Step &".4: While the device is powered off, configure the test equipment such that the network will allow the UE to attach "&
        "successfully on PLMN Y3 = "& f_ConvertPLMNtoString(f_Asn2Nas_PlmnId(valueof(cs_RPLMN_311_478))));
        
        log(v_TcName,v_Step &".5: Power the device on, and verify that the device successfully attaches to the LTE network within ",float2int(v_Timer2/60.0)," minutes.");
        f_UT_SwitchOnUE(UT);
        t_WaitHours.start(v_Timer2);
        alt
        {
            []SRB.receive(car_NB_SRB0_RrcPdu_IND(nbiot_Cell1, cr_RRCConnectionRequest_NB ( cr_EstablishmentCause_NB_Any, ? ) ))
           {
                t_WaitHours.stop;
               
                t_Procedure_Guard_Timer.start(tsc_GuardProcedureTimer_240); //Guard Procedure Started

                 v_NasInd := f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell1,
                                                  cr_EstablishmentCause_NB_Any,
                                                  cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                    cr_CIOT_ATTACH_REQUEST(cr_AdditionalUpdateType_CIOT), //Table 22.5.7a.3.3-4
                                                                                    v_ESMMessage)); 
                 f_NBIOT_InitialRegistration_Step5_14(nbiot_Cell1, CONTROL_PLANE, STATE2_NB_CONNECTED_UPDATED, v_NasInd);

                log(v_TcName, "Default Procedure Guard Timer Stopped");
                t_Procedure_Guard_Timer.stop; //Guard Procedure Ended
           }
           []t_WaitHours.timeout
           {
                f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, v_TcName& v_Step &".5: DUT not triggered attach within "&int2str(float2int(v_Timer2/60.0))&" minutes"); 
           }
        }
        log(v_TcName,v_Step &".5: Device successfully attaches to the LTE network");
        f_NBIOT_SS_ConfigRachPreambleIndMode(nbiot_Cell1, disable);
        f_NBIOT_ReleaseAllCells();
        log(v_TcName,v_Step &".6: Power the device off.");
        f_UT_SwitchOffUE (UT, false);               
    }

  }
    
    
   function f_VZ_IMSLess_TC_4_10_NBIOT_Tests(NAS_CauseValue_Type p_attachReject_CauseCode, charstring TestPlan_Name) runs on NBIOT_PTC
  {
    var integer v_EMM_CauseCode := bit2int(p_attachReject_CauseCode);

    log(testcasename()," UE RECEIVES ATTACH REJECT MESSAGE FROM THE NETWORK CODE ", v_EMM_CauseCode," ");
    log("########",testcasename(),"This test case requires one Additional SIM/UICC which need to be replaced with old SIM in middle of test Execution." );
    f_NBIOT_Init (c1);  
    log(testcasename(),"Step1: Configure the test setup so that the device under test (DUT) finds service on " & 
                       "a single eNodeB with cell_id = X1, PLMN id = Y1, & TAI = Z1.");
    
    f_NBIOT_CellConfig_Def (nbiot_Cell1, CONTROL_PLANE);

    f_NBIOT_SetCellPower ( nbiot_Cell1, tsc_ServingCellRS_EPRE );
    
    fl_VZ_IMSLess_TC_4_10_NBIOT_Body(p_attachReject_CauseCode);
    f_NBIOT_TestBody_Set(false);
   
    log(testcasename()," Postamble Execution started");
    f_NBIOT_ReleaseAllCells();
    f_NBIOT_PreliminaryPass(__FILE__, __LINE__, testcasename()&" PASSED");
    log(testcasename(), "Postamble Execution done");
  } 
    
   function fl_VZ_IMSLess_TC_4_10_NBIOT_Body(NAS_CauseValue_Type p_tsc_EmmCause_Code) runs on NBIOT_PTC
  {
    var NAS_MSG_Indication_Type v_NAS_Ind;       
    var ProcedureTransactionIdentifier v_PTId_UE;
    var PDN_CONNECTIVITY_REQUEST v_PDNConnReq;
    timer waitFor5min := (5.0 * 60.0);
    var charstring v_TcName := testcasename() &": ";
    var integer v_attachReject_EMMCode;
    var integer StepNo := 7;
    var integer count := 5;
    timer t_Procedure_Guard_Timer;
    timer t_timer;
    var boolean v_isTimeOut := false;
    var charstring v_mmiPopUpMsg := " ";
    var float tsc_GuardProcedureTimer_240 := 240.0;
    var template (present) B3_Type v_PDNType := (f_GetPdnType(), '101'B, '001'B);
    var template (present) NAS_UL_Message_Type v_ESMMessage := cr_CIOT_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach, v_PDNType);
   
      
    v_attachReject_EMMCode := bit2int(p_tsc_EmmCause_Code);
      
    log(v_TcName,"Step2: Configured the test equipment such that the network will respond to attach attempts with NAS Attach Reject message with EMM Cause Code ",v_attachReject_EMMCode," ");
    log("########",v_TcName,"Step3: Ensure DUT has parameter MAXEVENTCOUNTER set to default value of 5 and " &
                       "parameter MAXLOGTIME set to default value of 120. ");

    log(v_TcName,"Step4: Power on the DUT and allow it to find LTE service");    
   f_UT_SwitchOnUE(UT, true); 
    
     t_Procedure_Guard_Timer.start(tsc_GuardProcedureTimer_240); //Guard Procedure Started 
     
    log(v_TcName,"Step5: Waiting to receive Attach Request from UE.");
    v_NAS_Ind:= f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell1,
                                                  cr_EstablishmentCause_NB_Any,
                                                  cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                    cr_CIOT_ATTACH_REQUEST(cr_AdditionalUpdateType_CIOT), //Table 22.5.7a.3.3-4
                                                                                    v_ESMMessage)); 
                                                                                            
     log(v_TcName,"Step5: Verified that the DUT successfully establishes an RRC connection and sends a NAS Attach Request message.");

   log(v_TcName, " Default Procedure Guard Timer Stopped");
    t_Procedure_Guard_Timer.stop; //Guard Procedure Ended
      
     v_PDNConnReq := v_NAS_Ind.Pdu.PiggybackedPduList[0].Msg.pDN_CONNECTIVITY_REQUEST;  
     v_PTId_UE := v_PDNConnReq.procedureTransactionIdentifier;
    
     log(v_TcName,"Step6: Sending Attach Reject to UE ");   
      
     SRB.send (cas_NB_SRB_NasPdu_REQ (nbiot_Cell1,
                                     tsc_SRB1bis,
                                     cs_TimingInfo_Now,
                                     cs_NAS_Request(tsc_SHT_NoSecurityProtection,
                                                                    cs_508_AttachReject(cs_EMM_Cause_v(p_tsc_EmmCause_Code))))); 
      
      
     log(v_TcName,"Step6: Sent Attach Reject message with EMM Cause Code set to ",v_attachReject_EMMCode," ");
       
     while(count != 0){
        f_NBIOT_RRC_ConnectionRelease( nbiot_Cell1 ); 
        log(v_TcName, "Step",StepNo,": Power Cycle the DUT");
        fl_UT_ApplyCommand(UT, cas_UT_Req(POWER_CYCLE, NO_CNF_REQUIRED));
         
         t_Procedure_Guard_Timer.start(tsc_GuardProcedureTimer_240); //Guard Procedure Started
     
        log(v_TcName,"Step",StepNo+1,": Waiting to receive Attach Request from UE.");
        v_NAS_Ind:= f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell1,
                                                  cr_EstablishmentCause_NB_Any,
                                                  cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                    cr_CIOT_ATTACH_REQUEST(cr_AdditionalUpdateType_CIOT), //Table 22.5.7a.3.3-4
                                                                                    v_ESMMessage)); 
        log(v_TcName,"Step",StepNo+1,"Verified that the DUT successfully establishes an RRC connection and sends a NAS Attach Request message.");

        log(v_TcName, " Default Procedure Guard Timer Stopped");
        t_Procedure_Guard_Timer.stop; //Guard Procedure Ended
      
        v_PDNConnReq := v_NAS_Ind.Pdu.PiggybackedPduList[0].Msg.pDN_CONNECTIVITY_REQUEST;  
        v_PTId_UE := v_PDNConnReq.procedureTransactionIdentifier;
    
        log(v_TcName,"Step",StepNo+2,": Sending Attach Reject to UE ");   
          SRB.send (cas_NB_SRB_NasPdu_REQ (nbiot_Cell1,
                                     tsc_SRB1bis,
                                     cs_TimingInfo_Now,
                                     cs_NAS_Request(tsc_SHT_NoSecurityProtection,
                                                                    cs_508_AttachReject(cs_EMM_Cause_v(p_tsc_EmmCause_Code))))); 
  
        log(v_TcName,"Step",StepNo+2,": Sent Attach Reject message with EMM Cause Code set to ",v_attachReject_EMMCode," ");
        StepNo := StepNo+3;
        count := count-1;
    }     
    f_NBIOT_RRC_ConnectionRelease( nbiot_Cell1 );  
    log(v_TcName,"Step22: Power Cycle the DUT");
     fl_UT_ApplyCommand(UT, cas_UT_Req(POWER_CYCLE, NO_CNF_REQUIRED));
    log(v_TcName,"Step23: Started timer for 5 mintues to verify that DUT dos not attempt to connect to the LTE Network");
    waitFor5min.start;
    alt{
         []SRB.receive(car_NB_SRB0_RrcPdu_IND(nbiot_Cell1, cr_RRCConnectionRequest_NB ( cr_EstablishmentCause_NB_Any, ? ) ))
       {
          waitFor5min.stop;
          log(v_TcName,"Step23:  UE sent unexpected Attach Request before expiry of 5 minutes timer");
          f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, v_TcName&" UE sent unexpected Attach Request before expiry of 5 minutes timer");
       }    
       []waitFor5min.timeout
       {
          log(v_TcName,"Step23: Successfuly verified that DUT did not send Attach Request for 5 minutes");
       }
    }
   /* log(v_TcName,"Step24: Power Off  the DUT");
    f_UT_SwitchOffUE (UT, false);
      
    f_Delay(10.0);*/
    v_mmiPopUpMsg := "Power Off  the DUT, Remove the SIM/UICC(B01) in the DUT and insert valid UICC (B30).{Replacing UICC will have IMSI-311480000004601} ";
    log(v_TcName, "Step25: ", v_mmiPopUpMsg);
       
   /* t_timer.start(240.0); // Checking if UE is trrigering automatic attach.
    alt
    {        
      []SRB.check(receive(car_SRB0_RrcPdu_IND(eutra_Cell1, cr_RRCConnectionRequest(cr_EstablishmentCause_Any))))        
      {
        t_timer.stop;
        log(v_TcName, "Step26: UE is already power ON and UE triggered attach request");
      }
      []t_timer.timeout
      {
        log("Step26: Powering on (Power Cycle) the DUT after SIM/UICC changes.");
        f_UT_TriggerPowerCycle(UT);  
        log(v_TcName,"Step27: Waiting for Attached request from UE after power on.");
      }
    }     */
    log("########",v_TcName,"Step26: Power ON the DUT after SIM replacement");  
    t_Procedure_Guard_Timer.start(tsc_GuardProcedureTimer_240); //Guard Procedure Started
   
    v_NAS_Ind := f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell1,
                                               cr_EstablishmentCause_NB_Any,
                                               cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                  cr_CIOT_ATTACH_REQUEST(cr_AdditionalUpdateType_CIOT),
                                                                                  v_ESMMessage)); 
      
     f_NBIOT_InitialRegistration_Step5_14(nbiot_Cell1, CONTROL_PLANE, STATE2_NB_CONNECTED_UPDATED, v_NAS_Ind);
   
    log(v_TcName, "Default Procedure Guard Timer Stopped");
    t_Procedure_Guard_Timer.stop; //Guard Procedure Ended

    log(v_TcName,"Step27: UE Attached Successfully");
    log(v_TcName,"Step28: Power off the DUT");
    f_UT_SwitchOffUE (UT, false);
  }  
    
    
    function f_VZ_IMSLess_TC_4_11_NBIOT_Tests(NAS_CauseValue_Type p_attachReject_CauseCode, charstring TestPlan_Name) runs on NBIOT_PTC
  {
    var integer v_EMM_CauseCode := bit2int(p_attachReject_CauseCode);

    log(testcasename()," PERMANENT EMM FAILURES ACROSS POWER CYCLE WITH DETACH REQUEST. EMM Cause Code ", v_EMM_CauseCode," ");
    log("########",testcasename(),"This test case requires one Additional SIM/UICC which need to be replaced with old SIM in middle of test Execution." );
    f_NBIOT_Init (c1);  
    log(testcasename(),"Step1: Configure the test setup so that the device under test (DUT) finds service on " & 
                       "a single eNodeB with cell_id = X1, PLMN id = Y1, & TAI = Z1.");
    
    f_NBIOT_CellConfig_Def (nbiot_Cell1, CONTROL_PLANE);

    f_NBIOT_SetCellPower ( nbiot_Cell1, tsc_ServingCellRS_EPRE );
    
    fl_VZ_IMSLess_TC_4_11_NBIOT_Body(p_attachReject_CauseCode);
    f_NBIOT_TestBody_Set(false);
   
    log(testcasename()," Postamble Execution started");
    f_NBIOT_ReleaseAllCells();
    f_NBIOT_PreliminaryPass(__FILE__, __LINE__, testcasename()&" PASSED");
    log(testcasename(), "Postamble Execution done");
  }
    
     function fl_VZ_IMSLess_TC_4_11_NBIOT_Body(NAS_CauseValue_Type p_tsc_EmmCause_Code) runs on NBIOT_PTC
  {
    var NAS_MSG_Indication_Type v_NAS_Ind;       
    var ProcedureTransactionIdentifier v_PTId_UE;
    var PDN_CONNECTIVITY_REQUEST v_PDNConnReq;
    timer waitFor5min := (5.0 * 60.0);
    var charstring v_TcName := testcasename() &": ";
    var integer v_attachReject_EMMCode;
    var integer StepNo := 7;
    var integer count := 5;
    timer t_Procedure_Guard_Timer;
    timer t_timer;
    var boolean v_isTimeOut := false;
    var charstring v_mmiPopUpMsg := " ";
    var float tsc_GuardProcedureTimer_240 := 240.0;
    var template (present) B3_Type v_PDNType := (f_GetPdnType(), '101'B, '001'B);
    var template (present) NAS_UL_Message_Type v_ESMMessage := cr_CIOT_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach, v_PDNType);
   
      
    v_attachReject_EMMCode := bit2int(p_tsc_EmmCause_Code);
      
    log(v_TcName,"Step2: Configured the test equipment such that the network will respond to attach attempts with NAS Attach Reject message with EMM Cause Code ",v_attachReject_EMMCode," ");
    log("########",v_TcName,"Step3: Ensure DUT has parameter MAXEVENTCOUNTER set to default value of 5 and " &
                       "parameter MAXLOGTIME set to default value of 120. ");

    log(v_TcName,"Step4: Power on the DUT and allow it to find LTE service");    
   f_UT_SwitchOnUE(UT, true); 
    
     t_Procedure_Guard_Timer.start(tsc_GuardProcedureTimer_240); //Guard Procedure Started 
     
    log(v_TcName,"Step5: Waiting to receive Attach Request from UE.");
    v_NAS_Ind:= f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell1,
                                                  cr_EstablishmentCause_NB_Any,
                                                  cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                    cr_CIOT_ATTACH_REQUEST(cr_AdditionalUpdateType_CIOT), //Table 22.5.7a.3.3-4
                                                                                    v_ESMMessage)); 
       f_NBIOT_InitialRegistration_Step5_14(nbiot_Cell1, CONTROL_PLANE, STATE2_NB_CONNECTED_UPDATED, v_NAS_Ind);
                                                                                          
     log(v_TcName,"Step5: Verified that the DUT successfully establishes an RRC connection and sends a NAS Attach Request message.");

   log(v_TcName, " Default Procedure Guard Timer Stopped");
    t_Procedure_Guard_Timer.stop; //Guard Procedure Ended
      
     v_PDNConnReq := v_NAS_Ind.Pdu.PiggybackedPduList[0].Msg.pDN_CONNECTIVITY_REQUEST;  
     v_PTId_UE := v_PDNConnReq.procedureTransactionIdentifier;
    
       SRB.send(cas_NB_SRB1bis_NasPdu_REQ(nbiot_Cell1,
                                       cs_TimingInfo_Now,
                                       cs_NAS_Request(tsc_SHT_IntegrityProtected_Ciphered,
                                                      cs_508_DETACH_REQUEST_MT(cs_DetachType(tsc_DetachMT_NoReAttach), cs_EMM_Cause_tv(p_tsc_EmmCause_Code))))); // @sic R5s170770 sic@
   
      
    
    log(v_TcName,"Step6: Expecting Detach Accept from the UE");
   
    //Check: Does the UE send DETACH ACCEPT message?
    SRB.receive(car_NB_SRB1bis_NasPdu_IND(nbiot_Cell1,
                                          cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered,
                                                            cr_508_DETACH_ACCEPT)));
   
      
      
     log(v_TcName,"Step7: Sent Attach Reject message with EMM Cause Code set to ",v_attachReject_EMMCode," ");
       
     while(count != 0){
        f_NBIOT_RRC_ConnectionRelease( nbiot_Cell1 ); 
        log(v_TcName, "Step",StepNo,": Power Cycle the DUT");
        fl_UT_ApplyCommand(UT, cas_UT_Req(POWER_CYCLE, NO_CNF_REQUIRED));
         
         t_Procedure_Guard_Timer.start(tsc_GuardProcedureTimer_240); //Guard Procedure Started
     
        log(v_TcName,"Step",StepNo+1,": Waiting to receive Attach Request from UE.");
        v_NAS_Ind:= f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell1,
                                                  cr_EstablishmentCause_NB_Any,
                                                  cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                    cr_CIOT_ATTACH_REQUEST(cr_AdditionalUpdateType_CIOT), //Table 22.5.7a.3.3-4
                                                                                    v_ESMMessage)); 
        log(v_TcName,"Step",StepNo+1,"Verified that the DUT successfully establishes an RRC connection and sends a NAS Attach Request message.");

        log(v_TcName, " Default Procedure Guard Timer Stopped");
        t_Procedure_Guard_Timer.stop; //Guard Procedure Ended
      
        v_PDNConnReq := v_NAS_Ind.Pdu.PiggybackedPduList[0].Msg.pDN_CONNECTIVITY_REQUEST;  
        v_PTId_UE := v_PDNConnReq.procedureTransactionIdentifier;
    
        log(v_TcName,"Step",StepNo+2,": Sending Attach Reject to UE ");   
          SRB.send (cas_NB_SRB_NasPdu_REQ (nbiot_Cell1,
                                     tsc_SRB1bis,
                                     cs_TimingInfo_Now,
                                     cs_NAS_Request(tsc_SHT_NoSecurityProtection,
                                                                    cs_508_AttachReject(cs_EMM_Cause_v(p_tsc_EmmCause_Code))))); 
  
        log(v_TcName,"Step",StepNo+2,": Sent Attach Reject message with EMM Cause Code set to ",v_attachReject_EMMCode," ");
        StepNo := StepNo+3;
        count := count-1;
    }     
    f_NBIOT_RRC_ConnectionRelease( nbiot_Cell1 ); 
    f_Delay(0.5);
    log(v_TcName,"Step22: Power Cycle the DUT");
     fl_UT_ApplyCommand(UT, cas_UT_Req(POWER_CYCLE, NO_CNF_REQUIRED));
    log(v_TcName,"Step23: Started timer for 5 mintues to verify that DUT dos not attempt to connect to the LTE Network");
    waitFor5min.start;
    alt{
         []SRB.receive(car_NB_SRB0_RrcPdu_IND(nbiot_Cell1, cr_RRCConnectionRequest_NB ( cr_EstablishmentCause_NB_Any, ? ) ))
       {
          waitFor5min.stop;
          log(v_TcName,"Step23:  UE sent unexpected Attach Request before expiry of 5 minutes timer");
          f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, v_TcName&" UE sent unexpected Attach Request before expiry of 5 minutes timer");
       }    
       []waitFor5min.timeout
       {
          log(v_TcName,"Step23: Successfuly verified that DUT did not send Attach Request for 5 minutes");
       }
    }
   /* log(v_TcName,"Step24: Power Off  the DUT");
    f_UT_SwitchOffUE (UT, false);
      
    f_Delay(10.0);*/
    v_mmiPopUpMsg := "Power Off  the DUT, Remove the SIM/UICC(B01) in the DUT and insert valid UICC (B30).{Replacing UICC will have IMSI-311480000004601} ";
    log(v_TcName, "Step25: ", v_mmiPopUpMsg);
       
   /* t_timer.start(240.0); // Checking if UE is trrigering automatic attach.
    alt
    {        
      []SRB.check(receive(car_SRB0_RrcPdu_IND(eutra_Cell1, cr_RRCConnectionRequest(cr_EstablishmentCause_Any))))        
      {
        t_timer.stop;
        log(v_TcName, "Step26: UE is already power ON and UE triggered attach request");
      }
      []t_timer.timeout
      {
        log("Step26: Powering on (Power Cycle) the DUT after SIM/UICC changes.");
        f_UT_TriggerPowerCycle(UT);  
        log(v_TcName,"Step27: Waiting for Attached request from UE after power on.");
      }
    }     */
    log("########",v_TcName,"Step26: Power ON the DUT after SIM replacement");  
    t_Procedure_Guard_Timer.start(tsc_GuardProcedureTimer_240); //Guard Procedure Started
   
    v_NAS_Ind := f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell1,
                                               cr_EstablishmentCause_NB_Any,
                                               cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                  cr_CIOT_ATTACH_REQUEST(cr_AdditionalUpdateType_CIOT),
                                                                                  v_ESMMessage)); 
      
     f_NBIOT_InitialRegistration_Step5_14(nbiot_Cell1, CONTROL_PLANE, STATE2_NB_CONNECTED_UPDATED, v_NAS_Ind);
   
    log(v_TcName, "Default Procedure Guard Timer Stopped");
    t_Procedure_Guard_Timer.stop; //Guard Procedure Ended

    log(v_TcName,"Step27: UE Attached Successfully");
    log(v_TcName,"Step28: Power off the DUT");
    f_UT_SwitchOffUE (UT, false);
  }  
    
    
    
     function f_TC_VZ_DATARETRYIMSLESS_4_12_NBIOT(charstring TestPlan_Name) runs on NBIOT_PTC
 {
    var charstring v_TcName := testcasename() & ": ";
    
    log (v_TcName, "UE WITH T3245 TIMER RECEIVES ATTACH REJECT MESSAGE FROM THE NETWORK CODE 14");  

    fl_VZ_DATARETRYIMSLESS_4_12_NBIOT_Body(tsc_Cause_EPSServNotAllowedInThisPLMN, TestPlan_Name);
    f_NBIOT_TestBody_Set(false);

    f_NBIOT_PreliminaryPass(__FILE__, __LINE__, v_TcName &"PASSED");
 
 }
    function fl_VZ_DATARETRYIMSLESS_4_12_NBIOT_Body(NAS_CauseValue_Type rejectCause, charstring TestPlan_Name) runs on NBIOT_PTC
  {
    var template (omit) AccessStratumRelease v_Rel := omit;
    var charstring v_TcName := testcasename() & ": ";
    var EUTRA_ASN1_RRC_TransactionIdentifier_Type v_RRC_TI := tsc_RRC_TI_Def;
    var NAS_MSG_Indication_Type v_NasInd;
    var charstring v_UpperCasePattern_apn;
    var charstring v_exapn;
    var charstring v_Step;
    var charstring v_Int_apnUpper;
//    var APNandPCOs_Type v_ReceivedApn;
    var boolean isIMSReg := true;
    var B3_Type v_PDNType;   /* IPv4, IPv6 or IPv4v6 */
    timer t_T3245;
    timer t_WaitTime;
    var float v_Timer1 := (1425.0 * 60.0); //23 Hour 45 Minutes
    var float v_Timer2 := (705.0 * 60.0); //11 Hour 45 Minutes
    var float v_WaitTime := 60.0;
    var float v_T3245 := (15.0 * 60.0); //15 Minutes
    var float v_current;
    var float v_Remaining;
    timer t_Procedure_Guard_Timer;
    var template (present) B3_Type v_PDNType2 := (f_GetPdnType(), '101'B, '001'B);
    var template (present) NAS_UL_Message_Type v_ESMMessage := cr_CIOT_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach, v_PDNType2);
    var float tsc_GuardProcedureTimer_240 := 240.0;

    log(v_TcName, "######## Prerequisite: This testcase requires special SIM and USIM has to be configured for Timer T3245 Behaviour parameter " &
                  "in the EFNASConfig file as enabled.");

    f_NBIOT_Init (c1);
    log(v_TcName, "Step1: Configure the test setup so that the DUT finds service on a single eNodeB with cell_id X1 = 1, PLMN id Y4 = ", 
                   f_ConvertPLMNtoString(f_Asn2Nas_PlmnId(valueof(cs_HPLMN_311_481))) & ", and TAI Z1 = ", oct2int(tsc_TAC1));
    f_NBIOT_CellInfo_SetPLMN_1Entry (nbiot_Cell1, Y4 );

    f_NBIOT_CellConfig_Def(nbiot_Cell1, CONTROL_PLANE);
     f_NBIOT_SetCellPower(nbiot_Cell1, tsc_ServingCellRS_EPRE);
    log(v_TcName, "Step1: Cell Configuration Successful");

    log(v_TcName, "Step2: Configure the test equipment such that the network will respond to attach attempts by sending a NAS Attach Reject message " &
                  "with an EMM Cause Code equal to ", bit2int(rejectCause));

    log(v_TcName, "Step3: Configure the USIM on the DUT such that the Timer T3245 Behaviour parameter in the EFNASConfig file is enabled.");

    log(v_TcName, "Step4: Power the DUT on and allow it to find LTE service.");
    f_UT_SwitchOnUE(UT, true);

    t_Procedure_Guard_Timer.start(tsc_GuardProcedureTimer_240); //Guard Procedure Started
  
    log(v_TcName, "Step5: Verify that the DUT successfully establishes an RRC connection and sends a NAS Attach Request message " &
                  "and requests a connection to the Internet PDN using PDN Type IPv4.");
    v_NasInd := f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell1,
                                               cr_EstablishmentCause_NB_Any,
                                               cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                  cr_CIOT_ATTACH_REQUEST(cr_AdditionalUpdateType_CIOT),
                                                                                  v_ESMMessage));

    log(v_TcName, "Default Procedure Guard Timer Stopped");
    t_Procedure_Guard_Timer.stop; //Guard Procedure Ended

    v_PDNType := v_NasInd.Pdu.PiggybackedPduList[0].Msg.pDN_CONNECTIVITY_REQUEST.pdnType.typeValue;
    if(match(v_PDNType,tsc_PdnType_IPv4) or match(v_PDNType,tsc_PdnType_IPv4v6))
    {
       log(v_TcName, "Received APN VZWINTERNET with PdnType IPV4");
    }    
    else
    {
       log("Received PdnType: ",v_PDNType);
       f_NBIOT_SetVerdictFailOrInconc(__FILE__,__LINE__, v_TcName & "Invalid PdnType Received for VZWINTERNET");
    }
    log(v_TcName, "Step5: UE Sent Attach Request to SS.");

    log(v_TcName, "Step6: Verify that the network responds with a NAS Attach Reject message in which the EMM Cause Code is set to a value of ", bit2int(rejectCause));
     SRB.send(cas_NB_SRB1bis_NasPdu_REQ(nbiot_Cell1,
                                       cs_TimingInfo_Now,
                                       cs_NAS_Request(tsc_SHT_NoSecurityProtection,
                                                     cs_508_AttachReject ( cs_EMM_Cause_v(rejectCause)))));
        
    log(v_TcName, "Step6: Sent Attach Reject message with EMM Cause Code set to ", bit2int(rejectCause));

    //f_EUTRA_RRC_ConnectionRelease_Local (eutra_Cell1,f_EUTRA_GetNextSendOccasion(eutra_Cell1));
    f_NBIOT_RRC_ConnectionRelease(nbiot_Cell1);

    log(v_TcName, "Step7: Set a timer for 15 minutes and execute the following steps 8 through 22 within the 15 minutes.");
    t_T3245.start(v_T3245);
    log(v_TcName, "Step8: Verify that the DUT does not attempt to attach to the LTE network after receiving the NAS Attach Reject message.");

    f_NBIOT_CheckNoAttachOn1Cell(nbiot_Cell1, v_WaitTime, "Step8");
    log(v_TcName, "Step8: Successfully verified that the DUT does not attempt to attach to the LTE network for ",float2int(v_WaitTime), " seconds");

    log(v_TcName, "Step9: Attempt to initiate a connection to the Admin PDN from the DUT.");
    fl_UT_ApplyCommand(UT, cas_UT_Req(INITIATE_ADMIN_TEST_APP, NO_CNF_REQUIRED));

    log(v_TcName, "Step10: Verify that the DUT does not attempt to connect to the LTE network.");
    f_NBIOT_CheckNoAttachOn1Cell(nbiot_Cell1, v_WaitTime, "Step10");
    log(v_TcName, "Step10: Successfully Verified Step10 for ", float2int(v_WaitTime)," sec");

    log(v_TcName, "Step11: Reconfiguring the test setup for the DUT to find service on a different eNodeB with Cell Id = X2 with a PLMN id Y3 = " &
                  f_ConvertPLMNtoString(f_Asn2Nas_PlmnId(valueof(cs_RPLMN_311_478))));
    f_NBIOT_SetCellPower(nbiot_Cell1, tsc_NonSuitableOffCellRS_EPRE);
    f_NBIOT_ReleaseAllCells();
    
    f_NBIOT_CellInfo_SetCellId(nbiot_Cell1, nbiot_Cell2);
   
    f_NBIOT_CellConfig_Def( nbiot_Cell1, CONTROL_PLANE);
    f_NBIOT_SetCellPower(nbiot_Cell1, tsc_ServingCellRS_EPRE);
    log(v_TcName, "Step11: Cell Reconfiguration Successful");

    log(v_TcName, "Step12: Verify that the DUT does not attempt to attach to the LTE network on the new eNodeB.");
    f_NBIOT_CheckNoAttachOn1Cell(nbiot_Cell1, v_WaitTime, "Step12");
    log(v_TcName, "Step12: Successfully Verified Step12 for ", float2int(v_WaitTime)," sec");

    log(v_TcName, "Step13: Attempt to initiate a connection to the Admin PDN from the DUT.");
    fl_UT_ApplyCommand(UT, cas_UT_Req(INITIATE_ADMIN_TEST_APP, NO_CNF_REQUIRED));

    log(v_TcName, "Step14: Verify that the DUT does not attempt to connect to the LTE network.");
    f_NBIOT_CheckNoAttachOn1Cell(nbiot_Cell1, v_WaitTime, "Step14");
    log(v_TcName, "Step14: Successfully Verified Step14 for ", float2int(v_WaitTime)," sec");

    log(v_TcName, "Step15: Reconfiguring the test setup for the DUT to find service on a different Tracking Area with TAI = Z2");
    f_NBIOT_ReleaseAllCells();
    f_NBIOT_CellInfo_SetTAC(nbiot_Cell1, oct2bit(tsc_TAC2));
     
    f_NBIOT_CellConfig_Def(nbiot_Cell1, CONTROL_PLANE);
    f_NBIOT_SetCellPower(nbiot_Cell1, tsc_ServingCellRS_EPRE);
      
    log(v_TcName, "Step15: Cell Reconfiguration Successful");

    log(v_TcName, "Step16: Verify that the DUT does not attempt to attach to the LTE network on the new Tracking Area.");
    f_NBIOT_CheckNoAttachOn1Cell(nbiot_Cell1, v_WaitTime, "Step16");
    log(v_TcName, "Step16: Successfully Verified Step16 for ", float2int(v_WaitTime)," sec");

    log(v_TcName, "Step17: Attempt to initiate a connection to the Admin PDN from the DUT.");
    fl_UT_ApplyCommand(UT, cas_UT_Req(INITIATE_ADMIN_TEST_APP, NO_CNF_REQUIRED));

    log(v_TcName, "Step18: Verify that the DUT does not attempt to connect to the LTE network.");
    f_NBIOT_CheckNoAttachOn1Cell(nbiot_Cell1, v_WaitTime, "Step18");
    log(v_TcName, "Step18: Successfully Verified Step18 for ", float2int(v_WaitTime)," sec");

    log(v_TcName, "Step19: Reconfiguring the test setup for the DUT to find service on a different PLMN with PLMN Id Y1 = " &
                  f_ConvertPLMNtoString(f_Asn2Nas_PlmnId(valueof(cs_HPLMN_311_480))));
    f_NBIOT_ReleaseAllCells();
    
    f_NBIOT_CellInfo_SetPLMN_1Entry (nbiot_Cell1, Y1 );
    f_NBIOT_CellConfig_Def(nbiot_Cell1, CONTROL_PLANE);
    f_Delay(2.0);
    f_NBIOT_SetCellPower ( nbiot_Cell1, tsc_ServingCellRS_EPRE );
    log(v_TcName, "Step19: Cell Reconfiguration Successful");

    log(v_TcName, "Step20: Verify that the DUT now attempts to attach to the LTE network and is successful.");
     v_NasInd := f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell1,
                                               cr_EstablishmentCause_NB_Any,
                                               cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                  cr_CIOT_ATTACH_REQUEST(cr_AdditionalUpdateType_CIOT),
                                                                                  v_ESMMessage));
     v_PDNType := v_NasInd.Pdu.PiggybackedPduList[0].Msg.pDN_CONNECTIVITY_REQUEST.pdnType.typeValue;
  
    if(match(v_PDNType,tsc_PdnType_IPv4))
    {
       log(v_TcName, "Received APN VZWINTERNET with PdnType IPV4");
    }    
    else
    {
       log("Received PdnType: ",v_PDNType);
       f_NBIOT_SetVerdictFailOrInconc(__FILE__,__LINE__, v_TcName & "Invalid PdnType Received for VZWINTERNET");
    }
      
    f_NBIOT_InitialRegistration_Step5_14(nbiot_Cell1, CONTROL_PLANE, STATE2_NB_CONNECTED_UPDATED, v_NasInd);   
    log(v_TcName, "Step21: Verify that the DUT connects to the Internet PDN using PDN Type IPv4.");

   /* v_UpperCasePattern_apn := f_StringToUpper(oct2char(v_ReceivedApn.accessPointName.nameValue));
    v_exapn := substr(v_UpperCasePattern_apn,1,lengthof(v_UpperCasePattern_apn)-1); //trimming 1st character from apn name.    
    v_Int_apnUpper := f_StringToUpper(px_INTERNET_APN);

    if(v_Int_apnUpper == v_exapn)
    {
       log(v_TcName, "Step21: DUT connected to the Internet PDN with PdnType IPV4");
    }
    else
    {
       log(v_TcName, "Step21: Received attach with an unexpected APN := ", v_exapn);
       f_EUTRA_SetVerdictFailOrInconc(__FILE__, __LINE__, v_TcName & " Step21: DUT triggered attach with an unexpected APN");  
    }*/

    log(v_TcName, "Step22: Reconfigure the test setup so that the DUT again finds service on the original PLMN with PLMN Id Y3 = " &
                  f_ConvertPLMNtoString(f_Asn2Nas_PlmnId(valueof(cs_RPLMN_311_478))));

    f_NBIOT_ReleaseAllCells();
    f_NBIOT_CellInfo_SetPLMN_Common(nbiot_Cell1, {cs_HPLMN_311_481}, -, false);
    f_NBIOT_CellConfig_Def(nbiot_Cell1, CONTROL_PLANE);
    f_NBIOT_SetCellPower(nbiot_Cell1, tsc_ServingCellRS_EPRE );
    log(v_TcName, "Step22: Cell Reconfiguration Successful");

    log(v_TcName, "Step23: Verify that the DUT does not attempt to attach on PLMN Y3 for the remaining duration of the 15 minute timer.");
    v_current := t_T3245.read;
    v_Remaining := v_T3245 - v_current;   
    log(v_TcName, "Timer T3245 with remaining value : ",float2int(v_Remaining)," Sec.");

    alt
    {
       [] SRB.receive(car_NB_SRB0_RrcPdu_IND(nbiot_Cell1, cr_RRCConnectionRequest_NB ( cr_EstablishmentCause_NB_Any, ? ) ))
       {
        t_T3245.stop;
        f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, v_TcName & "Step23: Received Attach Request while Timer T3245 running");
      }
      []t_T3245.timeout
      {
        f_NBIOT_PreliminaryPass(__FILE__, __LINE__,v_TcName & "Step23: PASS");
      }
    }

    
      log(v_TcName, "Step24: Not Applicable as it is not Rel 12 UE");
      log(v_TcName, "For release 13 or later UEs, perform the following steps:");
      v_Timer1 := v_Timer2;
      v_Step := "Step25";
   

    log(v_TcName, v_Step &".1: Monitor the device for ", float2int(v_Timer1/3600.0)," hour and 45 minute and verify that it does not attempt to attach " &
                          "on PLMN Y3 = " & f_ConvertPLMNtoString(f_Asn2Nas_PlmnId(valueof(cs_RPLMN_311_478))));
    t_WaitTime.start(v_Timer1);
    alt
    {
      [] SRB.receive(car_NB_SRB0_RrcPdu_IND(nbiot_Cell1, cr_RRCConnectionRequest_NB ( cr_EstablishmentCause_NB_Any, ? ) ))
      {
        t_WaitTime.stop;
        f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, v_TcName & v_Step &".1: Received Attach Request while Timer running");
      }
      []t_WaitTime.timeout
      {
        f_NBIOT_PreliminaryPass(__FILE__, __LINE__,v_TcName & v_Step &".1: PASS");
      }
    }

    f_NBIOT_ReleaseAllCells();
  
    log(v_TcName, v_Step &".2: Power the device off."); 
    f_UT_SwitchOffUE (UT, false);
    log(v_TcName, v_Step &".2: UE is Powered off");

    log(v_TcName, v_Step &".3: While the device is powered off, configure the test equipment such that the network will allow the UE to " &
                  "attach successfully on PLMN Y3 = " & f_ConvertPLMNtoString(f_Asn2Nas_PlmnId(valueof(cs_RPLMN_311_478))));
    
    f_NBIOT_CellInfo_SetPLMN_Common(nbiot_Cell1, {cs_HPLMN_311_481}, -, false);
    
    f_NBIOT_CellConfig_Def(nbiot_Cell1, CONTROL_PLANE);
     f_Delay(2.0);
      
    f_NBIOT_SetCellPower(nbiot_Cell1, tsc_ServingCellRS_EPRE );
    log(v_TcName, v_Step &".3: Cell Reconfiguration Successful");

    log(v_TcName, v_Step &".4: Power the device on and verify that the device successfully attaches to the LTE network.");
    
    f_UT_SwitchOnUE(UT, true);

    t_Procedure_Guard_Timer.start(tsc_GuardProcedureTimer_240); //Guard Procedure Started
  
     v_NasInd := f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell1,
                                               cr_EstablishmentCause_NB_Any,
                                               cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                  cr_CIOT_ATTACH_REQUEST(cr_AdditionalUpdateType_CIOT),
                                                                                  v_ESMMessage));


    f_NBIOT_InitialRegistration_Step5_14(nbiot_Cell1, CONTROL_PLANE, STATE2_NB_CONNECTED_UPDATED, v_NasInd);   
    log(v_TcName, v_Step &".4: DUT attached to LTE network");

    log(v_TcName, "Default Procedure Guard Timer Stopped");
    t_Procedure_Guard_Timer.stop; //Guard Procedure Ended

    /*v_UpperCasePattern_apn := f_StringToUpper(oct2char(v_ReceivedApn.accessPointName.nameValue));
    v_exapn := substr(v_UpperCasePattern_apn,1,lengthof(v_UpperCasePattern_apn)-1); //trimming 1st character from apn name.    
    
    if(v_Int_apnUpper == v_exapn)
    {
       log(v_TcName, v_Step &".5: DUT connected to the Internet PDN with PdnType IPV4");
    }
    else
    {
       log(v_TcName, v_Step &".5: Received attach with an unexpected APN := ", v_exapn);
       f_EUTRA_SetVerdictFailOrInconc(__FILE__, __LINE__, v_TcName& v_Step & ".5: DUT triggered attach with an unexpected APN");  
    }*/
      
       v_PDNType := v_NasInd.Pdu.PiggybackedPduList[0].Msg.pDN_CONNECTIVITY_REQUEST.pdnType.typeValue;
  
    if(match(v_PDNType,tsc_PdnType_IPv4))
    {
       log(v_TcName, "Received APN VZWINTERNET with PdnType IPV4");
    }    
    else
    {
       log("Received PdnType: ",v_PDNType);
       f_NBIOT_SetVerdictFailOrInconc(__FILE__,__LINE__, v_TcName & "Invalid PdnType Received for VZWINTERNET");
    }
     f_NBIOT_SS_ConfigRachPreambleIndMode(nbiot_Cell1, disable);
    f_NBIOT_ReleaseAllCells();
  
    log(v_TcName, v_Step &".6: Power the device off."); 
    f_UT_SwitchOffUE (UT, false);
    log(v_TcName, v_Step &".6: UE is Powered off");

  }
    
    function f_TC_VZ_DATARETRYIMSLESS_4_13_NBIOT(charstring TestPlan_Name) runs on NBIOT_PTC
 {
     var charstring v_TcName := testcasename() & ": ";

    log (v_TcName, "<<<<<<<<<< Test Execution Started >>>>>>>>>>");  
    log (v_TcName, "UE WITH T3245 TIMER RECEIVES ATTACH REJECT MESSAGE FROM THE NETWORK CODE 8");  
   
   
    // Cell Init
    f_NBIOT_Init (c1);
    log(v_TcName, "Step1: Configure the test setup so that the device under test (DUT) finds service on a single eNodeB " & 
                  "with cell_id equal to value X1, PLMN id equal to value Y1, and TAI equal to value Z1");

    f_NBIOT_CellConfig_Def (nbiot_Cell1, CONTROL_PLANE);
    f_NBIOT_SetCellPower ( nbiot_Cell1, tsc_ServingCellRS_EPRE );
    log(v_TcName, "Step1: Cell Configuration Successful");

    log(v_TcName, "Step2: Configure the test equipment such that the network will respond to attach attempts by " & 
                  "sending a NAS Attach Reject message with an EMM Cause Code equal to 8");
    log(v_TcName, "Step3: Configure the USIM on the DUT such that the Timer T3245 Behaviour parameter in " & 
                  "the EFNASConfig file is enabled");

/*      
    // SITESH  
    // Configuring the Cell '001'B - Cell Change, '010'B - tac change, '100'B - plmn channge, '111'B - all three change
    f_vz_EUTRA_PerformCellReconfiguration(eutra_Cell1, TestPlan_Name, '001'B);
    f_vz_EUTRA_PerformCellReconfiguration(eutra_Cell1, TestPlan_Name, '010'B);
    f_vz_EUTRA_PerformCellReconfiguration(eutra_Cell1, TestPlan_Name, '100'B);
*/     
    fl_VZ_IMSLess_TC_4_13_NBIOT_Test_Body(tsc_Cause_EPSandNonEPSServNotAllowed, TestPlan_Name);
   // fl_VZ_IMSLess_TC_4_13_NBIOT_Test_Body(tsc_Cause_EPSServNotAllowedInThisPLMN, TestPlan_Name);
    
     f_NBIOT_TestBody_Set(false);
 
    f_NBIOT_PreliminaryPass(__FILE__, __LINE__, v_TcName &" PASSED");

    log(v_TcName, "Postamble Execution done");
    log (v_TcName, "<<<<<<<<<< Test Execution Finished >>>>>>>>>>");  
 
 }
    
    function fl_VZ_IMSLess_TC_4_13_NBIOT_Test_Body(NAS_CauseValue_Type p_attachReject_CauseCode,  charstring TestPlan_Name) runs on NBIOT_PTC
  {
    var EUTRA_ASN1_RRC_TransactionIdentifier_Type v_RRC_TI := tsc_RRC_TI_Def;
    var NAS_MSG_Indication_Type v_NasInd;
    var template (present) B3_Type v_PDNType := (f_GetPdnType(), '101'B, '001'B);
    var template (present) NAS_UL_Message_Type v_ESMMessage := cr_CIOT_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach, v_PDNType);
   
    timer t_T3245;
    timer t_WaitTime;
    var float v_T3245 := (15.0 * 60.0); //15 Minutes

	var float v_WaitTime := 60.0;
    var float v_current;
    var float v_Remaining;
    var charstring v_TcName := testcasename() & ": ";
    timer t_Procedure_Guard_Timer;
    var float tsc_GuardProcedureTimer_240 := 240.0;

    log(v_TcName, "Step4: Power the DUT on and allow it to find LTE service");
    f_UT_SwitchOnUE(UT, true);

    t_Procedure_Guard_Timer.start(tsc_GuardProcedureTimer_240); //Guard Procedure Started

    log(v_TcName, "Step5: Verify that the DUT successfully establishes an RRC connection and sends a " &
                  "NAS Attach Request message ");
    v_NasInd := f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell1,
                                                  cr_EstablishmentCause_NB_Any,
                                                  cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                    cr_CIOT_ATTACH_REQUEST(cr_AdditionalUpdateType_CIOT), //Table 22.5.7a.3.3-4
                                                                                    v_ESMMessage)); 
      
    log(v_TcName, "Step5: Attach Request received from UE.");

    log(v_TcName, "Default Procedure Guard Timer Stopped");
    t_Procedure_Guard_Timer.stop; //Guard Procedure Ended

    log(v_TcName, "Step6: Verify that the network responds with a NAS Attach Reject message in which " &
                  "the EMM Cause Code is set to a value of ", bit2int(p_attachReject_CauseCode));
      
     SRB.send(cas_NB_SRB1bis_NasPdu_REQ(nbiot_Cell1,
                                       cs_TimingInfo_Now,
                                       cs_NAS_Request(tsc_SHT_NoSecurityProtection, // @sic R5-174501 sic@
                                                      cs_508_AttachReject(cs_EMM_Cause_v(p_attachReject_CauseCode)))));
     f_Delay(1.0);
    log(v_TcName, "Step6: Sent Attach Reject message with EMM Cause Code set to ", bit2int(p_attachReject_CauseCode));
    t_T3245.start(v_T3245);
    f_NBIOT_RRC_ConnectionRelease(nbiot_Cell1);
    
    log(v_TcName, "Step7: Set a timer for 15 minutes and execute the following steps 8 through 22 within the 15 minutes.");

    log(v_TcName, "Step8: Verify that the DUT does not attempt to attach to the LTE network after receiving " &
                  "the NAS Attach Reject message.");
    f_NBIOT_CheckNoAttachOn1Cell(nbiot_Cell1, v_WaitTime, "Step8");
    log(v_TcName, "Step8: Successfully verified that the DUT does not attempt to attach to the LTE network for ", float2int(v_WaitTime), " seconds ");

    log(v_TcName, "Step9: Attempt to initiate a connection to the Admin PDN from the DUT");
    fl_UT_ApplyCommand(UT, cas_UT_Req(INITIATE_ADMIN_TEST_APP, NO_CNF_REQUIRED));

    log(v_TcName, "Step10: Verify that the DUT does not attempt to connect to the LTE network");
    f_NBIOT_CheckNoAttachOn1Cell(nbiot_Cell1, v_WaitTime, "Step10");
    log(v_TcName, "Step10: Successfully Verified Step10 for ", float2int(v_WaitTime)," Seconds ");

    log(v_TcName, "Step11: Reconfiguring the test setup for the DUT to find service on a different eNodeB with " & 
                  "Cell Id = X2 where X2 is not equal to X1. X1 and X2 are on the same frequency. The PLMN id is still equal to Y1 ");

    f_NBIOT_SetCellPower(nbiot_Cell1, tsc_NonSuitableOffCellRS_EPRE);
    f_NBIOT_ReleaseAllCells();
    
    f_NBIOT_CellInfo_SetCellId(nbiot_Cell1, nbiot_Cell2);
    
    f_NBIOT_CellConfig_Def( nbiot_Cell1, CONTROL_PLANE);
    f_NBIOT_SetCellPower(nbiot_Cell1, tsc_ServingCellRS_EPRE);
    log(v_TcName, "Step11: Cell Reconfiguration Successful for change of Cell Id = X2 ");

    log(v_TcName, "Step12: Verify that the DUT does not attempt to attach to the LTE network on the new eNodeB.");
    f_NBIOT_CheckNoAttachOn1Cell(nbiot_Cell1, v_WaitTime, "Step12");
    log(v_TcName, "Step12: Successfully Verified Step12 for ", float2int(v_WaitTime)," Seconds ");

    log(v_TcName, "Step13: Attempt to initiate a connection to the Admin PDN from the DUT ");
    fl_UT_ApplyCommand(UT, cas_UT_Req(INITIATE_ADMIN_TEST_APP, NO_CNF_REQUIRED));

    log(v_TcName, "Step14: Verify that the DUT does not attempt to connect to the LTE network ");
    f_NBIOT_CheckNoAttachOn1Cell(nbiot_Cell1, v_WaitTime, "Step14");
    log(v_TcName, "Step14: Successfully Verified Step14 for ", float2int(v_WaitTime)," Seconds");

    log(v_TcName, "Step15: Reconfiguring the test setup so that the DUT now finds service on a different " & 
                  "Tracking Area with TAI = Z2 where Z2 is not equal to Z1. Note that only the TAC portion of " & 
                  "the TAI will be different; the PLMN id is still equal to Y1");
    f_NBIOT_ReleaseAllCells();
    f_NBIOT_CellInfo_SetTAC(nbiot_Cell1, oct2bit(tsc_TAC2));
     
    f_NBIOT_CellConfig_Def(nbiot_Cell1, CONTROL_PLANE);
    f_NBIOT_SetCellPower(nbiot_Cell1, tsc_ServingCellRS_EPRE);
    log(v_TcName, "Step15: Cell Reconfiguration Successful for change of TAI = Z2 ");

    log(v_TcName, "Step16: Verify that the DUT does not attempt to attach to the LTE network on the new Tracking Area");
    f_NBIOT_CheckNoAttachOn1Cell(nbiot_Cell1, v_WaitTime, "Step16");
    log(v_TcName, "Step16: Successfully Verified Step16 for ", float2int(v_WaitTime)," Seconds ");

    log(v_TcName, "Step17: Attempt to initiate a connection to the Admin PDN from the DUT ");
    fl_UT_ApplyCommand(UT, cas_UT_Req(INITIATE_ADMIN_TEST_APP, NO_CNF_REQUIRED));

    log(v_TcName, "Step18: Verify that the DUT does not attempt to connect to the LTE network ");
    f_NBIOT_CheckNoAttachOn1Cell(nbiot_Cell1, v_WaitTime, "Step18");
    log(v_TcName, "Step18: Successfully Verified Step18 for ", float2int(v_WaitTime)," Seconds ");

    log(v_TcName, "Step19: Reconfiguring the test setup so that the DUT now finds service on a different PLMN id equal to PLMN Id Y4 = " &
                  f_ConvertPLMNtoString(f_Asn2Nas_PlmnId(valueof(cs_HPLMN_311_481))) & "where Y4 is not equal to Y1. " & 
                  "The frequency of the second PLMN may or may not be the same as the first. Configure the test equipment " & 
                  "such that the network will allow attachment on PLMN Y4 ");

    f_NBIOT_ReleaseAllCells();
    f_NBIOT_CellInfo_SetPLMN_1Entry (nbiot_Cell1, Y4 );
    f_NBIOT_CellConfig_Def(nbiot_Cell1, CONTROL_PLANE);
    f_NBIOT_SetCellPower ( nbiot_Cell1, tsc_ServingCellRS_EPRE );
    log(v_TcName, "Step19: Cell Reconfiguration Successful for chnage of PLMN Id equal to Y2 ");

    log(v_TcName, "Step20: Verify that the DUT does not attempt to attach to the LTE network ");
    f_NBIOT_CheckNoAttachOn1Cell(nbiot_Cell1, v_WaitTime, "Step18");
    log(v_TcName, "Step20: Successfully Verified Step20 for ", float2int(v_WaitTime)," Seconds");

    log(v_TcName, "Step21: Reconfigure the test setup so that the DUT again finds service on the original " & 
                  "PLMN (with id equal to value Y1) = " & f_ConvertPLMNtoString(f_Asn2Nas_PlmnId(valueof(Y1))));

     f_NBIOT_ReleaseAllCells();
    f_NBIOT_CellInfo_SetPLMN_1Entry (nbiot_Cell1, Y1 );
    f_NBIOT_CellConfig_Def(nbiot_Cell1, CONTROL_PLANE);
    f_NBIOT_SetCellPower ( nbiot_Cell1, tsc_ServingCellRS_EPRE );
    log(v_TcName, "Step22: Cell Reconfiguration to original PLMN Id equal to Y1 is Successful ");

    log(v_TcName, "Step22: Verify that the DUT does not attempt to attach on PLMN Y1 for the remaining duration of the 15 minute timer ");
    v_current := t_T3245.read;
    v_Remaining := v_T3245 - v_current;   
    log(v_TcName, "Timer T3245 running with remaining time value of ", float2int(v_Remaining), " Seconds ");

    alt
    {
       []SRB.receive(car_NB_SRB0_RrcPdu_IND(nbiot_Cell1, cr_RRCConnectionRequest_NB ( cr_EstablishmentCause_NB_Any, ? ) ))
     {
        t_T3245.stop;
        f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, v_TcName & "Step23: Received Attach Request while Timer T3245 running");
      }
      []t_T3245.timeout
      {
        f_NBIOT_PreliminaryPass(__FILE__, __LINE__, v_TcName & "Step22: PASS ");
      }
    }
    log(v_TcName, "Step22: Successfully Verified Step22 for remaining time of Timer T3245 with ", float2int(v_Remaining), " Seconds");

   
        f_IMSLess_TC_4_13_Step23_24(v_TcName);
    
 
  }
   
    function f_IMSLess_TC_4_13_Step23_24(charstring v_TcName) runs on NBIOT_PTC
  {
      var float v_RelTimer1;
      var float v_RelTimer2;
      var float v_UE_Mon_Timer := 15.0 * 60.0;
      timer t_UE_Mon_Timer;
      timer t_Procedure_Guard_Timer;
      var charstring v_Timer_Val1, v_Timer_Val2;
      var charstring v_Step;
      var NAS_MSG_Indication_Type v_NAS_Ind;
      var template (present) B3_Type v_PDNType := (f_GetPdnType(), '101'B, '001'B);
      var template (present) NAS_UL_Message_Type v_ESMMessage := cr_CIOT_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach, v_PDNType);
      var float tsc_GuardProcedureTimer_240 := 240.0;
    
       
     
          v_RelTimer1 := (690.0 * 60.0); //11 Hour 30 Minutes
          v_RelTimer2 := (720.0 * 60.0); //12 Hour  
          v_Timer_Val1 := "11";
          v_Timer_Val2 := "12";
          log(v_TcName, "Step 24: Executing Test Steps for UE Release 13 or Later");
          v_Step := "Step24";
     
      /* Step 23.1: While keeping the device power on, remove the device from the test equipment and 
       * turn off the test script, and keep the device power on but test script off for 23 hours and 30 minutes.
       * */
      log(v_TcName, v_Step & ".1: While keepting the device power on, remove the device from the test equipment " &
                    "and turn off the test script. and keep the device power on but test script off for " & v_Timer_Val1 & " hours and 30 minutes");

      //f_UT_SwitchOffUE(UT,false);
      
      log(v_TcName,v_Step & ".1: Started timer for " & v_Timer_Val1 & " Hours and 30 minutes");
      //f_Delay(v_RelTimer1);
      t_UE_Mon_Timer.start(v_RelTimer1);
      alt{
        []SRB.receive(car_NB_SRB0_RrcPdu_IND(nbiot_Cell1, cr_RRCConnectionRequest_NB ( cr_EstablishmentCause_NB_Any, ? ) ))
      {
          repeat;
      }[]t_UE_Mon_Timer.timeout{}
      }
      
      /* After 23 hours and 30 minutes have elapsed, 
       * reconnect the device to the test equipment and resume the test script.
       * */
      
      log(v_TcName, v_Step & ".2: After " & v_Timer_Val1 & " hours and 30 minutes have elapsed, " & 
                    "reconnect the device to the test equipment and resume the test script.");
      
      //f_UT_SwitchOnUE(UT, true);
       /* f_VZ_Ignore_Rach_Enable_Ind_Disable(nbiot_Cell1, tsc_L1Mac_PrachIgnoreMode_Disable);            //added for LCCP-2346
      fl_UT_ApplyCommand(UT, cas_UT_Req(FLIGHT_MODE_OFF, NO_CNF_REQUIRED, omit));*/
                    
      /* Step 23.3: Monitor the device for 15 minutes and verify that it does not attempt to attach on PLMN Y1.  
       * (At this point, the device shall have refrained from attaching to PLMN Y1 for 
       * 24 hours since the initial NAS Attach Reject message.)
       * */
      
      log(v_TcName, v_Step & ".3: Monitor the device for 15 minutes and verify that it does not attempt to attach on PLMN Y1. " &  
                    "(At this point, the device shall have refrained from attaching to " & 
                    "PLMN Y1 for " & v_Timer_Val2 & " hours since the initial NAS Attach Reject message.)");
      
      t_UE_Mon_Timer.start(v_UE_Mon_Timer);
      alt
      {
          []SRB.receive(car_NB_SRB0_RrcPdu_IND(nbiot_Cell1, cr_RRCConnectionRequest_NB ( cr_EstablishmentCause_NB_Any, ? ) ))
          {
              t_UE_Mon_Timer.stop;
              f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, v_TcName & v_Step & ".3: Received Attach Request while Timer running");
          }
          []t_UE_Mon_Timer.timeout
          {
              f_NBIOT_PreliminaryPass(__FILE__, __LINE__, v_TcName & v_Step & ".3: PASS");
          }
      } 
      
      /* Step 23.4: While keeping the device power on, remove the device from the test equipment and 
       * turn off the test script, and keep the device power on but test script off for an additional 24 hours.
       * */
      
      log(v_TcName, v_Step & "While keeping the device power on, remove the device from the test equipment and " & 
                    "turn off the test script, and keep the device power on but test script off for an additional " & v_Timer_Val2 & " hours.");
      
     // f_UT_SwitchOffUE(UT,false);
      
      log(v_TcName,v_Step & ".4: Started timer for " & v_Timer_Val2 & " Hours");
      //f_Delay(v_RelTimer2);
        t_UE_Mon_Timer.start(v_RelTimer2);
      alt{
        []SRB.receive(car_NB_SRB0_RrcPdu_IND(nbiot_Cell1, cr_RRCConnectionRequest_NB ( cr_EstablishmentCause_NB_Any, ? ) ))
      {
          repeat;
      }[]t_UE_Mon_Timer.timeout{}
      }
      /* Step 23.5: While the device is powered on and removed from the test equipment, 
       * configure the test equipment such that the network will allow the UE to attach successfully on PLMN Y1.
       * */
      
      log(v_TcName, v_Step & ".5: While the device is powered on and removed from the test equipment, " & 
                    "configure the test equipment such that the network will allow the UE to attach successfully on PLMN Y1.");
      
      /* Step 23.6: After 24 hours has expired, reconnect the device to the test equipment and resume the test script. 
       * Verify that the device successfully attaches to the LTE network.
       * */
      
      log(v_TcName, v_Step & ".6: After " & v_Timer_Val2 & " hours has expired, reconnect the device to the test equipment and resume the test script. " & 
                    "Verify that the device successfully attaches to the LTE network.");
      
      //f_UT_SwitchOnUE(UT, true);
      fl_UT_ApplyCommand(UT, cas_UT_Req(POWER_CYCLE, NO_CNF_REQUIRED));
      t_Procedure_Guard_Timer.start(tsc_GuardProcedureTimer_240); //Guard Procedure Started

       v_NAS_Ind :=  f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell1,
                                               cr_EstablishmentCause_NB_Any,
                                               cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                  cr_CIOT_ATTACH_REQUEST(cr_AdditionalUpdateType_CIOT),
                                                                                  v_ESMMessage));


    f_NBIOT_InitialRegistration_Step5_14(nbiot_Cell1, CONTROL_PLANE, STATE2_NB_CONNECTED_UPDATED, v_NAS_Ind);   
     log(v_TcName, v_Step & ".6: : Verified that the DUT successfully  attaches to the LTE network");

      log(v_TcName, "Default Procedure Guard Timer Stopped");
      t_Procedure_Guard_Timer.stop; //Guard Procedure Ended     
      
      f_NBIOT_SS_ConfigRachPreambleIndMode(nbiot_Cell1, disable);
    
      log(v_TcName, "Postamble Execution started");
      f_NBIOT_ReleaseAllCells();
      log(v_TcName, "Cell is released"); 
      log(v_TcName, v_Step & ".7: Power the device off."); 
      f_UT_SwitchOffUE (UT, false);
      log(v_TcName, v_Step & ".7: UE is Powered off");      
      
  }
    
   function f_VZ_TC_5_1_IMSLESS_NBIOT(charstring TestPlan_Name) runs on NBIOT_PTC
  {
    
    log(testcasename(), " : UE RECEIVES SERVICE REJECT MESSAGE FROM THE NETWORK CODE 11"); 
    
    f_NBIOT_Init (c1);
    log(testcasename(), " : Step1: Configuring the test setup for the DUT to find service on a single eNodeB with " &
                        "Cell Id X1 = 1, PLMN Id Y4 (Non Home PLMN) = ", cs_HPLMN_311_481, " & TAI Z1 = ", oct2int(tsc_TAC1));
   
    f_NBIOT_CellInfo_SetPLMN_Common(nbiot_Cell1, {cs_HPLMN_311_481}, -, false);

     
    f_NBIOT_CellConfig_Def (nbiot_Cell1, CONTROL_PLANE);
    log(testcasename(), " : Step2: Test equipement successfully configured to allow the DUT to attach and connect to PDNs");    
      
    f_NBIOT_SetCellPower ( nbiot_Cell1, tsc_ServingCellRS_EPRE );
      
   
    f1_VZ_TC_5_1_IMSLESS_NBIOT_Body( TestPlan_Name);
    f_NBIOT_TestBody_Set(false);

    //f_EUTRA_UE_Detach_SwitchOffUe_Generic(eutra_Cell1, RRC_CONNECTED, p_ForcedAttach);
    f_NBIOT_ReleaseAllCells();
    f_UT_PowerOffUE (UT);
    
    f_NBIOT_PreliminaryPass(__FILE__, __LINE__, testcasename() & " : Successfully verified the Expected Result : UE does not attempt" & 
                                                                 " any further connections within a roaming PLMN if it receives a NAS" & 
                                                                 " Service Reject message with cause code 11");
 } 

    function f1_VZ_TC_5_1_IMSLESS_NBIOT_Body(charstring TestPlan_Name) runs on NBIOT_PTC
  {
    var EUTRA_ASN1_RRC_TransactionIdentifier_Type v_RRC_TI := tsc_RRC_TI_Def;
    var NAS_MSG_Indication_Type v_NAS_Ind;
    var float v_Timer_1 := ( 5.0 * 60.0 ); // 5 minutes
    var float v_Timer_2 := 30.0; // 30 sec
    timer t_WaitTime;
    var integer v_SelectedPlmnIndex := f_NBIOT_CellInfo_GetSelectedPlmnIndex(nbiot_Cell1);
    var boolean isIMSReg := true;
    var charstring v_TcName := testcasename() & ": ";
    var charstring v_UpperCasePattern_apn;
    var charstring v_exapn;
    var charstring v_Int_apnUpper;
    var charstring v_Ims_apnUpper;
    timer t_Procedure_Guard_Timer;
    var float p_RetryInterval := 10.0;
    timer t_RetryInterval := p_RetryInterval;
    var float tsc_GuardProcedureTimer_240 := 240.0;
    var charstring v_sApn := "vzwadmin";
    var template (present) B3_Type v_PDNType := (f_GetPdnType(), '101'B, '001'B);
    var template (present) NAS_UL_Message_Type v_ESMMessage := cr_CIOT_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach, v_PDNType);
   
    
  
    /* 3. Power the DUT on and allow it to find LTE service. */    
    log(v_TcName, "Step3a: Powering ON the DUT and allowing it to find LTE service"); 
    f_UT_SwitchOnUE(UT, true);

    t_Procedure_Guard_Timer.start(tsc_GuardProcedureTimer_240); //Guard Procedure Started  //Guard Procedure Started

    v_NAS_Ind := f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell1,
                                               cr_EstablishmentCause_NB_Any,
                                               cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                  cr_CIOT_ATTACH_REQUEST(cr_AdditionalUpdateType_CIOT),
                                                                                  v_ESMMessage)); 
      
     if (not match(v_NAS_Ind.Pdu.PiggybackedPduList[0].Msg.pDN_CONNECTIVITY_REQUEST.pdnType.typeValue, tsc_PdnType_IPv4))
    {
        f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, v_TcName &"PDN Type used is not IPV4 as expected!");
    }
      
    f_NBIOT_InitialRegistration_Step5_14(nbiot_Cell1, CONTROL_PLANE, STATE2_NB_CONNECTED_UPDATED, v_NAS_Ind);
    
    log(v_TcName, "Default Procedure Guard Timer Stopped");
    t_Procedure_Guard_Timer.stop; //Guard Procedure Ended

    t_Procedure_Guard_Timer.start(tsc_GuardProcedureTimer_240); //Guard Procedure Started  //Guard Procedure Started

    if(pc_Provide_Internet_as_second_APN == false)  
    {  
              log(v_TcName, "Step4a: Initiate a connection to the Admin PDN from the DUT.");
              fl_UT_ApplyCommand(UT, cas_UT_Req(INITIATE_ADMIN_TEST_APP, NO_CNF_REQUIRED));
              log(v_TcName, "Step4b: Verify that the DUT connects to the Admin PDN");
              f_NBIOT_TriggerAdditionalPDN_Modified (nbiot_Cell1, CONTROL_PLANE, ?, cs_AccessPointName (tsc_Octet_Lower_ADMIN_APN), v_sApn);
    
    }
    else
    {
        log("Additional PDN Connectivity Request Handelled");
        
    }    
    log(v_TcName, "Default Procedure Guard Timer Stopped");
    t_Procedure_Guard_Timer.stop; //Guard Procedure Ended

    log(v_TcName, "Step5: Forcing the DUT to RRC IDLE state by transmitting RRCConnectionRelease msg");      
    f_NBIOT_RRC_ConnectionRelease(nbiot_Cell1);
    
    log(v_TcName, "Step6: Configuring the test equipment to Reject all NAS ServiceRequest msgs with EMM Cause Code 11");
    log(v_TcName, "Step7: Configuring the test application to set a retransmission timer of 10 seconds");
    fl_UT_ApplyCommand(UT, cas_UT_Req(APP_TRANSMIT_STATE_ON, NO_CNF_REQUIRED,{cs_Ut_Parameter_Common ("ACTIVATE_ADMIN_APN", "10")}));
   
    t_Procedure_Guard_Timer.start(tsc_GuardProcedureTimer_240); //Guard Procedure Started  //Guard Procedure Started

    // This pagig is approved by Vz(HP) as at+cgact=1,2 was not working and commands to enable Data in most of the module is un-known  
    //log(v_TcName, "Starting Optional Paging & Handling of RRC Conn Req procedure");
    //f_EUTRA_OptionalPaging_RRCConn();
    log(v_TcName, "Waiting for rrcconnectionReq from the device");
    f_NBIOT_RRC_ConnectionRequest_Def(nbiot_Cell1); 
    f_NBIOT_Modified_RRC_ConnectionSetup_Def(nbiot_Cell1);
    
    v_NAS_Ind :=  f_NBIOT_RRCConnectionSetupComplete_Def(nbiot_Cell1,
                                                           cr_508_RRCConnectionSetupComplete_NB(tsc_RRC_TI_Def, ?),
                                                            ?);  
    log(v_TcName, "Step8a: Received NAS Service Request msg from DUT");
    
    log(v_TcName, "Default Procedure Guard Timer Stopped");
    t_Procedure_Guard_Timer.stop; //Guard Procedure Ended
  
    //The SS transmits a SERVICE REJECT message with the EMM cause set to #11
    log(v_TcName, "Step8b : Sending Service Reject with EMM Cause 11 'PLMN Not Allowed'");
   
      
    SRB.send (cas_NB_SRB_NasPdu_REQ (nbiot_Cell1,
                                     tsc_SRB1bis,
                                     cs_TimingInfo_Now,
                                     cs_NAS_Request(tsc_SHT_NoSecurityProtection,
                                                cs_508_SERVICE_REJECT(tsc_Cause_PLMN_NotAllowed))));

    f_Delay(0.2);
    t_WaitTime.start(f_NBIOT_SetTimerToleranceMin ( nonProtocolTimer, v_Timer_1));
    log(v_TcName, "Timer started for ",float2int(v_Timer_1), " sec");
    
    f_NBIOT_RRC_ConnectionRelease(nbiot_Cell1);
    log(v_TcName, "Step9: Monitoring the DUT for 5 minutes to verify that it does not attempt to attach to the LTE network");  
    
    alt {
       [] SRB.receive(car_NB_SRB0_RrcPdu_IND(nbiot_Cell1, cr_RRCConnectionRequest_NB ( cr_EstablishmentCause_NB_Any, ? ) ))
   {
        t_WaitTime.stop;
        log(v_TcName, "Step9: ",float2int(v_Timer_1), " sec timer stopped");
        f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, v_TcName & "Step9: DUT triggered unexpected AttachReq.");
      }
      []t_WaitTime.timeout
      {
            log(v_TcName, "Step9: ",float2int(v_Timer_1), " sec timer expired. Verified that the DUT does not attempt to connect to the LTE network");
      }
    }
      
    f_NBIOT_SetCellPower ( nbiot_Cell1, tsc_NonSuitableOffCellRS_EPRE );
    /*  11. Reconfigure the test setup so that the DUT now finds service on a different eNodeB with cell_id 
     *  equal to value X2 where X2 is not equal to X1. X1 and X2 are on the same frequency. 
     *  The PLMN id is still equal to Y1. 
     */   
    log(v_TcName, "Step10: Reconfiguring the test setup for the DUT to find service on a different Cell-ID X2");
 
    f_NBIOT_ReleaseAllCells();
    f_NBIOT_CellInfo_SetCellId(nbiot_Cell1, nbiot_Cell2);
    f_NBIOT_CellConfig_Def( nbiot_Cell1, CONTROL_PLANE);
    f_NBIOT_SetCellPower ( nbiot_Cell1, tsc_ServingCellRS_EPRE );
    
    log(v_TcName, " Step10: Test setup successfully reconfigured with Cell-Id X2");
    
    /*  12. Verify that the DUT does not attempt to attach to the LTE network on the new eNodeB. */
    t_WaitTime.start(f_NBIOT_SetTimerToleranceMin (  nonProtocolTimer, v_Timer_2));
    log(v_TcName, " Step11: Monitoring the DUT for ",float2int(v_Timer_2)," sec to verify that it does not attempt to attach to the LTE network on the new cell Id");
      
    
    alt {
        [] SRB.receive(car_NB_SRB0_RrcPdu_IND(nbiot_Cell1, cr_RRCConnectionRequest_NB ( cr_EstablishmentCause_NB_Any, ? ) ))
       {
        t_WaitTime.stop;
        log(v_TcName, "Step11: ",v_Timer_2," sec timer stopped");
        f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, v_TcName & "Step11: DUT Triggers unexpected AttachReq.");
      }
      []t_WaitTime.timeout
      {
           log(v_TcName, "Step11: ",float2int(v_Timer_2)," sec timer expired. Verified that the DUT does not attempt to connect to the LTE network on the new cell id");
      }
   }
    log(v_TcName, "Step12: Reconfiguring the test setup for the DUT to find service on a different TAI Z2 with a different TAC portion and same PLMN ID");
    f_NBIOT_SetCellPower(nbiot_Cell1, tsc_NonSuitableOffCellRS_EPRE);
    f_NBIOT_ReleaseAllCells();
    f_NBIOT_CellInfo_SetTAC(nbiot_Cell1, oct2bit(tsc_TAC2));
    f_NBIOT_CellConfig_Def( nbiot_Cell1, CONTROL_PLANE);
    f_NBIOT_SetCellPower ( nbiot_Cell1, tsc_ServingCellRS_EPRE );
    log(v_TcName, "Step12: Test setup successfully reconfigured with TAC Z2");    
            
    /*  14. Verify that the DUT does not attempt to connect to the LTE network on the new Tracking Area. */
    log(v_TcName, "Step13: Monitoring the DUT for ",float2int(v_Timer_2)," sec to verify that it does not attempt to attach to the LTE network on the new Tracking Area");
    t_WaitTime.start(f_NBIOT_SetTimerToleranceMin (  nonProtocolTimer, v_Timer_2));
    
    
    alt {
        [] SRB.receive(car_NB_SRB0_RrcPdu_IND(nbiot_Cell1, cr_RRCConnectionRequest_NB ( cr_EstablishmentCause_NB_Any, ? ) ))
   {
        t_WaitTime.stop;
        log(v_TcName, "Step13: ",float2int(v_Timer_2)," sec timer stopped");
        f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, v_TcName & "Step14: DUT Triggers Unexpected AttachReq.");
      }
      []t_WaitTime.timeout
      {
        log(v_TcName, "Step13: ",float2int(v_Timer_2)," sec timer expired. Verified that the DUT does not attempt to connect to the LTE network on the new Tracking Area");
      }
    }
      
    /*  15. Configure the test equipment such that the network will allow attachment.    
     *  16. Reconfigure the test setup so that the DUT now finds service on a different PLMN with id equal to 
     *      value Y2 where Y2 is not equal to Y1. The frequency of the second PLMN shall be the same as the first.
     */   
    f_NBIOT_SetCellPower ( nbiot_Cell1, tsc_NonSuitableOffCellRS_EPRE );
    f_NBIOT_ReleaseAllCells();
     	
    log(v_TcName, "Step14: Configuring the test equipment to allow DUT to attach to the network");
    log(v_TcName, "Step15: Reconfigure the test setup so that the DUT now finds service on a different PLMN with id equal to value Y1 where Y1 is not equal to Y4.");
      
    
    f_NBIOT_CellInfo_SetPLMN_1Entry (nbiot_Cell1, Y1 );
    f_NBIOT_CellConfig_Def( nbiot_Cell1, CONTROL_PLANE);
    f_NBIOT_SetCellPower (nbiot_Cell1, tsc_ServingCellRS_EPRE );         
    
   
    log(v_TcName, "Step16: Verify that the DUT now attempts to connect to the LTE network");
   
    t_Procedure_Guard_Timer.start(tsc_GuardProcedureTimer_240); //Guard Procedure Started  //Guard Procedure Started

     v_NAS_Ind := f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell1,
                                               cr_EstablishmentCause_NB_Any,
                                               cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                  cr_CIOT_ATTACH_REQUEST(cr_AdditionalUpdateType_CIOT),
                                                                                  v_ESMMessage)); 
      
    f_NBIOT_InitialRegistration_Step5_14(nbiot_Cell1, CONTROL_PLANE, STATE2_NB_CONNECTED_UPDATED, v_NAS_Ind);
   
    log(v_TcName, "Default Procedure Guard Timer Stopped");
    t_Procedure_Guard_Timer.stop; //Guard Procedure Ended

     log(v_TcName, "Step17: Verify that the DUT connects to the Internet PDN using PDN Type IPv4.");
     if (not match(v_NAS_Ind.Pdu.PiggybackedPduList[0].Msg.pDN_CONNECTIVITY_REQUEST.pdnType.typeValue, tsc_PdnType_IPv4))
    {
        f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, v_TcName &"PDN Type used is not IPV4 as expected!");
    }  
   
    /* The UE may optionally try to connect to the additional PDN that was activated in Step 5 */
       fl_UT_ApplyCommand(UT, cas_UT_Req(INITIATE_ADMIN_TEST_APP, NO_CNF_REQUIRED));
      t_Procedure_Guard_Timer.start(tsc_GuardProcedureTimer_240); //Guard Procedure Started  //Guard Procedure Started

       f_NBIOT_TriggerAdditionalPDN_Modified (nbiot_Cell1, CONTROL_PLANE, ?, cs_AccessPointName (tsc_Octet_Lower_ADMIN_APN), v_sApn);
   
      
    log(v_TcName, "Default Procedure Guard Timer Stopped");
    t_Procedure_Guard_Timer.stop; //Guard Procedure Ended
    fl_UT_ApplyCommand(UT, cas_UT_Req(APP_TRANSMIT_STATE_OFF, NO_CNF_REQUIRED,{cs_Ut_Parameter_Common ("ACTIVATE_ADMIN_APN", "0")}));
  }
    
    
   function f_VZ_TC_5_02_IMSLESS_NBIOT(charstring TestPlan_Name, NAS_CauseValue_Type p_CauseValue) runs on NBIOT_PTC
  {   
    f_NBIOT_Init (c1);
         
    log(testcasename(),": SERVICE REJECT MESSAGE FROM THE NETWORK CODE ",bit2int(p_CauseValue));
    
    f1_VZ_TC_5_02_IMSLESS_NBIOT_Body( p_CauseValue, px_INTERNET_APN, TestPlan_Name);
    f_NBIOT_TestBody_Set(false);
       
   
    
    log(testcasename()," Step 21. Power the device off.");
    f_UT_SwitchOffUE (UT, false);  
    f_NBIOT_ReleaseAllCells();
    f_NBIOT_PreliminaryPass(__FILE__, __LINE__, testcasename() & " : Successfully verified the Expected Result");

  }
    
  function f1_VZ_TC_5_02_IMSLESS_NBIOT_Body(
                               NAS_CauseValue_Type p_CauseValue, charstring p_APN,
                               charstring TestPlan_Name) runs on NBIOT_PTC
  {
    var EUTRA_ASN1_RRC_TransactionIdentifier_Type v_RRC_TI := tsc_RRC_TI_Def;
    var NAS_MSG_Indication_Type v_NAS_Ind, v_NasInd;
     var NB_SRB_COMMON_IND v_ReceivedAsp;
    var float v_Timer_1 := ( 1.0 * 60.0 ); // 5 minutes
    var float v_Timer_2 := 30.0; //30 sec
    var charstring v_cause_name;
    var EPS_BearerIdentity v_EpsBearerId2;
    var charstring Internet_APN_string;
    var octetstring Internet_APN_Value;
    var charstring Admin_APN_string;
    var octetstring Admin_APN_Value;
    timer t_WaitTime;
    var GutiParameters_Type v_Guti1_Params;
    var NAS_PlmnId v_HomePlmn;
    var EPS_UpdateTypeValue v_UpdateType := tsc_EpsUpdate_TaUpdate;
    var integer v_SelectedPlmnIndex := f_NBIOT_CellInfo_GetSelectedPlmnIndex(nbiot_Cell1);
    var integer v_causecode;
    var charstring v_sApn := "vzwadmin";
    timer t_Procedure_Guard_Timer;
    var float p_RetryInterval := 10.0;
    timer t_RetryInterval := p_RetryInterval; 
    var float tsc_GuardProcedureTimer_240 := 240.0;
    var template (present) B3_Type v_PDNType := (f_GetPdnType(), '101'B, '001'B);
    var template (present) NAS_UL_Message_Type v_ESMMessage := cr_CIOT_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach, v_PDNType);
    
  
  
    v_causecode := bit2int(p_CauseValue);
      
    v_cause_name := " ";
    if (v_causecode == 12){
      v_cause_name := "TAC Not Allowed";
    }
    if (v_causecode == 13){
      v_cause_name := "Roaming NotAllowed";
    }
    if (v_causecode == 15){
      v_cause_name := "No Suitable Cells";
    } 
    log(testcasename()," Step 1: Configure the test equipment to allow all attachments and connections"); 
    v_EpsBearerId2 := '6'H;
    Internet_APN_string := px_INTERNET_APN;
    Internet_APN_Value := tsc_Octet_INTERNET_APN;
    Admin_APN_string := px_ADMIN_APN;
    Admin_APN_Value := tsc_Octet_ADMIN_APN;
      
    
    f_NBIOT_CellInfo_SetPLMN_Common(nbiot_Cell1, {cs_HPLMN_Def}, -, false);
    f_NBIOT_CellInfo_SetCellId(nbiot_Cell1, nbiot_Cell1);
    f_NBIOT_CellInfo_SetTAC(nbiot_Cell1, oct2bit(tsc_TAC1));
    f_NBIOT_CellConfig_Def( nbiot_Cell1, CONTROL_PLANE);
    f_Delay(10.0); 
    f_NBIOT_SetCellPower (nbiot_Cell1, tsc_ServingCellRS_EPRE );
      
    /* 3. Power the DUT on and allow it to find LTE service. */    
    log(testcasename()," Step 2: Configure the test equipment such that the network will allow the UE to attach and connect to PDNs"); 
    f_UT_SwitchOnUE(UT, true);
    
    /* 4. Verify that the DUT successfully establishes an RRC connection and attaches to the LTE network. */
    /* 5. Initiate the test application (see section TEST EQUIPMENT CONFIGURATION) and 
     *    verify that it connects successfully to the internet PDN. 
     *    Configure the test application for the application idle state.
     * 6. Force the DUT to the RRC IDLE state by having the network transmit an RRCConnectionRelease message. */
    t_Procedure_Guard_Timer.start(tsc_GuardProcedureTimer_240); //Guard Procedure Started
    
    log(testcasename(), " Step 3: Power the DUT on and allow it to attaches to the LTE network");
     v_NAS_Ind :=    f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell1,
                                                  cr_EstablishmentCause_NB_Any,
                                                  cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                    cr_CIOT_ATTACH_REQUEST(cr_AdditionalUpdateType_CIOT), //Table 22.5.7a.3.3-4
                                                                                    v_ESMMessage)); 
    f_NBIOT_InitialRegistration_Step5_14(nbiot_Cell1, CONTROL_PLANE, STATE2_NB_CONNECTED_UPDATED, v_NAS_Ind);
  
    log(testcasename(), "Default Procedure Guard Timer Stopped");
    t_Procedure_Guard_Timer.stop; //Guard Procedure Ended

    log(testcasename()," Step 4: UE Successfully Attached to LTE Network"); 
    log(testcasename()," Step 5: Initiate the test application (see section TEST EQUIPMENT CONFIGURATION) and verify that it "&
                 "connects successfully to the ",v_sApn," PDN. Configure the test application for the application idle state.");      
    
  
       log(testcasename()," Initiating test application will cause the UE to connect to the ",v_sApn); 
       fl_UT_ApplyCommand(UT, cas_UT_Req(INITIATE_ADMIN_TEST_APP, NO_CNF_REQUIRED));
  // fl_UT_ApplyCommand(UT, cas_UT_Req(APP_TRANSMIT_STATE_ON, NO_CNF_REQUIRED,{cs_Ut_Parameter_Common ("ACTIVATE_ADMIN_APN", "0")}));
   

    t_Procedure_Guard_Timer.start(tsc_GuardProcedureTimer_240); //Guard Procedure Started

    // Waiting for Internet/Admin  
     f_NBIOT_TriggerAdditionalPDN_Modified (nbiot_Cell1, CONTROL_PLANE, ?, cs_AccessPointName (tsc_Octet_Lower_ADMIN_APN), v_sApn);
   
       
      
    log(testcasename()," Step 5: UE is successfully connected to the ",v_sApn," PDN");

    log(testcasename(), "Default Procedure Guard Timer Stopped");
    t_Procedure_Guard_Timer.stop; //Guard Procedure Ended
      
    log(testcasename()," Step 6: Send RRCConnectionRelease message to DUT");
    f_NBIOT_RRC_ConnectionRelease( nbiot_Cell1 );
    log(testcasename()," Step 6: DUT moved to the RRC IDLE state");
      
    /*  7. Configure the test equipment so that the network responds to all NAS Service Request messages 
     *     with a NAS Service Reject message with an EMM Cause Code of 12.      
     *  8. Configure the test application for the application transmitting state 
     *     with a retransmission timer of 10 seconds.
     * 9a. Verify that the UE sends a NAS Service Request message and that the 
     * 9b. network responds with a NAS Service Reject message in which the EMM Cause Code is set to 12.
    */
 
    t_Procedure_Guard_Timer.start(tsc_GuardProcedureTimer_240); //Guard Procedure Started
    log(testcasename()," Step 7: Configuring network to respond  NAS Service Request messages with a NAS Service Reject with an EMM Cause Code of ", v_causecode);
    log(testcasename()," Step 8: Configuring the application transmitting state with a retransmission timer of 10 seconds");
    
    fl_UT_ApplyCommand(UT, cas_UT_Req(APP_TRANSMIT_STATE_ON, NO_CNF_REQUIRED,{cs_Ut_Parameter_Common ("ACTIVATE_ADMIN_APN", "10")}));
    
    f_NBIOT_RRC_ConnectionRequest_Def(nbiot_Cell1); 
    f_NBIOT_Modified_RRC_ConnectionSetup_Def(nbiot_Cell1);
    
    v_NAS_Ind :=  f_NBIOT_RRCConnectionSetupComplete_Def(nbiot_Cell1,
                                                           cr_508_RRCConnectionSetupComplete_NB(tsc_RRC_TI_Def, ?),
                                                            ?);  
      
      
    log(testcasename()," Step 9a: UE Triggers Service Request.");

    log(testcasename(), "Default Procedure Guard Timer Stopped");
    t_Procedure_Guard_Timer.stop; //Guard Procedure Ended

    //The SS transmits a SERVICE REJECT message with the EMM cause set to #12
    SRB.send (cas_NB_SRB_NasPdu_REQ (nbiot_Cell1,
                                     tsc_SRB1bis,
                                     cs_TimingInfo_Now,
                                     cs_NAS_Request(tsc_SHT_NoSecurityProtection,
                                                cs_508_SERVICE_REJECT(p_CauseValue))));

      
    log(testcasename()," Step 9b: SS Transmits Service Reject with EMM Cause code ",v_causecode," ",v_cause_name); 
    t_WaitTime.start(f_NBIOT_SetTimerToleranceMin ( nonProtocolTimer, v_Timer_1));
    log(testcasename()," Started timer ",float2int(v_Timer_1)/60," minutes"); 
     
    f_NBIOT_RRC_ConnectionRelease( nbiot_Cell1 );
    log(testcasename()," Step 9c: RRC Connection Released");
    
    /* 10. Monitor the DUT for 5 minutes and verify that it does not attempt to connect to the LTE network. */
    log(testcasename(), " Step 10: Monitor the DUT for 5 minutes and verify that it does not attempt to attach to the LTE network.");

    alt {
      []SRB.receive(car_NB_SRB0_RrcPdu_IND(nbiot_Cell1, cr_RRCConnectionRequest_NB ( cr_EstablishmentCause_NB_Any, ? ) ))
      {
              t_WaitTime.stop;
              log(testcasename()," stop timer 5 minutes"); 
            f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, testcasename()&": Step 10: UE triggered unexpected AttachReq.");
        }
      []t_WaitTime.timeout
        {
           log(testcasename(),"Step 10 DUT didn't attempt to attach to LTE network for the duration of 5 minutes");
        }
    }
     /*  11. Reconfigure the test setup so that the DUT now finds service on a different eNodeB with cell_id 
     *  equal to value X2 where X2 is not equal to X1. X1 and X2 are on the same frequency. 
     *  The PLMN id is still equal to Y1. The TAI is still equal to Z1.
     */
    f_NBIOT_ReleaseAllCells();
    log(testcasename(), " Step 11: Reconfiguring the setup with a different cell_id");
    
    f_NBIOT_CellInfo_SetCellId(nbiot_Cell1, nbiot_Cell2);
    log(testcasename()," Step 11: Cell-Id Modified");
    f_NBIOT_CellConfig_Def( nbiot_Cell1, CONTROL_PLANE);
    f_Delay(2.0); 
    f_NBIOT_SetCellPower (nbiot_Cell1, tsc_ServingCellRS_EPRE );
    
    /*  12. Verify that the DUT does not attempt to attach to the LTE network on the new eNodeB. */
    t_WaitTime.start(f_NBIOT_SetTimerToleranceMin ( nonProtocolTimer, v_Timer_2));
    log(testcasename(),"  Started timer ",float2int(v_Timer_2), " sec"); 
    log(testcasename()," Step 12: Verify that the DUT does not attempt to attach to the LTE network.");
    alt 
    {
      []SRB.receive(car_NB_SRB0_RrcPdu_IND(nbiot_Cell1, cr_RRCConnectionRequest_NB ( cr_EstablishmentCause_NB_Any, ? ) ))
      {
            t_WaitTime.stop;
            log(" stop timer ",float2int(v_Timer_2), " sec"); 
            f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, testcasename()&": Step 12: UE Triggers unexpected AttachReq.");
        }
      []t_WaitTime.timeout
        {
             log("timer expiry ",float2int(v_Timer_2), " sec");
        }
    }
    /*  13. Reconfigure the test setup so that the DUT now finds service on a different Tracking Area 
     *  with TAI equal to value Z2 where Z2 is not equal to Z1.
     *  Note that only the TAC portion of the TAI will be different; 
     *  the PLMN id is still equal to Y1.
     */
    f_NBIOT_ReleaseAllCells();
          
    f_NBIOT_Init (c1);
    log(testcasename()," Step 13: Modify TAC to Z2");
    
    f_NBIOT_CellInfo_SetTAC(nbiot_Cell1, oct2bit(tsc_TAC2));
    log(testcasename()," Step 13: TAC Modified to Z2");
    f_NBIOT_CellConfig_Def( nbiot_Cell1, CONTROL_PLANE);
    f_Delay(2.0);
    f_NBIOT_SetCellPower ( nbiot_Cell1, tsc_ServingCellRS_EPRE );
   
    /*  14. Verify that the DUT now attempts to connect to the LTE network and is successful. */
    
    t_Procedure_Guard_Timer.start(300.0); //Guard Procedure Started
       f_NBIOT_RRC_ConnectionRequest_Def(nbiot_Cell1, cr_EstablishmentCause_NB_Any);
      f_NBIOT_Modified_RRC_ConnectionSetup_Def(nbiot_Cell1);//VZW NBIOT
      v_Guti1_Params := f_NBIOT_CellInfo_GetGuti(nbiot_Cell1);
     
      alt  {
         []SRB.receive(car_NB_SRB_RrcNasPdu_IND(nbiot_Cell1, tsc_SRB1bis, 
                               cr_508_RRCConnectionSetupComplete_NB(tsc_RRC_TI_Def, v_SelectedPlmnIndex),  
                               cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                           cr_CIOT_ATTACH_REQUEST(cr_AdditionalUpdateType_CIOT), //Table 22.5.7a.3.3-4
                                                        v_ESMMessage))) -> value v_ReceivedAsp{
                                   v_NAS_Ind := v_ReceivedAsp.Signalling.Nas[0];
                               f_NBIOT_InitialRegistration_Step5_14(nbiot_Cell1, CONTROL_PLANE, STATE2_NB_CONNECTED_UPDATED, v_NAS_Ind); 
                                }
          
          [] SRB.receive(car_NB_SRB_RrcNasPdu_IND(nbiot_Cell1, tsc_SRB1bis, 
                               cr_508_RRCConnectionSetupComplete_NB(tsc_RRC_TI_Def, v_SelectedPlmnIndex),  
                                cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                                  cdr_TAU_Request_OldAddGutiTAI(tsc_EpsUpdate_TaUpdate,  //Table 22.5.7a.3.3-5
                                                                                                '001'B,
                                                                                                cr_DRXparameter_Any ('5C'O) ifpresent,
                                                                                                cr_AdditionalUpdateType_CIOT ifpresent,  // @sic R5-176872 sic@
                                                                                                f_GutiParameters2MobileIdentity(omit, v_Guti1_Params),
                                                                                                cr_TAI_Any ifpresent,
                                                                                                omit, // @sic R5s170777 sic@
                                                                                                cr_PTMSI_SignatureAny ifpresent))))-> value v_ReceivedAsp
         
    
          
          
          {
        log("Received Tracking Area Update");
        log("Respond to Tracking Area Update with Tracking Area Accept");
        
        
        SRB.send(cas_NB_SRB_NasPdu_REQ(nbiot_Cell1,
                                   tsc_SRB1bis,
                                   cs_TimingInfo_Now,
                                   cs_NAS_Request(tsc_SHT_IntegrityProtected_Ciphered,
                                                  cs_TAU_Accept_Common(v_UpdateType,
                                                                       f_GutiParameters2MobileIdentity(tsc_IEI_Guti, v_Guti1_Params),
                                                                       omit,
                                                                       omit,
                                                                       omit,
                                                                       omit,
                                                                       f_GetNBIOTAdditionalUpdateResult(v_ReceivedAsp.Signalling.Nas[0].Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.addUpdateType)
                                                                       ))));
                                                                                 
                                                                                 }
      } 
   
    log(testcasename()," Step 14: DUT Attaches on LTE Network successfully.");
    log(testcasename(), "Default Procedure Guard Timer Stopped");
    t_Procedure_Guard_Timer.stop; //Guard Procedure Ended

    /*  15. Reconfigure the test setup so that the DUT again finds service on the 
     *      original TAI (with id equal to value Z1).
     */
     f_NBIOT_ReleaseAllCells();
    
    log(testcasename()," Step 15: Modify TAC");
    f_NBIOT_CellInfo_SetTAC(nbiot_Cell1, oct2bit(tsc_TAC1));
    log(testcasename()," Step 15: TAC reverted back to Z1");
    f_NBIOT_CellConfig_Def( nbiot_Cell1, CONTROL_PLANE);
    f_NBIOT_SetCellPower ( nbiot_Cell1, tsc_ServingCellRS_EPRE );
     
    /*  16. Verify that the DUT does not attempt to connect to Z1. */
    t_WaitTime.start(f_NBIOT_SetTimerToleranceMin ( nonProtocolTimer, v_Timer_2));
    log(testcasename()," Step 16: start timer ",float2int(v_Timer_2), " sec");
    log(testcasename()," Step 16: Verify that the DUT does not attempt to attach to the LTE network.");
    alt {
      []SRB.receive(car_NB_SRB0_RrcPdu_IND(nbiot_Cell1, cr_RRCConnectionRequest_NB ( cr_EstablishmentCause_NB_Any, ? ) ))
      {
             t_WaitTime.stop;
             log(testcasename()," stop timer ",float2int(v_Timer_2), " sec");
            f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, testcasename()&": Step 16: UE Triggers unexpected AttachReq.");
        }
      []t_WaitTime.timeout
        {
            log(testcasename()," timer expiry ",float2int(v_Timer_2), " sec successful");
        }
    }
     
   fl_UT_ApplyCommand(UT, cas_UT_Req(APP_TRANSMIT_STATE_OFF, NO_CNF_REQUIRED,{cs_Ut_Parameter_Common ("ACTIVATE_ADMIN_APN", "0")}));
    
  
    /* 17. Power cycle the DUT */
    log(testcasename()," Step 17: Power cycle the DUT."); 
   fl_UT_ApplyCommand(UT, cas_UT_Req(POWER_CYCLE, NO_CNF_REQUIRED));
   //   f_UT_SwitchOnUE(UT, true);
    
    
    t_Procedure_Guard_Timer.start(tsc_GuardProcedureTimer_240); //Guard Procedure Started
  
    log(testcasename(),"Step 18. Verify that the DUT successfully establishes an RRC connection on the eNodeB with TAI equal to 
          Z1 and sends a NAS Attach Request message. ");
    /* 19. Verify that the DUT attaches to the LTE network successfully. */
     v_NasInd := f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell1,
                                               cr_EstablishmentCause_NB_Any,
                                               cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                  cr_CIOT_ATTACH_REQUEST(cr_AdditionalUpdateType_CIOT),
                                                                                  v_ESMMessage)); 
   



    f_NBIOT_InitialRegistration_Step5_14(nbiot_Cell1, CONTROL_PLANE, STATE2_NB_CONNECTED_UPDATED, v_NasInd);

    log(testcasename()," Step 19: Verify that the DUT attaches to the LTE network successfully.");

    log(testcasename(), "Default Procedure Guard Timer Stopped");
    t_Procedure_Guard_Timer.stop; //Guard Procedure Ended

    /* 20. Initiate the test application (see section 1.5) and verify that it connects successfully to 
     * the Internet PDN. */
      
   
       log(testcasename()," Initiating test application will cause the UE to connect to the ",v_sApn); 
       fl_UT_ApplyCommand(UT, cas_UT_Req(INITIATE_ADMIN_TEST_APP, NO_CNF_REQUIRED));

    t_Procedure_Guard_Timer.start(tsc_GuardProcedureTimer_240); //Guard Procedure Started

    // Waiting for Internet/Admin  
 
    f_NBIOT_TriggerAdditionalPDN_Modified (nbiot_Cell1, CONTROL_PLANE, ?, cs_AccessPointName (tsc_Octet_Lower_ADMIN_APN), v_sApn);
    
    log(testcasename()," Step 20: UE is successfully connected to the ",v_sApn," PDN");
   // f_NBIOT_SS_ConfigRachPreambleIndMode(nbiot_Cell1, disable);        //added for LCCP-2346
    log(testcasename(), "Default Procedure Guard Timer Stopped");
    t_Procedure_Guard_Timer.stop; //Guard Procedure Ended
    //f_NBIOT_RRC_ConnectionRelease( nbiot_Cell1 );
   
  }   
    
    
      
  function f_VZ_IMSLess_TC_5_3_NBIOT(charstring TestPlan_Name) runs on NBIOT_PTC
  {
    var EUTRA_ASN1_RRC_TransactionIdentifier_Type v_RRC_TI := tsc_RRC_TI_Def;
    var NAS_MSG_Indication_Type v_NasInd;
    var template (present) B3_Type v_PDNType := (f_GetPdnType(), '101'B, '001'B);
    var template (present) NAS_UL_Message_Type v_ESMMessage := cr_CIOT_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach, v_PDNType);
    var float tsc_GuardProcedureTimer_240 := 240.0; 
   
    var charstring v_TcName := testcasename() & ": ";
    
    
    timer t_Procedure_Guard_Timer;
      
    f_NBIOT_Init (c1); 
    
    log (v_TcName, "SERVICE REQUEST FAILS GENERIC THROTTLING ALGORITHM INVOKED");    
    
    f_NBIOT_CellConfig_Def(nbiot_Cell1, CONTROL_PLANE);      /* @sic R5s150338: f_EUTRA_CellConfig_DRB_Common replaced by f_EUTRA_CellConfig_Def sic@ */
    f_NBIOT_SetCellPower(nbiot_Cell1, tsc_ServingCellRS_EPRE);
    log(v_TcName, "Step1: Configure the test setup so that the DUT finds service on a single eNodeB with cell_id X1 = 1, PLMN id Y1 = ", 
                  f_ConvertPLMNtoString(f_Asn2Nas_PlmnId(valueof(cs_HPLMN_Def))) & ", and TAI Z1 = ", oct2int(tsc_TAC1));
    log(v_TcName, "Step1: Cell Configuration Successful");
    log(v_TcName, "Step2: Configure the test equipment such that the network will allow the UE to attach and connect to PDNs");
    f_UT_SwitchOnUE(UT, true);
    
     t_Procedure_Guard_Timer.start(tsc_GuardProcedureTimer_240); //Guard Procedure Started
    log(v_TcName, "Step3: Power ON the DUT and allow it to find LTE service");
    v_NasInd := f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell1,
                                               cr_EstablishmentCause_NB_Any,
                                               cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                  cr_CIOT_ATTACH_REQUEST(cr_AdditionalUpdateType_CIOT),
                                                                                  v_ESMMessage)); 
    log(v_TcName, "Step4: Verifying that the DUT successfully establishes an RRC connection and attaches to the LTE network.");  
    f_NBIOT_InitialRegistration_Step5_14(nbiot_Cell1, CONTROL_PLANE, STATE2_NB_CONNECTED_UPDATED, v_NasInd); 
        

   
     t_Procedure_Guard_Timer.stop; //Guard Procedure Ended
      
   
       log("Test procedure - Release 12 UE and later");       
       fl_VZ_TC_5_3_NBIOT_Rel12_Later_Body( TestPlan_Name);   
    
    
    f_NBIOT_TestBody_Set(false);
    //f_NBIOT_Postamble(nbiot_Cell1, E2_CONNECTED);
    f_NBIOT_ReleaseAllCells();
    f_UT_SwitchOffUE(UT, false);  
    f_NBIOT_PreliminaryPass(__FILE__, __LINE__, v_TcName & "Successfully verified the Expected Result : UE follows the data retry " &
                                                           "algorithm described in the document Verizon Wireless LTE Data Retry " &
                                                           "when it receives a NAS PDN Connectivity Reject message");
  }










function fl_VZ_TC_5_3_NBIOT_Rel12_Later_Body ( charstring TestPlan_Name) runs on NBIOT_PTC
  {
    var NAS_MSG_Indication_Type v_NasInd;
    var float v_T3417 := 5.0;
    var float v_WaitTime := 60.0;
    timer t_T3417;
    timer t_WaitTime;
    var integer v_Count;
    var charstring v_TcName := testcasename() & ": ";
    timer t_Procedure_Guard_Timer;
    var template (present) B3_Type v_PDNType := (f_GetPdnType(), '101'B, '001'B);
    var template (present) NAS_UL_Message_Type v_ESMMessage := cr_CIOT_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach, v_PDNType);
    var float tsc_GuardProcedureTimer_240 := 240.0; 
    var integer v_SelectedPlmnIndex := f_NBIOT_CellInfo_GetSelectedPlmnIndex(nbiot_Cell1);
    var template DeviceProperties v_DevicePropertiesEMM := cr_DeviceProperties('D'H) ifpresent;
    
      
    log(v_TcName,"Step5: Force the DUT to the RRC IDLE state ");
    f_NBIOT_RRC_ConnectionRelease( nbiot_Cell1 );
    log(v_TcName,"Step5: UE moved to RRC IDLE state ");
      
    fl_UT_ApplyCommand(UT, cas_UT_Req(INITIATE_ADMIN_TEST_APP, NO_CNF_REQUIRED));
    log(v_TcName,"Step6: Initiate the test application"&
                      " so that the UE needs to initiate the service procedure for the Admin PDN");
    log(v_TcName,"Step6: Configure the test equipment such that the network does not respond to the"&
                 " NAS Service Requests from the UE");

    t_Procedure_Guard_Timer.start(tsc_GuardProcedureTimer_240); //Guard Procedure Started
    log(v_TcName,"Step7: Verify that the UE sends a NAS Service Request to the network");
    
      f_NBIOT_RRC_ConnectionRequest_Def(nbiot_Cell1);
    
      f_NBIOT_Modified_RRC_ConnectionSetup_Def(nbiot_Cell1);//VZW NBIOT
     f_NBIOT_RRCConnectionSetupComplete_Def(nbiot_Cell1,
                                                           cr_508_RRCConnectionSetupComplete_NB(tsc_RRC_TI_Def, v_SelectedPlmnIndex),
                                                            cr_NAS_Indication (tsc_SHT_IntegrityProtected,  // @sic R5s170962 sic@
                                                                   cr_CONTROL_PLANE_SERVICE_REQUEST(?, -, -, -, v_DevicePropertiesEMM)));
                           
    log(v_TcName,"Step8: Network ignores and does not respond to the NAS Service Request from the UE");

    log(v_TcName, "Default Procedure Guard Timer Stopped");
    t_Procedure_Guard_Timer.stop; //Guard Procedure Ended    
      
    //f_NBIOT_RRC_ConnectionRelease( nbiot_Cell1 );
    
    log(v_TcName,"Step9: Verify that the UE waits at least T3417 seconds before sending another NAS Service Request."&
                 " Verify that the network ignores the NAS Service Request");
    t_T3417.start(v_T3417);
    log(v_TcName,"Timer T3417 started for 5 seconds");
    alt 
    {
       []SRB.receive(car_NB_SRB0_RrcPdu_IND(nbiot_Cell1, cr_RRCConnectionRequest_NB ( cr_EstablishmentCause_NB_Any, ? ) ))
     {
         t_T3417.stop;
         log(v_TcName,"Received unexpected RRC Connection Request");
         f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, v_TcName & ": UE triggered unexpected RRC Connectionn Request before timer T3417 expiry");
      }
      []t_T3417.timeout
      {
         log(v_TcName,"Timer T3417 expired successfully");
      }
    }
      //fl_UT_ApplyCommand(UT, cas_UT_Req(INITIATE_ADMIN_TEST_APP, NO_CNF_REQUIRED));
    f_NBIOT_RRC_ConnectionRelease( nbiot_Cell1 );
     t_Procedure_Guard_Timer.start(tsc_GuardProcedureTimer_240); //Guard Procedure Started  
    f_NBIOT_RRC_ConnectionRequest_Def(nbiot_Cell1);
    
      f_NBIOT_Modified_RRC_ConnectionSetup_Def(nbiot_Cell1);//VZW NBIOT
     f_NBIOT_RRCConnectionSetupComplete_Def(nbiot_Cell1,
                                                           cr_508_RRCConnectionSetupComplete_NB(tsc_RRC_TI_Def, v_SelectedPlmnIndex),
                                                            cr_NAS_Indication (tsc_SHT_IntegrityProtected,  // @sic R5s170962 sic@
                                                                   cr_CONTROL_PLANE_SERVICE_REQUEST(?, -, -, -, v_DevicePropertiesEMM)));
    
    log(v_TcName,"Step9: Network ignores and does not respond to the NAS Service Request from the UE");

    log(v_TcName, "Default Procedure Guard Timer Stopped");
    t_Procedure_Guard_Timer.stop; //Guard Procedure Ended    
    
    //f_NBIOT_RRC_ConnectionRelease( nbiot_Cell1 );
    
    for (v_Count := 0; v_Count < 3; v_Count := v_Count+1)
    {
      if (v_Count == 0)
      {
            log(v_TcName,"Step10: After T3417 expires, verify that the UE sends three more NAS Service Request attempts each"&
                 " separated by T3417 seconds and that the network does not respond to the Service Requests");
            
      }
        
      t_T3417.start(v_T3417);
      log(v_TcName,"Timer T3417 started for 5 seconds");
      alt 
      {
        []SRB.receive(car_NB_SRB0_RrcPdu_IND(nbiot_Cell1, cr_RRCConnectionRequest_NB ( cr_EstablishmentCause_NB_Any, ? ) ))
        {
          t_T3417.stop;
          log(v_TcName,"Received unexpected RRC Connection Request");
          f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, v_TcName & ": UE triggered unexpected RRC Connectionn Request before timer T3417 expiry");
        }
        []t_T3417.timeout
        {
          log(v_TcName,"Timer T3417 expired successfully");
        }
      }
         f_NBIOT_RRC_ConnectionRelease( nbiot_Cell1 );
       t_Procedure_Guard_Timer.start(tsc_GuardProcedureTimer_240); //Guard Procedure Started    
       f_NBIOT_RRC_ConnectionRequest_Def(nbiot_Cell1);
    
      f_NBIOT_Modified_RRC_ConnectionSetup_Def(nbiot_Cell1);//VZW NBIOT
     f_NBIOT_RRCConnectionSetupComplete_Def(nbiot_Cell1,
                                                           cr_508_RRCConnectionSetupComplete_NB(tsc_RRC_TI_Def, v_SelectedPlmnIndex),
                                                            cr_NAS_Indication (tsc_SHT_IntegrityProtected,  // @sic R5s170962 sic@
                                                                   cr_CONTROL_PLANE_SERVICE_REQUEST(?, -, -, -, v_DevicePropertiesEMM)));
    
      log(v_TcName,"Step10: Received SERVICE_REQUEST. Attempt #",v_Count+1);

      log(v_TcName, "Default Procedure Guard Timer Stopped");
      t_Procedure_Guard_Timer.stop; //Guard Procedure Ended    

        
      log(v_TcName,"Step10: Verified that netwrok does not respond to Service Request");
     // f_NBIOT_RRC_ConnectionRelease( nbiot_Cell1 );
    }
     // f_NBIOT_RRC_ConnectionRelease( nbiot_Cell1 );
    log(v_TcName,"Step11: Verify that the UE does not request the connection over the air for the next 1 minute plus a random time between 0 and 15 seconds");
    t_WaitTime.start(v_WaitTime);
    log(v_TcName,"Step11: Timer started for 1 minute");
    alt 
    {
       []SRB.receive(car_NB_SRB0_RrcPdu_IND(nbiot_Cell1, cr_RRCConnectionRequest_NB ( cr_EstablishmentCause_NB_Any, ? ) ))
      {
         t_WaitTime.stop;
         log(v_TcName,"Step11: Received unexpected RRC Connection Request");
         f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, v_TcName & ": UE triggered unexpected RRC Connectionn Request before timer of 1 minute expiry");
      }
      []t_WaitTime.timeout
      {
         log(v_TcName,"Step11: Timer expired for 1 minute");
      }
    }
      
    v_WaitTime := 15.0;  
    t_WaitTime.start(v_WaitTime);
     f_NBIOT_RRC_ConnectionRelease( nbiot_Cell1 );
    log(v_TcName,"Step11: Timer started for 15 seconds");
    alt 
    {
       []SRB.receive(car_NB_SRB0_RrcPdu_IND(nbiot_Cell1, cr_RRCConnectionRequest_NB ( cr_EstablishmentCause_NB_Any, ? ) ))
       {
         t_WaitTime.stop;
         log(v_TcName,"Step11: Received RRC Connection Request after ",60.0+(15.0-t_WaitTime.read)," seconds");

         t_Procedure_Guard_Timer.start(tsc_GuardProcedureTimer_240); //Guard Procedure Started  

          f_NBIOT_RRC_ConnectionRequest_Def(nbiot_Cell1);
    
      f_NBIOT_Modified_RRC_ConnectionSetup_Def(nbiot_Cell1);//VZW NBIOT
     f_NBIOT_RRCConnectionSetupComplete_Def(nbiot_Cell1,
                                                           cr_508_RRCConnectionSetupComplete_NB(tsc_RRC_TI_Def, v_SelectedPlmnIndex),
                                                            cr_NAS_Indication (tsc_SHT_IntegrityProtected,  // @sic R5s170962 sic@
                                                                   cr_CONTROL_PLANE_SERVICE_REQUEST(?, -, -, -, v_DevicePropertiesEMM)));
     
   
         log(v_TcName,"Step12: Received NAS Service request , network does not respond");

         log(v_TcName, "Default Procedure Guard Timer Stopped");
         t_Procedure_Guard_Timer.stop; //Guard Procedure Ended    
        
         f_NBIOT_RRC_ConnectionRelease( nbiot_Cell1 );
      }
      []t_WaitTime.timeout
      {
          log(v_TcName,"Step12: Timer 15 seconds expired");
      
          t_Procedure_Guard_Timer.start(120.0); //Guard Procedure Started // UE should try immediatelly after next retry So keeping 10 sec for retry and 10 sec for trigger
          
          f_NBIOT_RRC_ConnectionRequest_Def(nbiot_Cell1);
    
      f_NBIOT_Modified_RRC_ConnectionSetup_Def(nbiot_Cell1);//VZW NBIOT
     f_NBIOT_RRCConnectionSetupComplete_Def(nbiot_Cell1,
                                                           cr_508_RRCConnectionSetupComplete_NB(tsc_RRC_TI_Def, v_SelectedPlmnIndex),
                                                            cr_NAS_Indication (tsc_SHT_IntegrityProtected,  // @sic R5s170962 sic@
                                                                   cr_CONTROL_PLANE_SERVICE_REQUEST(?, -, -, -, v_DevicePropertiesEMM)));
     
   

          log(v_TcName, "Default Procedure Guard Timer Stopped");
          t_Procedure_Guard_Timer.stop; //Guard Procedure Ended    
          
      //   f_NBIOT_RRC_ConnectionRelease( nbiot_Cell1 );
      }
    }
    v_WaitTime := 60.0;
    t_WaitTime.start(v_WaitTime);
    log(v_TcName,"Step13: Timer started for 1 minute");
    alt 
    {
       []SRB.receive(car_NB_SRB0_RrcPdu_IND(nbiot_Cell1, cr_RRCConnectionRequest_NB ( cr_EstablishmentCause_NB_Any, ? ) ))
      {
          t_WaitTime.stop;
          log(v_TcName,"Step13: Received unexpected RRC Connection Request");
          f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, v_TcName & ": UE triggered unexpected RRC Connectionn Request before timer of 1 minute expiry");
      }
      []t_WaitTime.timeout
      {
          log(v_TcName,"Step13: Timer expired for 1 minute");
      }
    }
    v_WaitTime := 15.0;  
    t_WaitTime.start(v_WaitTime);
    f_NBIOT_RRC_ConnectionRelease( nbiot_Cell1 );
    log(v_TcName,"Step13: Timer started for 15 seconds");
    alt 
    {
       []SRB.receive(car_NB_SRB0_RrcPdu_IND(nbiot_Cell1, cr_RRCConnectionRequest_NB ( cr_EstablishmentCause_NB_Any, ? ) ))
      {
          t_WaitTime.stop;
          log(v_TcName,"Step14: Received RRC Connection Request after ",60.0+(15.0-t_WaitTime.read)," seconds");
 
           t_Procedure_Guard_Timer.start(tsc_GuardProcedureTimer_240); //Guard Procedure Started  
           f_NBIOT_RRC_ConnectionRequest_Def(nbiot_Cell1);
    
      f_NBIOT_Modified_RRC_ConnectionSetup_Def(nbiot_Cell1);//VZW NBIOT
     f_NBIOT_RRCConnectionSetupComplete_Def(nbiot_Cell1,
                                                           cr_508_RRCConnectionSetupComplete_NB(tsc_RRC_TI_Def, v_SelectedPlmnIndex),
                                                            cr_NAS_Indication (tsc_SHT_IntegrityProtected,  // @sic R5s170962 sic@
                                                                   cr_CONTROL_PLANE_SERVICE_REQUEST(?, -, -, -, v_DevicePropertiesEMM)));
     
   

         log(v_TcName, "Default Procedure Guard Timer Stopped");
         t_Procedure_Guard_Timer.stop; //Guard Procedure Ended    
      }
      []t_WaitTime.timeout
      {
          log(v_TcName,"Step14: Timer 15 seconds expired");
      }
    }
    f_NBIOT_SS_ConfigRachPreambleIndMode(nbiot_Cell1, disable);     
    log(v_TcName,"Step15: Power the device off");
  }    
    
    
  function f_TC_VZ_DATARETRYIMSLESS_5_4(charstring TestPlan_Name, 
                             NAS_CauseValue_Type p_CauseValue,
                             template (omit) GPRS_Timer2 p_T3346 := omit) runs on NBIOT_PTC
  {
   
    var integer v_CauseValue := bit2int(p_CauseValue);  
    var charstring v_TcName := testcasename() & ": ";
      
  
    
      log(v_TcName, ": UE RECEIVES SERVICE REJECT MESSAGE FROM THE NETWORK CODE ",v_CauseValue);
    

    f_NBIOT_Init (c1);
    log(v_TcName, "Step1: Configure the test setup so that the DUT finds service on a single eNodeB with cell_id X1 = 1, PLMN id Y1 = ", 
                  f_ConvertPLMNtoString(f_Asn2Nas_PlmnId(valueof(cs_HPLMN_Def))) & ", and TAI Z1 = ", oct2int(tsc_TAC1));
    log(v_TcName,"Step2: Configure the test equipment such that the network will allow the UE to attach and connect to PDNs.");
    
    f_NBIOT_CellConfig_Def (nbiot_Cell1, CONTROL_PLANE);
    f_NBIOT_SetCellPower ( nbiot_Cell1, tsc_ServingCellRS_EPRE );
    
    f_TC_VZ_DATARETRYIMSLESS_5_4_Body( p_CauseValue, p_T3346);
    f_NBIOT_TestBody_Set(false);
     
    f_NBIOT_ReleaseAllCells();

    f_UT_SwitchOffUE (UT, false);
    f_NBIOT_PreliminaryPass(__FILE__, __LINE__, v_TcName &"PASSED");

 
  }
  
  function f_TC_VZ_DATARETRYIMSLESS_5_4_Body(
                               NAS_CauseValue_Type p_CauseValue,
                               template (omit) GPRS_Timer2 p_T3346 := omit) runs on NBIOT_PTC
  {
    var EUTRA_ASN1_RRC_TransactionIdentifier_Type v_RRC_TI := tsc_RRC_TI_Def;
    var NAS_MSG_Indication_Type v_NAS_Ind;
    var float v_Timer_1 := ( 1.0 * 60.0 ); // 1 minute
    timer t_WaitTime;
    var integer v_CauseValue := bit2int(p_CauseValue);  
    var charstring v_TcName := testcasename() & ": ";
    var EPS_BearerIdentity v_EpsBearerId2 := '6'H;
    var charstring v_sApn := "vzwadmin";
    var float v_Timer_2 := 300.0;
    timer t_WaitTime_ServiceReq;
    var float v_Timer_3 := 315.0; //random timer secs from 0 to 15
    timer t_WaitTime_Random;
    var integer v_StopRandomTimer := 1;
    timer t_Procedure_Guard_Timer;   
    timer t_testapp_retry_timer := (10.0);
    var float v_Timer_4 := ( 1.0 * 60.0 ); // 1 minute
    var float tsc_GuardProcedureTimer_240 := 240.0;
     var template (present) B3_Type v_PDNType := (f_GetPdnType(), '101'B, '001'B);
    var template (present) NAS_UL_Message_Type v_ESMMessage := cr_CIOT_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach, v_PDNType);
    
    
      
    log(v_TcName,"Step3: Power the DUT on and allow it to find LTE service.");
    f_UT_SwitchOnUE(UT);
      
    t_Procedure_Guard_Timer.start(tsc_GuardProcedureTimer_240); //Guard Procedure Started
    
    v_NAS_Ind := f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell1,
                                                  cr_EstablishmentCause_NB_Any,
                                                  cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                    cr_CIOT_ATTACH_REQUEST(cr_AdditionalUpdateType_CIOT), //Table 22.5.7a.3.3-4
                                                                                    v_ESMMessage)); 

    f_NBIOT_InitialRegistration_Step5_14(nbiot_Cell1, CONTROL_PLANE, STATE2_NB_CONNECTED_UPDATED, v_NAS_Ind); 
    log(v_TcName,"Step4: Verified that the DUT successfully establishes an RRC connection and attaches to the LTE network");  

    log(v_TcName, "Default Procedure Guard Timer Stopped");
    t_Procedure_Guard_Timer.stop; //Guard Procedure Ended

    
    log(v_TcName,"Step5: Initiate the test application (see section TEST EQUIPMENT CONFIGURATION) and verify that it "&
                 "connects successfully to the ",v_sApn," PDN. Configure the test application for the application idle state.");      
    
    
    log(v_TcName,"Initiating test application will cause the UE to connect to the ",v_sApn); 
    fl_UT_ApplyCommand(UT, cas_UT_Req(INITIATE_ADMIN_TEST_APP, NO_CNF_REQUIRED));
    t_Procedure_Guard_Timer.start(tsc_GuardProcedureTimer_240);
    f_NBIOT_TriggerAdditionalPDN_Modified (nbiot_Cell1, CONTROL_PLANE, ?, cs_AccessPointName (tsc_Octet_Lower_ADMIN_APN), v_sApn);
    log(v_TcName, "Default Procedure Guard Timer Stopped");
    t_Procedure_Guard_Timer.stop; //Guard Procedure Ended

      
    log(v_TcName,"Step5: UE is successfully connected to the ",v_sApn," PDN");
      
    log(v_TcName,"Step6: Force the DUT to the RRC IDLE state by having the network transmit an RRCConnectionRelease message");
    //f_Delay(1.0);
    f_NBIOT_RRC_ConnectionRelease( nbiot_Cell1 );
    log(v_TcName,"Step6: UE moved to RRC Idle mode");

    if (p_CauseValue == tsc_EmmCause_NetworkFailure)
    {  
       log(v_TcName,"Step7: Configure the test equipment so that the network responds to all NAS Service Request messages "&
                  "with a NAS Service Reject message with an EMM Cause Code of 17");
    }
    else if (p_CauseValue == tsc_Cause_Congestion)
    {
       log(v_TcName,"Step7: Configure the test equipment so that the network responds to all NAS Service Request messages "&
                  "with a NAS Service Reject message with an EMM Cause Code of 22 and a T3346 Timer value of 15 minutes");
    }
  
    log(v_TcName,"Step8: Configure the test application for the application transmitting state with a retransmission timer of 10 seconds"); 
    log(v_TcName,"Step9: Verify that the UE sends a NAS Service Request message and that the network responds with a "&
                  "NAS Service Reject message in which the EMM Cause Code is set to ", v_CauseValue); 
    fl_UT_ApplyCommand(UT, cas_UT_Req(APP_TRANSMIT_STATE_ON, NO_CNF_REQUIRED,{cs_Ut_Parameter_Common ("ACTIVATE_ADMIN_APN", "10")}));
   
    f_Rcv_ServiceRequest_AppRetrans_Common_IMSLESS("Step9",p_CauseValue,p_T3346);
        
    log(v_TcName,"Step10: Verify that the UE sends a second NAS Service Request message and that the network responds with a "&
                  "NAS Service Reject message in which the EMM Cause Code is set to ", v_CauseValue); 
    
    f_Rcv_ServiceRequest_AppRetrans_Common_IMSLESS("Step10",p_CauseValue,p_T3346);

    log(v_TcName,"Step11: Verify that the UE sends a third NAS Service Request message and that the network responds with a "&
                  "NAS Service Reject message in which the EMM Cause Code is set to ", v_CauseValue); 
    
   t_WaitTime_ServiceReq.start(v_Timer_4); //60 sec

    alt
    {
      []SRB.receive(car_NB_SRB0_RrcPdu_IND(nbiot_Cell1, cr_RRCConnectionRequest_NB ( cr_EstablishmentCause_NB_Any, ? ) ))
       {
            t_WaitTime_ServiceReq.stop;
            
            f_ServiceReject_check_RRCRequest_AppRetrans_Common(11,v_Timer_1,p_CauseValue,p_T3346);
        }

       [] t_WaitTime_ServiceReq.timeout
        {
           f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, v_TcName & "Step11: UE not triggered Service Request");            
        }
    }
   // f_ServiceReject_check_RRCRequest_AppRetrans_Common(11,v_Timer_1,p_CauseValue,p_T3346);
    
      
    log(v_TcName,"Step13: Once the 1+ minute timer expires, verify that the UE attempts to connect upon the next request of the test application with no delay.");  
    log(v_TcName,"Step13: Verify that the UE sends a forth NAS Service Request message and that the network responds with a "&
                  "NAS Service Reject message in which the EMM Cause Code is set to ", v_CauseValue); 
    
   // f_UT_TriggerAdminAppTransmitStateOn(UT);
    t_WaitTime_Random.start(v_Timer_3); //Random 0 to 15 sec
    alt
    {
      []SRB.receive(car_NB_SRB0_RrcPdu_IND(nbiot_Cell1, cr_RRCConnectionRequest_NB ( cr_EstablishmentCause_NB_Any, ? ) ))
       {
            if(v_StopRandomTimer == 1)
            {
                log("UE triggered Service request during random period of time between 0 and 15 seconds");
                t_WaitTime_Random.stop;
            }
            else
            {
                t_WaitTime_ServiceReq.stop;
            }
            v_Timer_1 := ( 2.0 * 60.0 ); // 2 minutes
            f_ServiceReject_check_RRCRequest_AppRetrans_Common(13,v_Timer_1,p_CauseValue,p_T3346);
        }
       [] t_WaitTime_Random.timeout
        {
            v_StopRandomTimer := 0;
            log("UE not triggered Service Request during random period of time between 0 and 15 seconds");
          //  f_UT_TriggerAdminAppTransmitStateOn(UT);
            t_WaitTime_ServiceReq.start(v_Timer_2); //10 sec
            repeat;
        }
       [] t_WaitTime_ServiceReq.timeout
        {
            f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, v_TcName & "Step13: UE not triggered Service Request after 1+ minute timer expires");            
        }
    }    
    
    log(v_TcName,"Step15: Once the 2 minute timer expires, verify that the UE attempts to connect upon the next request of the test application with no delay.");  
    log(v_TcName,"Step15: Verify that the UE sends a fifth NAS Service Request message and that the network responds with a "&
                  "NAS Service Reject message in which the EMM Cause Code is set to ", v_CauseValue); 
    
    t_WaitTime_ServiceReq.start(v_Timer_2); //10 sec
    alt
    {
      []SRB.receive(car_NB_SRB0_RrcPdu_IND(nbiot_Cell1, cr_RRCConnectionRequest_NB ( cr_EstablishmentCause_NB_Any, ? ) ))
       {
           t_WaitTime_ServiceReq.stop;
           v_Timer_1 := ( 8.0 * 60.0 ); // 8 minutes
           f_ServiceReject_check_RRCRequest_AppRetrans_Common(15,v_Timer_1,p_CauseValue,p_T3346);
       }
       [] t_WaitTime_ServiceReq.timeout
       {
           f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, v_TcName & "Step15: UE not triggered Service Request after 2 minutes timer expires");           
       }
    }
    
 
    log(v_TcName,"Step17: Once the 8 minute timer expires, verify that the UE attempts to connect upon the next request of the test application with no delay.");  
    log(v_TcName,"Step17: Verify that the UE sends a sixth NAS Service Request message and that the network responds with a "&
                  "NAS Service Reject message in which the EMM Cause Code is set to ", v_CauseValue); 
      
    t_WaitTime_ServiceReq.start(v_Timer_2); //10 sec
    alt
    {
       []SRB.receive(car_NB_SRB0_RrcPdu_IND(nbiot_Cell1, cr_RRCConnectionRequest_NB ( cr_EstablishmentCause_NB_Any, ? ) ))
       {
           t_WaitTime_ServiceReq.stop;
           v_Timer_1 := ( 15.0 * 60.0 ); // 15 minutes
           f_ServiceReject_check_RRCRequest_AppRetrans_Common(17,v_Timer_1,p_CauseValue,p_T3346);
       }
       [] t_WaitTime_ServiceReq.timeout
       {
           f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, v_TcName & "Step17: UE not triggered Service Request after 8 minutes timer expires");           
       }        
        
    }
     
    log(v_TcName,"Step19: Once the 15 minute timer expires, verify that the UE attempts to connect upon the next request of the test application with no delay.");  
    log(v_TcName,"Step19: Verify that the UE sends a seventh NAS Service Request message and that the network responds with a "&
                  "NAS Service Reject message in which the EMM Cause Code is set to ", v_CauseValue); 
     
    t_WaitTime_ServiceReq.start(v_Timer_2); //10 sec
    alt
    {
       []SRB.receive(car_NB_SRB0_RrcPdu_IND(nbiot_Cell1, cr_RRCConnectionRequest_NB ( cr_EstablishmentCause_NB_Any, ? ) ))
      {
           t_WaitTime_ServiceReq.stop; 
           f_ServiceReject_check_RRCRequest_AppRetrans_Common(19,v_Timer_1,p_CauseValue,p_T3346);
           f_NBIOT_SS_ConfigRachPreambleIndMode(nbiot_Cell1, disable);           //added for LCCP-2346
       }
       [] t_WaitTime_ServiceReq.timeout
       {
           f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, v_TcName & "Step19: UE not triggered Service Request after 15 minutes timer expires");           
       }        
    }
    fl_UT_ApplyCommand(UT, cas_UT_Req(APP_TRANSMIT_STATE_OFF, NO_CNF_REQUIRED,{cs_Ut_Parameter_Common ("ACTIVATE_ADMIN_APN", "0")}));
    }
    
  function f_VZ_TC_5_05_Code12_NBIOT(charstring TestPlan_Name) runs on NBIOT_PTC
  {   
    f_NBIOT_Init (c1);
       
    log(testcasename(),": UE RECEIVES TRACKING AREA UPDATE REJECT MESSAGE FROM THE NETWORK CODES 12");
   
    f1_VZ_TC_5_5_NBIOT_Body(tsc_Cause_TA_NotAllowed, TestPlan_Name);  
    f_NBIOT_TestBody_Set(false);
    f_NBIOT_PreliminaryPass(__FILE__, __LINE__, "f1_VZ_TC_5_5_NBIOT_Body PASSED");
 
  }  
    
    function f_VZ_TC_5_05_Code13_NBIOT(charstring TestPlan_Name) runs on NBIOT_PTC
  {   
    f_NBIOT_Init (c1);
       
    log(testcasename(),": UE RECEIVES TRACKING AREA UPDATE REJECT MESSAGE FROM THE NETWORK CODES 12");
   
    f1_VZ_TC_5_5_NBIOT_Body(tsc_Cause_Roaming_NotAllowed, TestPlan_Name);  
    f_NBIOT_TestBody_Set(false);
    f_NBIOT_PreliminaryPass(__FILE__, __LINE__, "f1_VZ_TC_5_5_NBIOT_Body PASSED");
 
  }
    
   function f_VZ_TC_5_05_Code15_NBIOT(charstring TestPlan_Name) runs on NBIOT_PTC
  {   
    f_NBIOT_Init (c1);
       
    log(testcasename(),": UE RECEIVES TRACKING AREA UPDATE REJECT MESSAGE FROM THE NETWORK CODES 12");
   
    f1_VZ_TC_5_5_NBIOT_Body(tsc_Cause_NoSuitableCells, TestPlan_Name);  
    f_NBIOT_TestBody_Set(false);
    f_NBIOT_PreliminaryPass(__FILE__, __LINE__, "f1_VZ_TC_5_5_NBIOT_Body PASSED");
 
  }
    
     function f1_VZ_TC_5_5_NBIOT_Body(
                               NAS_CauseValue_Type p_CauseValue, charstring TestPlan_Name) runs on NBIOT_PTC
  {
    var EUTRA_ASN1_RRC_TransactionIdentifier_Type v_RRC_TI := tsc_RRC_TI_Def;
    var NAS_MSG_Indication_Type v_NasInd, v_NAS_Ind;
    var float v_Timer_1 := ( 5.0 * 60.0 ); // 5 minutes
    timer t_WaitTime;
    var GutiParameters_Type v_Guti1_Params;  
    var NAS_PlmnId v_HomePlmn;
    var NAS_Tac v_Tac1;
    var EPS_UpdateTypeValue v_UpdateType := tsc_EpsUpdate_TaUpdate;//f_GetEPSTAUType(EPS_Only);
    var integer v_causecode;
    var charstring v_cause_name;
    var charstring v_TcName := testcasename() & ": ";  
    timer t_Procedure_Guard_Timer;
    var float tsc_GuardProcedureTimer_240 := 240.0;
    var template (present) B3_Type v_PDNType := (f_GetPdnType(), '101'B, '001'B);
    var template (present) NAS_UL_Message_Type v_ESMMessage := cr_CIOT_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach, v_PDNType);
    
  
    v_causecode := bit2int(p_CauseValue);
    v_cause_name := " ";
    if (p_CauseValue == tsc_Cause_TA_NotAllowed){
      v_cause_name := "TAC Not Allowed";
    }
    if (p_CauseValue == tsc_Cause_Roaming_NotAllowed){
      v_cause_name := "Roaming NotAllowed in this TA";
    }
    if (p_CauseValue == tsc_Cause_NoSuitableCells){
      v_cause_name := "No Suitable Cell in Tracking area";
    }   
    f_NBIOT_Init (c1);  
    log(v_TcName,"Step1: Configure the test setup so that the DUT finds service on a single eNodeB with cell_id " &
                 "(where cell_id refers to the CellIdentity parameter that is broadcast in SIB1) equal to value " &
                 "X1 = 1 and PLMN id equal to value Y1 = ",f_ConvertPLMNtoString(f_Asn2Nas_PlmnId(valueof(cs_HPLMN_Def))));
    f_NBIOT_CellConfig_Def (nbiot_Cell1, CONTROL_PLANE);  
    f_NBIOT_SetCellPower ( nbiot_Cell1, tsc_ServingCellRS_EPRE );  
      
    v_Guti1_Params := f_NBIOT_CellInfo_GetGuti(nbiot_Cell1);
    v_HomePlmn:= f_Asn2Nas_PlmnId(v_Guti1_Params.PLMN_Identity);
    v_Tac1 := bit2oct(f_NBIOT_CellInfo_GetTAC(nbiot_Cell1));
      
    /* 3. Power the DUT on and allow it to find LTE service. */  
    log(v_TcName,"Step2: Configure the test equipment such that the network will allow the UE to attach and connect to PDNs");  
    log(v_TcName,"Step3: Power the DUT on and allow it to find LTE service.");
    f_UT_SwitchOnUE(UT, true);
      

    t_Procedure_Guard_Timer.start(tsc_GuardProcedureTimer_240); //Guard Procedure Started
    
    /*  4. Verify that the DUT successfully establishes an RRC connection and attaches to the LTE network. */
    v_NAS_Ind :=    f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell1,
                                                  cr_EstablishmentCause_NB_Any,
                                                  cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                    cr_CIOT_ATTACH_REQUEST(cr_AdditionalUpdateType_CIOT), //Table 22.5.7a.3.3-4
                                                                                    v_ESMMessage)); 
    f_NBIOT_InitialRegistration_Step5_14(nbiot_Cell1, CONTROL_PLANE, STATE2_NB_CONNECTED_UPDATED, v_NAS_Ind);
  
      
      
      
    log(v_TcName,"Step4:Device under test successfully establishes an RRC Connection and Attached to the LTE Network");
    
    log(v_TcName, "Default Procedure Guard Timer Stopped");
    t_Procedure_Guard_Timer.stop; //Guard Procedure Ended
    
    f_Delay (1.0);
    /* 5. Force the DUT to the RRC IDLE state by having the network transmit an RRCConnectionRelease message. */
    
    f_NBIOT_RRC_ConnectionRelease( nbiot_Cell1 );  
    log(v_TcName," Step5: DUT moved to the RRC Idle state by transmitting an RRC Connection release message.");
    log(v_TcName,"Step6: Configure the test equipment so that the network responds to all NAS Tracking 
                Area Update Request messages with a NAS Tracking Area Update Reject
                message with an EMM Cause Code of 12.");
 
      
      
    /* 6. Configure the test equipment so that the network responds to all NAS Tracking Area Update Request 
     *     messages with a NAS Tracking Area Update Reject message with an EMM Cause Code of 12.      
     * 7. Reconfigure the test setup so that the DUT now finds service on a different Tracking Area with id 
     *     equal to value Z2 where Z2 is not equal to Z1, and Z2 is not on the UEs list of tracking areas. 
     *     Note that only the TAC portion of the TAI will be different. The PLMN id is still equal to Y1.*/

     f_NBIOT_ReleaseAllCells();
    log(v_TcName,"Step7: Reconfigure the test setup so that the DUT now finds service on a different Tracking Area with id equal to value Z2 where Z2 is not equal to Z1, and Z2 is not on the UEs list of tracking areas. Note that only the TAC portion of the TAI will be different. The PLMN id is still equal to Y1");  
    log(v_TcName,"Step7a: Modifying TAC to Z2 = ", oct2int(tsc_TAC2));
    f_NBIOT_CellInfo_SetTAC(nbiot_Cell1, oct2bit(tsc_TAC2));
     
    f_NBIOT_CellConfig_Def( nbiot_Cell1, CONTROL_PLANE);
    
    f_NBIOT_SetCellPower ( nbiot_Cell1, tsc_ServingCellRS_EPRE );
    log(v_TcName,"Step7c: TAC Modified to Z2 = ", oct2int(tsc_TAC2));
      
    /* 8a. Verify that the UE sends a NAS Tracking Area Update Request message and that the 
     * 8b. network responds with a NAS Tracking Area Update Reject message in which the EMM Cause Code is set to 12.*/  
    log (v_TcName,"Step8: Verify that the UE sends a NAS Tracking Area Update Request message and that the network responds with a NAS Tracking Area Update Reject message in which the EMM Cause Code is set to ",v_causecode);  
    
    t_Procedure_Guard_Timer.start(tsc_GuardProcedureTimer_240); //Guard Procedure Started
    
    v_NasInd :=  f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell1,
                                       cr_EstablishmentCause_NB_Any,
                                       cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                           cdr_TAU_Request_OldGuti(?,
                                                                                 f_NBIOT_SecurityKSIasme_Get(),
                                                                                 cr_DRXparameter_Any ('5C'O) ifpresent, // @sic R5s120210 sic@
                                                                                 *,
                                                                                 f_GutiParameters2MobileIdentity(omit, v_Guti1_Params),
                                                                                 ?)));
      

    
    log(v_TcName, "Default Procedure Guard Timer Stopped");
    t_Procedure_Guard_Timer.stop; //Guard Procedure Ended

    if (not isvalue (v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST))
    {
        f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, v_TcName &
                "Step8a: Unexpected NAS message received while waiting for Tracking Area Update Request");
    }
    log(v_TcName,"Step8a: Received Tracking Area Update Request");
    /*   The SS transmits a TRACKING AREA UPDATE REJECT message with EMM cause = "Tracking area not allowed" as specified.*/
    
    SRB.send(cas_NB_SRB1bis_NasPdu_REQ(nbiot_Cell1,
                                         cs_TimingInfo_Now,
                                         cs_NAS_Request(tsc_SHT_NoSecurityProtection, 
                                                        cs_508_TRACKING_AREA_UPDATE_REJECT(p_CauseValue))));
       
    
    t_WaitTime.start(f_NBIOT_SetTimerToleranceMin ( nonProtocolTimer, v_Timer_1));
    log(v_TcName,"Step8b: SS Transmits Tracking Area Update Reject with EMM Cause code ",v_causecode," (",v_cause_name,")");
    
    f_NBIOT_RRC_ConnectionRelease( nbiot_Cell1 );
    /* 9. Monitor the DUT for 5 minutes and verify that it does not attempt to connect to the LTE network. */
    log(v_TcName,"Step9: Monitor the DUT for ",float2int(v_Timer_1)/60," minutes and verify that it does not attempt to attach to the LTE network.");      

    alt {
      []SRB.receive(car_NB_SRB0_RrcPdu_IND(nbiot_Cell1, cr_RRCConnectionRequest_NB ( cr_EstablishmentCause_NB_Any, ? ) ))
       {
            t_WaitTime.stop;
            log(v_TcName,"Step9 stop timer 5 minutes");
            f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, v_TcName & "Step9: UE triggered unexpected AttachReq.");
        }
      []t_WaitTime.timeout
        {
            log(v_TcName,"Step9 Successfully verified that verify that UE did not attempt to connect to the LTE network.");
            
        }
    }

    /*  10. Reconfigure the test setup so that the DUT now finds service on a different eNodeB with cell_id 
     *  equal to value X2 where X2 is not equal to X1. X1 and X2 are on the same frequency. 
     *  The PLMN id is still equal to Y1. The TAI is still equal to Z2.
     */
    
    f_NBIOT_ReleaseAllCells();
    log(v_TcName,"Step10: Reconfigure the test setup so that the DUT now finds service on a different eNodeB with cell_id equal to value X2 where X2 is not equal to X1. X1 and X2 are on the same frequency. The PLMN id is still equal to Y1. The TAI is still equal to Z2"); 
    log(v_TcName,"Step10a: Reconfigure to Cell ID = 2");
    f_NBIOT_CellInfo_SetCellId(nbiot_Cell1, nbiot_Cell2);
    
    f_NBIOT_CellConfig_Def( nbiot_Cell1, CONTROL_PLANE);
    f_Delay(2.0); 
    f_NBIOT_SetCellPower (nbiot_Cell1, tsc_ServingCellRS_EPRE );
    
    log(v_TcName,"Step10c: Cell-Id Modified");
    
    v_Timer_1 := ( 1.0 * 60.0 );
    /*  12. Verify that the DUT does not attempt to attach to the LTE network on the new eNodeB. */
    log(v_TcName,"Step11: Verify that the DUT does not attempt to attach to the LTE network.");
    t_WaitTime.start(f_NBIOT_SetTimerToleranceMin ( nonProtocolTimer, v_Timer_1));
    log(v_TcName,"Step11: Start timer 1 minute");  

    alt {
      []SRB.receive(car_NB_SRB0_RrcPdu_IND(nbiot_Cell1, cr_RRCConnectionRequest_NB ( cr_EstablishmentCause_NB_Any, ? ) ))
        {
            t_WaitTime.stop;
            log(v_TcName,"Step11: Stop timer 1 minute");
            f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, "Step 11: UE Triggers unexpected AttachReq.");
        }
      []t_WaitTime.timeout
        {
            log(v_TcName,"Step11: Verifed that the UE did not attempt to attach to the LTE network");
            
        }
    } 
      
    /*  12. Reconfigure the test setup so that the DUT now finds service on a different Tracking Area with TAI 
     *      equal to value Z3 where Z3 is not equal to Z1 or Z2. Note that only the TAC portion of the TAI will 
     *      be different. The PLMN id is still equal to Y1.
     */
    
    f_NBIOT_ReleaseAllCells();
    log ("Step12: Reconfigure the test setup so that the DUT now finds service on a different Tracking Area with TAI equal to value Z3 where Z3 is not equal to Z1 or Z2. Note that only the TAC portion of the TAI will be different. The PLMN id is still equal to Y1.");  
    log(v_TcName,"Step12a: Reconfigure for different TAC Z3 = ", oct2int(tsc_TAC3));  
    
    f_NBIOT_CellInfo_SetTAC(nbiot_Cell1, oct2bit(tsc_TAC3));
     
    
    f_NBIOT_CellConfig_Def( nbiot_Cell1, CONTROL_PLANE);
    f_NBIOT_SetCellPower ( nbiot_Cell1, tsc_ServingCellRS_EPRE );

    log(v_TcName,"Step12c: TAC Modified to Z3");

    t_Procedure_Guard_Timer.start(tsc_GuardProcedureTimer_240); //Guard Procedure Started
            
    /*  13. Verify that the DUT now attempts to connect to the LTE network and is successful. */
    if (p_CauseValue == tsc_Cause_TA_NotAllowed )
    {
       v_NAS_Ind :=    f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell1,
                                                  cr_EstablishmentCause_NB_Any,
                                                  cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                    cr_CIOT_ATTACH_REQUEST(cr_AdditionalUpdateType_CIOT), //Table 22.5.7a.3.3-4
                                                                                    v_ESMMessage)); 
        f_NBIOT_InitialRegistration_Step5_14(nbiot_Cell1, CONTROL_PLANE, STATE2_NB_CONNECTED_UPDATED, v_NAS_Ind);
  
        log(v_TcName,"Step13: DUT Attaches on LTE Network successfully.");
    }
    else
    {   
        v_Guti1_Params := f_NBIOT_CellInfo_GetGuti(nbiot_Cell1);
        v_HomePlmn:= f_Asn2Nas_PlmnId(v_Guti1_Params.PLMN_Identity);
        
        
             v_NasInd :=  f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell1,
                                       cr_EstablishmentCause_NB_Any,
                                       cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                           cdr_TAU_Request_OldAddGutiTAI(tsc_EpsUpdate_TaUpdate,  //Table 22.5.7a.3.3-5
                                                                                                '001'B,
                                                                                                cr_DRXparameter_Any ('5C'O) ifpresent,
                                                                                                cr_AdditionalUpdateType_CIOT ifpresent,  // @sic R5-176872 sic@
                                                                                                f_GutiParameters2MobileIdentity(omit, v_Guti1_Params),
                                                                                                cr_TAI_Any ifpresent,
                                                                                                omit, // @sic R5s170777 sic@
                                                                                                cr_PTMSI_SignatureAny ifpresent)));
        
        
                                                                 
    
      
        log(v_TcName,"Step13: Received Tracking Area Update");
 
        
        
        SRB.send(cas_NB_SRB_NasPdu_REQ(nbiot_Cell1,
                                   tsc_SRB1bis,
                                   cs_TimingInfo_Now,
                                   cs_NAS_Request(tsc_SHT_IntegrityProtected_Ciphered,
                                                  cs_TAU_Accept_Common(v_UpdateType,
                                                                       f_GutiParameters2MobileIdentity(tsc_IEI_Guti, v_Guti1_Params),
                                                                       omit,
                                                                       omit,
                                                                       omit,
                                                                       omit,
                                                                       f_GetNBIOTAdditionalUpdateResult(v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.addUpdateType)
                                                                       ))));
    
        
        log(v_TcName,"Step13: Sent Tracking Area Update Accept message");  
     
        SRB.receive(car_NB_SRB_NasPdu_IND(nbiot_Cell1,
                                      tsc_SRB1bis,
                                      cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered,
                                                        cr_508_TAU_Complete)));

        log(v_TcName,"Step13: Received Tracking area update complete message"); 
     }

    log(v_TcName, "Default Procedure Guard Timer Stopped");
    t_Procedure_Guard_Timer.stop; //Guard Procedure Ended

    f_NBIOT_RRC_ConnectionRelease( nbiot_Cell1 );  
    
    /*  14. Reconfigure the test setup so that the DUT again finds service on the Z2.
     */
    log(v_TcName,"Step14: Reconfigure the test setup so that the DUT again finds service on tracking area Z2."); 
    //Bring Down the Cell
    
    f_NBIOT_ReleaseAllCells(); 
    log(v_TcName,"Step14a: Reconfigure back the TAC to Z2 = ",oct2int(tsc_TAC2));
    f_NBIOT_CellInfo_SetTAC(nbiot_Cell1, oct2bit(tsc_TAC2));
    
    f_NBIOT_CellConfig_Def( nbiot_Cell1, CONTROL_PLANE);
    f_NBIOT_SetCellPower ( nbiot_Cell1, tsc_ServingCellRS_EPRE );
      
    log(v_TcName,"Step14c: TAC reverted back to Z2");
     
    /*  15. Verify that the DUT does not attempt to connect to Z2. */
    log(v_TcName,"Step15: Verify that the DUT does not attempt to attach to the LTE network.");
    t_WaitTime.start(f_NBIOT_SetTimerToleranceMin ( nonProtocolTimer, v_Timer_1));
    log(v_TcName,"Step15: Start timer 1 minute");
   
    alt {
       []SRB.receive(car_NB_SRB0_RrcPdu_IND(nbiot_Cell1, cr_RRCConnectionRequest_NB ( cr_EstablishmentCause_NB_Any, ? ) ))
       {
            t_WaitTime.stop;
            log(v_TcName,"Step15: Stop timer 1 minute");
            f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, v_TcName & "Step15: UE Triggers unexpected AttachReq.");
        }
      []t_WaitTime.timeout
        {
            log(v_TcName,"Step15: Verified that the DUT did not attempt to attach to the LTE network");
            
        }
    }
      
    /* 16. Power cycle the DUT */
    log(v_TcName,"Step16: Power-Cycle DUT."); 
    fl_UT_ApplyCommand(UT, cas_UT_Req(POWER_CYCLE, NO_CNF_REQUIRED));
    
  
    /* 17. Verify that the DUT successfully establishes an RRC connection on the eNodeB with TAI equal to 
     * Z2 and sends a NAS Attach Request message. */
    /* 18. Verify that the DUT attaches to the LTE network successfully. */
    
    t_Procedure_Guard_Timer.start(tsc_GuardProcedureTimer_240); //Guard Procedure Started

    log ("Step17: Verify that the DUT successfully establishes an RRC connection on the eNodeB with TAI equal to Z2 and sends a NAS Attach Request message.");  
    v_NAS_Ind :=    f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell1,
                                                  cr_EstablishmentCause_NB_Any,
                                                  cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                    cr_CIOT_ATTACH_REQUEST(cr_AdditionalUpdateType_CIOT), //Table 22.5.7a.3.3-4
                                                                                    v_ESMMessage)); 
    f_NBIOT_InitialRegistration_Step5_14(nbiot_Cell1, CONTROL_PLANE, STATE2_NB_CONNECTED_UPDATED, v_NAS_Ind);
    log(v_TcName,"Step18: UE attached to the LTE network successfully");
    
    log(v_TcName, "Default Procedure Guard Timer Stopped");
    t_Procedure_Guard_Timer.stop; //Guard Procedure Ended

    // 19. Power the device off.
    log(v_TcName,"Step19: Power the device off");
    //Expect the UE to detach and release RRC connection
     
   f_NBIOT_ReleaseAllCells();
   f_UT_PowerOffUE (UT); 
  
  } //function f1_VZ_TC_5_5_NBIOT
  
    
    function f_VZ_TC_5_6_NBIOT(charstring TestPlan_Name) runs on NBIOT_PTC
  {
    var charstring v_TcName := testcasename() & ": ";
    log(v_TcName, "TRACKING AREA UPDATE REQUEST FAILS TRACKING AREA UPDATE ATTEMPT COUNTER REACHES MAX VALUE"); 
    f_NBIOT_Init (c1);
    
    fl_UT_ApplyCommand(UT, cas_UT_Req(RESET_FRBDN_PLMN, NO_CNF_REQUIRED));

    f_Delay(4.0);
    log(v_TcName, "Step1: Configure the test setup so that the DUT finds service on a single eNodeB with cell_id X1 = 1, PLMN id Y1 = ", 
                         f_ConvertPLMNtoString(f_Asn2Nas_PlmnId(valueof(cs_HPLMN_Def))) & ", and TAI Z1 = ", oct2int(tsc_TAC1));
      
    log(v_TcName, "Step1: Configure the test system such that T3402 is set to 12 minutes");
    f_NBIOT_CellConfig_Def(nbiot_Cell1, CONTROL_PLANE);
      
    f_NBIOT_SetCellPower(nbiot_Cell1, tsc_ServingCellRS_EPRE);
    
      
    f_VZ_TC_5_6_Body(TestPlan_Name);
    f_NBIOT_TestBody_Set(false);
    
    //NO need to power off UE again as UE is already powered off as part of last step 
    //   in this test case. Simply release all cells 
    f_NBIOT_ReleaseAllCells();
 }
    
    function f_VZ_TC_5_6_Body(charstring TestPlan_Name) runs on NBIOT_PTC
  {
    var NAS_MSG_Indication_Type v_NasInd;
    var GutiParameters_Type v_Guti1_Params;
    var NAS_PlmnId v_HomePlmn;
    var NAS_Tac v_Tac1;
    var EPS_UpdateTypeValue v_UpdateType := tsc_EpsUpdate_TaUpdate;//f_GetEPSTAUType(EPS_Only);
    var template (present) B3_Type v_PDNType := (f_GetPdnType(), '101'B, '001'B);
  //  var B3_Type v_PDNType := (f_GetPdnType(), '101'B, '001'B);
    var ProcedureTransactionIdentifier v_PTId_UE;
    var PDN_CONNECTIVITY_REQUEST v_PDNConnReq;
    var EUTRA_ASN1_RRC_TransactionIdentifier_Type v_RRC_TI := tsc_RRC_TI_Def;
    var float tsc_GuardProcedureTimer_240 := 240.0;
    timer t_T3402 := f_NBIOT_SetTimerToleranceMax( nasTTCNTimer, 12.0 * 60.0); // 12 min
    const integer c_rrcConnRejectTime := 10;
    const float c_cellBringUpDelay := 5.0;
    template (value) GPRS_Timer v_GT3402 := cs_GprsTimer_tv('17'O ,tsc_GprsTimerUnit_1min, '01100'B); 
    var integer tauCount := 0;
    var integer Rachcount := 0;
    timer t_WaitTime := 0.0;
    var float v_T300_Wait := 2.5;
    var float v_T3411_Wait := 8.0;
    var float v_T3430_Wait := 17.0;
    var float v_T302_Wait := 7.5;
    var float v_T3402_Wait := 12.0 * 60.0;
    var integer i := 0; 
    var integer StepNum := 0;  
    timer v_waitTimer;  
    var charstring v_TcName := testcasename() & ": ";
    timer t_Procedure_Guard_Timer;
    var template (present) NAS_UL_Message_Type v_ESMMessage := cr_CIOT_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach, v_PDNType);
   
    //var boolean b_MultiRatSupported := false;
  
    v_Guti1_Params := f_NBIOT_CellInfo_GetGuti(nbiot_Cell1);
    v_HomePlmn:= f_Asn2Nas_PlmnId(v_Guti1_Params.PLMN_Identity);
    v_Tac1 := bit2oct(f_NBIOT_CellInfo_GetTAC(nbiot_Cell1));
      
    log(v_TcName, "Step2: Configured the test equipment for the DUT to attach and connect to PDNs");
    log(v_TcName, "Step3: Power the DUT on and allow it to find LTE service.");
    f_UT_SwitchOnUE(UT);
    
    t_Procedure_Guard_Timer.start(tsc_GuardProcedureTimer_240);
          
     v_NasInd := f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell1,
                                                  cr_EstablishmentCause_NB_Any,
                                                  cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                    cr_CIOT_ATTACH_REQUEST(cr_AdditionalUpdateType_CIOT), //Table 22.5.7a.3.3-4
                                                                                    v_ESMMessage)); 

    f_NBIOT_InitialRegistration_Step5_14(nbiot_Cell1, CONTROL_PLANE, STATE2_NB_CONNECTED_UPDATED, v_NasInd, v_GT3402); 
   
     log(v_TcName, "Step4: Verify that the DUT successfully establishes an RRC connection and attaches to
     the LTE network.");
    
    log(v_TcName, "Default Procedure Guard Timer Stopped");
   
    t_Procedure_Guard_Timer.stop; //Guard Procedure Ended
      
    
    
    if (not pc_IMS) // IMSLESS
    {
        i := 1; // This is just to make Steps aligned with IMSLESS TP
    }
      
    log(v_TcName, "Step",(6 - i),": Force the DUT to the RRC IDLE state by having the network transmit an
      RRCConnectionRelease message");
    f_Delay(1.0);
    f_NBIOT_RRC_ConnectionRelease(nbiot_Cell1);
    
    log(v_TcName, "Step",(7 - i),": Reconfiguring the test setup for the DUT to find service on a different Tracking Area with " & 
         "id equal to value Z2 where Z2 is not equal to Z1.");

    f_NBIOT_ReleaseAllCells();
    
    f_NBIOT_CellInfo_SetTAC(nbiot_Cell1, oct2bit(tsc_TAC2));
    
    f_NBIOT_CellConfig_Def( nbiot_Cell1, CONTROL_PLANE);
     f_Delay(2.0);
    f_NBIOT_SetCellPower ( nbiot_Cell1, tsc_ServingCellRS_EPRE );
    log(v_TcName, "Step",(7 - i),": Cell Reconfiguration Successful");    
    
    
     // TAU Count will be started when TE Receives TAU in RRC Connection Setup Complete. 
     // For RACH/RRC Failure Case UE, TAU has not sent out from UE so TAU count will not be incremented at UE.
       
    
    f_NBIOT_SS_ConfigRachPreambleIndMode(nbiot_Cell1, enable);
    log(v_TcName, "Step",(7 - i),": Configuring Network NOT to respond to RACH attempts from the UE");
     
    log(v_TcName, "Step",(8 - i),": Verify from the DUT to send a series of RACH attempts for T300 seconds");
    Rachcount := 0;
     
    log(v_TcName, "Configured test equipment NOT to respond to the RACH attempts from the UE");  
    Rachcount := f_VZ_NBIOT_RACH_Ignore_Timeout("T300", v_T300_Wait, Rachcount);
    log(v_TcName, "Received First series of RACH from the DUT. Ignoring it. RACH Count = ", Rachcount);
       
     
    log(v_TcName, "Step",(10 - i),": Verify that the UE waits at least T3411 seconds before sending another series
     of RACH attempts. Verify that the network ignores the random access
     procedure");
    
    t_WaitTime.start(v_T3411_Wait);
    alt 
    {
      []SYSIND.receive(car_NB_RachPreamble_IND(nbiot_Cell1))
      {
        t_WaitTime.stop;
        f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, v_TcName& "Unexpected RACH attempt from UE before timeout");
      }
      []t_WaitTime.timeout
      {   
        log(v_TcName, "Step",(10 - i),": Successfully verified that the DUT does not make a RACH attempt for atleast T3411 seconds (10 sec)");
      }
    } 

    log(v_TcName, "Step",(10 - i),": Expecting RACH attempt from DUT after T3411 seconds");
    Rachcount := 0;
    Rachcount := f_VZ_NBIOT_RACH_Ignore_Timeout("T300", 2.5, Rachcount);
    log(v_TcName, "Step",(10 - i),": Received 2nd RACH attempt from DUT. Ignoring it");
      
    log(v_TcName, "Successfully Verified Step",(11 - i));      // step 10
    log(v_TcName, "Step",(11 - i),": UE should not attempt RACH for atleast T3411 seconds");
    StepNum := 11 - i;       
   
     t_WaitTime.start(v_T3411_Wait);
    alt 
    {
      []SYSIND.receive(car_NB_RachPreamble_IND(nbiot_Cell1))
      {
        t_WaitTime.stop;
        f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, v_TcName& "Unexpected RACH attempt from UE before timeout");
      }
      []t_WaitTime.timeout
      {   
        log(v_TcName, "Step",(10 - i),": Successfully verified that the DUT does not make a RACH attempt for atleast T3411 seconds (10 sec)");
      }
    }     
      
     f_NBIOT_SS_ConfigRachPreambleIndMode(nbiot_Cell1, disable);
   
    log(v_TcName, "Step",(11 - i),": Reconfiguring the network to respond to RRC Conn Req with RRC Conn Reject with a wait time of 10 seconds");
        
    log(v_TcName, "Step",(12 - i),": Waiting for RRCConnReq from DUT"); 
      
    
    SRB.receive(car_NB_SRB0_RrcPdu_IND(nbiot_Cell1, cr_RRCConnectionRequest_NB ( cr_EstablishmentCause_NB_Any, ? ) ));
     
    log(v_TcName, "Step",(12 - i),": Received RRCConnReq from DUT");
    
    SRB.send(cas_NB_SRB0_RrcPdu_REQ(nbiot_Cell1, cs_TimingInfo_Now, cs_RRCConnectionReject_NB));
     
    log(v_TcName, "Step",(12 - i),": Sent RRCConnectionReject with a waitTime of 10 sec");
    t_WaitTime.start(v_T302_Wait);  
    // Reconfiguring the SRBs and DRBs for the RACH to succeed in the future 
    f_Delay(2.0);
    
      
    log(v_TcName, "Step",(13 - i),":  After the RRCConnectionRequest fails, DUT should not attempt a RACH for at least 10 seconds");  
      
    // Handling 1st Successful TAU Received   
    StepNum := 13 - i;  
    
     
    alt 
    {
      []SRB.receive(car_NB_SRB0_RrcPdu_IND(nbiot_Cell1, cr_RRCConnectionRequest_NB ( cr_EstablishmentCause_NB_Any, ? ) ))
    
      {
        t_WaitTime.stop;
        f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, v_TcName& "Unexpected RACH attempt from UE before timeout");
      }
      []t_WaitTime.timeout
      {   
        log(v_TcName, "Step",(13 - i),": Successfully verified that the DUT does not make a RACH attempt for atleast T302 seconds (10 sec)");
      }
    } 
    
    log(v_TcName, "Step",(14 - i),": Reconfigured the network to allow RACH and RRC Connection Setup to succeed");
    log(v_TcName, "Step",(14 - i),": Reconfigured the network NOT to respond to TAU Req msg");
    StepNum := 14 - i;
    tauCount := f_VZ_NBIOT_Receive_And_Ignore_TAU(StepNum, tauCount); //taucount = 1
      
    // Verify that after the expiration of T3430 + T3411, the UE sends a NAS Tracking Area Update Request 
     // message to the network.
     
    // Handling 2nd Successful TAU Received 
    log(v_TcName, "Step",(15 - i),": Verify that after the expiration of T3430 + T3411, the UE sends a NAS Tracking
        Area Update Request message to the network.");
    StepNum := 15 - i;   
    f_VZ_NBIOT_TAU_T3430PlusT3411_Timeout(StepNum, v_T3430_Wait, v_T3411_Wait);
      
    // Verify that after the expiration of T3430 + T3411, the UE sends a NAS Tracking 
    //  Area Update Request message to the network.      
    log(v_TcName, "Step",(15 - i),": Expecting TAU Req from DUT.");
      
    StepNum := 16 - i;   
    tauCount := f_VZ_NBIOT_Receive_And_Ignore_TAU(StepNum, tauCount); //taucount = 2    

    // Handling 3rd Successful TAU Received 
    StepNum := 17 - i;  
        log(v_TcName, "Step",(17 - i),": Verify that after the expiration of T3430 + T3411, the UE sends a NAS Tracking
        Area Update Request message to the network.");
    f_VZ_NBIOT_TAU_T3430PlusT3411_Timeout(StepNum, v_T3430_Wait, v_T3411_Wait);
      
    // Verify that after the expiration of T3430 + T3411, the UE sends a NAS Tracking 
    //  Area Update Request message to the network. 
    log(v_TcName, " Expecting TAU Req from DUT");
    StepNum := 18 - i;   
    tauCount := f_VZ_NBIOT_Receive_And_Ignore_TAU(StepNum, tauCount);  //taucount = 3 
      
    // Handling 4th Successful TAU Received 
    StepNum := 17 - i;  
        log(v_TcName, "Step",(17 - i),": Verify that after the expiration of T3430 + T3411, the UE sends a NAS Tracking
        Area Update Request message to the network.");
    f_VZ_NBIOT_TAU_T3430PlusT3411_Timeout(StepNum, v_T3430_Wait, v_T3411_Wait);
      
    // Verify that after the expiration of T3430 + T3411, the UE sends a NAS Tracking 
    //  Area Update Request message to the network. 
    log(v_TcName, " Expecting TAU Req from DUT");
    StepNum := 18 - i;   
    tauCount := f_VZ_NBIOT_Receive_And_Ignore_TAU(StepNum, tauCount);  //taucount = 4 
      
    // Handling 5th Successful TAU Received 
    StepNum := 17 - i;  
        log(v_TcName, "Step",(17 - i),": Verify that after the expiration of T3430 + T3411, the UE sends a NAS Tracking
        Area Update Request message to the network.");
    f_VZ_NBIOT_TAU_T3430PlusT3411_Timeout(StepNum, v_T3430_Wait, v_T3411_Wait);
      
    // Verify that after the expiration of T3430 + T3411, the UE sends a NAS Tracking 
    //  Area Update Request message to the network. 
    log(v_TcName, " Expecting TAU Req from DUT");
    StepNum := 18 - i;   
    tauCount := f_VZ_NBIOT_Receive_And_Ignore_TAU(StepNum, tauCount);  //taucount = 5   
    
    // Handling 4th Successful TAU Received   
    //f_VZ_EUTRA_TAU_T3430PlusT3411_Timeout(0, v_T3430_Wait, v_T3411_Wait);
    //f_VZ_EUTRA_TAU_T3430PlusT3411_Timeout(0, v_T3430_Wait, 0.0);
    
    log(v_TcName, "First Cluster of 5 NAS TAU Attempts Successfully Verified");
    
    /*After the NAS Tracking Area Update Request (fifth attempt) fails, 
      verify that the UE does not send a NAS Tracking Area Update Request 
      message for at least T3402 minutes.*/
       
    log(v_TcName, "Step",(19 - i),": After 5th failure of NAS TAU, the DUT should not send a NAS TAU for at least T3402(12) minutes.");
    
    log(v_TcName, "Resetting TAU Counter because T3402 timer has started");
    tauCount := 0;
    StepNum := 19 - i;    
      t_WaitTime.start(v_T3402_Wait);
    alt 
    {
      []SRB.receive(car_NB_SRB0_RrcPdu_IND(nbiot_Cell1, cr_RRCConnectionRequest_NB ( cr_EstablishmentCause_NB_Any, ? ) ))
    
      {
        t_WaitTime.stop;
        f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, v_TcName& "Unexpected RACH attempt from UE before timeout");
      }
      []t_WaitTime.timeout
      {   
        log(v_TcName, "Step",(19 - i),": Successfully verified that the DUT does not make a RACH attempt for atleast T3402 seconds (10 sec)");
      }
    } 
      
    /* Verify that the UE sends a second cluster of five NAS Tracking Area Update Request 
      messages with each individual message separated by at least T3411 seconds. */
     f_NBIOT_RRC_ConnectionRelease(nbiot_Cell1);
    log(v_TcName, "Step",(20 - i),": Verify that the UE sends a second cluster of five NAS Tracking Area Update Request messages with each individual message separated by at least T3411 seconds");

    log(v_TcName, "Step",(20 - i),": Expecting TAU Req from DUT. Ignore the TAU Req"); 
    StepNum := 20 - i;      
    tauCount := f_VZ_NBIOT_Receive_And_Ignore_TAU(StepNum, tauCount);  
      
    // Handling 2nd TAU after TAU Counter reset 
    f_VZ_NBIOT_TAU_T3430PlusT3411_Timeout(StepNum, v_T3430_Wait, v_T3411_Wait);
      
    log(v_TcName, "Step",(20 - i),": Expecting TAU Req from DUT. Ignore the TAU Req");      
    tauCount := f_VZ_NBIOT_Receive_And_Ignore_TAU(StepNum, tauCount);  
    log(v_TcName, "Step",(20 - i),": Received 2nd TAU after TAU Counter reset. TAU Count = ", tauCount);
    
    // Handling 3rd TAU after TAU Counter reset 
    f_VZ_NBIOT_TAU_T3430PlusT3411_Timeout(StepNum, v_T3430_Wait, v_T3411_Wait);
      
    log(v_TcName, "Step",(20 - i),": Expecting TAU Req from DUT. Ignore the TAU Req");      
    tauCount := f_VZ_NBIOT_Receive_And_Ignore_TAU(StepNum, tauCount);  
    log(v_TcName, "Step",(20 - i),": Received 3rd TAU after TAU Counter reset. TAU Count = ", tauCount);

    // Handling 4th TAU after TAU Counter reset 
    f_VZ_NBIOT_TAU_T3430PlusT3411_Timeout(StepNum, v_T3430_Wait, v_T3411_Wait);
      
    log(v_TcName, "Step",(20 - i),": Expecting TAU Req from DUT. Ignore the TAU Req");      
    tauCount := f_VZ_NBIOT_Receive_And_Ignore_TAU(StepNum, tauCount);  
    log(v_TcName, "Step",(20 - i),": Received 4th TAU after TAU Counter reset. TAU Count = ", tauCount);

    // Handling 5th TAU after TAU Counter reset 
    f_VZ_NBIOT_TAU_T3430PlusT3411_Timeout(StepNum, v_T3430_Wait, v_T3411_Wait);

    log(v_TcName, "Step",(20 - i),": Expecting TAU Req from DUT. Ignore the TAU Req");      
    tauCount := f_VZ_NBIOT_Receive_And_Ignore_TAU(StepNum, tauCount);  
    log(v_TcName, "Step",(20 - i),": Received 5th TAU after TAU Counter reset. TAU Count = ", tauCount);
      
    log(v_TcName, "Second Cluster of 5 NAS TAU Attempts Successfully Verified");

    // After that, verify that the UE sends no additional NAS Tracking Area Update Request 
     // messages for at least T3402 minutes.
     
    log(v_TcName, "Step",(20 - i),": After 5th failure of NAS TAU, the DUT should not send a NAS TAU for at least T3402(12) minutes.");
    log(v_TcName, "Resetting TAU Counter because T3402 timer has started");
    tauCount := 0;

       t_WaitTime.start(v_T3402_Wait);
    alt 
    {
      []SRB.receive(car_NB_SRB0_RrcPdu_IND(nbiot_Cell1, cr_RRCConnectionRequest_NB ( cr_EstablishmentCause_NB_Any, ? ) ))
    
      {
        t_WaitTime.stop;
        f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, v_TcName& "Unexpected RACH attempt from UE before timeout");
      }
      []t_WaitTime.timeout
      {   
        log(v_TcName, "Step",(20 - i),": Successfully verified that the DUT does not make a RACH attempt for atleast T3402 seconds (10 sec)");
      }
    } 
    
    // Verify that the UE sends a third cluster of five NAS Tracking Area Update Request 
     // messages with each individual message separated by at least T3411 seconds 
      f_Delay(1.0);
     f_NBIOT_RRC_ConnectionRelease(nbiot_Cell1);
    log(v_TcName, "Step",(21 - i),": Verify that the UE sends a third cluster of five NAS Tracking Area Update Request messages with each individual message separated by at least T3411 seconds");      
    log(v_TcName, "Step",(21 - i),": Expecting TAU Req from DUT. Ignore the TAU Req"); 
    StepNum := 21 - i;      
    tauCount := f_VZ_NBIOT_Receive_And_Ignore_TAU(StepNum, tauCount);  
      
    // Handling 2nd TAU after TAU Counter reset 
    f_VZ_NBIOT_TAU_T3430PlusT3411_Timeout(StepNum, v_T3430_Wait, v_T3411_Wait);
      
    log(v_TcName, "Step",(21 - i),": Expecting TAU Req from DUT. Ignore the TAU Req");      
    tauCount := f_VZ_NBIOT_Receive_And_Ignore_TAU(StepNum, tauCount);  
    log(v_TcName, "Step",(21 - i),": Received 2nd TAU after TAU Counter reset. TAU Count = ", tauCount);
    
    // Handling 3rd TAU after TAU Counter reset 
    f_VZ_NBIOT_TAU_T3430PlusT3411_Timeout(StepNum, v_T3430_Wait, v_T3411_Wait);
      
    log(v_TcName, "Step",(21 - i),": Expecting TAU Req from DUT. Ignore the TAU Req");      
    tauCount := f_VZ_NBIOT_Receive_And_Ignore_TAU(StepNum, tauCount);  
    log(v_TcName, "Step",(21 - i),": Received 3rd TAU after TAU Counter reset. TAU Count = ", tauCount);
    
    // Handling 4th TAU after TAU Counter reset 
    f_VZ_NBIOT_TAU_T3430PlusT3411_Timeout(StepNum, v_T3430_Wait, v_T3411_Wait);
      
    log(v_TcName, "Step",(21 - i),": Expecting TAU Req from DUT. Ignore the TAU Req");      
    tauCount := f_VZ_NBIOT_Receive_And_Ignore_TAU(StepNum, tauCount);  
    log(v_TcName, "Step",(21 - i),": Received 4th TAU after TAU Counter reset. TAU Count = ", tauCount);
    
    // Handling 5th TAU after TAU Counter reset 
    f_VZ_NBIOT_TAU_T3430PlusT3411_Timeout(StepNum, v_T3430_Wait, v_T3411_Wait);
      
    log(v_TcName, "Step",(21 - i),": Expecting TAU Req from DUT. Ignore the TAU Req");      
    tauCount := f_VZ_NBIOT_Receive_And_Ignore_TAU(StepNum, tauCount);  
    log(v_TcName, "Step",(21 - i),": Received 5th TAU after TAU Counter reset. TAU Count = ", tauCount);
      
    log(v_TcName, "Third Cluster of 5 NAS TAU Attempts Successfully Verified");

    /* After that, verify that the UE sends no additional NAS Tracking Area Update Request 
      messages for at least T3402 minutes.*/
     
    log(v_TcName, "Step",(21 - i),": After 5th failure of NAS TAU, the DUT should not send a NAS TAU for at least T3402(12) minutes.");
    log(v_TcName, "Resetting TAU Counter because T3402 timer has started");
    tauCount := 0;

    log(v_TcName, "Step",(21 - i),": After 5th failure of NAS TAU, the DUT should not send a NAS TAU for at least T3402(12) minutes on PLMN Y1.");
    t_T3402.start;  
    
    // While the T3402 timer is running, re-configure the network so that the UE finds service 
     // on an eNodeB with a PLMN id equal to Y2 where Y2 is not equal to Y1. The frequency of the second 
     // PLMN shall be the same as the first.
     
    log(v_TcName, "Step",(22 - i),": Reconfiguring the network so that the UE finds service " &
                  "on an eNodeB with a PLMN id equal to Y4 where Y4 is not equal to Y1");
    f_NBIOT_ReleaseAllCells();
     f_NBIOT_CellInfo_SetPLMN_Common(nbiot_Cell1, {cs_HPLMN_311_481}, -, false);
     
    // Bring up the cell again 
    f_NBIOT_CellConfig_Def ( nbiot_Cell1, CONTROL_PLANE );
    f_NBIOT_SetCellPower ( nbiot_Cell1, tsc_ServingCellRS_EPRE );  
   
    log(v_TcName, "Step",(22 - i),": PLMN-Id Modified for Roaming PLMN Y4 = 311481");
    
    //v_waitTimer.start(60.0);
      
    // Verify that the UE sends a NAS Tracking Area Update Request to the network without 
     // waiting for the T3402 timer to expire.
    //
    log(v_TcName, "Step",(23 - i),": Verifying that the DUT sends a NAS TAU without waiting for T3402 timer to expire");
    alt
    {  
        []SRB.check(receive(car_NB_SRB0_RrcPdu_IND(nbiot_Cell1, cr_RRCConnectionRequest_NB ( cr_EstablishmentCause_NB_Any, ? ) )))
        {
            //f_EUTRA_StopTimer(v_waitTimer);
            v_NasInd := f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell1,
                                       cr_EstablishmentCause_NB_Any,
                                       cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                           cdr_TAU_Request_OldGuti(?,
                                                                                 f_NBIOT_SecurityKSIasme_Get(),
                                                                                 cr_DRXparameter_Any ('5C'O) ifpresent, // @sic R5s120210 sic@
                                                                                 *,
                                                                                 f_GutiParameters2MobileIdentity(omit, v_Guti1_Params),
                                                                                 ?)));
      
            if (not isvalue (v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST))
            {
                f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, v_TcName & "Unexpected NAS message received while waiting for TAU");
            }
            
            tauCount := tauCount + 1;
            log(v_TcName, "Step",(23 - i),": DUT sends a NAS TAU without waiting for T3402 timer to expire");

            v_Guti1_Params := f_NBIOT_CellInfo_GetGuti(nbiot_Cell1);
            // Completing TAU procedure , as some of the UE (CATM) sends detach if TUA is not completed
            log(v_TcName, "Sending Tracking Area Update Accept to UE");
            
            SRB.send(cas_NB_SRB_NasPdu_REQ(nbiot_Cell1,
                                   tsc_SRB1bis,
                                   cs_TimingInfo_Now,
                                   cs_NAS_Request(tsc_SHT_IntegrityProtected_Ciphered,
                                                  cs_TAU_Accept_Common(v_UpdateType,
                                                                       f_GutiParameters2MobileIdentity(tsc_IEI_Guti, v_Guti1_Params),
                                                                       omit,
                                                                       omit,
                                                                       omit,
                                                                       omit,
                                                                       f_GetNBIOTAdditionalUpdateResult(v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.addUpdateType)
                                                                       ))));
            log(v_TcName, "Expecting Tracking Area Update Complete from UE");
           SRB.receive(car_NB_SRB_NasPdu_IND(nbiot_Cell1,
                                      tsc_SRB1bis,
                                      cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered,
                                                        cr_508_TAU_Complete)));
         
            log(v_TcName, "Received Tracking Area Update Complete from UE");

        }
        
       /* []v_waitTimer.timeout
        {
            // Searching the Roaming PLMN if UE does not try within 1 minute.
            f_UT_Search_plmn(UT);
            repeat;
        }*/
        
        []t_T3402.timeout
        {
            f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__,v_TcName & "T3402 timed out. The DUT does not trigger TAU before T3402 timer expiry");
        }
    }      
        
    // Re-configure the network so that the UE again finds service on PLMN Y1.     
    log(v_TcName, "Step",(24 - i),": Re-configure the network so that the UE again finds service on PLMN Y1.");
    
    
    f_NBIOT_RRC_ConnectionRelease(nbiot_Cell1);
    f_NBIOT_ReleaseAllCells();
    f_NBIOT_CellInfo_SetPLMN_1Entry(nbiot_Cell1, cs_HPLMN_Def);
    log(v_TcName, "Step",(24 - i),": Successfully reconfigured the cell");
    f_NBIOT_CellConfig_Def ( nbiot_Cell1, CONTROL_PLANE );
    f_NBIOT_SetCellPower ( nbiot_Cell1, tsc_ServingCellRS_EPRE );  
    
    // Verify that the UE does not attempt to attach to the network until the expiration of the 
    // original T3402 timer.
       
     t_T3402.start;
      
            alt
            {
              []SRB.receive(car_NB_SRB0_RrcPdu_IND(nbiot_Cell1, cr_RRCConnectionRequest_NB ( cr_EstablishmentCause_NB_Any, ? ) ))
               {
                    t_T3402.stop;
                    log("Step23: UE attempted to attach to the Network without waiting for the original T3402 timer to expire successfully");
                }
                []t_T3402.timeout
                {
                    f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, v_TcName & "DUT not triggered RACH on Home PLMN before T3402 timer expiry");
                }
            }            
        
    
    f_NBIOT_SS_ConfigRachPreambleIndMode(nbiot_Cell1, disable);
   
    log(v_TcName, "Step",(26 - 2*i),": Powering OFF the device");
    f_UT_PowerOffUE (UT);                 
  } 
    
    
    
    function f_VZ_TC_5_07_Code17_NBIOT(charstring TestPlan_Name) runs on NBIOT_PTC
  {
    log(testcasename(),": UE RECEIVES TRACKING AREA UPDATE REJECT MESSAGE FROM THE NETWORK CODES 17");

    f_NBIOT_Init (c1);

     
    log(testcasename(),": Step1: Configure the test setup so that the DUT finds service on a single eNodeB with cell_id " &
                 "(where cell_id refers to the CellIdentity parameter that is broadcast in SIB1) equal to value " &
                 "X1 = 1 and PLMN id equal to value Y1 = ",f_ConvertPLMNtoString(f_Asn2Nas_PlmnId(valueof(cs_HPLMN_Def))));
    f_NBIOT_CellConfig_Def (nbiot_Cell1, CONTROL_PLANE);
    f1_VZ_TC_5_7_NBIOT_Body(TestPlan_Name);
    f_NBIOT_TestBody_Set(false);

  }
    
     

function f1_VZ_TC_5_7_NBIOT_Body(charstring TestPlan_Name) runs on NBIOT_PTC
  {
    
    template (value) GPRS_Timer v_GT3402 := cs_GprsTimer_tv('17'O, tsc_GprsTimerUnit_1min, '01100'B); /* T3402 Set to 12 min in Attach Accept*/
         
    var charstring v_TcName := testcasename() & ": ";  
    var charstring v_PdnName := "vzwinternet"; // Fro Logging
    timer t_Procedure_Guard_Timer;
    var template (present) B3_Type v_PDNType := (f_GetPdnType(), '101'B, '001'B);
    var template (present) NAS_UL_Message_Type v_ESMMessage := cr_CIOT_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach, v_PDNType);
    var NAS_MSG_Indication_Type v_Nas_Ind, v_NasInd;
    var EUTRA_ASN1_RRC_TransactionIdentifier_Type v_RRC_TI := tsc_RRC_TI_Def;
    var float tsc_GuardProcedureTimer_240 := 240.0;
    var GutiParameters_Type v_Guti1_Params;
    var NAS_PlmnId v_HomePlmn;
    var NAS_Tac v_Tac1;
     timer t_T3402 := 12.0 * 60.0;// 12 min  
    timer t_T3411 := 10.0; // 10s
    timer t_WaitTime;
    var integer i;
  

    log (v_TcName,"Step1: Configure the test system such that T3402 is set to 12 minutes.");   
    log (v_TcName,"Step2: Configure the test equipment such that the network will allow the UE to attach and connect to PDNs.");   
    f_NBIOT_SetCellPower ( nbiot_Cell1, tsc_ServingCellRS_EPRE ); 

    

    log(v_TcName,"Step3: Verify that the device under test (DUT) has an ",v_PdnName," application that will attempt to connect to the ",v_PdnName," PDN as soon as the DUT is powered on and finds service on the LTE network");
      
    log(v_TcName,"Step4: Power the DUT ON");  
    /*  Power the DUT on and allow it to find LTE service. */     
    f_UT_SwitchOnUE(UT, true);

    t_Procedure_Guard_Timer.start(tsc_GuardProcedureTimer_240); //Guard Procedure Started
     
    /*  Verify that the DUT sends an Attach Request and that the network responds with 
     * an Attach Accept with the T3402 timer set to 4 minutes. */
     v_Nas_Ind := f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell1,
                                               cr_EstablishmentCause_NB_Any,
                                               cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                  cr_CIOT_ATTACH_REQUEST(cr_AdditionalUpdateType_CIOT),
                                                                                  v_ESMMessage)); 
      
    f_NBIOT_InitialRegistration_Step5_14(nbiot_Cell1, CONTROL_PLANE, STATE2_NB_CONNECTED_UPDATED, v_Nas_Ind, v_GT3402);
  
    log(v_TcName,"Step5: Verified that the DUT sent an Attach Request and that the network responded with an Attach Accept");  
    
    log(v_TcName, "Default Procedure Guard Timer Stopped");
    t_Procedure_Guard_Timer.stop; //Guard Procedure Ended
  
    log(v_TcName,"Step6: Force the DUT to the RRC IDLE state by having the network transmit an RRCConnectionRelease message.");
    f_NBIOT_RRC_ConnectionRelease( nbiot_Cell1 );

    log(v_TcName,"Step7: Configure the test equipment so that the network responds to all NAS Tracking Area Update Request messages with a NAS Tracking Area Update Reject message with an EMM Cause Code of 17");


    f_NBIOT_SetCellPower ( nbiot_Cell1, tsc_NonSuitableOffCellRS_EPRE );
    f_NBIOT_ReleaseAllCells();
    log(v_TcName,"Step8: . Reconfigure the test setup so that the DUT now finds service on a different
       Tracking Area with id equal to value Z2 where Z2 is not equal to Z1, and Z2 is
       not on the UEs list of tracking areas. Note that only the TAC portion of the TAI
       will be different. The PLMN id is still equal to Y1.");    
    
    f_NBIOT_CellInfo_SetTAC(nbiot_Cell1, oct2bit(tsc_TAC2));
    f_NBIOT_CellConfig_Def( nbiot_Cell1, CONTROL_PLANE);
    f_Delay(2.0);
    f_NBIOT_SetCellPower ( nbiot_Cell1, tsc_ServingCellRS_EPRE );

    /* 8a. Verify that the UE sends a NAS Tracking Area Update Request message and that the 
     * 8b. network responds with a NAS Tracking Area Update Reject message in which the EMM Cause Code is set to 22.*/  
    v_Guti1_Params := f_NBIOT_CellInfo_GetGuti(nbiot_Cell1);
    v_HomePlmn:= f_Asn2Nas_PlmnId(v_Guti1_Params.PLMN_Identity);
    v_Tac1 := bit2oct(f_NBIOT_CellInfo_GetTAC(nbiot_Cell1));
 
    for (i := 0; i < 5; i := i + 1) 
    {
      if(i == 0){
         log (v_TcName,"Step9: Verify that the UE sends a NAS Tracking Area Update Request message ");
      }  
      else if (i == 1){
         log (v_TcName,"Step10: Verify that after T3411 seconds, UE sends a NAS Tracking Area Update Request message");
      }
      else if(i == 2)
      {
         log(v_TcName,"Step11: Verify that UE attempts a Tracking Area Update 3 more times with each attempt separated by at least T3411 seconds.");
      }
    
     t_Procedure_Guard_Timer.start(tsc_GuardProcedureTimer_240); //Guard Procedure Started
     v_NasInd :=   f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell1,
                                       cr_EstablishmentCause_NB_Any,
                                       cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                           cdr_TAU_Request_OldGuti(?,
                                                                                 f_NBIOT_SecurityKSIasme_Get(),
                                                                                 cr_DRXparameter_Any ('5C'O) ifpresent, // @sic R5s120210 sic@
                                                                                 *,
                                                                                 f_GutiParameters2MobileIdentity(omit, v_Guti1_Params),
                                                                                 ?)));
   

            
     
     log(v_TcName, "Default Procedure Guard Timer Stopped");
     t_Procedure_Guard_Timer.stop; //Guard Procedure Ended

     if (not isvalue (v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST))
     {
        f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, v_TcName &
                "Unexpected NAS message received while waiting for Tracking Area Update Request");
     }
    if(i == 0){
         log (v_TcName,"Step 9 : Verified that UE sends a NAS Tracking Area Update Request message-> Attempt ##",i+1);    
     }  
     else if (i == 1){
         log (v_TcName,"Step 10 : Verified that after T3411 seconds, UE sends a NAS Tracking Area Update Request message -> Attempt ##",i+1);
     }
     else if (i == 2){
         log(v_TcName,"Step 11 : Verified that UE attempts a Tracking Area Update -> Attempt ##",i +1);
      
     }
    else if (i == 3){
         log(v_TcName,"Step 11 : Verified that UE attempts a Tracking Area Update -> Attempt ##",i +1);
    }
    else if (i == 4){
         log(v_TcName,"Step 11 : Verified that UE attempts a Tracking Area Update -> Attempt ##",i +1);
     }
    
    
     /* The SS transmits a TRACKING AREA UPDATE REJECT message with EMM cause = "17" as specified.*/
    

     SRB.send(cas_NB_SRB1bis_NasPdu_REQ(nbiot_Cell1,
                                         cs_TimingInfo_Now,
                                         cs_NAS_Request(tsc_SHT_NoSecurityProtection, 
                                                        cs_508_TRACKING_AREA_UPDATE_REJECT(tsc_EmmCause_NetworkFailure))));
      
        
    if(i == 0){
         log (v_TcName,"Step 9 : Verified that Network responds with a NAS Tracking Area Update Reject message with EMM Cause Code set to 17 for Attempt ##",i+1);    
     }  
     else if (i == 1){
         log (v_TcName,"Step 10 : Verified that Network responds with a NAS TAU Reject message with EMM Cause Code set to 17 for Attempt ##",i+1); 
     }
     else if (i == 2){
         log (v_TcName,"Network responds with a NAS Tracking Area Update Reject message in which the EMM Cause Code is set to 17 for Attempt ##",i+1);    
         log(v_TcName,"Step 11 : UE attempts Tracking Area Update 2 more times");
         
     }
    else if (i == 3){
         log (v_TcName,"Network responds with a NAS Tracking Area Update Reject message in which the EMM Cause Code is set to 17 for Attempt ##",i+1);    
         log(v_TcName,"Step 11 : UE attempts Tracking Area Update 1 more time");
    }
    else if (i == 4){
         log (v_TcName,"Network responds with a NAS Tracking Area Update Reject message in which the EMM Cause Code is set to 17 for Attempt ##",i+1);
    }   
    
     if(i < 4 ){
         if(i == 0){
         log (v_TcName,"Step 10 : Starting Timer t_T3411 for 10 sec");    
     }
         else if (i == 1){
         log (v_TcName,"Step 11 : Starting Timer t_T3411 for 10 sec to receive Attempt ##",i+2);
     }
         else if (i == 2){
         log (v_TcName,"Step 11 : Starting Timer t_T3411 for 10 sec to receive Attempt ##",i+2);
     }
         else if (i == 3){
         log (v_TcName,"Step 11 : Starting Timer t_T3411 for 10 sec to receive Attempt ##",i+2);
     }
        
        t_T3411.start;
       // log (v_TcName,"Attempt ##",i +1,": started Timer t_T3411 for 10 sec");      
       f_NBIOT_RRC_ConnectionRelease( nbiot_Cell1 );         
        alt {
           []SRB.receive(car_NB_SRB0_RrcPdu_IND(nbiot_Cell1, cr_RRCConnectionRequest_NB ( cr_EstablishmentCause_NB_Any, ? ) ))
            {
                t_T3411.stop;
                f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, v_TcName &"UE is triggering Tracking Area Update unexpectedly");
            }
          []t_T3411.timeout
            {
              
            f_NBIOT_PreliminaryPass(__FILE__, __LINE__, v_TcName &"Successful Timeout of Timer T3411");
            }
              
          }
    }
    else{
        t_T3402.start;
        f_NBIOT_RRC_ConnectionRelease( nbiot_Cell1 );
        log(v_TcName,"t_T3402 timer is started for 12 min (T3402)");  
    }
  }
    log (v_TcName,"Step12: After the fifth attempt fails, verify the UE does not send a Tracking Area Update Request while T3402 is running.");
    alt {
     []SRB.receive(car_NB_SRB0_RrcPdu_IND(nbiot_Cell1, cr_RRCConnectionRequest_NB ( cr_EstablishmentCause_NB_Any, ? ) ))
        {
            t_T3402.stop;
            f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, v_TcName &"Step12: UE is triggering Tracking Area Update unexpectedly");
        }
      []t_T3402.timeout
        {
            f_NBIOT_PreliminaryPass(__FILE__, __LINE__, v_TcName &"Step12: Successful Timeout of Timer T3402, Expecting Tracking Area Update Request after T3402 Timer expiry");
        }    
    }

    // Just checking for 30 sec if received then handle it  
    t_WaitTime.start(30.0);
    alt {
        []SRB.receive(car_NB_SRB0_RrcPdu_IND(nbiot_Cell1, cr_RRCConnectionRequest_NB ( cr_EstablishmentCause_NB_Any, ? ) ))
        {
            t_WaitTime.stop;
            v_NasInd :=  f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell1,
                                       cr_EstablishmentCause_NB_Any,
                                       cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                           cdr_TAU_Request_OldGuti(?,
                                                                                 f_NBIOT_SecurityKSIasme_Get(),
                                                                                 cr_DRXparameter_Any ('5C'O) ifpresent, // @sic R5s120210 sic@
                                                                                 *,
                                                                                 f_GutiParameters2MobileIdentity(omit, v_Guti1_Params),
                                                                                 ?)));
   
            if (not isvalue (v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST))
            {
                f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, v_TcName & 
                        "Unexpected NAS message received while waiting for Tracking Area Update Request");
            }
            log(v_TcName,"Step12: UE Triggers Tracking Area Update Request after T3402 Timer expiry");
             SRB.send(cas_NB_SRB1bis_NasPdu_REQ(nbiot_Cell1,
                                         cs_TimingInfo_Now,
                                         cs_NAS_Request(tsc_SHT_NoSecurityProtection, 
                                                        cs_508_TRACKING_AREA_UPDATE_REJECT(tsc_EmmCause_NetworkFailure))));
           f_NBIOT_RRC_ConnectionRelease( nbiot_Cell1 );
        }
        []t_WaitTime.timeout{
            log(v_TcName,"Step12: UE did not Trigger TAU Request after T3402 Timer expiry"); 
        }
    }  
   
   
     f_NBIOT_SS_ConfigRachPreambleIndMode(nbiot_Cell1, disable);     
    f_NBIOT_ReleaseAllCells();
    log(v_TcName,"Released all Cells");
   
    f_UT_PowerOffUE (UT);
    log(v_TcName,"Power off the UT");
    f_NBIOT_PreliminaryPass(__FILE__, __LINE__, v_TcName &"PASSED");
  }
    
 
    function f_VZ_TC_5_8_IMSLESS_NBIOT(charstring TestPlan_Name) runs on NBIOT_PTC
  {
    
    var charstring v_TcName := testcasename() & ": ";
     fl_UT_ApplyCommand(UT, cas_UT_Req(RESET_FRBDN_PLMN, NO_CNF_REQUIRED));

    f_Delay(4.0);  
    //Cell init
    log(v_TcName,"UE WITH T3346 TIMER SUPPORT RECEIVES SERVICE REJECT MESSAGE FROM THE NETWORK CODE 22");
      
    f_NBIOT_Init (c1);

    /* 1. Configure the test setup so that the device under test (DUT) finds service on a single eNodeB 
     *    with cell_id (where "cell_id" refers to the "CellIdentity" parameter that is broadcast in SIB1) equal to value X1, 
     *    PLMN id equal to value Y1, and TAI equal to value Z1. 
     * 2. Configure the test equipment such that the network will allow the UE to attach and connect to PDNs.
    */
    
    log(v_TcName,"Step1: Configure the test setup so that the device under test (DUT) finds service on a single eNodeB "& 
         "with cell_id (where cell_id refers to the CellIdentity parameter that is broadcast in SIB1) equal to value X1, "&
         "PLMN id equal to value Y1, and TAI equal to value Z1."); 
    log(v_TcName,"Step2: Configure the test equipment such that the network will allow the UE to attach and connect to PDNs.");
    
    //Cell Config
    f_NBIOT_CellConfig_Def (nbiot_Cell1, CONTROL_PLANE);
      
    f_NBIOT_SetCellPower ( nbiot_Cell1, tsc_ServingCellRS_EPRE );
      
    /* SERVICE REJECT MESSAGE FROM THE NETWORK CODE 22*/ 
   f1_VZ_TC_5_8_IMSLESS_NBIOT_Body( tsc_Cause_Congestion, TestPlan_Name);
    f_NBIOT_TestBody_Set(false);

    f_Delay(2.0); //Waiting for cell to be off/released  
    f_NBIOT_ReleaseAllCells();

   
      
    log(v_TcName,"Poweroff DUT.");
    f_UT_SwitchOffUE (UT, false);
      
    f_NBIOT_PreliminaryPass(__FILE__, __LINE__, v_TcName & "PASSED");
  }
    
    function f1_VZ_TC_5_8_IMSLESS_NBIOT_Body(
                               NAS_CauseValue_Type p_CauseValue, charstring TestPlan_Name) runs on NBIOT_PTC
  {
     var EUTRA_ASN1_RRC_TransactionIdentifier_Type v_RRC_TI := tsc_RRC_TI_Def;
    var NAS_MSG_Indication_Type v_NasInd;
     var GutiParameters_Type v_Guti1_Params := f_NBIOT_CellInfo_GetGuti(nbiot_Cell1);
    var NAS_PlmnId v_HomePlmn;
    var NAS_Tac v_Tac1;
    /* T3346 Set to 15 min in Routing Area Update Reject*/
    template (value) GPRS_Timer2 v_GT3346 := cs_GPRS_Timer2_3_IEI('5F'O, tsc_GprsTimerUnit_1min, '01111'B); 
    var float v_T3346 := (15.0 * 60.0); //15 Minutes
    timer t_T3346;
    var float v_Timer_1 := 60.0;
    var float v_Timer_2 := 5.0;
    var float v_Timer_60s := 60.0;
	timer t_WaitTime;
    var integer v_SelectedPlmnIndex := f_NBIOT_CellInfo_GetSelectedPlmnIndex(nbiot_Cell1);   
    var EPS_BearerIdentity v_EpsBearerId2 := '6'H;
    var charstring Internet_APN_string := px_INTERNET_APN;  
    var octetstring Internet_APN_Value := tsc_Octet_Lower_INTERNET_APN;   
    var float v_current; 
    var float v_Remaining;
    var float t_val; 
    var DelayForUserPlaneSignalling_Type v_DelayForUserPlaneSignalling := waitForIMS;
    var charstring v_TcName := testcasename() & ": ";
    var integer v_CauseValue := bit2int(p_CauseValue);
    var NB_SRB_COMMON_IND v_ReceivedAsp;
    var charstring v_sApn := "vzwadmin", v_APN:= "vzwadmin";
    timer t_Procedure_Guard_Timer;
    var float p_RetryInterval := 10.0;
    var float tsc_GuardProcedureTimer_240 := 460.0;
    var NAS_MSG_Indication_Type v_NAS_Ind, v_Nas_Ind;      
    var template (present) B3_Type v_PDNType := (f_GetPdnType(), '101'B, '001'B);
    var template (present) NAS_UL_Message_Type v_ESMMessage := cr_CIOT_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach, v_PDNType);
   
    var template (present) DetachType v_DetachType := cr_DetachType('1'B, tsc_DetachMO_EpsOnly);
    var template (present) NAS_MSG_Indication_Type v_ExpectedDetachRequest := cr_NAS_Indication((tsc_SHT_IntegrityProtected, tsc_SHT_IntegrityProtected_Ciphered),
                                                 cr_508_DETACH_REQUEST_MO(cr_NAS_KeySetIdentifier (?, ?),
                                                                          f_GutiParameters2MobileIdentity(omit, v_Guti1_Params),
                                                                          v_DetachType));
   


   
    /* 3. Power the DUT on and allow it to find LTE service. */    
    f_UT_SwitchOnUE(UT, true);

    log(v_TcName,"Step3: Power the DUT on and allow it to find LTE service."); 
      
    /*  4. Verify that the DUT successfully establishes an RRC connection and attaches to the LTE network. */
    log(v_TcName,"Step4: Verify that the DUT successfully establishes an RRC connection and attaches to the LTE network.");

     t_Procedure_Guard_Timer.start(tsc_GuardProcedureTimer_240); //Guard Procedure Started

     v_Nas_Ind := f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell1,
                                               cr_EstablishmentCause_NB_Any,
                                               cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                  cr_CIOT_ATTACH_REQUEST(cr_AdditionalUpdateType_CIOT),
                                                                                  v_ESMMessage)); 
      
    f_NBIOT_InitialRegistration_Step5_14(nbiot_Cell1, CONTROL_PLANE, STATE2_NB_CONNECTED_UPDATED, v_Nas_Ind);
    log(v_TcName,"Step4: Verified that the DUT successfully establishes an RRC connection and attaches to the LTE network");  
    
    log(v_TcName, "Default Procedure Guard Timer Stopped");
    t_Procedure_Guard_Timer.stop; //Guard Procedure Ended
  
    log(v_TcName,"Step5: Initiate the test application (see section TEST EQUIPMENT CONFIGURATION) and verify that it "&
                 "connects successfully to the ",v_APN," PDN. Configure the test application for the application idle state.");      
       
   
       log(v_TcName,"Initiate test application will cause the UE to connect to the ",v_APN); 
       
     fl_UT_ApplyCommand(UT, cas_UT_Req(INITIATE_ADMIN_TEST_APP, NO_CNF_REQUIRED));
   t_Procedure_Guard_Timer.start(tsc_GuardProcedureTimer_240); //Guard Procedure Started
    // Waiting for Internet/Admin  
   f_NBIOT_TriggerAdditionalPDN_Modified (nbiot_Cell1, CONTROL_PLANE, ?, cs_AccessPointName (tsc_Octet_Lower_ADMIN_APN), v_sApn);
    
    
    log(v_TcName, "Default Procedure Guard Timer Stopped");
    t_Procedure_Guard_Timer.stop; //Guard Procedure Ended
  
    log(v_TcName,"Step5: UE is successfully connected to the ",v_APN," PDN");
      
    /* 6. Force the DUT to the RRC IDLE state by having the network transmit an RRCConnectionRelease message. */
    log(v_TcName,"Step6: Force the DUT to the RRC IDLE state by having the network transmit an RRCConnectionRelease message");
    f_NBIOT_RRC_ConnectionRelease( nbiot_Cell1 );
    log(v_TcName,"Step6: UE moved to RRC Idle mode");

    /*  7. Configure the test equipment so that the network responds to all NAS Service Request messages 
     *     with a NAS Service Reject message with an EMM Cause Code of 17.      
     *  8. Configure the test application for the application transmitting state 
     *     with a retransmission timer of 10 seconds.
     * 9a. Verify that the UE sends a NAS Service Request message for the first time and that the 
     * 9b. network responds with a NAS Service Reject message in which the EMM Cause Code is set to 17.
     */  
      
    if (p_CauseValue == tsc_EmmCause_NetworkFailure)
    {  
       log(v_TcName,"Step7: Configure the test equipment so that the network responds to all NAS Service Request messages "&
                  "with a NAS Service Reject message with an EMM Cause Code of 17");
    }
    else if (p_CauseValue == tsc_Cause_Congestion)
    {
       log(v_TcName,"Step7: Configure the test equipment so that the network responds to all NAS Service Request messages "&
                  "with a NAS Service Reject message with an EMM Cause Code of 22 and a T3346 Timer value of 15 minutes");
    }
    
    log(v_TcName,"Step8: Configure the test application for the application transmitting state with a retransmission timer of 10 seconds");
   
       
     fl_UT_ApplyCommand(UT, cas_UT_Req(APP_TRANSMIT_STATE_ON, NO_CNF_REQUIRED,{cs_Ut_Parameter_Common ("ACTIVATE_ADMIN_APN", "10")}));

    
      
    log(v_TcName,"Step9: Verify that the UE sends a NAS Service Request message and that the network responds with a "&
                  "NAS Service Reject message in which the EMM Cause Code is set to ", v_CauseValue); 

    t_Procedure_Guard_Timer.start(tsc_GuardProcedureTimer_240); //Guard Procedure Started
  
    v_NasInd :=    f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell1,
                                             cr_EstablishmentCause_NB_Any,
                                             cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                             cr_CONTROL_PLANE_SERVICE_REQUEST(f_NBIOT_SecurityKSIasme_Get())));	  


    log(v_TcName,"Step9: Received Service Request from UE");      
    
    log(v_TcName, "Default Procedure Guard Timer Stopped");
    t_Procedure_Guard_Timer.stop; //Guard Procedure Ended

    log(v_TcName,"Step9: SS Transmits Service Reject with EMM Cause ",v_CauseValue);
    //The SS transmits a SERVICE REJECT message with the EMM cause set to #17 or 22
   
    SRB.send(cas_NB_SRB_NasPdu_REQ(nbiot_Cell1,
                                   tsc_SRB1bis,
                                   cs_TimingInfo_Now,
                                   cs_NAS_Request(tsc_SHT_NoSecurityProtection,
                                                  cs_508_SERVICE_REJECT((p_CauseValue),-,v_GT3346))));
    
    f_Delay(1.0);
    // Starting 15 minute timer started
    t_T3346.start (v_T3346); 
    log(v_TcName," Timer T3346 is started for 15 minutes.");
      
    f_NBIOT_RRC_ConnectionRelease( nbiot_Cell1 ); 
    /* Perform below operation and at the end stop stop the timer T3346, If timer expires 
     * before finishing the below steps then it will return failure 
     */   

    /* 10. Verify that the UE does not re-issue a service Request while the T3346 timer is running */
    log(v_TcName,"Step10. Verify that the UE does not re-issue a service Request while the T3346 = 15 min timer is running");

    /* 11. While the T3346 timer is running, power cycle the UE. */
    /* 12. Verify that the UE does not issue a service Request. */

    t_WaitTime.start(f_NBIOT_SetTimerToleranceMax (  nonProtocolTimer, v_Timer_1));
    log(v_TcName,"Step10: Waiting for ",float2int(v_Timer_1)," sec to check UE does not re-issue a service req while the T3346 timer is running");
     
    alt 
    {
       []SRB.receive(car_NB_SRB0_RrcPdu_IND(nbiot_Cell1, cr_RRCConnectionRequest_NB ( cr_EstablishmentCause_NB_Any, ? ) ))
        {
           // t_RetryInterval.stop;
            t_WaitTime.stop;
            f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, v_TcName &"Step10: UE is triggering Service request unexpectedly");
        }
        []t_WaitTime.timeout
        {
              f_NBIOT_PreliminaryPass(__FILE__, __LINE__, v_TcName & "Step10: PASS, UE Did not trigger Service Req");
        }
      
    }
      
    log(v_TcName,"Step11: While the T3346 timer is running, power cycle the UE");
  
    fl_UT_ApplyCommand(UT, cas_UT_Req(POWER_CYCLE, NO_CNF_REQUIRED));
      
    t_WaitTime.start(f_NBIOT_SetTimerToleranceMax ( nonProtocolTimer, v_Timer_60s));
    log(v_TcName,"Waiting for the optional Detach Request after power cycle");  
    alt 
    { 
        [] SRB.receive(car_NB_SRB_NasPdu_IND(nbiot_Cell1,tsc_SRB1bis, v_ExpectedDetachRequest)) -> value v_ReceivedAsp
        {
            log("Received Detach Request from UE");             
            f_NBIOT_SS_ConfigRachPreambleIndMode(nbiot_Cell1, disable);   
            // The SS responds the DETACH ACCEPT message.
           
              SRB.send(cas_NB_SRB_NasPdu_REQ(nbiot_Cell1,
                                     tsc_SRB1bis,
                                     cs_TimingInfo_Now,
                                     cs_NAS_Request(tsc_SHT_IntegrityProtected_Ciphered,
                                                    cs_508_DETACH_ACCEPT)));
             log("SS Responds Detach Accept message");
        }
        [] SRB.receive(car_NB_SRB0_RrcPdu_IND(nbiot_Cell1, cr_RRCConnectionRequest_NB ( ?, ? ) ))
        {
            t_WaitTime.stop;
             
            f_NBIOT_Modified_RRC_ConnectionSetup_Def(nbiot_Cell1);//VZW NBIOT
            
            
             
         
             SRB.receive(car_NB_SRB_RrcNasPdu_IND(nbiot_Cell1, tsc_SRB1bis, cr_RRCConnectionResumeComplete_NB(v_RRC_TI), v_ExpectedDetachRequest)); /* @sic R5s170772 change 2.3: v_ExpectedSecurityStatus sic@ */
        
              
          
        }
        []t_WaitTime.timeout
        {
            log(v_TcName,"UE did not trigger optional Detach Request timer timed out"); 
        }
    }  
           
    log(v_TcName,"Step12: Verify that the UE does not re-issue a service Request while the T3346 timer is running. ");
     f_NBIOT_SS_ConfigRachPreambleIndMode(nbiot_Cell1, disable);
    log(v_TcName,"Step12: After Power cycle, Waiting for ",float2int(v_Timer_1)," sec to check UE should not trigger service request");   
    t_WaitTime.start(f_NBIOT_SetTimerToleranceMax (  nonProtocolTimer, v_Timer_1));
     
    alt 
    {
        []SRB.receive(car_NB_SRB0_RrcPdu_IND(nbiot_Cell1, cr_RRCConnectionRequest_NB ( cr_EstablishmentCause_NB_Any, ? ) ))
        {
            t_WaitTime.stop;
            f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, v_TcName &"Step12: UE is triggering Service request unexpectedly");
        }
        []t_WaitTime.timeout
        {
            f_NBIOT_PreliminaryPass(__FILE__, __LINE__, v_TcName & "Step12: PASS, UE Did not trigger Service Req");
        }
   }

    log(v_TcName, "Step13: While the T3346 timer is running, re-configure the test setup so that the DUT now finds service on a "&
         "different Tracking Area with id equal to value Z2 where Z2 is not equal to Z1, and Z2 is not on the UEs list of "&
         "tracking areas. Note that only the TAC portion of the TAI will be different. The PLMN id is still equal to Y1.");
  
    log(v_TcName,"Step13: Modifying TAC to Z2");  
   
    f_NBIOT_CellInfo_SetTAC(nbiot_Cell1, oct2bit(tsc_TAC2));
    
    f_NBIOT_CellConfig_Def( nbiot_Cell1, CONTROL_PLANE);
    
    f_NBIOT_SetCellPower ( nbiot_Cell1, tsc_ServingCellRS_EPRE );
    log(v_TcName,"Step13: TAC Modified to Z2");

    //14.Verify that the UE does not issue a Service Request.
    log(v_TcName,"Step14: Verify that the UE does not re-issue a Service Request while the T3346 timer is running. ");
    t_WaitTime.start(f_NBIOT_SetTimerToleranceMax ( nonProtocolTimer, v_Timer_2));
    log(v_TcName,"Step14: After TAC Change, Waiting for ",float2int(v_Timer_2)," sec to check UE does not re-issue a service req while the T3346 timer is running");
 
    alt 
    {
        []SRB.receive(car_NB_SRB0_RrcPdu_IND(nbiot_Cell1, cr_RRCConnectionRequest_NB ( cr_EstablishmentCause_NB_Any, ? ) ))
        {
            t_WaitTime.stop;
            f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, v_TcName &"Step14: UE is triggering Service Request unexpectedly");
        }
        []t_WaitTime.timeout
        {
            f_NBIOT_PreliminaryPass(__FILE__, __LINE__, v_TcName &"Step14: PASS, UE Did not trigger Service Req");
        }
    }

    // Changing to mobile Data Off before PLMN Change
   
    
    /* 15. While the T3346 timer is running, re-configure the network so that the UE finds service 
     *   on an eNodeB with a PLMN id equal to Y2 where Y2 is not equal to Y1. PLMN Y2 shall not be 
     *   a home PLMN. The frequency of the second PLMN shall be the same as the first. 
     *   T3346 shall not be running in this second PLMN.
     */
    log(v_TcName,"Step15: While the T3346 timer is running, re-configure the network so that the UE finds service on an " &
                 "eNodeB with a PLMN id equal to Y4 where Y4 is not equal to Y1. PLMN Y4 shall not be a home PLMN. The frequency "&
                 "of the second PLMN shall be the same as the first. T3346 shall not be running in this second PLMN.");
    
    f_NBIOT_ReleaseAllCells();
             
    //Configuring the RPLMN
    f_NBIOT_CellInfo_SetPLMN_Common(nbiot_Cell1, {cs_HPLMN_311_481}, -, false);
    f_NBIOT_CellConfig_Def( nbiot_Cell1, CONTROL_PLANE);
   
    f_NBIOT_SetCellPower (nbiot_Cell1, tsc_ServingCellRS_EPRE );
    log(v_TcName,"Step15: PLMN-Id Modified for non Home PLMN");
      
    v_Guti1_Params := f_NBIOT_CellInfo_GetGuti(nbiot_Cell1);         
      
    /* 16. Verify that the DUT now attempts to connect to the LTE network and is successful. */
    // If the UE supports IMS roaming, verify that the UE connects to the IMS PDN using PDN Type IPv6.
    // If the UE does not support IMS roaming, verify that the UE connects to the Internet PDN using PDN Type IPv4. 
  
    //handling of Roaming scenaios//
    v_current := t_T3346.read; 
    v_Remaining := v_T3346 - v_current;   
    log(" Timer T3346 is still running with remaining value :",float2int(v_Remaining)," Sec."); 
    log(v_TcName,"Step16: Waiting for attach from UE");
    // fl_UT_ApplyCommand(UT, cas_UT_Req(POWER_CYCLE, NO_CNF_REQUIRED));
     /*SRB.receive(car_NB_SRB0_RrcPdu_IND(nbiot_Cell1, cr_RRCConnectionRequest_NB ( ?, ? ) )) ;
          
             f_NBIOT_Modified_RRC_ConnectionSetup_Def (nbiot_Cell1);
             
              v_NasInd := f_NBIOT_RRCConnectionSetupComplete_Def(nbiot_Cell1,
                                                           cr_508_RRCConnectionSetupComplete_NB(tsc_RRC_TI_Def, ?),
                                                            ?);
          
             if (isvalue (v_NasInd.Pdu.Msg.cONTROL_PLANE_SERVICE_REQUEST))
             {
             log(v_TcName,"Received Tracking Area Update");
             log(v_TcName,"Responding to Tracking Area Update with Tracking Area Reject");
             

              SRB.send(cas_NB_SRB1bis_NasPdu_REQ(nbiot_Cell1,
                                       cs_TimingInfo_Now,
                                       cs_NAS_Request(tsc_SHT_NoSecurityProtection,
                                                      cs_508_TRACKING_AREA_UPDATE_REJECT(tsc_EmmCause_UEIdentityNotDerived))));
    
                  log(v_TcName,"Sending RRC Connection release to UE");
                  f_NBIOT_RRC_ConnectionRelease(nbiot_Cell1);
                  log(v_TcName,"UE moved to RRC Idle mode");
                  log(v_TcName,"Waiting for UE to attach with LTE network");
                  v_Nas_Ind := f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell1,
                                               cr_EstablishmentCause_NB_Any,
                                               cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                  cr_CIOT_ATTACH_REQUEST(cr_AdditionalUpdateType_CIOT),
                                                                                  v_ESMMessage)); 
      
                  f_NBIOT_InitialRegistration_Step5_14(nbiot_Cell1, CONTROL_PLANE, STATE2_NB_CONNECTED_UPDATED, v_Nas_Ind);
                 
                  log(v_TcName,"Sending RRC Connection release to UE");
                  f_NBIOT_RRC_ConnectionRelease(nbiot_Cell1);
                  log(v_TcName,"UE moved to RRC Idle mode");
                 
                  
              }
         
         
      */
      
  //  f_UT_SwitchOffUE (UT, false);
   
   // f_UT_SwitchOnUE(UT, true);
    fl_UT_ApplyCommand(UT, cas_UT_Req(POWER_CYCLE, NO_CNF_REQUIRED));
     
    //t_Procedure_Guard_Timer.start(tsc_GuardProcedureTimer_240); //Guard Procedure Started

     v_Nas_Ind := f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell1,
                                               cr_EstablishmentCause_NB_Any,
                                               cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                  cr_CIOT_ATTACH_REQUEST(cr_AdditionalUpdateType_CIOT),
                                                                                  v_ESMMessage)); 
      
    if (not match(v_Nas_Ind.Pdu.PiggybackedPduList[0].Msg.pDN_CONNECTIVITY_REQUEST.pdnType.typeValue, tsc_PdnType_IPv4))
    {
        f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, v_TcName &"PDN Type used is not IPV4 as expected!");
    }
      
    f_NBIOT_InitialRegistration_Step5_14(nbiot_Cell1, CONTROL_PLANE, STATE2_NB_CONNECTED_UPDATED, v_Nas_Ind);
    log(v_TcName,"Step16: Connection to the LTE network and is successful");
   
    log(v_TcName, "Default Procedure Guard Timer Stopped");
    t_Procedure_Guard_Timer.stop; //Guard Procedure Ended
   
    
    fl_UT_ApplyCommand(UT, cas_UT_Req(INITIATE_ADMIN_TEST_APP, NO_CNF_REQUIRED));
   t_Procedure_Guard_Timer.start(tsc_GuardProcedureTimer_240); //Guard Procedure Started
    // Waiting for Internet/Admin  
   f_NBIOT_TriggerAdditionalPDN_Modified (nbiot_Cell1, CONTROL_PLANE, ?, cs_AccessPointName (tsc_Octet_Lower_ADMIN_APN), v_sApn);
    
    
    log(v_TcName, "Default Procedure Guard Timer Stopped");
    t_Procedure_Guard_Timer.stop; //Guard Procedure Ended
  
    // 17. While the T3346 timer is running, re-configure the test setup so that the DUT again finds service on PLMN Y1.
    
    log(v_TcName, "Step17: While the T3346 timer is running, re-configure the test setup so that the DUT again finds service on PLMN Y1.");  
     f_NBIOT_RRC_ConnectionRelease(nbiot_Cell1);
    f_NBIOT_ReleaseAllCells();
    
    //Configuring back to HOME PLMN
    
    f_NBIOT_CellInfo_SetPLMN_Common(nbiot_Cell1, {cs_HPLMN_Def}, -, false);
    log(v_TcName,"Step17: PLMN-Id Modified for Home PLMN");
    f_NBIOT_CellConfig_Def( nbiot_Cell1, CONTROL_PLANE);
  
    f_NBIOT_SetCellPower (nbiot_Cell1, tsc_ServingCellRS_EPRE );

    // Is this Step taken as Deviation??
    /* After Step 17, UE need to trigger service request.
     * Below procedure deviating the Testplan
     *  - Waiting for Tracking Area Update request from UE
     *  - SS sending Tracking Area Reject with causecode 9 to UE
     *  - UE Attached to Network.
     *  - SS sends RRC Connection Release message to UE. UE moved to RRC Idle mode.
     *  - UE Need to trigger Service Request to SS without waiting for T3346 timer to expire.
     */
          
    v_current := t_T3346.read; 
    v_Remaining := v_T3346 - v_current;   
    log(" Timer T3346 is still running with remaining value :",float2int(v_Remaining)," Sec."); 
    log(v_TcName,"Step18: Waiting for TAU from UE");
    log(v_TcName,"Step18: Verify that the UE issue a Service request without waiting for T3346 to expire ");
            
    if(v_current > 0.0)
    {
        log(v_TcName,"Waiting for Tracking Area Update from UE");
        alt
        {
          [] SRB.receive(car_NB_SRB0_RrcPdu_IND(nbiot_Cell1, cr_RRCConnectionRequest_NB ( ?, ? ) )) 
          {
             f_NBIOT_Modified_RRC_ConnectionSetup_Def (nbiot_Cell1);
             
              v_NasInd := f_NBIOT_RRCConnectionSetupComplete_Def(nbiot_Cell1,
                                                           cr_508_RRCConnectionSetupComplete_NB(tsc_RRC_TI_Def, ?),
                                                            ?);
          
             if (isvalue (v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST))
             {
             log(v_TcName,"Received Tracking Area Update");
             log(v_TcName,"Responding to Tracking Area Update with Tracking Area Reject");
             

              SRB.send(cas_NB_SRB1bis_NasPdu_REQ(nbiot_Cell1,
                                       cs_TimingInfo_Now,
                                       cs_NAS_Request(tsc_SHT_NoSecurityProtection,
                                                      cs_508_TRACKING_AREA_UPDATE_REJECT(tsc_EmmCause_UEIdentityNotDerived))));
    
                  log(v_TcName,"Sending RRC Connection release to UE");
                  f_NBIOT_RRC_ConnectionRelease(nbiot_Cell1);
                  log(v_TcName,"UE moved to RRC Idle mode");
                  log(v_TcName,"Waiting for UE to attach with LTE network");
                 fl_UT_ApplyCommand(UT, cas_UT_Req(POWER_CYCLE, NO_CNF_REQUIRED));
   
                  v_Nas_Ind := f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell1,
                                               cr_EstablishmentCause_NB_Any,
                                               cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                  cr_CIOT_ATTACH_REQUEST(cr_AdditionalUpdateType_CIOT),
                                                                                  v_ESMMessage)); 
      
                  f_NBIOT_InitialRegistration_Step5_14(nbiot_Cell1, CONTROL_PLANE, STATE2_NB_CONNECTED_UPDATED, v_Nas_Ind);
                 
                  log(v_TcName,"Sending RRC Connection release to UE");
                  f_NBIOT_RRC_ConnectionRelease(nbiot_Cell1);
                  log(v_TcName,"UE moved to RRC Idle mode");
                 
                
              }
         }
         []t_T3346.timeout
         {
             f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, v_TcName &"SS did not received Tracking Area Update request message before T3346 expiry");
         }
       }
    }
    else
    {
       f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, v_TcName &"T3346 is already expired");
    }
    log(v_TcName,"Step19: Switch off UE");  
   
    fl_UT_ApplyCommand(UT, cas_UT_Req(APP_TRANSMIT_STATE_OFF, NO_CNF_REQUIRED,{cs_Ut_Parameter_Common ("ACTIVATE_ADMIN_APN", "0")}));
    f_NBIOT_SS_ConfigRachPreambleIndMode(nbiot_Cell1, disable);     
  }
    
    
 
    
    
  
      // TC 5.15 - UE WITH T3346 TIMER SUPPORT RECEIVES TRACKING AREA UPDATE REJECT MESSAGE FROM THE NETWORK CODE 22
  function f_VZ_TC_5_10_NBIOT(charstring TestPlan_Name) runs on NBIOT_PTC
  {
    
    var charstring v_TcName := testcasename() & ": ";
      
    fl_UT_ApplyCommand(UT, cas_UT_Req(RESET_FRBDN_PLMN, NO_CNF_REQUIRED)); //Clearing Forbidden PLMN List. 
    f_Delay(4.0); 
    // Cell Init
    log (v_TcName,"<<<<<<<<<< Test Execution Started >>>>>>>>>>");  
    log(v_TcName," UE WITH T3346 TIMER SUPPORT RECEIVES TRACKING AREA UPDATE REJECT MESSAGE FROM THE NETWORK CODE 22");  
    f_NBIOT_Init (c1);

    //Cell Config
    log(v_TcName,"Step1: Configure the test setup so that the device under test (DUT) finds service on a single eNodeB "& 
         "with cell_id (where cell_id refers to the CellIdentity parameter that is broadcast in SIB1) equal to value X1, "&
         "PLMN id equal to value Y1, and TAI equal to value Z1."); 
    log(v_TcName,"Step2: Configure the test equipment such that the network will allow the UE to attach and connect to PDNs.");
    
    f_NBIOT_CellConfig_Def (nbiot_Cell1, CONTROL_PLANE);
         
    /* TRACKING AREA UPDATE REJECT MESSAGE FROM THE NETWORK CODE 22*/ 
    
    f1_VZ_TC_5_10_NBIOT_Body( tsc_Cause_Congestion, TestPlan_Name);
    f_NBIOT_TestBody_Set(false);

    log(v_TcName, "Postamble Execution started");
    f_NBIOT_ReleaseAllCells();
    log(v_TcName,"Cell is released"); 
    f_UT_PowerOffUE (UT);
    log(v_TcName,"UE is Powered off");
    log(v_TcName, "Postamble Execution done");
    log (v_TcName,"<<<<<<<<<< Test Execution Completed >>>>>>>>>>");

  } //End of Function f_VZ_TC_5_10_NBIOT

    function f1_VZ_TC_5_10_NBIOT_Body(
                               NAS_CauseValue_Type p_CauseValue,
                               charstring TestPlan_Name) runs on NBIOT_PTC
  {
   var EUTRA_ASN1_RRC_TransactionIdentifier_Type v_RRC_TI := tsc_RRC_TI_Def;
    var NAS_MSG_Indication_Type v_NasInd, v_Nas_Ind, v_NAS_Ind;
    var GutiParameters_Type v_Guti1_Params;  
    var GutiParameters_Type v_Guti2_Params;  
    var NAS_PlmnId v_HomePlmn;
    var NAS_Tac v_Tac1;
    //var EPS_UpdateTypeValue v_UpdateType := f_GetEPSTAUType(EPS_Only);
    /* T3346 Set to 15 min in Routing Area Update Reject*/
    template (value) GPRS_Timer2 v_GT3346 := cs_GPRS_Timer2_3_IEI('5F'O, tsc_GprsTimerUnit_1min, '01111'B); 
    var EPS_UpdateTypeValue v_UpdateType := tsc_EpsUpdate_TaUpdate;
    var float v_T3346 := (15.0 * 60.0); //15 Minutes
    timer t_T3346;
    var float v_Timer_1 := 120.0; 
	timer t_WaitTime;
    var float v_current; 
    var float v_Remaining; 
    var charstring v_TcName := testcasename() & ": ";
    timer t_Procedure_Guard_Timer;
    var float tsc_GuardProcedureTimer_240 := 460.0;
    var template (present) B3_Type v_PDNType := (f_GetPdnType(), '101'B, '001'B);
    var template (present) NAS_UL_Message_Type v_ESMMessage := cr_CIOT_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach, v_PDNType);
    var charstring v_sApn := "vzwadmin";
    
  
    f_NBIOT_SetCellPower ( nbiot_Cell1, tsc_ServingCellRS_EPRE );   
    /* 3. Power the DUT on and allow it to find LTE service. */    
    /* 3. Power the DUT on and allow it to find LTE service. */    
    f_UT_SwitchOnUE(UT, true);

    log(v_TcName,"Step3:  Power the DUT on and allow it to find LTE service."); 
      
    /*  4. Verify that the DUT successfully establishes an RRC connection and attaches to the LTE network. */
    log(v_TcName,"Step4: Verify that the DUT successfully establishes an RRC connection and attaches to the LTE network.");

     t_Procedure_Guard_Timer.start(tsc_GuardProcedureTimer_240); //Guard Procedure Started

     v_Nas_Ind := f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell1,
                                               cr_EstablishmentCause_NB_Any,
                                               cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                  cr_CIOT_ATTACH_REQUEST(cr_AdditionalUpdateType_CIOT),
                                                                                  v_ESMMessage)); 
      
    f_NBIOT_InitialRegistration_Step5_14(nbiot_Cell1, CONTROL_PLANE, STATE2_NB_CONNECTED_UPDATED, v_Nas_Ind);
    log(v_TcName,"Step4: Verified that the DUT successfully establishes an RRC connection and attaches to the LTE network");  
    
    
    f_NBIOT_PreliminaryPass(__FILE__, __LINE__, v_TcName & "Step4: PASS");

    f_Delay (1.0);
      
    log(v_TcName,"Step5: Forcing the DUT to the RRC IDLE state by having the network transmit an RRCConnectionRelease message");           
    f_NBIOT_RRC_ConnectionRelease( nbiot_Cell1 );
      log(v_TcName,"Step5: UE Moved to RRC IDLE State.");
         
    log(v_TcName,"Step6: Configuring the test equipment to respond to all NAS Tracking Area Update Request " & 
         "messages with a NAS Tracking Area Update Reject message with an EMM Cause Code of 22 and " &
         "a T3346 Timer value of 15 minutes");
      
   
    f_NBIOT_ReleaseAllCells();
   
    log(v_TcName,"Step7: Reconfigure the test setup so that the DUT now finds service on a different Tracking Area " & 
         "with id equal to value Z2 where Z2 is not equal to Z1, and Z2 is not on the UEs list of tracking areas. " &
         "Note that only the TAC portion of the TAI will be different. The PLMN id is still equal to Y1.");

    
    f_NBIOT_CellInfo_SetTAC(nbiot_Cell1, oct2bit(tsc_TAC2));
    
    f_NBIOT_CellConfig_Def( nbiot_Cell1, CONTROL_PLANE);
    f_Delay(2.0);   
    f_NBIOT_SetCellPower ( nbiot_Cell1, tsc_ServingCellRS_EPRE );
    log(v_TcName,"Step7: TAC Modified to Z2");
      
    /* 8a. Verify that the UE sends a NAS Tracking Area Update Request message and that the 
     * 8b. network responds with a NAS Tracking Area Update Reject message in which the EMM Cause Code is set to 22.*/  
    v_Guti1_Params := f_NBIOT_CellInfo_GetGuti(nbiot_Cell1);
    v_HomePlmn:= f_Asn2Nas_PlmnId(v_Guti1_Params.PLMN_Identity);
    v_Tac1 := bit2oct(f_NBIOT_CellInfo_GetTAC(nbiot_Cell1));
    log(v_TcName,"Step8a: Verify that the UE sends a NAS Tracking Area Update Request message and that the network " & 
                 "responds with a NAS Tracking Area Update Reject message in which the EMM Cause Code is set to 22.");  
    
    t_Procedure_Guard_Timer.start(tsc_GuardProcedureTimer_240); //Guard Procedure Started

    v_NasInd := f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell1,
                                       cr_EstablishmentCause_NB_Any,
                                       cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                           cdr_TAU_Request_OldGuti(?,
                                                                                 f_NBIOT_SecurityKSIasme_Get(),
                                                                                 cr_DRXparameter_Any ('5C'O) ifpresent, // @sic R5s120210 sic@
                                                                                 *,
                                                                                 f_GutiParameters2MobileIdentity(omit, v_Guti1_Params),
                                                                                 ?)));
   

    
    log(v_TcName, "Default Procedure Guard Timer Stopped");
    t_Procedure_Guard_Timer.stop; //Guard Procedure Ended
  
    if (not isvalue (v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST))
    {
        f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, v_TcName &
                "Step8b: Unexpected NAS message received while waiting for Tracking Area Update Request");
    }
 
    /* The SS transmits a TRACKING AREA UPDATE REJECT message with EMM cause = "Congestion" as specified.*/
   
    SRB.send(cas_NB_SRB1bis_NasPdu_REQ(nbiot_Cell1,
                                         cs_TimingInfo_Now,
                                         cs_NAS_Request(tsc_SHT_NoSecurityProtection, 
                                                        cs_508_TRACKING_AREA_UPDATE_REJECT(p_CauseValue, v_GT3346))));
    
    t_T3346.start ( f_NBIOT_SetTimerToleranceMin(  nonProtocolTimer, v_T3346 ) );
    log(v_TcName,"Step8b. Network responds with a NAS Tracking Area Update Reject message in which the EMM Cause Code is set to 22."); 
    log(v_TcName,"Timer T3346 is started for 15 minutes.");
    f_NBIOT_RRC_ConnectionRelease( nbiot_Cell1 );
    /* Perform below operation and at the end stop the timer T3346, If timer expires 
     * before finishing the below steps then it will return failure 
     */   

    log(v_TcName,"Step9. Verify that the UE does not re-issue a Tracking Area Update Request while the T3346 timer is running");

    t_WaitTime.start(f_NBIOT_SetTimerToleranceMax (  nonProtocolTimer, v_Timer_1));
    log(v_TcName," Waiting for ",float2int(v_Timer_1)," sec to check UE does not re-issue a tracking Area Update while the T3346 timer is running");
    alt {
       []SRB.receive(car_NB_SRB0_RrcPdu_IND(nbiot_Cell1, cr_RRCConnectionRequest_NB ( cr_EstablishmentCause_NB_Any, ? ) ))
         {
            t_WaitTime.stop;
            f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, v_TcName & "Step9: UE is triggering Tracking Area Update unexpectedly");
        }
      []t_WaitTime.timeout
        {
            f_NBIOT_PreliminaryPass(__FILE__, __LINE__, v_TcName & "Step9: PASS");
        }
    }

    log(v_TcName,"Step10: While the T3346 timer is running, power cycle the UE.");  
    fl_UT_ApplyCommand(UT, cas_UT_Req(POWER_CYCLE, NO_CNF_REQUIRED));
      
    
    log(v_TcName,"Step11: Verify that the UE does not re-issue a Tracking Area Update Request. ");
    t_WaitTime.start(f_NBIOT_SetTimerToleranceMax (  nonProtocolTimer, v_Timer_1));
    log(v_TcName,"Step11: After Power cycle, Waiting for ",float2int(v_Timer_1)," sec to check UE does not re-issue a tracking Area Update while the T3346 timer is running");
    alt {
      []SRB.receive(car_NB_SRB0_RrcPdu_IND(nbiot_Cell1, cr_RRCConnectionRequest_NB ( cr_EstablishmentCause_NB_Any, ? ) ))
         {
            t_WaitTime.stop;
            f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, v_TcName & "Step11: UE is triggering Tracking Area Update unexpectedly");
        }
      []t_WaitTime.timeout
        {
            f_NBIOT_PreliminaryPass(__FILE__, __LINE__, v_TcName &"Step11: PASS");
        }
    }

      f_NBIOT_ReleaseAllCells();
   
    log(v_TcName,"Step12: While the T3346 timer is running, re-configure the test setup so that the DUT now finds service on a different " & 
         "Tracking Area with id equal to value Z3 where Z3 is not equal to Z1 or Z2 and Z3 is not on the UEs list of tracking areas. " &
         "Note that only the TAC portion of the TAI will be different. The PLMN id is still equal to Y1.");

    
    f_NBIOT_CellInfo_SetTAC(nbiot_Cell1, oct2bit(tsc_TAC3));
    f_NBIOT_CellConfig_Def( nbiot_Cell1, CONTROL_PLANE);
    f_Delay(2.0);  
    f_NBIOT_SetCellPower ( nbiot_Cell1, tsc_ServingCellRS_EPRE );
      
    log(v_TcName,"Step12: TAC Modified to Z3");
      
    log(v_TcName,"Step13: Verify that the UE does not re-issue a Tracking Area Update Request.");
    t_WaitTime.start(f_NBIOT_SetTimerToleranceMax (  nonProtocolTimer, v_Timer_1));
    log(v_TcName,"Step13: After TAC Change, Waiting for ",float2int(v_Timer_1)," sec to check UE does not re-issue a tracking Area Update while the T3346 timer is running");
    alt {
     []SRB.receive(car_NB_SRB0_RrcPdu_IND(nbiot_Cell1, cr_RRCConnectionRequest_NB ( cr_EstablishmentCause_NB_Any, ? ) ))
         {
            t_WaitTime.stop;
            f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, v_TcName &"Step13: UE is triggering Tracking Area Update unexpectedly");
        }
      []t_WaitTime.timeout
        {
            f_NBIOT_PreliminaryPass(__FILE__, __LINE__, v_TcName & "Step13: PASS");
        }
    }

    f_NBIOT_ReleaseAllCells();
     //Configuring the RPLMN

    log(v_TcName,"Step14: While the T3346 timer is running, re-configure the network so that the UE finds service on an " & 
         "eNodeB with a PLMN id equal to Y4 where Y4 is not equal to Y1. PLMN Y4 shall not be a home PLMN. The frequency " &
         "of the second PLMN shall be the same as the first. T3346 shall not be running in this second PLMN.");

    f_NBIOT_CellInfo_SetPLMN_Common(nbiot_Cell1, {cs_HPLMN_311_481}, -, false);
    f_NBIOT_CellConfig_Def( nbiot_Cell1, CONTROL_PLANE);
    f_Delay(2.0);  
    f_NBIOT_SetCellPower (nbiot_Cell1, tsc_ServingCellRS_EPRE );
    log(v_TcName,"Step14: PLMN-Id Modified for non Home PLMN");

    v_Guti2_Params := f_NBIOT_CellInfo_GetGuti(nbiot_Cell1);     
 
    //handling of Roaming scenaios//
    v_current := t_T3346.read; 
    v_Remaining := v_T3346 - v_current;   
    log(" Timer T3346 is still running with remaining value :",float2int(v_Remaining)," Sec."); 
    log(v_TcName,"Step15: Verify that the UE successfully attaches to the LTE network and connects to the Internet PDN using PDN Type IPv4.");
    log(v_TcName,"Step15: Waiting for attach from UE");
    fl_UT_ApplyCommand(UT, cas_UT_Req(POWER_CYCLE, NO_CNF_REQUIRED));
    t_Procedure_Guard_Timer.start(tsc_GuardProcedureTimer_240); //Guard Procedure Started

    //f_EUTRA_AttachProcedure_ConnectedUpdated_Roaming (nbiot_Cell1, NORMAL, v_AttachType, v_AdditionalUpdateType);    
    v_NAS_Ind := f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell1,
                                                  cr_EstablishmentCause_NB_Any,
                                                  cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                    cr_CIOT_ATTACH_REQUEST(cr_AdditionalUpdateType_CIOT), //Table 22.5.7a.3.3-4
                                                                                    v_ESMMessage)); 

     if (not match(v_NAS_Ind.Pdu.PiggybackedPduList[0].Msg.pDN_CONNECTIVITY_REQUEST.pdnType.typeValue, tsc_PdnType_IPv4))
    {
        f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, v_TcName &"PDN Type used is not IPV4 as expected!");
    }  
      
    f_NBIOT_InitialRegistration_Step5_14(nbiot_Cell1, CONTROL_PLANE, STATE2_NB_CONNECTED_UPDATED, v_NAS_Ind); 

      
    log(v_TcName, "Default Procedure Guard Timer Stopped");
    t_Procedure_Guard_Timer.stop; //Guard Procedure Ended

    log(v_TcName,"Step15: Connection to the LTE network is successful");

    f_NBIOT_ReleaseAllCells();
    log(v_TcName,"Step16: While the T3346 timer is running, re-configure the test setup so that the DUT again finds service on PLMN Y1.");
    //Configuring back to HOME PLMN
    
    f_NBIOT_CellInfo_SetPLMN_Common(nbiot_Cell1, {cs_HPLMN_Def}, -, false);
    f_NBIOT_SS_ConfigureSysinfo (nbiot_Cell1);
    f_NBIOT_CellConfig_Def( nbiot_Cell1, CONTROL_PLANE);
    f_Delay(2.0);   
    f_NBIOT_SetCellPower (nbiot_Cell1, tsc_ServingCellRS_EPRE );
    
    log(v_TcName,"Step16: PLMN-Id Modified for Home PLMN");

    v_Guti1_Params := f_NBIOT_CellInfo_GetGuti(nbiot_Cell1);
    v_HomePlmn:= f_Asn2Nas_PlmnId(v_Guti1_Params.PLMN_Identity);
    v_Tac1 := bit2oct(f_NBIOT_CellInfo_GetTAC(nbiot_Cell1));
    log(v_TcName,"Step17: Verify that the UE issues a Tracking Area Update Request without waiting for T3346 to expire.");
      
    v_current := t_T3346.read; 
    v_Remaining := v_T3346 - v_current;   
    log(" Timer T3346 is still running with remaining value :",float2int(v_Remaining)," Sec."); 
    log(v_TcName,"Step17: Waiting for TAU from UE");

    t_Procedure_Guard_Timer.start(tsc_GuardProcedureTimer_240); //Guard Procedure Started
    v_NasInd := f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell1,
                                       cr_EstablishmentCause_NB_Any,
                                       cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                           cdr_TAU_Request_OldGuti(?,
                                                                                 f_NBIOT_SecurityKSIasme_Get(),
                                                                                 cr_DRXparameter_Any ('5C'O) ifpresent, // @sic R5s120210 sic@
                                                                                 *,
                                                                                 ?,
                                                                                 ?)));
      

    log(v_TcName, "Default Procedure Guard Timer Stopped");
    t_Procedure_Guard_Timer.stop; //Guard Procedure Ended

    if (not isvalue (v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST))
    {
        f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, v_TcName &
                "Step17: Unexpected NAS message received while waiting for Tracking Area Update Request");
    }
    
    log(v_TcName,"Step17: Received Tracking Area Update");
    log(v_TcName,"Step17: Respond to Tracking Area Update with Tracking Area Accept");
      SRB.send(cas_NB_SRB_NasPdu_REQ(nbiot_Cell1,
                                   tsc_SRB1bis,
                                   cs_TimingInfo_Now,
                                   cs_NAS_Request(tsc_SHT_IntegrityProtected_Ciphered,
                                                  cs_TAU_Accept_Common(v_UpdateType,
                                                                       f_GutiParameters2MobileIdentity(tsc_IEI_Guti, v_Guti1_Params),
                                                                       omit,
                                                                       omit,
                                                                       omit,
                                                                       omit,
                                                                       f_GetNBIOTAdditionalUpdateResult(v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.addUpdateType)
                                                                       ))));
  SRB.receive(car_NB_SRB_NasPdu_IND(nbiot_Cell1,
                                      tsc_SRB1bis,
                                      cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered,
                                                        cr_508_TAU_Complete)));
   
    f_NBIOT_SS_ConfigRachPreambleIndMode(nbiot_Cell1, disable);
    //f_VZ_Ignore_Rach_Enable_Ind_Disable(eutra_Cell1);            //added for LCCP-2346 
    log(v_TcName,"Step17: Passed ");
    t_T3346.stop;
      
  } //function f1_VZ_TC_5_10_NBIOT


    
    
    
   function f_VZ_IMSLess_TC_5_12_NBIOT_Tests(NAS_CauseValue_Type p_attachReject_CauseCode, charstring TestPlan_Name) runs on NBIOT_PTC
  {
    var integer v_EMM_CauseCode := bit2int(p_attachReject_CauseCode);
    var charstring v_TcName :=  testcasename() & ": ";  

    log(v_TcName,"PERMANENT EMM FAILURES ACROSS POWER CYCLE WITH SERVICE REQUEST. EMM Cause Code ", v_EMM_CauseCode," ");
    log("########",v_TcName,"Attention:: This test case requires one Additional SIM/UICC which need to be replaced with old SIM in middle of test Execution(At Step 30)." );

    f_NBIOT_Init (c1);  
    log(v_TcName,"Step1: Configure the test setup so that the device under test (DUT) finds service on " & 
                       "a single eNodeB with cell_id = X1, PLMN id = Y1, & TAI = Z1.");
    
    f_NBIOT_CellConfig_Def (nbiot_Cell1, CONTROL_PLANE);
   
    f_NBIOT_SetCellPower ( nbiot_Cell1, tsc_ServingCellRS_EPRE );
    
    
    fl_VZ_IMSLess_TC_5_12_NBIOT_Body(p_attachReject_CauseCode);
    f_NBIOT_TestBody_Set(false);
   
    log(v_TcName,"Postamble Execution started");
    f_NBIOT_ReleaseAllCells();
    f_NBIOT_PreliminaryPass(__FILE__, __LINE__, testcasename()&" PASSED");
   
    log(v_TcName, "Postamble Execution done");
  } 
    
    
function fl_VZ_IMSLess_TC_5_12_NBIOT_Body(NAS_CauseValue_Type p_tsc_EmmCause_Code) runs on NBIOT_PTC
  {
    var NAS_MSG_Indication_Type v_NasInd; 
    var NAS_MSG_Indication_Type v_NAS_Ind;
    var ProcedureTransactionIdentifier v_PTId_UE;
    var PDN_CONNECTIVITY_REQUEST v_PDNConnReq;
    timer waitFor5min := (5.0 * 60.0);
    var integer v_EMMCauseCode;
    var integer StepNo := 12;
    var integer loopCnt := 0;
    var charstring v_APN := "vzwadmin";
    var EPS_BearerIdentity v_EpsBearerId2 := '6'H;
    var charstring v_TcName := testcasename() &": ";
    timer t_Procedure_Guard_Timer;
    timer t_timer;
    var boolean v_isTimeOut := false;
    var charstring v_mmiPopUpMsg := " ";
    var charstring v_sApn := "vzwadmin";
    var float tsc_GuardProcedureTimer_240 := 240.0;
    timer t_T3411 := 10.0;
    var template (present) B3_Type v_PDNType := (f_GetPdnType(), '101'B, '001'B);
    var template (present) NAS_UL_Message_Type v_ESMMessage := cr_CIOT_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach, v_PDNType);
    
      
    v_EMMCauseCode := bit2int(p_tsc_EmmCause_Code);
    
    log(v_TcName,"Step2: Configured the test equipment such that the network will respond to attach attempts with NAS Attach Reject message with EMM Cause Code ",v_EMMCauseCode);
    log("########",v_TcName,"Step3: Ensure DUT has parameter MAXEVENTCOUNTER set to default value of 5 and " &
                       "parameter MAXLOGTIME set to default value of 120. "); 

    log(v_TcName,"Step4: Power on the DUT and allow it to find LTE service");    
    f_UT_SwitchOnUE(UT, true);    
  
    t_Procedure_Guard_Timer.start(tsc_GuardProcedureTimer_240); //Guard Procedure Started
      
    log(v_TcName,"Step5: Waiting to receive Attach Request from UE.");
   

    v_NasInd := f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell1,
                                               cr_EstablishmentCause_NB_Any,
                                               cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                  cr_CIOT_ATTACH_REQUEST(cr_AdditionalUpdateType_CIOT),
                                                                                  v_ESMMessage)); 
      
     f_NBIOT_InitialRegistration_Step5_14(nbiot_Cell1, CONTROL_PLANE, STATE2_NB_CONNECTED_UPDATED, v_NasInd);
    
    log(v_TcName,"Step5: UE Attached Successfully");

    log(v_TcName, "Default Procedure Guard Timer Stopped");
    t_Procedure_Guard_Timer.stop; //Guard Procedure Ended
         
    // Waiting for Internet/Admin  
    log(v_TcName,"Step6: Initiate the test application (see section TEST EQUIPMENT CONFIGURATION) and verify that it "&
                 "connects successfully to the ",v_APN," PDN. Configure the test application for the application idle state.");      
       
    
    f_NBIOT_TriggerAdditionalPDN_Modified (nbiot_Cell1, CONTROL_PLANE, ?, cs_AccessPointName (tsc_Octet_Lower_ADMIN_APN), v_sApn);
    
     
    log(v_TcName,"Step6: UE is successfully connected to the ",v_APN," PDN");
      
    /* 6. Force the DUT to the RRC IDLE state by having the network transmit an RRCConnectionRelease message. */
    log(v_TcName,"Step7: Force the DUT to the RRC IDLE state by having the network transmit an RRCConnectionRelease message");
    f_NBIOT_RRC_ConnectionRelease( nbiot_Cell1 );
    log(v_TcName,"Step7: UE moved to RRC Idle mode");
      
    log(v_TcName,"Step8: Configure the test equipment so that the network responds to all NAS Service Request messages "&
                  "with a NAS Service Reject message with an EMM Cause Code of ",v_EMMCauseCode);
     
    log(v_TcName,"Step9: Configure the test application for the application transmitting state with a retransmission timer of 10 seconds");
  
    fl_UT_ApplyCommand(UT, cas_UT_Req(APP_TRANSMIT_STATE_ON, NO_CNF_REQUIRED,{cs_Ut_Parameter_Common ("ACTIVATE_ADMIN_APN", "10")}));
    
    
    log(v_TcName,"Step10: Verify that the UE sends a NAS Service Request message and that the network responds with a "&
                  "NAS Service Reject message in which the EMM Cause Code is set to ", v_EMMCauseCode); 
      
    t_Procedure_Guard_Timer.start(tsc_GuardProcedureTimer_240); //Guard Procedure Started

    v_NAS_Ind := f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell1,
                                             cr_EstablishmentCause_NB_Any,
                                             cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                             cr_CONTROL_PLANE_SERVICE_REQUEST(f_NBIOT_SecurityKSIasme_Get())));	  

    log(v_TcName,"Step10: Received Service Request from UE");      

    log(v_TcName, "Default Procedure Guard Timer Stopped");
    t_Procedure_Guard_Timer.stop; //Guard Procedure Ended
    
    log(v_TcName,"Step10: SS Transmits Service Reject with EMM Cause ",v_EMMCauseCode);
   

    SRB.send(cas_NB_SRB_NasPdu_REQ(nbiot_Cell1,
                                   tsc_SRB1bis,
                                   cs_TimingInfo_Now,
                                   cs_NAS_Request(tsc_SHT_NoSecurityProtection,
                                                  cs_508_SERVICE_REJECT(p_tsc_EmmCause_Code))));
    
      
    log(v_TcName,"Step11: Re-configure the test equipment such that the network will respond to attach attempts by sending a "&
                  "NAS Attach Reject message with an EMM Cause Code equal to ", v_EMMCauseCode); 
      
    for (loopCnt := 0; loopCnt < 5; loopCnt := loopCnt + 1)
    {  
        
        t_T3411.start(f_NBIOT_SetTimerToleranceMin(nonProtocolTimer, 10.0));
        alt{     
    []SRB.receive(car_NB_SRB0_RrcPdu_IND(nbiot_Cell1, cr_RRCConnectionRequest_NB ( cr_EstablishmentCause_NB_Any, ? ) ))
      {
        t_T3411.stop;
        f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, "TC_5_12_NBIOT UE sent unexpected Attach Request before expiry of T3411 timer");
      }
      []t_T3411.timeout
      {
        log("TC_5_12_NBIOT Successfully Timer expired 10 seconds");
      }
    }
        
        f_NBIOT_RRC_ConnectionRelease( nbiot_Cell1 );  
        
      
        fl_UT_ApplyCommand(UT, cas_UT_Req(APP_TRANSMIT_STATE_OFF, NO_CNF_REQUIRED,{cs_Ut_Parameter_Common ("ACTIVATE_ADMIN_APN", "0")}));
    
        log (v_TcName,"Step",StepNo,": Power cycle the DUT.");  
        fl_UT_ApplyCommand(UT, cas_UT_Req(POWER_CYCLE, NO_CNF_REQUIRED));
        fl_UT_ApplyCommand(UT, cas_UT_Req(APP_TRANSMIT_STATE_ON, NO_CNF_REQUIRED,{cs_Ut_Parameter_Common ("ACTIVATE_ADMIN_APN", "10")}));
        log(v_TcName, "Step",StepNo+1,": Verify that the DUT successfully establishes an RRC connection and sends a NAS Attach Request message");      
        v_NAS_Ind := f_NBIOT_RRC_ConnEst_DefWithNas( nbiot_Cell1,
                                                cr_EstablishmentCause_NB_Any,
                                                cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                  cr_CIOT_ATTACH_REQUEST(cr_AdditionalUpdateType_CIOT),
                                                                                  v_ESMMessage)); 
   
                                                
        log(v_TcName,"Step",StepNo+1,": Verified that the DUT successfully establishes an RRC connection and sends a NAS Attach Request message.");
      
        v_PDNConnReq := v_NAS_Ind.Pdu.PiggybackedPduList[0].Msg.pDN_CONNECTIVITY_REQUEST;  
        v_PTId_UE := v_PDNConnReq.procedureTransactionIdentifier;
    
        log(v_TcName,"Step",StepNo+2,": Sending Attach Reject to UE ");   

        SRB.send(cas_NB_SRB_NasPdu_REQ(nbiot_Cell1,
                                   tsc_SRB1bis,
                                   cs_TimingInfo_Now,
                                   cs_NAS_Request(v_NAS_Ind.SecurityProtection.Status,
                                                  cs_508_AttachReject(cs_EMM_Cause_v(p_tsc_EmmCause_Code)))));
    
        log(v_TcName,"Step",StepNo+2,": Sent Attach Reject message with EMM Cause Code set to ",v_EMMCauseCode);
        StepNo := StepNo + 3;
         
    }  
    t_T3411.start(f_NBIOT_SetTimerToleranceMin(nonProtocolTimer, 10.0));
        alt{     
    []SRB.receive(car_NB_SRB0_RrcPdu_IND(nbiot_Cell1, cr_RRCConnectionRequest_NB ( cr_EstablishmentCause_NB_Any, ? ) ))
      {
        t_T3411.stop;
        f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, "TC_5_12_NBIOT UE sent unexpected Attach Request before expiry of T3411 timer");
      }
      []t_T3411.timeout
      {
        log("TC_5_12_NBIOT Successfully Timer expired 10 seconds");
      }
    }
    f_NBIOT_RRC_ConnectionRelease( nbiot_Cell1 );  
    //f_EUTRA_RRC_ConnectionRelease_Local( eutra_Cell1 ,f_EUTRA_GetNextSendOccasion(eutra_Cell1));
     /*fl_UT_ApplyCommand(UT, cas_UT_Req(APP_TRANSMIT_STATE_OFF, NO_CNF_REQUIRED,{cs_Ut_Parameter_Common ("ACTIVATE_ADMIN_APN", "0")}));
    log(v_TcName,"Step27: Power Cycle the DUT");
    fl_UT_ApplyCommand(UT, cas_UT_Req(POWER_CYCLE, NO_CNF_REQUIRED));
    fl_UT_ApplyCommand(UT, cas_UT_Req(APP_TRANSMIT_STATE_ON, NO_CNF_REQUIRED,{cs_Ut_Parameter_Common ("ACTIVATE_ADMIN_APN", "10")}));
      */
    log(v_TcName,"Step28: Started timer for 5 mintues to verify that DUT dos not attempt to connect to the LTE Network");
    waitFor5min.start;
    alt
    {
       []SRB.receive(car_NB_SRB0_RrcPdu_IND(nbiot_Cell1, cr_RRCConnectionRequest_NB ( cr_EstablishmentCause_NB_Any, ? ) ))
       {
          waitFor5min.stop;
          log(v_TcName,"Step28:  UE sent unexpected Attach Request before expiry of 5 minutes timer");
          f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, v_TcName &"Step28: UE sent unexpected Attach Request before expiry of 5 minutes timer");
       }    
       []waitFor5min.timeout
       {
          log(v_TcName,"Step28: Successfuly verified that DUT did not send Attach Request for 5 minutes");
       }
    }
    /*log(v_TcName,"Step29: Power Off  the DUT");
    f_UT_SwitchOffUE (UT, false);
      
    f_Delay(10.0);*/
    v_mmiPopUpMsg := "Power Off  the DUT, Remove the SIM/UICC(B01) in the DUT and insert valid UICC (B30).{Replacing UICC will have IMSI-311480000004601}";
    log(v_TcName, "Step30: ", v_mmiPopUpMsg);
   // log (v_TcName, ": Waiting for 300 sec(s) for user action. " & v_mmiPopUpMsg);
   // f_Delay(int2float(120));
    
     //  log(v_TcName, "Step30: Proceeding after 300 sec.");
 

    log("########",v_TcName,"Step31: Power ON the DUT after SIM replacement"); 
    
     
    t_Procedure_Guard_Timer.start(tsc_GuardProcedureTimer_240); //Guard Procedure Started

   
    v_NasInd := f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell1,
                                               cr_EstablishmentCause_NB_Any,
                                               cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                  cr_CIOT_ATTACH_REQUEST(cr_AdditionalUpdateType_CIOT),
                                                                                  v_ESMMessage)); 
      
     f_NBIOT_InitialRegistration_Step5_14(nbiot_Cell1, CONTROL_PLANE, STATE2_NB_CONNECTED_UPDATED, v_NasInd);
    log(v_TcName,"Step32: UE Attached Successfully");

    log(v_TcName, "Default Procedure Guard Timer Stopped");
    t_Procedure_Guard_Timer.stop; //Guard Procedure Ended
    
    f_NBIOT_RRC_ConnectionRelease(nbiot_Cell1);
    fl_UT_ApplyCommand(UT, cas_UT_Req(APP_TRANSMIT_STATE_OFF, NO_CNF_REQUIRED,{cs_Ut_Parameter_Common ("ACTIVATE_ADMIN_APN", "0")}));
    
    log(v_TcName,"Step33: Power off the DUT");
    f_UT_SwitchOffUE (UT, false);
  }
    
    
     function f_VZ_IMSLess_TC_5_13_NBIOT_Tests(NAS_CauseValue_Type p_attachReject_CauseCode, charstring TestPlan_Name) runs on NBIOT_PTC
  {
    var integer v_EMM_CauseCode := bit2int(p_attachReject_CauseCode);
    var charstring v_TcName :=  testcasename() & ": ";  

    log(v_TcName,"PERMANENT EMM FAILURES ACROSS POWER CYCLE WITH SERVICE REQUEST. EMM Cause Code ", v_EMM_CauseCode," ");
    log("########",v_TcName,"Attention:: This test case requires one Additional SIM/UICC which need to be replaced with old SIM in middle of test Execution(At Step 30)." );
    f_NBIOT_Init (c1);  
    log(v_TcName,"Step1: Configure the test setup so that the device under test (DUT) finds service on " & 
                       "a single eNodeB with cell_id = X1, PLMN id = Y1, & TAI = Z1.");
    
    f_NBIOT_CellConfig_Def (nbiot_Cell1, CONTROL_PLANE);

    f_NBIOT_SetCellPower ( nbiot_Cell1, tsc_ServingCellRS_EPRE );
    
    f_NBIOT_TestBody_Set(true);
    fl_VZ_IMSLess_TC_5_13_NBIOT_Body(p_attachReject_CauseCode, TestPlan_Name);
    f_NBIOT_TestBody_Set(false);
   
    log(v_TcName," Postamble Execution started");
    f_NBIOT_ReleaseAllCells();
    f_NBIOT_PreliminaryPass(__FILE__, __LINE__, v_TcName & " PASSED");
    log(v_TcName, "Postamble Execution done");
  } 
    
  function fl_VZ_IMSLess_TC_5_13_NBIOT_Body(NAS_CauseValue_Type p_tsc_EmmCause_Code, charstring TestPlan_Name) runs on NBIOT_PTC
  {
   
    var template AdditionalUpdateType v_AdditionalUpdateType := omit;
    var float tsc_GuardProcedureTimer_240 := 240.0;
    var NAS_MSG_Indication_Type v_NAS_Ind, v_NasInd;  
    
    var ProcedureTransactionIdentifier v_PTId_UE;
    var PDN_CONNECTIVITY_REQUEST v_PDNConnReq;
    timer waitFor5min := (5.0 * 60.0);
    var integer v_EMMCauseCode;
    var integer StepNo := 11;
    var integer loopCnt := 0;
    var charstring v_APN := "INTERNET";
    var GutiParameters_Type v_Guti1_Params;  
    var charstring v_TcName := testcasename() &": ";
    timer t_Procedure_Guard_Timer;
    timer t_timer;
    timer t_T3411 := 10.0;
    var boolean v_isTimeOut := false;
    var charstring v_mmiPopUpMsg := " ";
    var template (present) B3_Type v_PDNType := (f_GetPdnType(), '101'B, '001'B);
    var template (present) NAS_UL_Message_Type v_ESMMessage := cr_CIOT_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach, v_PDNType);
    
      
    v_EMMCauseCode := bit2int(p_tsc_EmmCause_Code);
      
      
    log(v_TcName,"Step2: Configured the test equipment such that the network will respond to attach attempts with NAS Attach Reject message with EMM Cause Code ",v_EMMCauseCode);
    log("########",v_TcName,"Step3: Ensure DUT has parameter MAXEVENTCOUNTER set to default value of 5 and " &
                       "parameter MAXLOGTIME set to default value of 120. ");

    log(v_TcName,"Step4: Power on the DUT and allow it to find LTE service");    
   f_UT_SwitchOnUE(UT, true);    
  
    t_Procedure_Guard_Timer.start(tsc_GuardProcedureTimer_240); //Guard Procedure Started
                
    log(v_TcName,"Step5: Waiting to receive Attach Request from UE.");
     v_NasInd := f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell1,
                                               cr_EstablishmentCause_NB_Any,
                                               cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                  cr_CIOT_ATTACH_REQUEST(cr_AdditionalUpdateType_CIOT),
                                                                                  v_ESMMessage)); 
      
     f_NBIOT_InitialRegistration_Step5_14(nbiot_Cell1, CONTROL_PLANE, STATE2_NB_CONNECTED_UPDATED, v_NasInd);
     
      
   log(v_TcName,"Step5: UE Attached Successfully");

   log(v_TcName, "Default Procedure Guard Timer Stopped");
    t_Procedure_Guard_Timer.stop; //Guard Procedure Ended
         
    /* 5. Force the DUT to the RRC IDLE state by having the network transmit an RRCConnectionRelease message. */
    log(v_TcName," Step6: Force the DUT to the RRC IDLE state by having the network transmit an RRCConnectionRelease message.");  
    f_NBIOT_RRC_ConnectionRelease( nbiot_Cell1 );  
    log(v_TcName," Step6: DUT moved to the RRC Idle state.");
         
    /* 6. Configure the test equipment so that the network responds to all NAS Tracking Area Update Request 
     *     messages with a NAS Tracking Area Update Reject message with an EMM Cause Code of 12.      
     * 7. Reconfigure the test setup so that the DUT now finds service on a different Tracking Area with id 
     *     equal to value Z2 where Z2 is not equal to Z1, and Z2 is not on the UEs list of tracking areas. 
     *     Note that only the TAC portion of the TAI will be different. The PLMN id is still equal to Y1.*/

    log(v_TcName," Step7: Configure the test equipment so that the network responds to all NAS Tracking Area Update Request messages with a NAS Tracking Area Update Reject message with an EMM Cause Code of ", v_EMMCauseCode);      
    //f_NBIOT_SetCellPower ( nbiot_Cell1, tsc_NonSuitableOffCellRS_EPRE );
    f_NBIOT_ReleaseAllCells();
           
    log(v_TcName,"Step8: Reconfigure the test setup so that the DUT now finds service on a different Tracking Area with id equal to value Z2 where Z2 is not equal to Z1, and Z2 is not on the UEs list of tracking areas. Note that only the TAC portion of the TAI will be different. The PLMN id is still equal to Y1");  
    log(v_TcName,"Step8a: Modifying TAC to Z2 = ", tsc_Idle_TAC_Cell11);
    f_NBIOT_CellInfo_SetTAC(nbiot_Cell1, tsc_Idle_TAC_Cell11);
    
    
    /* Delay added for UE to read the new configure after cell release*/
    log(v_TcName,"Step8b: Wait to configure SS for 10 seconds"); 
    f_NBIOT_CellConfig_Def( nbiot_Cell1, CONTROL_PLANE);
   
    f_NBIOT_SetCellPower ( nbiot_Cell1, tsc_ServingCellRS_EPRE );
    log(v_TcName,"Step8c: TAC Modified to Z2 = ", tsc_Idle_TAC_Cell11);
      
    //f_NBIOT_TrackingAreaUpdate_Step1_5 (nbiot_Cell1, CONTROL_PLANE);
      
    /* 8a. Verify that the UE sends a NAS Tracking Area Update Request message and that the 
     * 8b. network responds with a NAS Tracking Area Update Reject message in which the EMM Cause Code is set to 12.*/  
    log (v_TcName,"Step9: Verify that the UE sends a NAS Tracking Area Update Request message and that the network responds with a NAS Tracking Area Update Reject message in which the EMM Cause Code is set to ",v_EMMCauseCode);  
    v_Guti1_Params := f_NBIOT_CellInfo_GetGuti(nbiot_Cell1);
     
    t_Procedure_Guard_Timer.start(tsc_GuardProcedureTimer_240); //Guard Procedure Started
      
    v_NAS_Ind := f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell1,
                                       cr_EstablishmentCause_NB_Any,
                                       cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                           cdr_TAU_Request_OldGuti(?,
                                                                                 f_NBIOT_SecurityKSIasme_Get(),
                                                                                 cr_DRXparameter_Any ('5C'O) ifpresent, // @sic R5s120210 sic@
                                                                                 *,
                                                                                 f_GutiParameters2MobileIdentity(omit, v_Guti1_Params),
                                                                                 ?)));
      

   log(v_TcName, "Default Procedure Guard Timer Stopped");
    t_Procedure_Guard_Timer.stop; //Guard Procedure Ended

    if (not isvalue (v_NAS_Ind.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST))
    {
        f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, v_TcName &
                "Step9a: Unexpected NAS message received while waiting for Tracking Area Update Request");
    }
    log(v_TcName,"Step9a: Received Tracking Area Update Request");
    /*   The SS transmits a TRACKING AREA UPDATE REJECT message with EMM cause = "Tracking area not allowed" as specified.*/
      
     SRB.send(cas_NB_SRB1bis_NasPdu_REQ(nbiot_Cell1,
                                         cs_TimingInfo_Now,
                                         cs_NAS_Request(tsc_SHT_NoSecurityProtection, 
                                                        cs_508_TRACKING_AREA_UPDATE_REJECT(p_tsc_EmmCause_Code))));
        
    log(v_TcName,"Step9b: SS Transmits Tracking Area Update Reject with EMM Cause code ",v_EMMCauseCode);
    
    log(v_TcName,"Step10: Re-configure the test equipment such that the network will respond to attach attempts by sending a "&
                  "NAS Attach Reject message with an EMM Cause Code equal to ", v_EMMCauseCode); 
      
    for (loopCnt := 0; loopCnt < 5; loopCnt := loopCnt + 1)
    {  
      t_T3411.start(f_NBIOT_SetTimerToleranceMin(nonProtocolTimer, 10.0));
      alt{     
       []SRB.receive(car_NB_SRB0_RrcPdu_IND(nbiot_Cell1, cr_RRCConnectionRequest_NB ( cr_EstablishmentCause_NB_Any, ? ) ))
       {
        t_T3411.stop;
        f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, "TC_5_13_NBIOT UE sent unexpected Attach Request before expiry of T3411 timer");
       }
       []t_T3411.timeout
       {
        log("TC_5_13_NBIOT Successfully Timer expired 10 seconds");
       }
      }
        f_NBIOT_RRC_ConnectionRelease( nbiot_Cell1 );  
        
        log (v_TcName,"Step",StepNo,": Power cycle the DUT.");         
         fl_UT_ApplyCommand(UT, cas_UT_Req(POWER_CYCLE, NO_CNF_REQUIRED));
     
        log(v_TcName, "Step",StepNo+1,": Verify that the DUT successfully establishes an RRC connection and sends a NAS Attach Request message");      
        v_NAS_Ind := f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell1,
                                                  cr_EstablishmentCause_NB_Any,
                                                  cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                    cr_CIOT_ATTACH_REQUEST(cr_AdditionalUpdateType_CIOT), //Table 22.5.7a.3.3-4
                                                                                    v_ESMMessage)); 
                                                                               
        log(v_TcName,"Step",StepNo+1,": Verified that the DUT successfully establishes an RRC connection and sends a NAS Attach Request message.");
      
        v_PDNConnReq := v_NAS_Ind.Pdu.PiggybackedPduList[0].Msg.pDN_CONNECTIVITY_REQUEST;  
        v_PTId_UE := v_PDNConnReq.procedureTransactionIdentifier;
    
        log(v_TcName,"Step",StepNo+2,": Sending Attach Reject to UE ");   
        
         SRB.send(cas_NB_SRB1bis_NasPdu_REQ(nbiot_Cell1,
                                         cs_TimingInfo_Now,
                                         cs_NAS_Request(v_NAS_Ind.SecurityProtection.Status, // @sic R5-174501 sic@
                                                        cs_508_AttachReject(cs_EMM_Cause_v(p_tsc_EmmCause_Code)))));
   
        
        log(v_TcName,"Step",StepNo+2,": Sent Attach Reject message with EMM Cause Code set to ",v_EMMCauseCode);
        StepNo := StepNo + 3;
    }  
      
      t_T3411.start(f_NBIOT_SetTimerToleranceMin(nonProtocolTimer, 10.0));
      alt{     
       []SRB.receive(car_NB_SRB0_RrcPdu_IND(nbiot_Cell1, cr_RRCConnectionRequest_NB ( cr_EstablishmentCause_NB_Any, ? ) ))
       {
        t_T3411.stop;
        f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, "TC_5_13_NBIOT UE sent unexpected Attach Request before expiry of T3411 timer");
       }
       []t_T3411.timeout
       {
        log("TC_5_13_NBIOT Successfully Timer expired 10 seconds");
       }
      }

    f_NBIOT_RRC_ConnectionRelease( nbiot_Cell1 );
    //f_EUTRA_RRC_ConnectionRelease_Local( eutra_Cell1 ,f_EUTRA_GetNextSendOccasion(eutra_Cell1));      
    log(v_TcName,"Step26: Power Cycle the DUT");
    fl_UT_ApplyCommand(UT, cas_UT_Req(POWER_CYCLE, NO_CNF_REQUIRED));
      
    log(v_TcName,"Step27: Started timer for 5 mintues to verify that DUT dos not attempt to connect to the LTE Network");
    waitFor5min.start;
    alt
    {
      []SRB.receive(car_NB_SRB0_RrcPdu_IND(nbiot_Cell1, cr_RRCConnectionRequest_NB ( cr_EstablishmentCause_NB_Any, ? ) ))
       {
          waitFor5min.stop;
          log(v_TcName,"Step27:  UE sent unexpected Attach Request before expiry of 5 minutes timer");
          f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, v_TcName &"Step27: UE sent unexpected Attach Request before expiry of 5 minutes timer");
       }    
       []waitFor5min.timeout
       {
          log(v_TcName,"Step27: Successfuly verified that DUT did not send Attach Request for 5 minutes");
       }
    }
   /* log(v_TcName,"Step28: Power Off  the DUT");
    f_UT_SwitchOffUE (UT, false);
      
    f_Delay(10.0);*/
      
    v_mmiPopUpMsg := "Power Off  the DUT, Remove the SIM/UICC(B01) in the DUT and insert valid UICC (B30).{Replacing UICC will have IMSI-311480000004601}";
    log(v_TcName, "Step30: ", v_mmiPopUpMsg);
   
      
 
  /*  log(v_TcName, "Step29: SIM/UICC is successfully replaced.");
    t_timer.start(5.0); // Checking if UE is trrigering automatic attach.
    alt
    {        
      []SRB.check(receive(car_SRB0_RrcPdu_IND(eutra_Cell1, cr_RRCConnectionRequest(cr_EstablishmentCause_Any))))        
      {
        t_timer.stop;
        log(v_TcName, "Step30: UE is already power ON and UE triggered attach request");
      }
      []t_timer.timeout
      {
        log("Step30: Powering on (Power Cycle) the DUT after SIM/UICC changes.");
        f_UT_TriggerPowerCycle(UT);  
        log(v_TcName,"Step31: Waiting for Attached request from UE after power on.");
      }
    }  */   
    log("########",v_TcName,"Step30: Power ON the DUT after SIM replacement");  
    t_Procedure_Guard_Timer.start(tsc_GuardProcedureTimer_240); //Guard Procedure Started

    v_NasInd := f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell1,
                                               cr_EstablishmentCause_NB_Any,
                                               cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                  cr_CIOT_ATTACH_REQUEST(cr_AdditionalUpdateType_CIOT),
                                                                                  v_ESMMessage)); 
      
     f_NBIOT_InitialRegistration_Step5_14(nbiot_Cell1, CONTROL_PLANE, STATE2_NB_CONNECTED_UPDATED, v_NasInd);
    
    log(v_TcName,"Step31: UE Attached Successfully");

   log(v_TcName, "Default Procedure Guard Timer Stopped");
    t_Procedure_Guard_Timer.stop; //Guard Procedure Ended

    log(v_TcName,"Step32: Power off the DUT");
    f_UT_SwitchOffUE (UT, false);  
  }
    
     function f_VZ_TC_6_1_NBIOT(charstring p_APN, charstring TestPlan_Name) runs on NBIOT_PTC
  {
    timer t_MinTmr := 180.0;
    timer t_MaxTmr := 360.0; 
    var template (present) B3_Type v_PDNType := (f_GetPdnType(), '101'B, '001'B);
    var template (present) NAS_UL_Message_Type v_ESMMessage := cr_CIOT_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach, v_PDNType);
    var float tsc_GuardProcedureTimer_240 := 240.0;
    var float v_Rtr_Solicit_Interval := 3.5;
    var integer v_Max_Rtr_Solicit := 3;
    var integer count := 1;  
    timer t_Procedure_Guard_Timer;
    var charstring v_sApn := "vzwadmin";
    var NAS_MSG_Indication_Type v_NAS_Ind;
    var template (value) LinkedEpsBearerIdentity v_LinkedEpsBearerId := {idValue := hex2bit(tsc_EpsDefaultBearerId)};
    var charstring v_TestcaseName := testcasename() & ": ";
      
    log(v_TestcaseName, "NETWORK FAILS TO REFRESH THE IPV6 ADDRESS FOR THE INTERNET PDN, NO IPV4 ADDRESS ASSIGNED");
    
    log(v_TestcaseName, "Step1: Configure the test setup so that the DUT finds service on a single eNodeB with cell_id X1 = 1, PLMN id Y1 = ", 
                  f_ConvertPLMNtoString(f_Asn2Nas_PlmnId(valueof(cs_HPLMN_Def))) & ", and TAI Z1 = ", oct2int(tsc_TAC1));
    f_NBIOT_Init (c1); 
      
    
    f_NBIOT_CellConfig_Def(nbiot_Cell1, CONTROL_PLANE); 
    
    f_NBIOT_SetCellPower(nbiot_Cell1, tsc_ServingCellRS_EPRE); 
    log(v_TestcaseName, "Step1: Cell configuration successful"); 
      
    log(v_TestcaseName, "Step2: Configured the test equipment to allow the UE to attach and connect to the Internet PDN ",
                        "the Internet PDN will respond to the UE's initial request for an IPv6 Router Solicitation message ",
                        "but will not respond to all subsequent requests");
    
    log(v_TestcaseName, "Step3: Configured the test equipment to assign only ipv6 interface address but not IPV4 when device connects to Internet pdn");

    log(v_TestcaseName, "Step4: Configured an application at DUT to connect to Internet pdn as soon as DUT ispowered ON and ",
                        " an application to connect to the Admin PDN");     
      
    log (v_TestcaseName, "Step5: Powering ON the DUT and allowing it to connect to the Admin PDN");  
    f_UT_SwitchOnUE(UT);
   
    t_Procedure_Guard_Timer.start(tsc_GuardProcedureTimer_240); //Guard Procedure Started
                
     v_NAS_Ind := f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell1,
                                                  cr_EstablishmentCause_NB_Any,
                                                  cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                    cr_CIOT_ATTACH_REQUEST(cr_AdditionalUpdateType_CIOT), //Table 22.5.7a.3.3-4
                                                                                    v_ESMMessage)); 

    f_NBIOT_InitialRegistration_Step5_14(nbiot_Cell1, CONTROL_PLANE, STATE2_NB_CONNECTED_UPDATED, v_NAS_Ind); 
    log (v_TestcaseName, "Step6: DUT successfully established RRC connection, attached to the network and connected to the Internet PDN");

    log(v_TestcaseName, "Default Procedure Guard Timer Stopped");
    t_Procedure_Guard_Timer.stop; //Guard Procedure Ended
      

    //f_VZ_NBIOT_Receive_Router_Solicit_Msg_6_1("Step7", v_TestcaseName);
      
    t_MinTmr.start;  
    t_MaxTmr.start;  
     log(v_TestcaseName, "Step8: Initiating the application that connects to the Admin PDN to verify that it connects successfully");
    
     fl_UT_ApplyCommand(UT, cas_UT_Req(INITIATE_ADMIN_TEST_APP, NO_CNF_REQUIRED));
     f_NBIOT_TriggerAdditionalPDN_Modified (nbiot_Cell1, CONTROL_PLANE, ?, cs_AccessPointName (tsc_Octet_Lower_ADMIN_APN), v_sApn);
     log(v_TestcaseName, "Step8: DUT established an additional PDN for Admin APN");       
    
     log(v_TestcaseName, "Step9: Verifying that the DUT sends a Router Solicit msg to the Internet PDN after between 3 and 4 mins ",
                        "have elapsed from the receipt of the first Router Advertisement msg");
    
     f_VZ_Rtr_Solicit_Min_Max_Retry(t_MinTmr, t_MaxTmr,"Step9"); 
      
     log(v_TestcaseName, "Step10: Network does not respond to the Router Solicitation messages");  
      
     f_VZ_NBIOT_Msg_Retransmit_Retry(v_Rtr_Solicit_Interval, count, v_Max_Rtr_Solicit, "Step11");  
    
     log(v_TestcaseName, "Step11: Successfully verified that the UE does not send more than MAX_RTR_SOLICITATION = 3 Router ",
                        "Solicitation messages separated by RTR_SOLICITATION_INTERVAL = 4 seconds");
    
      f_Vz_NBIOT_VerifyPdnDisConnect_Internet(nbiot_Cell1, v_LinkedEpsBearerId, tsc_EpsDefaultBearerId);
      log(v_TestcaseName, "Step12: UE disconnected from the Internet PDN");
      
      f_VZ_PdnConn_RtrSolicit_PdnDisconn(nbiot_Cell1, tsc_EpsDefaultBearerId, tsc_Octet_INTERNET_APN, v_LinkedEpsBearerId, RRC_CONNECTED, 60.0, -, -, -, "Step13", "Step14", "Step15",-, false, false);
      log(v_TestcaseName, "Step15: Verified that the UE disconnects from the Internet PDN. This is considered Retry #1.");
    
      f_VZ_PdnConn_RtrSolicit_PdnDisconn(nbiot_Cell1, tsc_EpsDefaultBearerId, tsc_Octet_INTERNET_APN, v_LinkedEpsBearerId, RRC_CONNECTED, 60.0, -, -, -, "Step16", "Step17", "Step18",-, false, false);
      log(v_TestcaseName, "Step18: Verified that the UE disconnects from the Internet PDN. This is considered Retry #2.");

      f_VZ_PdnConn_RtrSolicit_PdnDisconn(nbiot_Cell1, tsc_EpsDefaultBearerId, tsc_Octet_INTERNET_APN, v_LinkedEpsBearerId, RRC_CONNECTED, 60.0, -, -, -, "Step19", "Step20", "Step21",-, -, false);
      log(v_TestcaseName, "Step21: Verified that the UE disconnects from the Internet PDN. This is considered Retry #3.");

       f_VZ_PdnConn_RtrSolicit_PdnDisconn(nbiot_Cell1, tsc_EpsDefaultBearerId, tsc_Octet_INTERNET_APN, v_LinkedEpsBearerId, RRC_CONNECTED, 120.0, -, -, -, "Step22", "Step23", "Step24",-, -, false);
      log(v_TestcaseName, "Step24: Verified that the UE disconnects from the Internet PDN. This is considered Retry #4.");

       f_VZ_PdnConn_RtrSolicit_PdnDisconn(nbiot_Cell1, tsc_EpsDefaultBearerId, tsc_Octet_INTERNET_APN, v_LinkedEpsBearerId, RRC_CONNECTED, 480.0, -, -, -, "Step25", "Step26", "Step27",-, -, false);
      log(v_TestcaseName, "Step27: Verified that the UE disconnects from the Internet PDN. This is considered Retry #5.");

       f_VZ_PdnConn_RtrSolicit_PdnDisconn(nbiot_Cell1, tsc_EpsDefaultBearerId, tsc_Octet_INTERNET_APN, v_LinkedEpsBearerId, RRC_CONNECTED, 900.0, -, -, -, "Step28", "Step29", "Step30",-, -, false);
      log(v_TestcaseName, "Step30: Verified that the UE disconnects from the Internet PDN. This is considered Retry #6.");

       f_VZ_PdnConn_RtrSolicit_PdnDisconn(nbiot_Cell1, tsc_EpsDefaultBearerId, tsc_Octet_INTERNET_APN, v_LinkedEpsBearerId, RRC_CONNECTED, 900.0, -, -, -, "Step31", "Step32", "Step33",-, -, false);
      log(v_TestcaseName, "Step33: Verified that the UE disconnects from the Internet PDN. This is considered Retry #7.");

      f_NBIOT_SS_ConfigRachPreambleIndMode(nbiot_Cell1, disable);   
      f_NBIOT_TestBody_Set(false);

    f_UT_SwitchOffUE (UT, false);
    f_NBIOT_ReleaseAllCells();
   f_NBIOT_PreliminaryPass(__FILE__, __LINE__, v_TestcaseName & "Suceessfully verified Expected Result : UE follows the required " &
                                                "retry algorithm when the PDN does not refresh the IPv6 address of the Internet PDN.");
  
      
      
  }
    
        function f_VZ_TC_6_2_NBIOT(charstring p_APN, charstring TestPlan_Name) runs on NBIOT_PTC
  {
    var template (value) LinkedEpsBearerIdentity v_LinkedEpsBearerId := {idValue := '0110'B};  
    var octetstring v_Admin_Apn_val := tsc_Octet_ADMIN_APN;
    var template (present) B3_Type v_PDNType := (f_GetPdnType(), '101'B, '001'B);
    var template (present) NAS_UL_Message_Type v_ESMMessage := cr_CIOT_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach, v_PDNType);
    var NAS_MSG_Indication_Type v_NAS_Ind; 
    var charstring v_TestcaseName := testcasename() & ": ";  
     timer t_Procedure_Guard_Timer;
      var float tsc_GuardProcedureTimer_240 := 240.0;
      var charstring v_sApn := "vzwadmin";
      
    f_NBIOT_Init (c1); 
      
    f_NBIOT_CellConfig_Def(nbiot_Cell1, CONTROL_PLANE); 
    
    f_NBIOT_SetCellPower(nbiot_Cell1, tsc_ServingCellRS_EPRE); 
    log(v_TestcaseName, "Step1: Cell configuration successful"); 
    log(v_TestcaseName, "Step2: Test equipment configured such that the network will allow the UE to attach and connect to the Admin PDN
                                   and the Admin PDN will not respond to the UEs request for an IPv6 Router Solicitation message");  
    log(v_TestcaseName, "Step3: Configured the test equipment to assign only ipv6 interface address but not IPV4 when device connects to Admin pdn");       
      
       
    log (v_TestcaseName, "Step4: Power the DUT ON to get LTE services");  
   
    f_UT_SwitchOnUE(UT, true);

    t_Procedure_Guard_Timer.start(tsc_GuardProcedureTimer_240); //Guard Procedure Started
                      
    v_NAS_Ind := f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell1,
                                                  cr_EstablishmentCause_NB_Any,
                                                  cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                    cr_CIOT_ATTACH_REQUEST(cr_AdditionalUpdateType_CIOT), //Table 22.5.7a.3.3-4
                                                                                    v_ESMMessage)); 

    f_NBIOT_InitialRegistration_Step5_14(nbiot_Cell1, CONTROL_PLANE, STATE2_NB_CONNECTED_UPDATED, v_NAS_Ind); 
    log (v_TestcaseName, "Step5: UE established RRC connection, attached to LTE network");  

    log(v_TestcaseName, "Default Procedure Guard Timer Stopped");
    t_Procedure_Guard_Timer.stop; //Guard Procedure Ended

    /* 6.Force UE to connect to the Admin PDN by Sending AT command or SMS. */ 
    log(v_TestcaseName, "Step6: test application initiated to UE to connect to Admin PDN");
    fl_UT_ApplyCommand(UT, cas_UT_Req(INITIATE_ADMIN_TEST_APP, NO_CNF_REQUIRED));
     f_NBIOT_TriggerAdditionalPDN_Modified (nbiot_Cell1, CONTROL_PLANE, ?, cs_AccessPointName (tsc_Octet_Lower_ADMIN_APN), v_sApn);
    
    log(v_TestcaseName, "Step7: Additional PDN established for Admin PDN without IPV4 address");
       
     f_VZ_NBIOT_Receive_Router_Solicit_Msg_6_2( "Step8a", v_TestcaseName);  
      
    
    //Verify that the UE disconnects from the Admin PDN.   
    f_Vz_NBIOT_VerifyPdnDisConnect(nbiot_Cell1, v_LinkedEpsBearerId, tsc_EpsDefaultBearerId2); 
    log(v_TestcaseName, "Step9: Admin PDN disconnected successfully");  
 
    //All 7 retries function calls
    f_VZ_PdnConn_RtrSolicit_PdnDisconn(nbiot_Cell1, tsc_EpsDefaultBearerId2, v_Admin_Apn_val,  v_LinkedEpsBearerId, RRC_CONNECTED, 60.0, -, -, -, "Step10", "Step11", "Step12", PDN_2, false);
    log(v_TestcaseName, "Retry 1 completed successfully and now starting Retry 2");  
    f_VZ_PdnConn_RtrSolicit_PdnDisconn(nbiot_Cell1, tsc_EpsDefaultBearerId2, v_Admin_Apn_val,  v_LinkedEpsBearerId, RRC_CONNECTED, 60.0, -, -, -, "Step13", "Step14", "Step15", PDN_2, false);
    log(v_TestcaseName, "Retry 2 completed successfully and now starting Retry 3");    
    f_VZ_PdnConn_RtrSolicit_PdnDisconn(nbiot_Cell1, tsc_EpsDefaultBearerId2, v_Admin_Apn_val,  v_LinkedEpsBearerId, RRC_CONNECTED, 48.0, -, -, -, "Step16", "Step17", "Step18", PDN_2);
    log(v_TestcaseName, "Retry 3 completed successfully and now starting Retry 4");    
    f_VZ_PdnConn_RtrSolicit_PdnDisconn(nbiot_Cell1, tsc_EpsDefaultBearerId2, v_Admin_Apn_val, v_LinkedEpsBearerId, RRC_CONNECTED, 108.0, -, -, -, "Step19", "Step20", "Step21", PDN_2);
    log(v_TestcaseName, "Retry 4 completed successfully and now starting Retry 5");    
    f_VZ_PdnConn_RtrSolicit_PdnDisconn(nbiot_Cell1, tsc_EpsDefaultBearerId2, v_Admin_Apn_val,  v_LinkedEpsBearerId, RRC_CONNECTED, 468.0, -, -, -, "Step22", "Step23", "Step24", PDN_2);
    log(v_TestcaseName, "Retry 5 completed successfully and now starting Retry 6");
    f_VZ_PdnConn_RtrSolicit_PdnDisconn(nbiot_Cell1, tsc_EpsDefaultBearerId2, v_Admin_Apn_val, v_LinkedEpsBearerId, RRC_CONNECTED, 888.0, -, -, -, "Step25", "Step26", "Step27", PDN_2);
    log(v_TestcaseName, "Retry 6 completed successfully and now starting Retry 7");    
    f_VZ_PdnConn_RtrSolicit_PdnDisconn(nbiot_Cell1, tsc_EpsDefaultBearerId2, v_Admin_Apn_val,  v_LinkedEpsBearerId, RRC_CONNECTED, 888.0, -, -, -, "Step28", "Step29", "Step30", PDN_2);
    log(v_TestcaseName, "Retry 7 completed successfully");    
    
    f_NBIOT_TestBody_Set(false);
    f_UT_SwitchOffUE(UT, false);
    f_NBIOT_ReleaseAllCells();
   f_NBIOT_PreliminaryPass(__FILE__, __LINE__, v_TestcaseName &"PASSED");      
 
  
  }
    
    
    
        function f_VZ_TC_6_3_NBIOT(charstring p_APN, charstring TestPlan_Name) runs on NBIOT_PTC
  {
    var EPS_BearerIdentity v_EpsBearerId2 := '6'H;
    var float v_Rtr_Solicit_Interval := 3.5;
    var integer v_Max_Rtr_Solicit := 3;
    var integer count := 0;
    var charstring v_TcName := testcasename() & ": ";
    timer t_Procedure_Guard_Timer;
    var NAS_MSG_Indication_Type v_NAS_Ind;
    var template (present) B3_Type v_PDNType := (f_GetPdnType(), '101'B, '001'B);
    var template (present) NAS_UL_Message_Type v_ESMMessage := cr_CIOT_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach, v_PDNType);
    var charstring v_sApn := "vzwadmin";
    var float tsc_GuardProcedureTimer_240 := 240.0;
   
      
    log(v_TcName, "NETWORK FAILS TO ASSIGN AN IPV6 ADDRESS FOR THE ADMIN PDN- INITIAL CONNECTION, IPV4 ADDRESS ASSIGNED");
    
    log(v_TcName, "Step1: Configure the test setup so that the DUT finds service on a single eNodeB with cell_id X1 = 1, PLMN id Y1 = ", 
                  f_ConvertPLMNtoString(f_Asn2Nas_PlmnId(valueof(cs_HPLMN_Def))) & ", and TAI Z1 = ", oct2int(tsc_TAC1));
    f_NBIOT_Init (c1);
       
    
    f_NBIOT_CellConfig_Def(nbiot_Cell1, CONTROL_PLANE);
    
    f_NBIOT_SetCellPower(nbiot_Cell1, tsc_ServingCellRS_EPRE);
    log(v_TcName, "Step1: Cell configuration successful");

    log(v_TcName, "Step2a: Configured the test equipment for the DUT to attach & connect to the Admin PDN");
    log(v_TcName, "Step2b: Configured the Admin PDN NOT to respond to DUTs request for an IPv6 Router Solicitation Msg");    
    log(v_TcName, "Step3: Configured the test equipment to assign ipV6 and ipV4 address when the DUT connects to the Admin PDN");
    
    log("Activating Additional Default handler to handle standalone PDN Conn Req & unnecessary DRB packets");
    
    log(v_TcName, "Step4: Power the DUT on and allow it to find LTE service.");
    f_UT_SwitchOnUE(UT);
   
    t_Procedure_Guard_Timer.start(tsc_GuardProcedureTimer_240); //Guard Procedure Started
      
    log(v_TcName, "Step5: Waiting for the DUT to attach to the LTE network");
    v_NAS_Ind := f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell1,
                                                  cr_EstablishmentCause_NB_Any,
                                                  cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                    cr_CIOT_ATTACH_REQUEST(cr_AdditionalUpdateType_CIOT), //Table 22.5.7a.3.3-4
                                                                                    v_ESMMessage)); 

    f_NBIOT_InitialRegistration_Step5_14(nbiot_Cell1, CONTROL_PLANE, STATE2_NB_CONNECTED_UPDATED, v_NAS_Ind); 
    

    log(v_TcName, "Step5: DUT successfully attached to the LTE Network");

    log(v_TcName, "Default Procedure Guard Timer Stopped");

    t_Procedure_Guard_Timer.stop; //Guard Procedure Ended
      
    log(v_TcName, "Step6: Initiated the test application to connect to the ADMIN PDN"); 
    fl_UT_ApplyCommand(UT, cas_UT_Req(APP_TRANSMIT_STATE_ON, NO_CNF_REQUIRED,{cs_Ut_Parameter_Common ("ACTIVATE_ADMIN_APN", "10")}));
    
   // f_UT_RequestAdditionalPDNConnectivity(UT, hex2int(v_EpsBearerId2), px_ADMIN_APN,-,-,-,2);  
     t_Procedure_Guard_Timer.start(tsc_GuardProcedureTimer_240);
    f_NBIOT_TriggerAdditionalPDN_Modified (nbiot_Cell1, CONTROL_PLANE, ?, cs_AccessPointName (tsc_Octet_Lower_ADMIN_APN), v_sApn);
    
    log(v_TcName, "Step7: DUT connected to the Admin APN. Network assigned an IPv4 and IPv6 Interface ID address to the DUT");
      
    log(v_TcName, "Step8: Waiting for the DUT to send IPv6 Router Solicitation Msg for the Admin PDN. Configured the network NOT to respond to this msg");    
     f_VZ_NBIOT_Receive_Router_Solicit_Msg_6_3( "Step8", v_TcName);

   
    log(v_TcName, "Step8: Received Router Solicitation Msgs from the DUT");
        
   
    /* TODO - AS - Temporarily commented this since the Intel eNB does not have tun interface support */
    /*      
    log(v_TcName, "Disabling Network Connectivity"); 
    f_EUTRA_SS_ConfigDRBTraffic(eutra_Cell1, STOP_TRAFFIC, px_UE_ID, px_IPv4_Address2_UE, -, 
                                UDP_DL_TYPE, 3, -, -, -, -, v_Internet_DRB_Id, true, true, false);
    */  
    
    f_NBIOT_508Check_ConnectedState(nbiot_Cell1, CONTROL_PLANE);
    log(v_TcName, "Step9: Successfully verified that the DUT is connected to the Admin PDN and is using ipV4 for all communications");

    fl_UT_ApplyCommand(UT, cas_UT_Req(APP_TRANSMIT_STATE_OFF, NO_CNF_REQUIRED,{cs_Ut_Parameter_Common ("ACTIVATE_ADMIN_APN", "0")}));
    
    f_NBIOT_TestBody_Set(false);
    log(v_TcName, "Powering off the DUT");
    
    f_NBIOT_ReleaseAllCells();
    f_NBIOT_RRC_ConnectionRelease(nbiot_Cell1, CONTROL_PLANE);
    f_NBIOT_PreliminaryPass(__FILE__, __LINE__, v_TcName & "Successfully verified the DUT follows the required " & 
                                                           "retry algorithm when the PDN does not assign an IPv6 " & 
                                                           "address for the Admin PDN");
  }  
  
  
    
     function f_VZ_TC_6_4_IMSLESS_NBIOT_Tests(NAS_CauseValue_Type rejectCause, charstring TestPlan_Name) runs on NBIOT_PTC
  {
   var EUTRA_ASN1_RRC_TransactionIdentifier_Type v_RRC_TI := tsc_RRC_TI_Def;
    
    var GutiParameters_Type v_GutiParameters;
    var NAS_PlmnId v_PLMN;
      
    var charstring v_TcName := testcasename()&": ";

    // Cell Init
    log (v_TcName,"<<<<<<<<<< Test Execution Started >>>>>>>>>>");  
    log (v_TcName,"UE RECEIVES PDN CONNECTIVITY REJECT MESSAGE FROM THE NETWORK FOR THE INTERNET PDN- SUBSEQUENT ATTACHMENT");
    f_NBIOT_Init (c1);
      
    
    
     log(v_TcName,"Step1: Configure the test setup so that the device under test (DUT) finds service on a single " &
             "eNodeB with cell_id (where cell_id refers to the CellIdentity parameter that is broadcast in SIB1) " &
             "equal to value X1=1, PLMN id equal to value Y1 and TAI equal to value Z1.");
      
    // Create cell and send out system information
    f_NBIOT_CellConfig_Def(nbiot_Cell1, CONTROL_PLANE);      /* @sic R5s150338: f_NBIOT_CellConfig_DRB_Common replaced by f_EUTRA_CellConfig_Def sic@ */
     
    v_GutiParameters := f_NBIOT_CellInfo_GetGuti ( nbiot_Cell1 );
    v_PLMN := f_Asn2Nas_PlmnId (v_GutiParameters.PLMN_Identity);

    log(v_TcName,"Step1: Configured the test setup so that the device under test (DUT) finds service on a single " &
             "eNodeB with cell_id (where cell_id refers to the CellIdentity parameter that is broadcast in SIB1) " &
             "equal to value X1=1, PLMN id equal to value Y1 = ",f_ConvertPLMNtoString(v_PLMN) &
             " and TAI equal to value Z1 = {iei := '52'O, plmnId := ",v_PLMN,", tac := ",tsc_TAC1,"}");
     
    f_NBIOT_SetCellPower ( nbiot_Cell1, tsc_ServingCellRS_EPRE );
   
   
    fl_VZ_TC_6_4_IMSLESS_NBIOT_Body ( rejectCause, noDelay);    
    f_NBIOT_TestBody_Set(false);
      
    //And now remove the cell(s)
    f_NBIOT_ReleaseAllCells();
    log(v_TcName, "Step26: Power the device off "); 
    f_UT_PowerOffUE (UT);
      
    f_NBIOT_PreliminaryPass(__FILE__, __LINE__, v_TcName &" PASSED");
    log (v_TcName,"<<<<<<<<<< Test Execution Finished >>>>>>>>>>");  
  }
    
  //6.4 subtest changes ends //    

 
 function fl_VZ_TC_6_4_IMSLESS_NBIOT_Body ( 
                                     NAS_CauseValue_Type esm_Reject_Cause, 
                                     DelayForUserPlaneSignalling_Type p_WaitForIMS := waitForIMS) runs on NBIOT_PTC
  {
    var EUTRA_ASN1_RRC_TransactionIdentifier_Type v_RRC_TI := tsc_RRC_TI_Def;
    var ProcedureTransactionIdentifier v_PTId_UE;
    var PDN_CONNECTIVITY_REQUEST v_PDNConnReq;
    var NB_SRB_COMMON_IND v_ReceivedAsp;
    
    var float v_Timer_1 := ( 1.0 * 60.0 ); // 1minute
    var float v_Timer_2 := 10.0; //10s  
    var float v_Timer_3 := (15.0); //Random timer (0-15)s
    var float v_Timer_4 := 30.0;  
    timer t_WaitTime := f_NBIOT_SetTimerToleranceMin ( nonProtocolTimer, v_Timer_4);  
    timer t_WaitTime_10 := f_NBIOT_SetTimerToleranceMin ( nonProtocolTimer, v_Timer_2);//10s timer;
    timer t_WaitTime_15 := f_NBIOT_SetTimerToleranceMin ( nonProtocolTimer, v_Timer_3);//15s timer;
    var charstring v_Admin_Apn_string := px_ADMIN_APN; 
    var octetstring v_Admin_Apn_val   := tsc_Octet_ADMIN_APN;
    var charstring v_Internet_Apn_string := px_INTERNET_APN;
    var octetstring v_Internet_Apn_val := tsc_Octet_INTERNET_APN;
    var float v_Wait_Timer := (2.0*60.0); 
    var float v_IntervalTimer := 10.0;
    timer t_WaitingTime := v_Wait_Timer;
    timer t_IntervalTime := v_IntervalTimer;

    var template (value) ESM_Cause v_EsmCause36 := cs_ESM_Cause_v ('00100100'B); /* Normal Deactivation */
    var EPS_BearerIdentity v_EpsBearerId1 := '5'H;
    var EPS_BearerIdentity v_EpsBearerId2 := '6'H;  
    var ProcedureTransactionIdentifier v_EpsTi := tsc_PTI_Unassigned;  
    var NAS_MSG_Indication_Type v_NasInd;
    var M_TMSI_Type v_M_Tmsi_Def := tsc_M_TMSI1;
    var GutiParameters_Type v_GutiParameters := f_NBIOT_CellInfo_GetGuti ( nbiot_Cell1 );
    var charstring v_TcName := testcasename()&": ";
    var charstring v_sApn := "vzwadmin";
    timer t_Procedure_Guard_Timer;
    var NAS_MSG_Indication_Type v_Nas_Ind;
    var template (present) B3_Type v_PDNType := (f_GetPdnType(), '001'B,'101'B);
    var template (present) NAS_UL_Message_Type v_ESMMessage := cr_CIOT_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach, v_PDNType);
    var float tsc_GuardProcedureTimer_240 := 240.0;
    timer time_2sec;
   
    log(v_TcName,"Step2: Configure the test equipment to allow the device to attach and connect to all PDNs.");
    log(v_TcName,"Step3: Verify that the DUT has an Internet application that will attempt to connect as soon as the DUT is powered on.");
      
    /* 3. Power the DUT on and allow it to find LTE service. */ 
    log(v_TcName,"Step4: Power the DUT on and allow it to find LTE service.");
    f_UT_SwitchOnUE(UT, true);
    
    t_Procedure_Guard_Timer.start(tsc_GuardProcedureTimer_240); //Guard Procedure Started
                
    /*  4. Verify that the DUT successfully establishes an RRC connection and attaches to the LTE network. */
    log(v_TcName,"Step5: Verify that the DUT successfully establishes an RRC connection, attaches to the network, and connects to the Internet PDN.");  
    v_NasInd := f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell1,
                                               cr_EstablishmentCause_NB_Any,
                                               cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                  cr_CIOT_ATTACH_REQUEST(cr_AdditionalUpdateType_CIOT),
                                                                                  v_ESMMessage)); 
      
    f_NBIOT_InitialRegistration_Step5_14(nbiot_Cell1, CONTROL_PLANE, STATE2_NB_CONNECTED_UPDATED, v_NasInd);
    log(v_TcName,"Step5: UE Attach Success and connects to the Internet PDN.");
    log(v_TcName,"Step6: Initiate the test application (see section TEST EQUIPMENT CONFIGURATION) and verify that it connects successfully to the Admin PDN. Configure the test application for the application idle state."); 

    log(v_TcName, "Default Procedure Guard Timer Stopped");
    t_Procedure_Guard_Timer.stop; //Guard Procedure Ended
      
    /* 6.Force UE to connect to the Admin PDN by Sending AT command*/
     log(v_TcName,"Initiate test application will cause the UE to connect to the ",v_sApn); 
       
     fl_UT_ApplyCommand(UT, cas_UT_Req(INITIATE_ADMIN_TEST_APP, NO_CNF_REQUIRED));
   t_Procedure_Guard_Timer.start(tsc_GuardProcedureTimer_240); //Guard Procedure Started
    // Waiting for Admin  
   f_NBIOT_TriggerAdditionalPDN_Modified (nbiot_Cell1, CONTROL_PLANE, ?, cs_AccessPointName (tsc_Octet_Lower_ADMIN_APN), v_sApn);
    
    log(v_TcName, "Default Procedure Guard Timer Stopped");
    t_Procedure_Guard_Timer.stop; //Guard Procedure Ended
  
   
    // Step7 is not required as discussed It is Allow and not Force UE to RRC Idle. So commected as of Now.
    // 7. Allow the RRC connection to go idle. //
    log(v_TcName,"Step7: Allow the RRC connection to go idle");
    
      
    log(v_TcName,"Step8a: Sending De-activate EPS Bearer Request to UE");

    

     SRB.send(cas_NB_SRB_NasPdu_REQ(nbiot_Cell1,
                                   tsc_SRB1bis,
                                   cs_TimingInfo_Now,
                                   cs_NAS_Request(tsc_SHT_IntegrityProtected_Ciphered,
                                                  cs_508_DeactivateEPSBearerCxtReq('5'H,
                                                                                   v_EpsTi,
                                                                                   v_EsmCause36))));  
    
   
    log(v_TcName,"Step8b: Received RRC Reconfiguration Complete");
    
    log(v_TcName,"Step9: Verify that the UE disconnects from the Internet PDN.");
   
    alt {
        []  SRB.receive(car_NB_SRB_NasPdu_IND(nbiot_Cell1,
                                           tsc_SRB1bis,
                                           cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered,
                                                             cr_ESM_DATA_TRANSPORT (tsc_EpsDefaultBearerId2, cr_UserDataContainer(?, ?), omit)))) {
            repeat;}
          [] SRB.receive(car_NB_SRB_NasPdu_IND(nbiot_Cell1,
                                      tsc_SRB1bis,
                                      cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered,
                                                        cr_508_DeactivateEPSBearerCxtAccept('5'H,
                                                                                             v_EpsTi)))){}
     }
      
    log(v_TcName,"Step9: Received DEACTIVATE EPS BEARER CONTEXT ACCEPT, So UE disconnected from the Internet PDN");
    log(v_TcName,"Step10: Configure the test equipment such that the network will send a NAS PDN Connectivity Reject message with cause code when the UE attempts to connect to the Internet PDN. Note that the T3396 Value IE is not included in the PDN Connectivity Reject message");  
    log(v_TcName,"Step11: Initiate the Internet test application (see section TEST EQUIPMENT CONFIGURATION) for the application transmitting state with a retransmission timer of 10 seconds.");
    
  // fl_UT_ApplyCommand(UT, cas_UT_Req(INTERNET_APP_TRANSMIT_STATE_ON, NO_CNF_REQUIRED,{cs_Ut_Parameter_Common ("ACTIVATE_INTERNET_APN", "10")}));
    fl_UT_ApplyCommand(UT, cas_UT_Req(ACTIVATE_INTERNET_APN, NO_CNF_REQUIRED));
    log(v_TcName,"Step12: Verify that the UE immediately attempts to re-connect to the Internet PDN on behalf of the test application by sending a NAS PDN Connectivity Request message. ");
    log(v_TcName,"Step13: Verify that the network sends a NAS PDN Connectivity Reject message with cause code ",bit2int(esm_Reject_Cause)," When the UE attempts to connect to the Internet PDN");
    f_NBIOT_PDN_Connectivity_Reject_IMSLESS(esm_Reject_Cause, v_Internet_Apn_string, v_Internet_Apn_val,v_EpsBearerId1, true);
    
    log(v_TcName,"Step13: Network sent a NAS PDN Connectivity Reject message 1st time.");         

    log(v_TcName,"Step14: Verify that upon the next request of the test application the UE attempts to re-connect to the Internet PDN without delay by sending a NAS PDN Connectivity Request message and that the network responds with a NAS PDN Connectivity Reject message with cause code ", bit2int(esm_Reject_Cause));
    f_NBIOT_PDN_Connectivity_Reject_IMSLESS(esm_Reject_Cause, v_Internet_Apn_string, v_Internet_Apn_val, v_EpsBearerId1, true);
    
    log(v_TcName,"Step14: Network sent a NAS PDN Connectivity Reject message 2nd time.");
      
    log(v_TcName,"Step15: Verify that upon the next request of the test application the UE attempts a third time to connect to the Internet PDN without delay by sending a NAS PDN Connectivity Request message and that the network responds with a NAS PDN Connectivity Reject message with cause code ", bit2int(esm_Reject_Cause));
    f_NBIOT_PDN_Connectivity_Reject_IMSLESS(esm_Reject_Cause, v_Internet_Apn_string, v_Internet_Apn_val, v_EpsBearerId1, true);
   
    log(v_TcName,"Step15: Network sent a NAS PDN Connectivity Reject message 3rd time.");         
 
    // 16.	Verify that the UE does not attempt a NAS PDN Connectivity Request for the Internet PDN for the next 1 minute plus a random time between 0 and 15 seconds.  
    /* Step 16-17 1+min */
    log(v_TcName,"Step16: Verify that the UE does not attempt a NAS PDN Connectivity Request for the Internet PDN for the next 1 minute plus a random time between 0 and 15 seconds.");
    f_NBIOT_Verify_Test_Application_IMSLESS (v_Timer_1, v_Timer_2, v_Internet_Apn_string, v_Internet_Apn_val,v_EpsBearerId1,false);
    log(v_TcName,"Verified that the UE did not attempt a NAS PDN Connectivity Request for the Internet PDN for 1 minute plus a random time between 0 and 15 seconds");
    log(v_TcName,"Step17: Once the 1+ minute timer expires, verify that the UE sends another NAS PDN Connectivity Request and that the network responds with a NAS PDN Connectivity Reject message with cause code ",bit2int(esm_Reject_Cause));  
  //  t_WaitTime_10.start;
    t_WaitTime_15.start;

    alt {

        []t_WaitTime_15.timeout
        {
               f_NBIOT_PDN_Connectivity_Reject_IMSLESS(esm_Reject_Cause, v_Internet_Apn_string, v_Internet_Apn_val,v_EpsBearerId1, true);
        }
      
        []SRB.receive(car_NB_SRB_NasPdu_IND(nbiot_Cell1, // @sic R5s180192 sic@
                                        tsc_SRB1bis, // @sic R5s180192 sic@
                                        cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered,
                                                          cr_PDNConnReqAdditionalPDN(('001'B,'011'B), cr_AccessPointName(tsc_Octet_Lower_INTERNET_APN)))))-> value v_ReceivedAsp  /* @sic R5-176884 sic@ */
   
        {
            v_PDNConnReq := v_ReceivedAsp.Signalling.Nas[0].Pdu.Msg.pDN_CONNECTIVITY_REQUEST;
            v_PTId_UE := v_PDNConnReq.procedureTransactionIdentifier;
            t_WaitTime_15.stop;
           
            SRB.send(cas_NB_SRB_NasPdu_REQ ( nbiot_Cell1, tsc_SRB1bis,   
                                 cs_TimingInfo_Now,
                                 cs_NAS_Request(tsc_SHT_IntegrityProtected_Ciphered,
                                                cs_PdnConnectReject( '0'H, // no EPS bearer assigned
                                                                     v_PTId_UE, cs_ESM_Cause_v(esm_Reject_Cause)))));
      
       
            }
    }
    
 
    /* Step 18-19 */
    v_Timer_1 := (2.0 * 60.0); // 2 minVerify that the UE sends another NAS PDN Connectivity Request and that the network responds with a NAS PDN Connectivity Reject message in which the ESM Cause Code is set to 26.
    log(v_TcName,"Step18: Verify that the UE does not attempt a NAS PDN Connectivity Request for the Internet PDN for the next 2 minutes.");  
    f_NBIOT_Verify_Test_Application_IMSLESS (v_Timer_1, v_Timer_2, v_Internet_Apn_string, v_Internet_Apn_val,v_EpsBearerId1, false);
    log(v_TcName,"Step18: Verified that the UE did not attempt a NAS PDN Connectivity Request for the Internet PDN for 2 minute plus a random time between 0 and 15 seconds");
    
    log(v_TcName,"Step19: Once the 2 minute timer expires, verify that the UE sends another NAS PDN Connectivity Request and that the network responds with a NAS PDN Connectivity Reject message with cause code ",bit2int(esm_Reject_Cause));  
    f_NBIOT_PDN_Connectivity_Reject_IMSLESS(esm_Reject_Cause, v_Internet_Apn_string, v_Internet_Apn_val,v_EpsBearerId1, true);
    //DeleteApn_NoCnf(UT,6);  
    log(v_TcName,"Step19: PDN Connectivity Reject Sent to DUT");
    
    /* Step 20-21 */
    v_Timer_1 := (8.0 * 60.0); // 8 min
     
    log(v_TcName,"Step20: Verify that the UE does not attempt a NAS PDN Connectivity Request for the Internet PDN for the next 8 minutes");  
    f_NBIOT_Verify_Test_Application_IMSLESS (v_Timer_1, v_Timer_2, v_Internet_Apn_string, v_Internet_Apn_val,v_EpsBearerId1, false);
    log(v_TcName,"Step20: Verified that the UE did not attempt a NAS PDN Connectivity Request for the Internet PDN for 8 minute plus a random time between 0 and 15 seconds");
      
    log(v_TcName,"Step21: Once the 8 minute timer expires, verify that the UE sends another NAS PDN Connectivity Request and that the network responds with a NAS PDN Connectivity Reject message with cause code ",bit2int(esm_Reject_Cause));  
    f_NBIOT_PDN_Connectivity_Reject_IMSLESS(esm_Reject_Cause, v_Internet_Apn_string, v_Internet_Apn_val,v_EpsBearerId1, true);
    log(v_TcName,"Step21: PDN Connectivity Reject Sent to DUT");
    
    /* Step 22-23 */
    v_Timer_1 := (15.0 * 60.0); // 15 min
       
    log(v_TcName,"Step22: Verify that the UE does not attempt a NAS PDN Connectivity Request for the Internet PDN for the next 15 minutes.");  
    f_NBIOT_Verify_Test_Application_IMSLESS (v_Timer_1, v_Timer_2, v_Internet_Apn_string, v_Internet_Apn_val,v_EpsBearerId1, true);
    log(v_TcName,"Step22: Verified that the UE did not attempt a NAS PDN Connectivity Request for the Internet PDN for 15 minutes plus a random time between 0 and 15 seconds");
    
    log(v_TcName,"Step23: Once the 15 minute timer expires, verify that the UE sends another NAS PDN Connectivity Request and that the network responds with a NAS PDN Connectivity Reject message with cause code ",bit2int(esm_Reject_Cause));  
    f_NBIOT_PDN_Connectivity_Reject_IMSLESS(esm_Reject_Cause, v_Internet_Apn_string, v_Internet_Apn_val,v_EpsBearerId1, true);
    //  DeleteApn_NoCnf(UT,6);
    log(v_TcName,"Step23: PDN Connectivity Reject Sent to DUT");
    
    /* Step 24-25 */
    v_Timer_1 := (15.0 * 60.0); // 15 minOnce the 15 minute timer expires, verify that the UE attempts to connect upon the next request of the test application with no delay. Verify that the UE sends another NAS PDN Connectivity Request and that the network responds with a NAS PDN Connectivity Reject message in which the ESM Cause Code is set to 26.
    log(v_TcName,"Step24: Verify that the UE does not attempt a NAS PDN Connectivity Request for the Internet PDN for the next 15 minutes");  
    f_NBIOT_Verify_Test_Application_IMSLESS (v_Timer_1, v_Timer_2, v_Internet_Apn_string, v_Internet_Apn_val,v_EpsBearerId1, true);
    log(v_TcName,"Step24: Verified that the UE did not attempt a NAS PDN Connectivity Request for the Internet PDN for 15 minute plus a random time between 0 and 15 seconds");
      
    log(v_TcName,"Step25: While the fifteen minute throttling timer is running, re-configure the network so that the network accepts the PDN Connectivity Request for the Internet PDN.");
    log(v_TcName,"Step26: Once the fifteen minute timer expires, verify that the UE successfully connects to the Internet PDN.");  
    //f_UT_RequestAdditionalPDNConnectivity_NoCnf(UT, hex2int(v_EpsBearerId1), v_Internet_Apn_string);
     fl_UT_ApplyCommand(UT, cas_UT_Req(ACTIVATE_INTERNET_APN, NO_CNF_REQUIRED));
    
    t_WaitingTime.start;
   alt
    {
        
       [] SRB.check(receive(car_NB_SRB_NasPdu_IND ( nbiot_Cell1, tsc_SRB1bis, cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered,
                                cr_PDNConnReqAdditionalPDN((f_GetPdnType(),'001'B), cr_AccessPointName_Any, '001'B)))))
        {
            t_WaitingTime.stop;
            log(v_TcName,"Step26: Received PDN Connectivity request from UE");
            log(v_TcName,"Step26: Verified that the UE successfully connected to the Internet PDN");
        }
        []t_WaitingTime.timeout
        {
                f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, "PDN Connectivity Request message not received from UE");
        }
    }
    
   
    f_NBIOT_SS_ConfigRachPreambleIndMode(nbiot_Cell1, disable); 
    
    
    
  } 
    
 function f_TC_6_5_NBIOT(NAS_CauseValue_Type rejectCause, charstring p_APN := px_IMS_APN,
                                   /*DelayForUserPlaneSignalling_Type isIMS := waitForIMS,*/ charstring TestPlan_Name) runs on NBIOT_PTC
  {
    
    var charstring v_TcName := testcasename() & ": ";

    f_NBIOT_Init (c1); 

      log (v_TcName, "UE RECEIVES PDN CONNECTIVITY REJECT MESSAGE FROM THE NETWORK FOR ADMIN PDN CODE ", bit2int(rejectCause));
      
    log(v_TcName, "Step1: Configure the test setup so that the DUT finds service on a single eNodeB with cell_id X1 = 1, PLMN id Y1 = ", 
                  f_ConvertPLMNtoString(f_Asn2Nas_PlmnId(valueof(cs_HPLMN_Def))) & ", and TAI Z1 = ", oct2int(tsc_TAC1));      
      
    f_NBIOT_CellConfig_Def(nbiot_Cell1, CONTROL_PLANE);      /* @sic R5s150338: f_EUTRA_CellConfig_DRB_Common replaced by f_EUTRA_CellConfig_Def sic@ */
   //    f_NBIOT_SetCellPower(nbiot_Cell1, tsc_ServingCellRS_EPRE); // Moved inside body after switch on for this function 
    log(v_TcName, "Step1: Cell Configuration Successful");   
      
    log(v_TcName, "Execution Started for Cause Code - ", bit2int(rejectCause));   
    f_NBIOT_TestBody_Set(true);
    fl_VZ_TC_6_5_IMSLESS_NBIOT_Body( rejectCause, p_APN/*, isIMS*/);
    f_NBIOT_TestBody_Set(false);
    log(v_TcName, "Execution Completed for Cause Code - ",bit2int(rejectCause));

    f_NBIOT_ReleaseAllCells();
    f_UT_PowerOffUE (UT);
    
    f_NBIOT_PreliminaryPass(__FILE__, __LINE__, v_TcName & "Successfully verified the Expected Result : UE follows the data retry " &
                                                           "algorithm described in the document Verizon Wireless LTE Data Retry " &
                                                           "when it receives a NAS PDN Connectivity Reject message");
  }
    
   function fl_VZ_TC_6_5_IMSLESS_NBIOT_Body (NAS_CauseValue_Type esm_Reject_Cause, 
                                     charstring p_APN := px_IMS_APN
                                     /*DelayForUserPlaneSignalling_Type isIMS := noDelaywaitForIMS*/) runs on NBIOT_PTC
  {
    var NAS_MSG_Indication_Type v_NAS_Ind;
    var ProcedureTransactionIdentifier v_PTId_UE;
    var PDN_CONNECTIVITY_REQUEST v_PDNConnReq;
    var NB_SRB_COMMON_IND v_ReceivedAsp;
    var  EUTRA_ASN1_RRC_TransactionIdentifier_Type v_RRC_TI := tsc_RRC_TI_Def;
    var template (present) B3_Type v_PDNType := (f_GetPdnType(), '101'B, '001'B);
    var template (present) NAS_UL_Message_Type v_ESMMessage := cr_CIOT_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach, v_PDNType);
   
    var float v_Timer_1 := ( 1.0 * 60.0 ); // 1minute
    var float v_Timer_2 := 10.0; //10s  
    var float v_Timer_3 := (15.0); //Random timer (0-15)s
    timer t_WaitTime_10 := f_NBIOT_SetTimerToleranceMin(nonProtocolTimer, v_Timer_2);//10s timer;
    timer t_WaitTime_15 := f_NBIOT_SetTimerToleranceMin(nonProtocolTimer, v_Timer_3);//15s timer;
    var EPS_BearerIdentity v_EpsBearerId2 := '6'H;  
    var charstring v_TcName := testcasename() & ": ";
    var charstring v_Apn_string;
    var octetstring v_Apn_val;
    timer t_Procedure_Guard_Timer;
    var integer v_TypeActPDN := 1;
    var float tsc_GuardProcedureTimer_240 := 240.0;
      
      v_Apn_string := px_ADMIN_APN; 
      v_Apn_val   := tsc_Octet_ADMIN_APN;
      v_TypeActPDN := 2;  
      log(v_TcName, "Step2a: Configured the test equipment to allow the DUT to attach to the LTE network but the network will send a NAS ",
                    "PDN Conn Reject msg with cause code = ", bit2int(esm_Reject_Cause), " when the UE attempts to connect to the Admin PDN. Not including ",
                    "T3396 Value IE in the PDN Conn Reject msg");        
    
      
    log(v_TcName, "Step2b: Configured the Admin PDN to MAX_CONN parameter = 2 and MAX_CONN_T = 300 sec");
    f_UT_SwitchOnUE(UT, true);
      
    f_NBIOT_SetCellPower(nbiot_Cell1, tsc_ServingCellRS_EPRE); // This is done after switch on for this TC only
    
    log(v_TcName, "Step3: Powering ON the DUT and allowing it to find LTE service");
    
    t_Procedure_Guard_Timer.start(tsc_GuardProcedureTimer_240); //Guard Procedure Started  //Guard Procedure Started
  
    log(v_TcName, "Step4: Verifying that the DUT successfully establishes an RRC connection and attaches to the LTE network.");  
    v_NAS_Ind := f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell1,
                                               cr_EstablishmentCause_NB_Any,
                                               cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                  cr_CIOT_ATTACH_REQUEST(cr_AdditionalUpdateType_CIOT),
                                                                                  v_ESMMessage)); 
    f_NBIOT_InitialRegistration_Step5_14(nbiot_Cell1, CONTROL_PLANE, STATE2_NB_CONNECTED_UPDATED, v_NAS_Ind);
      
    log(v_TcName, "Step4: DUT successfully attached to the LTE network");
    
    log(v_TcName, "Default Procedure Guard Timer Stopped");
    t_Procedure_Guard_Timer.stop; //Guard Procedure Ended
  
    log(v_TcName, "Step5: Initiate the test application. Configure the test application for the application transmitting state with the retransmission timer set to 8 seconds.");
    fl_UT_ApplyCommand(UT, cas_UT_Req(APP_TRANSMIT_STATE_ON, NO_CNF_REQUIRED,{cs_Ut_Parameter_Common ("ACTIVATE_ADMIN_APN", "8")}));
     
    log(v_TcName, "Step6: Verify that the network responds to PDN Conn Req by sending a PDN Conn Reject message with an ESM cause code = ", bit2int(esm_Reject_Cause));
      
    log(v_TcName, "Step7: Verify that the UE sends a NAS PDN Connectivity Request without delay at the request of the test application " &
                  "and that the network again responds with a NAS PDN Connectivity Reject message in which the ESM Cause Code = ", bit2int(esm_Reject_Cause),
                  ". This is considered Retry #1.");
      
    log(v_TcName, "Step8: Verify that the UE sends a NAS PDN Connectivity Request without delay at the request of the test application " &
                  "and that the network again responds with a NAS PDN Connectivity Reject message in which the ESM Cause Code = ", bit2int(esm_Reject_Cause),
                  ". This is considered Retry #2.");      
    f_NBIOT_Periodic_TriggerNReject_PDNConnReq_IMSLESS(esm_Reject_Cause, v_Apn_string, v_Apn_val, -, 8.0);
    
//    f_UT_Trigger_APP_TRANSMIT_STATE_OFF(UT,"ACTIVATE_ADMIN_APN",0);
    fl_UT_ApplyCommand(UT, cas_UT_Req(APP_TRANSMIT_STATE_OFF, NO_CNF_REQUIRED,{cs_Ut_Parameter_Common ("ACTIVATE_ADMIN_APN", "0")}));
     
    log (v_TcName, "Step9: Verify that the test application requests a connection every 10 seconds and that the UE does not request the " &
                   "connection over the air for the next 1 minute plus a random time between 0 and 15 seconds.");
    
    fl_UT_ApplyCommand(UT, cas_UT_Req(APP_TRANSMIT_STATE_ON, NO_CNF_REQUIRED,{cs_Ut_Parameter_Common ("ACTIVATE_ADMIN_APN", "10")}));
    
    f_NBIOT_Verify_Test_Application_IMSLESS(v_Timer_1, v_Timer_2, v_Apn_string, v_Apn_val, -, -, v_TypeActPDN);
    log(v_TcName, "Step9: Verified Step9 successfully");
    
    log (v_TcName, "Step10: Once the 1+ minute timer expires, verify that the UE attempts to connect upon the next request of the test " &
                   "application with no delay. Verify that the UE sends another NAS PDN Connectivity Request and that the network responds " &
                   "with a NAS PDN Connectivity Reject message in which the ESM Cause Code is set to 26. This is considered Retry #3.");

    t_WaitTime_15.start;
    alt
    {
      []t_WaitTime_15.timeout
      {
        //DeleteApn_NoCnf(UT,6);
        log(v_TcName, "Step10a: 1 min plus 15 seconds elapsed. Expecting PDN Conn Req from the DUT now");
        f_NBIOT_PDN_Connectivity_Reject_IMSLESS(esm_Reject_Cause, v_Apn_string, v_Apn_val);
        f_NBIOT_PreliminaryPass(__FILE__, __LINE__, v_TcName & "Step10b: PDN Conn Reject Msg Sent to DUT");
        //DeleteApn_NoCnf(UT,6);
      }
      []SRB.receive(car_NB_SRB1bis_NasPdu_IND(nbiot_Cell1, cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered,
                                                                       cr_PDNConnReqAdditionalPDN('001'B, cr_AccessPointName_Any)))) -> value v_ReceivedAsp
      {
        f_NBIOT_StopTimer(t_WaitTime_10);
        f_NBIOT_StopTimer(t_WaitTime_15);
          
        v_PDNConnReq := v_ReceivedAsp.Signalling.Nas[0].Pdu.Msg.pDN_CONNECTIVITY_REQUEST;
        v_PTId_UE := v_PDNConnReq.procedureTransactionIdentifier;
    
        SRB.send(cas_NB_SRB1bis_NasPdu_REQ(nbiot_Cell1, cs_TimingInfo_Now, cs_NAS_Request(tsc_SHT_IntegrityProtected_Ciphered,
                                                                                    cs_PdnConnectReject('0'H, v_PTId_UE,
                                                                                                        cs_ESM_Cause_v(esm_Reject_Cause)))));
        f_NBIOT_PreliminaryPass(__FILE__, __LINE__, v_TcName & "Step10: PDN Conn Reject Msg Sent to DUT");
        //DeleteApn_NoCnf(UT,6);          
      }
    }
    log(v_TcName, "Step10: Verified Step10 successfully - ESM Cause code = ", bit2int(esm_Reject_Cause), " - Retry #3");

    v_Timer_1 := (2.0 * 60.0);

    log(v_TcName, "Step11: Verify that the test application requests a connection every 10 seconds and that the UE does not request the " &
                  "connection over the air for the next 2 minutes");
    f_NBIOT_Verify_Test_Application_IMSLESS(v_Timer_1, v_Timer_2, v_Apn_string, v_Apn_val, -, -, v_TypeActPDN);
    log(v_TcName, "Step11: Verified Step11 successfully");
    
    log (v_TcName, "Step12: Once the 2 minute timer expires, verify that the UE attempts to connect upon the next request of the test " &
                   "application with no delay. Verify that the UE sends another NAS PDN Connectivity Request and that the network responds " &
                   "with a NAS PDN Connectivity Reject message in which the ESM Cause Code is set to 26. This is considered Retry #4.");
                   
    f_NBIOT_PDN_Connectivity_Reject_IMSLESS (esm_Reject_Cause, v_Apn_string, v_Apn_val);
    //DeleteApn_NoCnf(UT,6);  
    log(v_TcName, "Step12: Verified Step12 successfully - ESM cause code = ", bit2int(esm_Reject_Cause), " - Retry #4");
   
    v_Timer_1 := (8.0 * 60.0);
     
    log(v_TcName, "Step13: Verify that the test application requests a connection every 10 seconds and that the UE does not request the " &
                  "connection over the air for the next 8 minutes");
   
   
    f_NBIOT_Verify_Test_Application_IMSLESS(v_Timer_1, v_Timer_2, v_Apn_string, v_Apn_val, -, -, v_TypeActPDN);
    
    

    log(v_TcName, "Step13: Verified Step13 successfully");
    
    log (v_TcName, "Step14: Once the 8 minute timer expires, verify that the UE attempts to connect upon the next request of the test " &
                   "application with no delay. Verify that the UE sends another NAS PDN Connectivity Request and that the network responds " &
                   "with a NAS PDN Connectivity Reject message in which the ESM Cause Code is set to 26. This is considered Retry #5.");                   
    
    
    f_NBIOT_PDN_Connectivity_Reject_IMSLESS(esm_Reject_Cause, v_Apn_string, v_Apn_val);
    //DeleteApn_NoCnf(UT,6);  
    log(v_TcName, "Step14: Verified Step14 successfully - ESM cause code = ", bit2int(esm_Reject_Cause), " - Retry #5");
    
    v_Timer_1 := (15.0 * 60.0);
       
    log(v_TcName, "Step15: Verify that the test application requests a connection every 10 seconds and that the UE does not request the " &
                  "connection over the air for the next 15 minutes.");
    
    f_NBIOT_Verify_Test_Application_IMSLESS (v_Timer_1, v_Timer_2, v_Apn_string, v_Apn_val, -, -, v_TypeActPDN);
    log(v_TcName, "Step15: Verified Step15 successfully");
    
    log (v_TcName, "Step16: Once the 15 minute timer expires, verify that the UE attempts to connect upon the next request of the " &
                   "test application with no delay. Verify that the UE sends another NAS PDN Connectivity Request and that the network " &
                   "responds with a NAS PDN Connectivity Reject message in which the ESM Cause Code is set to 26. This is considered Retry #6.");
                   
    f_NBIOT_PDN_Connectivity_Reject_IMSLESS(esm_Reject_Cause, v_Apn_string, v_Apn_val);
    //DeleteApn_NoCnf(UT,6);
    log(v_TcName, "Step16: Verified Step16 successfully - ESM cause code = ", bit2int(esm_Reject_Cause), " - Retry #6");
    
    v_Timer_1 := (15.0 * 60.0);
    log(v_TcName, "Step17: Verify that the test application requests a connection every 10 seconds and that the UE does not request the " &
                  "connection over the air for the next 15 minutes.");
    
   
    f_NBIOT_Verify_Test_Application_IMSLESS (v_Timer_1, v_Timer_2, v_Apn_string, v_Apn_val, -, -, v_TypeActPDN);
    log(v_TcName, "Step17: Verified Step17 successfully");
      
    log (v_TcName, "Step18: Once the 15 minute timer expires, verify that the UE attempts to connect upon the next request of the test " &
                   "application with no delay. Verify that the UE sends another NAS PDN Connectivity Request and that the network responds " &
                   "with a NAS PDN Connectivity Reject message in which the ESM Cause Code is set to 26. This considered Retry #7");
    
    f_NBIOT_PDN_Connectivity_Reject_IMSLESS (esm_Reject_Cause, v_Apn_string, v_Apn_val);
    //DeleteApn_NoCnf(UT,6);
    log(v_TcName, "Step18: Verified Step18 successfully ESM cause code = ", bit2int(esm_Reject_Cause), " - Retry #7");
    //f_UT_Trigger_APP_TRANSMIT_STATE_OFF(UT,"ACTIVATE_ADMIN_APN",10);
    fl_UT_ApplyCommand(UT, cas_UT_Req(APP_TRANSMIT_STATE_OFF, NO_CNF_REQUIRED,{cs_Ut_Parameter_Common ("ACTIVATE_ADMIN_APN", "10")}));
    
    f_Delay(5.0);
   
  }
    
    
 
    
    function f_VZ_TC_6_6_IMSLESS_NBIOT(NAS_CauseValue_Type rejectCause, charstring TestPlan_Name) runs on NBIOT_PTC
  {
     var EUTRA_ASN1_RRC_TransactionIdentifier_Type v_RRC_TI := tsc_RRC_TI_Def;
    var charstring v_TcName := testcasename() & ": ";
    timer t_Procedure_Guard_Timer;
    var float tsc_GuardProcedureTimer_240 := 240.0;
    var NAS_MSG_Indication_Type v_Nas_Ind;
    var template (present) B3_Type v_PDNType := (f_GetPdnType(), '101'B, '001'B);
    var template (present) NAS_UL_Message_Type v_ESMMessage := cr_CIOT_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach, v_PDNType);
   

    f_NBIOT_Init (c1); 
    
    log (v_TcName, "UE RECEIVES PDN CONNECTIVITY REJECT MESSAGE FROM THE NETWORK FOR ADMIN PDN CODE ", bit2int(rejectCause));    
    
    f_NBIOT_CellConfig_Def(nbiot_Cell1, CONTROL_PLANE);      /* @sic R5s150338: f_NBIOT_CellConfig_DRB_Common replaced by f_NBIOT_CellConfig_Def sic@ */
    f_NBIOT_SetCellPower(nbiot_Cell1, tsc_ServingCellRS_EPRE);
    log(v_TcName, "Step1: Configure the test setup so that the DUT finds service on a single eNodeB with cell_id X1 = 1, PLMN id Y1 = ", 
                  f_ConvertPLMNtoString(f_Asn2Nas_PlmnId(valueof(cs_HPLMN_Def))) & ", and TAI Z1 = ", oct2int(tsc_TAC1));
    log(v_TcName, "Step1: Cell Configuration Successful");     
    log(v_TcName, "Execution Started for Cause Code - ", bit2int(rejectCause));
     f_UT_SwitchOnUE(UT, true);
    
     t_Procedure_Guard_Timer.start(tsc_GuardProcedureTimer_240); //Guard Procedure Started
                      
    log(v_TcName, "Step2: Power ON the DUT and allow it to find LTE service");
     v_Nas_Ind := f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell1,
                                               cr_EstablishmentCause_NB_Any,
                                               cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                  cr_CIOT_ATTACH_REQUEST(cr_AdditionalUpdateType_CIOT),
                                                                                  v_ESMMessage)); 
      
    f_NBIOT_InitialRegistration_Step5_14(nbiot_Cell1, CONTROL_PLANE, STATE2_NB_CONNECTED_UPDATED, v_Nas_Ind);
    log(v_TcName, "Step2: Verifying that the DUT successfully establishes an RRC connection and attaches to the LTE network.");  

    log(v_TcName, "Default Procedure Guard Timer Stopped");
    t_Procedure_Guard_Timer.stop; //Guard Procedure Ended

 
       log("Test procedure - Release 12 UE and later");
       log(v_TcName,"Network will send a NAS PDN Connectivity Reject"&
             " message with cause code = ", bit2int(rejectCause), " including back off timer value set to 0 when the UE attempts to connect to the Admin PDN");   
       fl_VZ_TC_6_6_NBIOT_Body( rejectCause, TestPlan_Name);   
        f_NBIOT_TestBody_Set(false);
    
    log(v_TcName, "Execution Completed for Cause Code - ",bit2int(rejectCause));
    
     f_NBIOT_RRC_ConnectionRelease( nbiot_Cell1 );
      f_NBIOT_ReleaseAllCells();
    f_UT_PowerOffUE (UT);
     f_NBIOT_PreliminaryPass(__FILE__, __LINE__, v_TcName & "Successfully verified the Expected Result : UE follows the data retry " &
                                                           "algorithm described in the document Verizon Wireless LTE Data Retry " &
                                                           "when it receives a NAS PDN Connectivity Reject message");
  }
    

function fl_VZ_TC_6_6_NBIOT_Body ( 
                                     NAS_CauseValue_Type esm_Reject_Cause,charstring TestPlan_Name) runs on NBIOT_PTC
  {
    var charstring v_TcName := testcasename() & ": ";
    var EPS_BearerIdentity v_EpsBearerId2 := '0'H;
    var ProcedureTransactionIdentifier v_PTId_UE;
    var PDN_CONNECTIVITY_REQUEST v_PDNConnReq;
    var NB_SRB_COMMON_IND v_ReceivedAsp;
    var charstring v_sApn := "vzwadmin";
    var float v_WaitforPDN := (240.0);
    timer t_WaitTime;
    timer t_Procedure_Guard_Timer;
    var NAS_MSG_Indication_Type v_Nas_Ind;
    var float tsc_GuardProcedureTimer_240 := 240.0;
    var template (present) B3_Type v_PDNType := (f_GetPdnType(), '101'B, '001'B);
    var template (present) NAS_UL_Message_Type v_ESMMessage := cr_CIOT_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach, v_PDNType);
   
      
    log(v_TcName,"Step4: Verify that the UE sends a NAS PDN Connectivity Request message for the Admin PDN," &
      " network responds with PDN Connectivity Reject message with an ESM cause code = ", bit2int(esm_Reject_Cause), " including "&
      "back off timer value set to 0");
   // f_NBIOT_InitiatePdnConn("Step4");
     fl_UT_ApplyCommand(UT, cas_UT_Req(INITIATE_ADMIN_TEST_APP, NO_CNF_REQUIRED));
    t_WaitTime.start(60.0);
    alt 
    {
     []SRB.receive(car_NB_SRB1bis_NasPdu_IND(nbiot_Cell1, cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered,
                                                                       cr_PDNConnReqAdditionalPDN(('011'B,'001'B), cr_AccessPointName_Any)))) -> value v_ReceivedAsp
      {
        log(v_TcName, "Step4: Received NAS PDN Connectivity Request message for the Admin PDN");         
        v_PDNConnReq := v_ReceivedAsp.Signalling.Nas[0].Pdu.Msg.pDN_CONNECTIVITY_REQUEST;
        v_PTId_UE := v_PDNConnReq.procedureTransactionIdentifier;
         
       


        SRB.send (cas_NB_SRB_NasPdu_REQ (nbiot_Cell1,
                                     tsc_SRB1bis,
                                     cs_TimingInfo_Now,
                                     cs_NAS_Request(tsc_SHT_IntegrityProtected_Ciphered,
                                                cs_PdnConnectReject('0'H, // no EPS bearer assigned
                                                                    v_PTId_UE, // @sic R5s170962 sic@
                                                                    cs_ESM_Cause_v (esm_Reject_Cause),
                                                                    cs_GprsTimer3 ('37'O, tsc_Gprs3TimerUnit_1min, '00000'B), // 0mins
                                                                    -,
                                                                    omit))));

     
        log(v_TcName,"Step4: Sent PDN Connectivity Reject message with an ESM cause code = ", bit2int(esm_Reject_Cause), " including back off timer value set to 0"); 
      }
      []t_WaitTime.timeout
      {
        f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, v_TcName & "Step4: UE does not trigger PDN Conn Req upon request of the test application");
      }
    }
     fl_UT_ApplyCommand(UT, cas_UT_Req(INITIATE_ADMIN_TEST_APP, NO_CNF_REQUIRED));
      
    log(v_TcName,"Step5: Verify that the UE sends a second NAS PDN Connectivity Request message for the Admin PDN "&
      " Network responds with PDN Connectivity Reject message with an ESM cause code = ", bit2int(esm_Reject_Cause), " including"&
      " back off timer value set to 0");
    t_WaitTime.start(v_WaitforPDN);
    alt 
    {
     []SRB.receive(car_NB_SRB1bis_NasPdu_IND(nbiot_Cell1, cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered,
                                                                       cr_PDNConnReqAdditionalPDN(('011'B,'001'B), cr_AccessPointName_Any)))) -> value v_ReceivedAsp
       {
        t_WaitTime.stop;
        log(v_TcName, "Step5: Received NAS PDN Connectivity Request message for the Admin PDN");         
        v_PDNConnReq := v_ReceivedAsp.Signalling.Nas[0].Pdu.Msg.pDN_CONNECTIVITY_REQUEST;
        v_PTId_UE := v_PDNConnReq.procedureTransactionIdentifier;
         
         SRB.send (cas_NB_SRB_NasPdu_REQ (nbiot_Cell1,
                                     tsc_SRB1bis,
                                     cs_TimingInfo_Now,
                                     cs_NAS_Request(tsc_SHT_IntegrityProtected_Ciphered,
                                                cs_PdnConnectReject('0'H, // no EPS bearer assigned
                                                                    v_PTId_UE, // @sic R5s170962 sic@
                                                                    cs_ESM_Cause_v (esm_Reject_Cause),
                                                                    cs_GprsTimer3 ('37'O, tsc_Gprs3TimerUnit_1min, '00000'B), // 0mins
                                                                    -,
                                                                    omit))));
        log(v_TcName,"Step5: Sent PDN Connectivity Reject message with an ESM cause code = ", bit2int(esm_Reject_Cause), " including back off timer value set to 0");  
      }
      []t_WaitTime.timeout
      {
        f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, v_TcName & ": UE does not trigger PDN Conn Req upon request of the test application");
      }
    }
    
    log(v_TcName,"Step6: Re-configure the test equipment such that the network will send a NAS PDN Connectivity Reject message"&
      " including back off timer value set to 2 min with cause code = ", bit2int(esm_Reject_Cause)," when the UE"&
      " attempts to connect to the Admin PDN");
      
      
    log(v_TcName,"Step7: Verify that the UE sends a third NAS PDN Connectivity Request without delay at the request"&
      " of the test application and that the network again responds with a NAS PDN Connectivity Reject message including"&
      " back off timer value (2 min) with ESM Cause Code = ", bit2int(esm_Reject_Cause));
    
   //f_NBIOT_InitiatePdnConn("Step7");
      fl_UT_ApplyCommand(UT, cas_UT_Req(INITIATE_ADMIN_TEST_APP, NO_CNF_REQUIRED));
    
    t_WaitTime.start(v_WaitforPDN);
     alt 
    {
      
      []SRB.receive(car_NB_SRB1bis_NasPdu_IND(nbiot_Cell1, cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered,
                                                                       cr_PDNConnReqAdditionalPDN(('011'B,'001'B), cr_AccessPointName_Any)))) -> value v_ReceivedAsp
     {
        t_WaitTime.stop;
        log(v_TcName, "Step7: Received NAS PDN Connectivity Request message for the Admin PDN");         
        v_PDNConnReq := v_ReceivedAsp.Signalling.Nas[0].Pdu.Msg.pDN_CONNECTIVITY_REQUEST;
        v_PTId_UE := v_PDNConnReq.procedureTransactionIdentifier;
         
       SRB.send (cas_NB_SRB_NasPdu_REQ (nbiot_Cell1,
                                     tsc_SRB1bis,
                                     cs_TimingInfo_Now,
                                     cs_NAS_Request(tsc_SHT_IntegrityProtected_Ciphered,
                                                cs_PdnConnectReject('0'H, // no EPS bearer assigned
                                                                    v_PTId_UE, // @sic R5s170962 sic@
                                                                    cs_ESM_Cause_v (esm_Reject_Cause),
                                                                    cs_GprsTimer3 ('37'O, tsc_Gprs3TimerUnit_1min, '00010'B), // 2mins
                                                                    -,
                                                                    omit))));
        log(v_TcName,"Step7: Sent PDN Connectivity Reject message with an ESM cause code = ", bit2int(esm_Reject_Cause), " including back off timer value set to 2 minutes"); 
      }
      []t_WaitTime.timeout
      {
        f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, v_TcName & "Step7: UE does not trigger PDN Conn Req upon request of the test application");
      }
    } 
      
    log(v_TcName,"Step8: Monitor the DUT for 2 minutes and verify that it does not attempt to send a NAS PDN "&
      "Connectivity Request to the LTE network");
    
    t_WaitTime.start(120.0);
    alt 
    {
         []SRB.receive(car_NB_SRB1bis_NasPdu_IND(nbiot_Cell1, cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered,
                                                                       cr_PDNConnReqAdditionalPDN(('011'B,'001'B), cr_AccessPointName_Any)))) -> value v_ReceivedAsp
     {
        t_WaitTime.stop;
        f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, v_TcName & "Step8: UE triggered unexpected PDN Connection Request");
      }
      []t_WaitTime.timeout
      {
        log(v_TcName,"Step8: DUT did not trigger a NAS PDN Connectivity Request till expiry of 2 minutes timer");
      }
    }
    
    log(v_TcName,"Step9: Re-configure the test equipment such that the network will send a NAS PDN Connectivity Reject message"&
      " with ESM cause cod = ", bit2int(esm_Reject_Cause), " where back off timer value is not present when the "&
      "UE attempts to connect to the Admin PDN");
      
    
     fl_UT_ApplyCommand(UT, cas_UT_Req(INITIATE_ADMIN_TEST_APP, NO_CNF_REQUIRED));
    
   // f_NBIOT_InitiatePdnConn("Step9");
   /* t_WaitTime.start(120.0);
    alt 
    {
         []SRB.receive(car_NB_SRB1bis_NasPdu_IND(nbiot_Cell1, cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered,
                                                                       cr_PDNConnReqAdditionalPDN(('011'B,'001'B), cr_AccessPointName_Any)))) -> value v_ReceivedAsp
    {
        t_WaitTime.stop;
        log(v_TcName, "Step9: Received NAS PDN Connectivity Request message for the Admin PDN");         
        v_PDNConnReq := v_ReceivedAsp.Signalling.Nas[0].Pdu.Msg.pDN_CONNECTIVITY_REQUEST;
        v_PTId_UE := v_PDNConnReq.procedureTransactionIdentifier;
         
       
         SRB.send (cas_NB_SRB_NasPdu_REQ (nbiot_Cell1,
                                     tsc_SRB1bis,
                                     cs_TimingInfo_Now,
                                     cs_NAS_Request(tsc_SHT_IntegrityProtected_Ciphered,
                                                cs_PdnConnectReject('0'H, // no EPS bearer assigned
                                                                    v_PTId_UE, // @sic R5s170962 sic@
                                                                    cs_ESM_Cause_v (esm_Reject_Cause),
                                                                    -,
                                                                    -,
                                                                    omit))));
        log(v_TcName,"Step9: Sent PDN Connectivity Reject message with an ESM cause code of 8 without back off timer "); 
      }
      []t_WaitTime.timeout
      {
        f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, v_TcName & "Step10: UE does not trigger PDN Conn Req upon request of the test application");
      }
    }*/
    log(v_TcName,"Step10: Verify that the UE sends a fourth NAS PDN Connectivity Request after expiration of back off timer"&
      " (2 min) at the request of the test application and that the network again responds with"&
      " a NAS PDN Connectivity Reject message with ESM Cause Code = ", bit2int(esm_Reject_Cause), " where back off timer value"&
      " is not present");
      
    
    t_WaitTime.start(v_WaitforPDN);
    alt 
    {
         []SRB.receive(car_NB_SRB1bis_NasPdu_IND(nbiot_Cell1, cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered,
                                                                       cr_PDNConnReqAdditionalPDN(('011'B,'001'B), cr_AccessPointName_Any)))) -> value v_ReceivedAsp
    {
        t_WaitTime.stop;
        log(v_TcName, "Step10: Received NAS PDN Connectivity Request message for the Admin PDN");         
        v_PDNConnReq := v_ReceivedAsp.Signalling.Nas[0].Pdu.Msg.pDN_CONNECTIVITY_REQUEST;
        v_PTId_UE := v_PDNConnReq.procedureTransactionIdentifier;
         
       
         SRB.send (cas_NB_SRB_NasPdu_REQ (nbiot_Cell1,
                                     tsc_SRB1bis,
                                     cs_TimingInfo_Now,
                                     cs_NAS_Request(tsc_SHT_IntegrityProtected_Ciphered,
                                                cs_PdnConnectReject('0'H, // no EPS bearer assigned
                                                                    v_PTId_UE, // @sic R5s170962 sic@
                                                                    cs_ESM_Cause_v (esm_Reject_Cause),
                                                                    -,
                                                                    -,
                                                                    omit))));
        log(v_TcName,"Ste10: Sent PDN Connectivity Reject message with an ESM cause code of 8 without back off timer "); 
      }
      []t_WaitTime.timeout
      {
        f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, v_TcName & "Step10: UE does not trigger PDN Conn Req upon request of the test application");
      }
    }  
      
      
    log(v_TcName,"Step11: Monitor DUT for 10 min and verify that the DUT does not attempt to connect to ADMIN PDN");
    t_WaitTime.start(600.0);
    alt 
    {
        []SRB.receive(car_NB_SRB1bis_NasPdu_IND(nbiot_Cell1, cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered,
                                                                       cr_PDNConnReqAdditionalPDN(('011'B,'001'B), cr_AccessPointName_Any)))) -> value v_ReceivedAsp
     {
        t_WaitTime.stop;
        f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, v_TcName & "Step11: UE triggered unexpected PDN Conn Request");
      }
      []t_WaitTime.timeout
      {
        log(v_TcName,"Step11: DUT did not trigger a NAS PDN Connectivity Request till expiry of 10 minutes timer");
      }
    }

  /*  log(v_TcName,"Step12: Power off the device");
   f_UT_SwitchOffUE (UT, false);
     t_WaitTime.start(6.0); 
      alt{
        [] SRB.receive(car_NB_SRB0_RrcPdu_IND(nbiot_Cell1, cr_RRCConnectionRequest_NB ( cr_EstablishmentCause_NB_Any, ? ) ))
          {
              log(v_TcName, "Recieved rrc request 1");
              t_WaitTime.stop;
         }
        []t_WaitTime.timeout{log(v_TcName, "Recieved timeout");}
      }
   //   
    log(v_TcName,"Step13: Power on the device and verify that DUT attempt to send a NAS PDN Connectivity Request for"&
      " ADMIN PDN to the LTE network"); 
    f_UT_SwitchOnUE(UT, true);
     f_NBIOT_SS_ConfigRachPreambleIndMode(nbiot_Cell1, disable); */
      f_NBIOT_RRC_ConnectionRelease_MAC_Failure( nbiot_Cell1 );
       log(v_TcName, "Step12: Power Cycle the DUT and allow it to find LTE service");
    fl_UT_ApplyCommand(UT, cas_UT_Req(POWER_CYCLE, NO_CNF_REQUIRED));
      /* SRB.receive(car_NB_SRB1bis_NasPdu_IND(nbiot_Cell1,
                                          cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered,
                                                            cr_508_DETACH_REQUEST_MO(cr_NAS_KeySetIdentifier (?, tsc_NasKsi_NativeSecurityContext),
                                                                                     ?,
                                                                                     cr_DetachType('0'B, tsc_DetachMO_EpsOnly)))));

   */
    t_Procedure_Guard_Timer.start(tsc_GuardProcedureTimer_240); //Guard Procedure Started
                      
   
     v_Nas_Ind := f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell1,
                                               cr_EstablishmentCause_NB_Any,
                                               cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                  cr_CIOT_ATTACH_REQUEST(cr_AdditionalUpdateType_CIOT),
                                                                                  v_ESMMessage)); 
      
    f_NBIOT_InitialRegistration_Step5_14(nbiot_Cell1, CONTROL_PLANE, STATE2_NB_CONNECTED_UPDATED, v_Nas_Ind);
    log(v_TcName,"Step13: UE Attached Successfully");

    log(v_TcName, "Default Procedure Guard Timer Stopped");
    t_Procedure_Guard_Timer.stop; //Guard Procedure Ended

     fl_UT_ApplyCommand(UT, cas_UT_Req(INITIATE_ADMIN_TEST_APP, NO_CNF_REQUIRED));
       t_Procedure_Guard_Timer.start(tsc_GuardProcedureTimer_240);
    f_NBIOT_TriggerAdditionalPDN_Modified (nbiot_Cell1, CONTROL_PLANE, ?, cs_AccessPointName (tsc_Octet_Lower_ADMIN_APN), v_sApn);
    log(v_TcName, "Default Procedure Guard Timer Stopped");
    t_Procedure_Guard_Timer.stop; //Guard Procedure Ended
      
  
    log(v_TcName,"Step13: Received NAS PDN Connectivity Request message for the Admin PDN");         
     
  } 
    
    
    
    function f_TC_6_7_NBIOT(NAS_CauseValue_Type p_RejectCause, charstring TestPlan_Name) runs on NBIOT_PTC
  {
    var GutiParameters_Type v_GutiParameters;
    var NAS_PlmnId v_PLMN;
    var charstring v_TcName := testcasename()&": ";

    // Cell Init
    log (v_TcName,"<<<<<<<<<< Test Execution Started >>>>>>>>>>");  
    log (v_TcName,"UE RECEIVES PDN CONNECTIVITY REJECT MESSAGE FROM THE NETWORK FOR THE INTERNET PDN CODE ",bit2int(p_RejectCause));
    f_NBIOT_Init (c1);
      
    log(v_TcName,"Step1: Configure the test setup so that the device under test (DUT) finds service on a single " &
             "eNodeB with cell_id (where cell_id refers to the CellIdentity parameter that is broadcast in SIB1) " &
             "equal to value X1=1, PLMN id equal to value Y1 and TAI equal to value Z1. " &
             "Configure the test equipment such that the network sets the T3402 timer to 4 minutes in the Attach Accept message");
      
    // Create cell and send out system information
    f_NBIOT_CellConfig_Def(nbiot_Cell1, CONTROL_PLANE);      /* @sic R5s150338: f_EUTRA_CellConfig_DRB_Common replaced by f_EUTRA_CellConfig_Def sic@ */
    
    
    v_GutiParameters := f_NBIOT_CellInfo_GetGuti ( nbiot_Cell1 );
    v_PLMN := f_Asn2Nas_PlmnId (v_GutiParameters.PLMN_Identity);

    log(v_TcName,"Step1: Configured the test setup so that the device under test (DUT) finds service on a single " &
             "eNodeB with cell_id (where cell_id refers to the CellIdentity parameter that is broadcast in SIB1) " &
             "equal to value X1=1, PLMN id equal to value Y1 = ",f_ConvertPLMNtoString(v_PLMN) &
             " and TAI equal to value Z1 = {iei := '52'O, plmnId := ",v_PLMN,", tac := ",tsc_TAC1,"}");
     
    f_NBIOT_SetCellPower(nbiot_Cell1, tsc_ServingCellRS_EPRE);
   
    fl_VZ_IMSLess_TC_6_7_EUTRA_Body (p_RejectCause);    
    f_NBIOT_TestBody_Set(false);
      
    //And now remove the cell(s)
    f_NBIOT_ReleaseAllCells();
    f_UT_PowerOffUE (UT);
     log(v_TcName,"Step 24: Power the device off");
    f_NBIOT_PreliminaryPass(__FILE__, __LINE__, v_TcName &" PASSED");
    log (v_TcName,"<<<<<<<<<< Test Execution Finished >>>>>>>>>>");  
  }
   function fl_VZ_IMSLess_TC_6_7_EUTRA_Body (NAS_CauseValue_Type p_Esm_Reject_Cause) runs on NBIOT_PTC
  {
    var NAS_MSG_Indication_Type v_NAS_Ind;       
    var ProcedureTransactionIdentifier v_PTId_UE;
    var PDN_CONNECTIVITY_REQUEST v_PDNConnReq;
    var EUTRA_ASN1_RRC_TransactionIdentifier_Type v_RRC_TI := tsc_RRC_TI_Def;
    template (value) GPRS_Timer v_GT3402 := cs_GprsTimer_tv('17'O, tsc_GprsTimerUnit_1min, '00100'B); // 4 minutes
    template (value) GPRS_Timer2 v_GT2_T3402 := cr_GPRS_Timer2_3('16'O, tsc_GprsTimerUnit_1min, '00100'B);
    
    var float v_T3402 := (4.0 * 60.0);
    var float v_T3411 := 10.0 - 1.5;
    timer t_T3411;
    timer t_T3402;
    timer t_Procedure_Guard_Timer;
    var float tsc_GuardProcedureTimer_240 := 240.0;
    var charstring v_TcName := testcasename() &": ";
    var NAS_MSG_Indication_Type v_NasInd;
    var template (present) B3_Type v_PDNType := (f_GetPdnType(), '101'B, '001'B);
    var template (present) NAS_UL_Message_Type v_ESMMessage := cr_CIOT_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach, v_PDNType);
    var NB_SRB_Identity_Type v_SrbId := f_NBIOT_GetSrb1Id(CONTROL_PLANE);
 
    log(v_TcName,"Step2: Verify that the DUT has an Internet application that will attempt to connect as soon as the DUT is powered on.");
      
    /* 3. Power the DUT on and allow it to find LTE service. */ 
    log(v_TcName,"Step3: Power the DUT on and allow it to find LTE service.");
    f_UT_SwitchOnUE(UT, true);
    
    t_Procedure_Guard_Timer.start(tsc_GuardProcedureTimer_240); //Guard Procedure Started 

    /*  4. Verify that the DUT successfully establishes an RRC connection and attaches to the LTE network. */
    //f_EUTRA_AttachProcedure_ConnectedUpdated(eutra_Cell1, NORMAL, v_AttachType, v_AdditionalUpdateType, v_GT3402);
    v_NasInd := f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell1,
                                               cr_EstablishmentCause_NB_Any,
                                               cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                  cr_CIOT_ATTACH_REQUEST(cr_AdditionalUpdateType_CIOT),
                                                                                  v_ESMMessage)); 
      
      
    f_NBIOT_InitialRegistration_Step5_12(nbiot_Cell1, CONTROL_PLANE, STATE2_NB_CONNECTED_UPDATED, v_NasInd);
    
      
    f_NBIOT_InitialRegistration_Step13(nbiot_Cell1,
                                       CONTROL_PLANE,
                                       v_NasInd,
                                       pdnTypeAsSupportedByUE,-,-,-,-,-,v_GT3402);
      
    f_NBIOT_InitialRegistration_Step14(nbiot_Cell1, CONTROL_PLANE, tsc_EpsDefaultBearerId);
      
      
    log(v_TcName,"Step4: Verified that the DUT sends an Attach Request and that the network responds with an Attach Accept with the T3402 timer set to 4 minutes");
    log(v_TcName,"Step4: UE Attach Success and connects to the Internet PDN.");
      
    log(v_TcName, "Default Procedure Guard Timer Stopped");
    t_Procedure_Guard_Timer.stop; //Guard Procedure Ended
      
    log(v_TcName,"Step5: Sending Detach Request to UE with reattach required in the Detach Type");  
    
    SRB.send(cas_NB_SRB1bis_NasPdu_REQ(nbiot_Cell1,
                                       cs_TimingInfo_Now,
                                       cs_NAS_Request(tsc_SHT_IntegrityProtected_Ciphered,
                                                      cs_508_DETACH_REQUEST_MT(cs_DetachType(tsc_DetachMT_ReAttach), omit))));  
      
    log(v_TcName, "Step6: Expecting Detach Accept from the UE");
    SRB.receive(car_NB_SRB1bis_NasPdu_IND(nbiot_Cell1,
                                          cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered,
                                                            cr_508_DETACH_ACCEPT)));
    log(v_TcName,"Step6: Verified that the DUT detaches from the LTE network.");
      
    log(v_TcName,"Step7: Configure the test equipment such that the network will respond to attach attempts by sending a "&
                 "NAS Attach Reject message with an EMM Cause Code equal to 19 and the T3402 timer set to 4 minutes.  "&
                 "Configure the test equipment such that the network will respond to a piggybacked PDN connectivity request "&
                 "by sending a NAS PDN Connectivity Reject message with an ESM Cause Code equal to ",bit2int(p_Esm_Reject_Cause),". " &
                 "Note that the T3396 Value IE is not included in the PDN Connectivity Reject message.");

    f_NBIOT_RRC_ConnectionRelease(nbiot_Cell1); 
    
     t_Procedure_Guard_Timer.start(tsc_GuardProcedureTimer_240); //Guard Procedure Started 

    log(v_TcName,"Step8: Verify that the DUT successfully establishes an RRC connection and sends a NAS Attach Request message");
    v_NAS_Ind:= f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell1,
                                               cr_EstablishmentCause_NB_Any,
                                               cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                  cr_CIOT_ATTACH_REQUEST(cr_AdditionalUpdateType_CIOT),
                                                                                  v_ESMMessage)); 
      
    log(v_TcName,"Step8: Verified that the DUT successfully establishes an RRC connection and sends a NAS Attach Request message. This is attempt #1");

    log(v_TcName, "Default Procedure Guard Timer Stopped");
    t_Procedure_Guard_Timer.stop; //Guard Procedure Ended
      
    v_PDNConnReq := v_NAS_Ind.Pdu.PiggybackedPduList[0].Msg.pDN_CONNECTIVITY_REQUEST;  
    v_PTId_UE := v_PDNConnReq.procedureTransactionIdentifier;

    log(v_TcName,"Step9: Verify that the network responds with a NAS Attach Reject message in which the EMM Cause Code is set to a "&
                 "value of 19 and a NAS PDN Connectivity Reject message in which the ESM Cause Code is set to a value of ",bit2int(p_Esm_Reject_Cause));   

      
    
    SRB.send (cas_NB_SRB_NasPdu_REQ (nbiot_Cell1,
                                     v_SrbId,
                                     cs_TimingInfo_Now,
                                     cs_NAS_RequestWithPiggybacking(v_NAS_Ind.SecurityProtection.Status,
                                                                    cs_508_AttachReject(cs_EMM_Cause_v(tsc_Cause_ESMFailure),-, v_GT2_T3402),
                                                                    cs_PdnConnectReject('0'H, // no EPS bearer assigned
                                                                    v_PTId_UE, // @sic R5s170962 sic@
                                                                    cs_ESM_Cause_v (p_Esm_Reject_Cause), -, -,
                                                                    omit)))); 
     
      
     t_T3411.start(f_NBIOT_SetTimerToleranceMin(nonProtocolTimer, v_T3411));
      
    log(v_TcName,"Step9: Sent Attach Reject (EMM Cause Code: ", bit2int(tsc_Cause_ESMFailure),") and piggibacked PDN Conn Reject (ESM Cause Code: ", bit2int(p_Esm_Reject_Cause),")");
    log(v_TcName,"Step10: Verify that the UE waits at least T3411 seconds before attempting to attach again. The next attempt "&
                 "is considered attempt #2. Verify that the Request Type IE in the PDN Connectivity Request message is set to "&
                 "Initial Request. Verify that the PDN Type is set to the class 3 (Internet) PDN.");
    log(v_TcName,"Step10: Started timer T3411 for 10 seconds");
    
    log(v_TcName,"Step10: Monitoring that UE waits atleast T3411 seconds before attempting to attach again");
   alt{    
    []SRB.receive(car_NB_SRB0_RrcPdu_IND(nbiot_Cell1, cr_RRCConnectionRequest_NB ( cr_EstablishmentCause_NB_Any, ? ) ))
      {
        t_T3411.stop;
        f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, v_TcName&"UE sent unexpected Attach Request before expiry of T3411 timer");
      }
      []t_T3411.timeout
      {
        log(v_TcName&"Successfully Timer expired 10 seconds");
      }
    }
    f_NBIOT_RRC_ConnectionRelease( nbiot_Cell1 );    
    
    t_Procedure_Guard_Timer.start(tsc_GuardProcedureTimer_240); //Guard Procedure Started 
 
    log(v_TcName,"Step10: Waiting to receive Attach Req. This is considered as Attempt #2");
    v_NAS_Ind:= f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell1,
                                               cr_EstablishmentCause_NB_Any,
                                               cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                  cr_CIOT_ATTACH_REQUEST(cr_AdditionalUpdateType_CIOT),
                                                                                  v_ESMMessage));       
    log(v_TcName,"Step10: Verified that the DUT successfully establishes an RRC connection and sends a NAS Attach Request message. This is attempt #2");
    log(v_TcName, "Default Procedure Guard Timer Stopped");
    t_Procedure_Guard_Timer.stop; //Guard Procedure Ended
      
    v_PDNConnReq := v_NAS_Ind.Pdu.PiggybackedPduList[0].Msg.pDN_CONNECTIVITY_REQUEST;  
    v_PTId_UE := v_PDNConnReq.procedureTransactionIdentifier;

    if (v_PDNConnReq.requestType.typeValue ==  tsc_PdnRequest_InitialAttach)
    {
       log(v_TcName,"Step10: Verified that the Request Type IE in the PDN Connectivity Request message is set to Initial Request.");
    }   
    if (isvalue(v_PDNConnReq.accessPointName.nameValue))
    {
        if ((v_PDNConnReq.accessPointName.nameValue == tsc_Octet_INTERNET_APN))
        {
           log(v_TcName,"Step10: Verified that the PDN Type is set to the class 3 (Internet) PDN");
        }
        else
        {
            log("Received PDN type name :",v_PDNConnReq.accessPointName.nameValue);
           f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, v_TcName & "Step 10, Received PDN Type is Not set to the class 3 (Internet) PDN");
        }
    }
    else
    {
        // IMSLESS Device does not include PDN Type sometimes for Internet
        log(v_TcName,"Step10: Verified that the PDN Type is set to the class 3 (Internet) PDN");
    }

    log(v_TcName,"Step11: Verify that the network again responds with a NAS Attach Reject message in which the EMM Cause Code "&
                 "is set to a value of 19 and a NAS PDN Connectivity Reject message in which the ESM Cause Code is set to a value of ",bit2int(p_Esm_Reject_Cause));   
    
     SRB.send (cas_NB_SRB_NasPdu_REQ (nbiot_Cell1,
                                     v_SrbId,
                                     cs_TimingInfo_Now,
                                     cs_NAS_RequestWithPiggybacking(v_NAS_Ind.SecurityProtection.Status,
                                                                    cs_508_AttachReject(cs_EMM_Cause_v(tsc_Cause_ESMFailure),-, v_GT2_T3402),
                                                                    cs_PdnConnectReject('0'H, // no EPS bearer assigned
                                                                    v_PTId_UE, // @sic R5s170962 sic@
                                                                    cs_ESM_Cause_v (p_Esm_Reject_Cause), -, -,
                                                                    omit))));
      

    
    t_T3411.start ( f_NBIOT_SetTimerToleranceMin( nonProtocolTimer, v_T3411 ) ); 
      
    log(v_TcName,"Step11: Sent Attach Reject (EMM Cause Code: ", bit2int(tsc_Cause_ESMFailure),") and piggibacked PDN Conn Reject (ESM Cause Code: ", bit2int(p_Esm_Reject_Cause),")");
    log(v_TcName,"Step12: Verify that the UE waits at least T3411 seconds before attempting to attach again. The next attempt "&
                 "is considered attempt #3. Verify that the Request Type IE in the PDN Connectivity Request message is set to "&
                 "Initial Request. Verify that the PDN Type is set to the class 3 (Internet) PDN.");
    log(v_TcName,"Step12: Starting timer T3411 for 10 seconds");
      
    log(v_TcName,"Step12: Monitoring that UE waits atleast T3411 seconds before attempting to attach again");
    alt { 
       []SRB.receive(car_NB_SRB0_RrcPdu_IND(nbiot_Cell1, cr_RRCConnectionRequest_NB ( cr_EstablishmentCause_NB_Any, ? ) ))     
      {
        t_T3411.stop;
        f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__,v_TcName&"UE sent unexpected Attach Request before expiry of T3411 timer");
      }
      []t_T3411.timeout
      {
          log(v_TcName&"Successfully Timer expired 10 seconds");
      }
    }
    f_NBIOT_RRC_ConnectionRelease( nbiot_Cell1 );

    t_Procedure_Guard_Timer.start(tsc_GuardProcedureTimer_240); //Guard Procedure Started 
    log(v_TcName,"Step12: Waiting to receive Attach Req. This is considered as Attempt #3");
    v_NAS_Ind:= f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell1,
                                               cr_EstablishmentCause_NB_Any,
                                               cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                  cr_CIOT_ATTACH_REQUEST(cr_AdditionalUpdateType_CIOT),
                                                                                 v_ESMMessage));                                                                            
      
    log(v_TcName,"Step12: Verified that the DUT successfully establishes an RRC connection and sends a NAS Attach Request message. This is attempt #3");
    log(v_TcName,"Default Procedure Guard Timer Stopped");
    t_Procedure_Guard_Timer.stop; //Guard Procedure Ended
      
    v_PDNConnReq := v_NAS_Ind.Pdu.PiggybackedPduList[0].Msg.pDN_CONNECTIVITY_REQUEST;  
    v_PTId_UE := v_PDNConnReq.procedureTransactionIdentifier;

    if (v_PDNConnReq.requestType.typeValue ==  tsc_PdnRequest_InitialAttach)
    {
       log(v_TcName,"Step12: Verified that the Request Type IE in the PDN Connectivity Request message is set to Initial Request.");
    }   
    if (isvalue(v_PDNConnReq.accessPointName.nameValue))
    {
        if ((v_PDNConnReq.accessPointName.nameValue == tsc_Octet_INTERNET_APN))
        {
           log(v_TcName,"Step12: Verified that the PDN Type is set to the class 3 (Internet) PDN");
        }
        else
        {
           log("Received PDN type name :",v_PDNConnReq.accessPointName.nameValue);
           f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, v_TcName & "Step12, Received PDN Type is Not set to the class 3 (Internet) PDN");
        }
    }
    else
    {
        // IMSLESS Device does not include PDN Type sometimes for Internet
        log(v_TcName,"Step12: Verified that the PDN Type is set to the class 3 (Internet) PDN");
    }
      
    log(v_TcName,"Step13: Verify that the network again responds with a NAS Attach Reject message in which the EMM Cause Code "&
                 "is set to a value of 19 and a NAS PDN Connectivity Reject message in which the ESM Cause Code is set to a value of ",bit2int(p_Esm_Reject_Cause));   

    SRB.send (cas_NB_SRB_NasPdu_REQ (nbiot_Cell1,
                                     v_SrbId,
                                     cs_TimingInfo_Now,
                                     cs_NAS_RequestWithPiggybacking(v_NAS_Ind.SecurityProtection.Status,
                                                                    cs_508_AttachReject(cs_EMM_Cause_v(tsc_Cause_ESMFailure),-, v_GT2_T3402),
                                                                    cs_PdnConnectReject('0'H, // no EPS bearer assigned
                                                                    v_PTId_UE, // @sic R5s170962 sic@
                                                                    cs_ESM_Cause_v (p_Esm_Reject_Cause), -, -,
                                                                    omit))));  
     
         
    t_T3402.start ( f_NBIOT_SetTimerToleranceMin ( nonProtocolTimer, v_T3402 ) );
    
    log(v_TcName,"Step13: Sent Attach Reject (EMM Cause Code: ", bit2int(tsc_Cause_ESMFailure),") and piggibacked PDN Conn Reject (ESM Cause Code: ", bit2int(p_Esm_Reject_Cause),")");
    log(v_TcName,"Step14: Monitor the DUT and verify that it does not attempt to attach to the LTE network for at least T3402 minutes (4 minutes).");  
       
   t_T3411.start ( f_NBIOT_SetTimerToleranceMin( nonProtocolTimer, v_T3411 ) );
       alt {
       []SRB.receive(car_NB_SRB0_RrcPdu_IND(nbiot_Cell1, cr_RRCConnectionRequest_NB ( cr_EstablishmentCause_NB_Any, ? ) ))     
      {
        t_T3411.stop;
        f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__,v_TcName&"UE sent unexpected Attach Request before expiry of T3411 timer");
      }
      []t_T3411.timeout
      {
          log(v_TcName&"Successfully Timer expired 10 seconds");
      }
    }
      f_NBIOT_RRC_ConnectionRelease( nbiot_Cell1 );
   
    log(v_TcName,"Step14: Started timer T3402 for 4 minutes");
    
    log(v_TcName,"Step14: Monitoring that UE waits atleast T3402 seconds before attempting to attach again");
       
      alt {
      []SRB.receive(car_NB_SRB0_RrcPdu_IND(nbiot_Cell1, cr_RRCConnectionRequest_NB(cr_EstablishmentCause_NB_Any, ?)))
      {
        t_T3402.stop;
        f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, v_TcName&"UE sent unexpected Attach Request before expiry of T3402 timer");
      }
      []t_T3402.timeout
      {
        log(v_TcName,"Timer T3402 = 4 minutes expired successfully");
      }
    }  
     t_Procedure_Guard_Timer.start(tsc_GuardProcedureTimer_240); //Guard Procedure Started 

    log(v_TcName,"Step15: After T3402 expires, verify that the DUT successfully establishes an RRC connection and sends a NAS Attach Request message.");
    v_NAS_Ind:=  f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell1,
                                               cr_EstablishmentCause_NB_Any,
                                               cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                  cr_CIOT_ATTACH_REQUEST(cr_AdditionalUpdateType_CIOT),
                                                                                 v_ESMMessage));
      
    log(v_TcName,"Step15: Verified that the DUT successfully establishes an RRC connection and sends a NAS Attach Request message. This is attempt #1");
    log(v_TcName, "Default Procedure Guard Timer Stopped");
    t_Procedure_Guard_Timer.stop; //Guard Procedure Ended
      
    v_PDNConnReq := v_NAS_Ind.Pdu.PiggybackedPduList[0].Msg.pDN_CONNECTIVITY_REQUEST;  
    v_PTId_UE := v_PDNConnReq.procedureTransactionIdentifier;

    log(v_TcName,"Step16: Verify that the network responds with a NAS Attach Reject message in which the EMM Cause Code is set to a "&
                 "value of 19 and a NAS PDN Connectivity Reject message in which the ESM Cause Code is set to a value of ",bit2int(p_Esm_Reject_Cause));   
    
    SRB.send (cas_NB_SRB_NasPdu_REQ (nbiot_Cell1,
                                     v_SrbId,
                                     cs_TimingInfo_Now,
                                     cs_NAS_RequestWithPiggybacking(v_NAS_Ind.SecurityProtection.Status,
                                                                    cs_508_AttachReject(cs_EMM_Cause_v(tsc_Cause_ESMFailure),-, v_GT2_T3402),
                                                                    cs_PdnConnectReject('0'H, // no EPS bearer assigned
                                                                    v_PTId_UE, // @sic R5s170962 sic@
                                                                    cs_ESM_Cause_v (p_Esm_Reject_Cause), -, -,
                                                                    omit))));
  
        
     t_T3411.start ( f_NBIOT_SetTimerToleranceMin( nonProtocolTimer, v_T3411 ) );   
    
    log(v_TcName,"Step16: Sent Attach Reject (EMM Cause Code: ", bit2int(tsc_Cause_ESMFailure),") and piggibacked PDN Conn Reject (ESM Cause Code: ", bit2int(p_Esm_Reject_Cause),")");
    log(v_TcName,"Step17: Verify that the UE waits at least T3411 seconds before attempting to attach again. The next attempt "&
                 "is considered attempt #2. Verify that the Request Type IE in the PDN Connectivity Request message is set to "&
                 "Initial Request. Verify that the PDN Type is set to the class 3 (Internet) PDN.");
    log(v_TcName,"Step17: Started timer T3411 for 10 seconds");
    
    log(v_TcName,"Step17: Monitoring that UE waits atleast T3411 seconds before attempting to attach again");
    alt { 
       []SRB.receive(car_NB_SRB0_RrcPdu_IND(nbiot_Cell1, cr_RRCConnectionRequest_NB ( cr_EstablishmentCause_NB_Any, ? ) ))     
      {
        t_T3411.stop;
        f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__,"TC_4_1_NBIOT UE sent unexpected Attach Request before expiry of T3411 timer");
      }
      []t_T3411.timeout
      {
          log(v_TcName, "Successfully Timer expired 10 seconds");
      }
    }
   f_NBIOT_RRC_ConnectionRelease( nbiot_Cell1 );
    //fl_UT_ApplyCommand(UT, cas_UT_Req(POWER_CYCLE, NO_CNF_REQUIRED));
     t_Procedure_Guard_Timer.start(tsc_GuardProcedureTimer_240); //Guard Procedure Started 
    log(v_TcName,"Step17: Waiting to receive Attach Req. This is considered as Attempt #2");
    v_NAS_Ind:= f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell1,
                                               cr_EstablishmentCause_NB_Any,
                                               cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                  cr_CIOT_ATTACH_REQUEST(cr_AdditionalUpdateType_CIOT),
                                                                                 v_ESMMessage));                                                   
      
    log(v_TcName,"Step17: Verified that the DUT successfully establishes an RRC connection and sends a NAS Attach Request message. This is attempt #2");
    log(v_TcName,"Default Procedure Guard Timer Stopped");
    t_Procedure_Guard_Timer.stop; //Guard Procedure Ended
      
    v_PDNConnReq := v_NAS_Ind.Pdu.PiggybackedPduList[0].Msg.pDN_CONNECTIVITY_REQUEST;  
    v_PTId_UE := v_PDNConnReq.procedureTransactionIdentifier;

    if (v_PDNConnReq.requestType.typeValue ==  tsc_PdnRequest_InitialAttach)
    {
       log(v_TcName,"Step17: Verified that the Request Type IE in the PDN Connectivity Request message is set to Initial Request.");
    }   
    if (isvalue(v_PDNConnReq.accessPointName.nameValue))
    {
        if ((v_PDNConnReq.accessPointName.nameValue == tsc_Octet_INTERNET_APN))
        {
           log(v_TcName,"Step17: Verified that the PDN Type is set to the class 3 (Internet) PDN");
        }
        else
        {
            log("Received PDN type name :",v_PDNConnReq.accessPointName.nameValue);
           f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, v_TcName & "Step17, Received PDN Type is Not set to the class 3 (Internet) PDN");
        }
    }
    else
    {
        // IMSLESS Device does not include PDN Type sometimes for Internet
        log(v_TcName,"Step17: Verified that the PDN Type is set to the class 3 (Internet) PDN");
    }

    log(v_TcName,"Step18: Verify that the network again responds with a NAS Attach Reject message in which the EMM Cause Code "&
                 "is set to a value of 19 and a NAS PDN Connectivity Reject message in which the ESM Cause Code is set to a value of ",bit2int(p_Esm_Reject_Cause));   

   SRB.send (cas_NB_SRB_NasPdu_REQ (nbiot_Cell1,
                                     v_SrbId,
                                     cs_TimingInfo_Now,
                                     cs_NAS_RequestWithPiggybacking(v_NAS_Ind.SecurityProtection.Status,
                                                                    cs_508_AttachReject(cs_EMM_Cause_v(tsc_Cause_ESMFailure),-, v_GT2_T3402),
                                                                    cs_PdnConnectReject('0'H, // no EPS bearer assigned
                                                                    v_PTId_UE, // @sic R5s170962 sic@
                                                                    cs_ESM_Cause_v (p_Esm_Reject_Cause), -, -,
                                                                    omit))));
   
    log(v_TcName,"Step18: Sent Attach Reject (EMM Cause Code: ", bit2int(tsc_Cause_ESMFailure),") and piggibacked PDN Conn Reject (ESM Cause Code: ", bit2int(p_Esm_Reject_Cause),")");
         
    log(v_TcName,"Step19: Verify that the UE waits at least T3411 seconds before attempting to attach again. The next attempt "&
                 "is considered attempt #3. Verify that the Request Type IE in the PDN Connectivity Request message is set to "&
                 "Initial Request. Verify that the PDN Type is set to the class 3 (Internet) PDN.");
      
    log(v_TcName,"Step19: Starting timer T3411 for 10 seconds");
    t_T3411.start ( f_NBIOT_SetTimerToleranceMin( nonProtocolTimer, v_T3411 ) );      
    
    log(v_TcName,"Step19: Monitoring that UE waits atleast T3411 seconds before attempting to attach again");
   alt {
      
       []SRB.receive(car_NB_SRB0_RrcPdu_IND(nbiot_Cell1, cr_RRCConnectionRequest_NB ( cr_EstablishmentCause_NB_Any, ? ) ))     
      {
        t_T3411.stop;
        f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__,v_TcName&"UE sent unexpected Attach Request before expiry of T3411 timer");
      }
      []t_T3411.timeout
      {
          log(v_TcName&"Successfully Timer expired 10 seconds");
      }
    }
    f_NBIOT_RRC_ConnectionRelease( nbiot_Cell1 );
    t_Procedure_Guard_Timer.start(tsc_GuardProcedureTimer_240); //Guard Procedure Started 
    log(v_TcName,"Step19: Waiting to receive Attach Req. This is considered as Attempt #3");
    v_NAS_Ind:= f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell1,
                                               cr_EstablishmentCause_NB_Any,
                                               cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                  cr_CIOT_ATTACH_REQUEST(cr_AdditionalUpdateType_CIOT),
                                                                                 v_ESMMessage));

      
    log(v_TcName,"Step19: Verified that the DUT successfully establishes an RRC connection and sends a NAS Attach Request message. This is attempt #3");
    log(v_TcName,"Default Procedure Guard Timer Stopped");
    t_Procedure_Guard_Timer.stop; //Guard Procedure Ended
      
    v_PDNConnReq := v_NAS_Ind.Pdu.PiggybackedPduList[0].Msg.pDN_CONNECTIVITY_REQUEST;  
    v_PTId_UE := v_PDNConnReq.procedureTransactionIdentifier;

    if (v_PDNConnReq.requestType.typeValue ==  tsc_PdnRequest_InitialAttach)
    {
       log(v_TcName,"Step19: Verified that the Request Type IE in the PDN Connectivity Request message is set to Initial Request.");
    }   
    if (isvalue(v_PDNConnReq.accessPointName.nameValue))
    {
        if ((v_PDNConnReq.accessPointName.nameValue == tsc_Octet_INTERNET_APN))
        {
           log(v_TcName,"Step19: Verified that the PDN Type is set to the class 3 (Internet) PDN");
        }
        else
        {
           log("Received PDN type name :",v_PDNConnReq.accessPointName.nameValue);
           f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, v_TcName & "Step19, Received PDN Type is Not set to the class 3 (Internet) PDN");
        }
    }
    else
    {
        // IMSLESS Device does not include PDN Type sometimes for Internet
        log(v_TcName,"Step19: Verified that the PDN Type is set to the class 3 (Internet) PDN");
    }

    log(v_TcName,"Step20: Verify that the network again responds with a NAS Attach Reject message in which the EMM Cause Code "&
                 "is set to a value of 19 and a NAS PDN Connectivity Reject message in which the ESM Cause Code is set to a value of ",bit2int(p_Esm_Reject_Cause));   
   
    SRB.send (cas_NB_SRB_NasPdu_REQ (nbiot_Cell1,
                                     v_SrbId,
                                     cs_TimingInfo_Now,
                                     cs_NAS_RequestWithPiggybacking(v_NAS_Ind.SecurityProtection.Status,
                                                                    cs_508_AttachReject(cs_EMM_Cause_v(tsc_Cause_ESMFailure),-, v_GT2_T3402),
                                                                    cs_PdnConnectReject('0'H, // no EPS bearer assigned
                                                                    v_PTId_UE, // @sic R5s170962 sic@
                                                                    cs_ESM_Cause_v (p_Esm_Reject_Cause), -, -,
                                                                    omit))));
    
       
     t_T3402.start ( f_NBIOT_SetTimerToleranceMin ( nonProtocolTimer, v_T3402 ) );
    log(v_TcName,"Step20: Sent Attach Reject (EMM Cause Code: ", bit2int(tsc_Cause_ESMFailure),") and piggibacked PDN Conn Reject (ESM Cause Code: ", bit2int(p_Esm_Reject_Cause),")");
   
     t_T3411.start ( f_NBIOT_SetTimerToleranceMin( nonProtocolTimer, v_T3411 ) ); 
     alt {
       []SRB.receive(car_NB_SRB0_RrcPdu_IND(nbiot_Cell1, cr_RRCConnectionRequest_NB ( cr_EstablishmentCause_NB_Any, ? ) ))     
      {
        t_T3411.stop;
        f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__,v_TcName&"UE sent unexpected Attach Request before expiry of T3411 timer");
      }
      []t_T3411.timeout
      {
          log(v_TcName,"Successfully Timer expired 10 seconds");
      }
    }
     f_NBIOT_RRC_ConnectionRelease( nbiot_Cell1 );  
      
    log(v_TcName,"Step21: Monitor the DUT and verify that it does not attempt to attach to the LTE network for at least T3402 minutes (4 minutes).");  
    
    alt {
      []SRB.receive(car_NB_SRB0_RrcPdu_IND(nbiot_Cell1, cr_RRCConnectionRequest_NB ( cr_EstablishmentCause_NB_Any, ? ) ))
      {
        t_T3402.stop;
        f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, v_TcName&"UE sent unexpected Attach Request before expiry of T3402 timer");
      }
      []t_T3402.timeout
      {
        log(v_TcName,"Timer T3402 = 4 minutes expired successfully");
      }
    }
    
    
    log(v_TcName,"Step22: Re-configure the network so that the network accepts the attach request and PDN connectivity request.");      
     fl_UT_ApplyCommand(UT, cas_UT_Req(POWER_CYCLE, NO_CNF_REQUIRED));

    log(v_TcName,"Step23: After T3402 expires, verify that the DUT attempts to attach to the LTE network using the Internet PDN, "&
                 "and that the network accepts the requests.");
      
   
    t_Procedure_Guard_Timer.start(tsc_GuardProcedureTimer_240); //Guard Procedure Started 
    v_NasInd := f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell1,
                                               cr_EstablishmentCause_NB_Any,
                                               cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                  cr_CIOT_ATTACH_REQUEST(cr_AdditionalUpdateType_CIOT),
                                                                                  v_ESMMessage)); 
      
      
    f_NBIOT_InitialRegistration_Step5_12(nbiot_Cell1, CONTROL_PLANE, STATE2_NB_CONNECTED_UPDATED, v_NasInd);
    
      
    f_NBIOT_InitialRegistration_Step13(nbiot_Cell1,
                                       CONTROL_PLANE,
                                       v_NasInd,
                                       pdnTypeAsSupportedByUE,-,-,-,-,-,v_GT3402);
      
    f_NBIOT_InitialRegistration_Step14(nbiot_Cell1, CONTROL_PLANE, tsc_EpsDefaultBearerId);
    log(v_TcName,"Step23: UE Attached Successfully");
      
    log(v_TcName,"Default Procedure Guard Timer Stopped");
    t_Procedure_Guard_Timer.stop; //Guard Procedure Ended
      
  }    
    
    
    
    function f_VZ_IMSLess_TC_6_8_NBIOT(charstring TestPlan_Name) runs on NBIOT_PTC
  {
     var GutiParameters_Type v_GutiParameters;
    var NAS_PlmnId v_PLMN;
    var charstring v_TcName := testcasename()&": ";

    // Cell Init
    log (v_TcName,"NETWORK FAILS TO RESPOND TO PDN CONNECTIVITY REQUEST.");
    log ("######## Pre-requisite: Configure the DUT so that, for the Admin PDN, the MAX_CONN parameter is set to 2 and the MAX_CONN_T parameter is set to 300 seconds");
      
    f_NBIOT_Init (c1);
      
    log(v_TcName,"Step1: Configure the test setup so that the device under test (DUT) finds service on a single " &
             "eNodeB with cell_id (where cell_id refers to the CellIdentity parameter that is broadcast in SIB1) " &
             "equal to value X1=1, PLMN id equal to value Y1 and TAI equal to value Z1.");
      
    // Create cell and send out system information
    f_NBIOT_CellConfig_Def(nbiot_Cell1, CONTROL_PLANE);      /* @sic R5s150338: f_EUTRA_CellConfig_DRB_Common replaced by f_EUTRA_CellConfig_Def sic@ */
    
    v_GutiParameters := f_NBIOT_CellInfo_GetGuti ( nbiot_Cell1 );
    v_PLMN := f_Asn2Nas_PlmnId (v_GutiParameters.PLMN_Identity);

    log(v_TcName,"Step1: Configured the test setup so that the device under test (DUT) finds service on a single " &
             "eNodeB with cell_id (where cell_id refers to the CellIdentity parameter that is broadcast in SIB1) " &
             "equal to value X1=1, PLMN id equal to value Y1 = ",f_ConvertPLMNtoString(v_PLMN) &
             " and TAI equal to value Z1 = {iei := '52'O, plmnId := ",v_PLMN,", tac := ",tsc_TAC1,"}");
     
    log(v_TcName,"Step2: Configure the test equipment such that the network will allow the UE to attach to the LTE network. "&
           "Configure the test equipment such that the network sets the T3402 timer to 4 minutes in the Attach Accept message");
      
    f_NBIOT_SetCellPower ( nbiot_Cell1, tsc_ServingCellRS_EPRE );
   
    fl_VZ_IMSLess_TC_6_8_NBIOT_Body ();    
    f_NBIOT_TestBody_Set(false);
      
    //And now remove the cell(s)
    f_NBIOT_ReleaseAllCells();
    log ("######## Re-configure back the value of parameter MAX_CONN and MAX_CONN_T for Admin PDN to its origional in DUT.");

    f_NBIOT_PreliminaryPass(__FILE__, __LINE__, v_TcName &" PASSED");
  
  
  }
    
     function fl_VZ_IMSLess_TC_6_8_NBIOT_Body () runs on NBIOT_PTC
  {
    template (value) GPRS_Timer v_GT3402 := cs_GprsTimer_tv('17'O, tsc_GprsTimerUnit_1min, '00100'B); // 4 minutes
    var float v_T3482 := 7.8; // TC failing due to 100 millisec difference sometimes so keeping 0.1 sec as tollerance   
    timer t_T3482;  
    var integer loopCnt := 1;
    var float v_Timer_1 := (1.0 * 60.0); // 1minute
    timer t_Timer_1;
    var float v_Timer_2 := 45.0; //15s  
    timer t_Timer_2;
    var charstring v_TcName := testcasename() &": ";
    timer t_Procedure_Guard_Timer;
    var float tsc_GuardProcedureTimer_240 := 240.0;
     var NAS_MSG_Indication_Type v_NAS_Ind;  
     var NB_SRB_Identity_Type v_SrbId := f_NBIOT_GetSrb1Id(CONTROL_PLANE);
          
      var template (present) B3_Type v_PDNType := (f_GetPdnType(), '101'B, '001'B);
   
      var template (present) NAS_UL_Message_Type v_ESMMessage := cr_CIOT_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach, v_PDNType);
   
   
 
    log(v_TcName,"Step3: Verify that the DUT has an Internet application that will attempt to connect as soon as the DUT is powered on.");
      
    /* 3. Power the DUT on and allow it to find LTE service. */ 
    log(v_TcName,"Step4: Power the DUT on and allow it to find LTE service.");
    f_UT_SwitchOnUE(UT, true);
    
   t_Procedure_Guard_Timer.start(tsc_GuardProcedureTimer_240); //Guard Procedure Started
               
    /*  4. Verify that the DUT successfully establishes an RRC connection and attaches to the LTE network. */
     v_NAS_Ind := f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell1,
                                                  cr_EstablishmentCause_NB_Any,
                                                  cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                    cr_CIOT_ATTACH_REQUEST(cr_AdditionalUpdateType_CIOT), //Table 22.5.7a.3.3-4
                                                                                    v_ESMMessage)); 


    f_NBIOT_InitialRegistration_Step5_14(nbiot_Cell1, CONTROL_PLANE, STATE2_NB_CONNECTED_UPDATED, v_NAS_Ind); 
 
    log(v_TcName,"Step5: Verified that the DUT sends an Attach Request and that the network responds with an Attach Accept with the T3402 timer set to 4 minutes");  
    log(v_TcName,"Step5: UE Attach Success and connects to the Internet PDN.");

     log(v_TcName, "Default Procedure Guard Timer Stopped");
    t_Procedure_Guard_Timer.stop; //Guard Procedure Ended
      
    log(v_TcName,"Step6: Configure the test equipment such that the network sends a Detach Request to the DUT with re-attach required in the Detach Type IE");  
    log(v_TcName,"Step6: Sending Detach Request to UE with reattach required in the Detach Type");  
     SRB.send(cas_NB_SRB1bis_NasPdu_REQ(nbiot_Cell1, cs_TimingInfo_Now,
                                 cs_NAS_Request(tsc_SHT_IntegrityProtected_Ciphered,
                                                cs_508_DETACH_REQUEST_MT(cs_DetachType(tsc_DetachMT_ReAttach), omit))));
    
    log(v_TcName, "Step7: Expecting Detach Accept from the UE");
    SRB.receive(car_NB_SRB1bis_NasPdu_IND(
                nbiot_Cell1,
                cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered,
                                  cr_508_DETACH_ACCEPT)));
    
    log(v_TcName,"Step7: Verified that the DUT detaches from the LTE network.");
      
    log(v_TcName,"Step8: Configure the test equipment such that the network does not respond to the PDN Connectivity Request for the Admin PDN.");

    f_NBIOT_RRC_ConnectionRelease( nbiot_Cell1 );  
//    f_EUTRA_RRC_ConnectionRelease_Local(eutra_Cell1, f_EUTRA_GetNextSendOccasion(eutra_Cell1)); // local release @sic R5s140252 sic@
    
     t_Procedure_Guard_Timer.start(tsc_GuardProcedureTimer_240); //Guard Procedure Started
            
    log(v_TcName,"Step9: Verify that the DUT successfully establishes an RRC connection and Attaches to the LTE network");
     v_NAS_Ind := f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell1,
                                                  cr_EstablishmentCause_NB_Any,
                                                  cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                    cr_CIOT_ATTACH_REQUEST(cr_AdditionalUpdateType_CIOT), //Table 22.5.7a.3.3-4
                                                                                    v_ESMMessage)); 


    f_NBIOT_InitialRegistration_Step5_14(nbiot_Cell1, CONTROL_PLANE, STATE2_NB_CONNECTED_UPDATED, v_NAS_Ind); 
    log(v_TcName,"Step9: DUT Attached to the LTE network");

    log(v_TcName, "Default Procedure Guard Timer Stopped");
    t_Procedure_Guard_Timer.stop; //Guard Procedure Ended
      
    log(v_TcName,"Step10: Initiate the test application (see section TEST EQUIPMENT CONFIGURATION) so that the UE needs to make a PDN connection request for the Admin PDN");  
    f_NBIOT_InitiatePdnConn("Step10");
    
    log(v_TcName,"Step11: Verify that the UE sends a NAS PDN Connectivity Request and that the network does not respond to the NAS PDN Connectivity Request message");
      

    alt
    {
        
       [] SRB.receive ( car_NB_SRB_NasPdu_IND ( nbiot_Cell1, v_SrbId,
                                                cr_NAS_Indication ( tsc_SHT_IntegrityProtected_Ciphered,
                                                                    cr_PDNConnReqAdditionalPDN(?))))
          {}
    }
    log(v_TcName,"Step11: Received PDN connection Req for ADMIN. Not sending any Response from SS.");  

    log(v_TcName,"Step12: Verify that the UE waits at least T3482 seconds before sending another NAS PDN Connectivity Request "& 
                  "and that the network does not respond to the NAS PDN Connectivity Request message");  
      
    t_T3482.start(v_T3482);
      
    alt
    {
       [] SRB.receive ( car_NB_SRB_NasPdu_IND ( nbiot_Cell1, v_SrbId,
                                                cr_NAS_Indication ( tsc_SHT_IntegrityProtected_Ciphered,
                                                                    cr_PDNConnReqAdditionalPDN(?,  cr_AccessPointName(tsc_Octet_ADMIN_APN)))))
        {
          t_T3482.stop;
          f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, v_TcName&"Step12: UE sent unexpected PDN Request before expiry of T3482 timer");
       }
              
       []t_T3482.timeout
       {
          log(v_TcName,"Step12: UE successfully waited for T3482 time before Sending Another PDN Request");  
       }
    }

    log(v_TcName,"Step12: Waiting for another PDN connection Req for ADMIN.");  
     SRB.receive ( car_NB_SRB_NasPdu_IND ( nbiot_Cell1, v_SrbId,
                                                cr_NAS_Indication ( tsc_SHT_IntegrityProtected_Ciphered,
                                                                    cr_PDNConnReqAdditionalPDN(?))));
       
    log(v_TcName,"Step12: Received PDN connection Req for ADMIN. Not sending any Response from SS.");  

    log(v_TcName,"Step13: Verify that the UE makes three more NAS PDN Connectivity requests, each separated by at least T3482 seconds, " &
                 "and that the network does not respond to the NAS PDN Connectivity Request messages");    
      
    while(loopCnt < 4)
    {
       t_T3482.start(v_T3482); 
        
       alt
       {
           [] SRB.receive ( car_NB_SRB_NasPdu_IND ( nbiot_Cell1, v_SrbId,
                                                cr_NAS_Indication ( tsc_SHT_IntegrityProtected_Ciphered,
                                                                    cr_PDNConnReqAdditionalPDN(?))))
          {
             t_T3482.stop;
             f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, v_TcName&"Step13: UE sent unexpected PDN Request before expiry of T3482 timer");
          }
                   
          []t_T3482.timeout
          {
             log(v_TcName,"Step13: UE successfully waited for T3482 time before Sending Another PDN Request");  
          }
       }
        
       log(v_TcName,"Step13: Waiting for another PDN connection Req for ADMIN. #Retry : ",loopCnt);  
        SRB.receive ( car_NB_SRB_NasPdu_IND ( nbiot_Cell1, v_SrbId,
                                                cr_NAS_Indication ( tsc_SHT_IntegrityProtected_Ciphered,
                                                                    cr_PDNConnReqAdditionalPDN(?))));
       
        
       log(v_TcName,"Step13: Received PDN connection Req for ADMIN. Not sending any Response from SS.");  
        
 
       loopCnt := loopCnt + 1; 
    }
     
    // 1 minute check  
    log(v_TcName, "Step14: Verify that the UE does not request the connection over the air for the next 1 minute plus a random time between 0 and 15 seconds");  
    v_Timer_1 := (1.0 * 60.0);
    t_Timer_1.start(v_Timer_1);
    
    alt
    {
        [] SRB.receive ( car_NB_SRB_NasPdu_IND ( nbiot_Cell1, v_SrbId,
                                                cr_NAS_Indication ( tsc_SHT_IntegrityProtected_Ciphered,
                                                                    cr_PDNConnReqAdditionalPDN(?))))
       {
          f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, v_TcName&"Step14: UE sent unexpected PDN Request before expiry of 1 minute + random time");
       }
      []t_Timer_1.timeout
       {
          log(v_TcName,"Step14: Verified that UE did not Request for Admin PDN for 1 minute.");  
       }
    }
      
    // 0 to 15 sec check  
      t_Timer_2.start(180.0);
      alt{
        [] t_Timer_2.timeout{}
      }
     /*t_Procedure_Guard_Timer.start(tsc_GuardProcedureTimer_240); //Guard Procedure Started
     
     v_NAS_Ind := f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell1,
                                                  cr_EstablishmentCause_NB_Any,
                                                  cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                    cr_CIOT_ATTACH_REQUEST(cr_AdditionalUpdateType_CIOT), //Table 22.5.7a.3.3-4
                                                                                    v_ESMMessage)); 


    f_NBIOT_InitialRegistration_Step5_14(nbiot_Cell1, CONTROL_PLANE, STATE2_NB_CONNECTED_UPDATED, v_NAS_Ind); 
   log(v_TcName, "Default Procedure Guard Timer Stopped");
    t_Procedure_Guard_Timer.stop; //Guard Procedure Ended*/
    
     f_NBIOT_InitiatePdnConn("Step15");
    
      
      
      t_Timer_2.start(v_Timer_2);
    
    
     
      
      
    alt{
     [] SRB.receive ( car_NB_SRB_NasPdu_IND ( nbiot_Cell1, v_SrbId,
                                                cr_NAS_Indication ( tsc_SHT_IntegrityProtected_Ciphered,
                                                                    cr_PDNConnReqAdditionalPDN(?))))
       {
           log(v_TcName,"Step15: Received PDN connection Req for ADMIN. Not sending any Response from SS.");  
           t_Timer_2.stop;
       }
      [] t_Timer_2.timeout{
         f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, v_TcName&"Step15: UE did not sent expected PDN Request within 0-45 sec time");
     
      }
    
    }
         
      
    log(v_TcName,"Step16: Verify that the UE waits at least T3482 seconds before sending another NAS PDN Connectivity Request "& 
                  "and that the network does not respond to the NAS PDN Connectivity Request message");  
      
    t_T3482.start(v_T3482);

    alt
    {
       [] SRB.receive ( car_NB_SRB_NasPdu_IND ( nbiot_Cell1, v_SrbId,
                                                cr_NAS_Indication ( tsc_SHT_IntegrityProtected_Ciphered,
                                                                    cr_PDNConnReqAdditionalPDN(?))))
        {
          t_T3482.stop;
          f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, v_TcName&"Step16: UE sent unexpected PDN Request before expiry of T3482 timer");
       }
              
       []t_T3482.timeout
       {
          log(v_TcName,"Step16: UE successfully waited for T3482 time before Sending Another PDN Request");  
       }
    }

    log(v_TcName,"Step16: Waiting for another PDN connection Req for ADMIN.");  
      SRB.receive ( car_NB_SRB_NasPdu_IND ( nbiot_Cell1, v_SrbId,
                                                cr_NAS_Indication ( tsc_SHT_IntegrityProtected_Ciphered,
                                                                    cr_PDNConnReqAdditionalPDN(?))));
       

    log(v_TcName,"Step16: Received PDN connection Req for ADMIN. Not sending any Response from SS.");  

    log(v_TcName,"Step17: Verify that the UE makes three more NAS PDN Connectivity requests, each separated by at least T3482 seconds, " &
                 "and that the network does not respond to the NAS PDN Connectivity Request messages");    
    
    loopCnt := 1;    
    while(loopCnt < 4)
    {
       t_T3482.start(v_T3482);
 
       alt
       {
          [] SRB.receive ( car_NB_SRB_NasPdu_IND ( nbiot_Cell1, v_SrbId,
                                                cr_NAS_Indication ( tsc_SHT_IntegrityProtected_Ciphered,
                                                                    cr_PDNConnReqAdditionalPDN(?))))
        {
             t_T3482.stop;
             f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, v_TcName&"Step17: UE sent unexpected PDN Request before expiry of T3482 timer");
          }
                     
          []t_T3482.timeout
          {
             log(v_TcName,"Step17: UE successfully waited for T3482 time before Sending Another PDN Request");  
          }
       }
        
       log(v_TcName,"Step17: Waiting for another PDN connection Req for ADMIN. #Retry : ",loopCnt);  
        SRB.receive ( car_NB_SRB_NasPdu_IND ( nbiot_Cell1, v_SrbId,
                                                cr_NAS_Indication ( tsc_SHT_IntegrityProtected_Ciphered,
                                                                    cr_PDNConnReqAdditionalPDN(?))));
         
       log(v_TcName,"Step17: Received PDN connection Req for ADMIN. Not sending any Response from SS.");  
        
       loopCnt := loopCnt + 1; 
    }

    //Step18,19: 2 minute check and 5 PDN Retry  
    v_Timer_1 := (2.0 * 60.0) - (1.0); // 1 sec tollerance 
    f_VZ_IMSLess_TC_6_8_RepeatPdnNoRsp(v_Timer_1, 18, 2);

    //Step20,21: 8 minute check and 5 PDN Retry  
    v_Timer_1 := (8.0 * 60.0)- (1.0); // 1 sec tollerance 
    f_VZ_IMSLess_TC_6_8_RepeatPdnNoRsp(v_Timer_1, 20, 8);
      
    //Step22,23: 15 minute check and 5 PDN Retry  
    v_Timer_1 := (15.0 * 60.0)- (1.0); // 1 sec tollerance 
    f_VZ_IMSLess_TC_6_8_RepeatPdnNoRsp(v_Timer_1, 22, 15);
     
    //Step24: 15 minute timer again
    t_Timer_1.start(v_Timer_1);

    alt
    {
       [] SRB.receive ( car_NB_SRB_NasPdu_IND ( nbiot_Cell1, v_SrbId,
                                                cr_NAS_Indication ( tsc_SHT_IntegrityProtected_Ciphered,
                                                                    cr_PDNConnReqAdditionalPDN(?))))
       {
          f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, v_TcName&"Step24: UE sent unexpected PDN Request before expiry of 15 minute timer");
       }
            
       []t_Timer_1.timeout
       {
          log(v_TcName,"Step24: Verified that UE did not Request for Admin PDN for 15 minute.");  
       }
    } 
    log(v_TcName,"Step25: Power of the device.");  
    f_UT_SwitchOffUE(UT, false);
  } 
 
    
    
    
    
      function f_VZ_IMSLess_TC_6_9_NBIOT(charstring p_APN, charstring TestPlan_Name) runs on NBIOT_PTC
  {
      var float v_Rtr_Solicit_Interval := 3.5;
    var integer v_Max_Rtr_Solicit := 3;
    var integer count := 1;  
    timer t_MinTmr := 180.0;
    timer t_MaxTmr := 240.0;  
    var charstring v_ClientIpAddress := px_IPv6_Address1_UE;  
    var EPS_BearerIdentity v_EpsBearerId2 := '6'H;      
    var UInt32_Type v_ValidLifetime := 5 * 60; // 5 mins
    var UInt32_Type v_PreferredLifetime := 5 * 60; // 5 mins
    var UInt16_Type v_RouterLifetime := 4 * 60; // 4 mins
    var octetstring v_RouterAdv;
    var default v_Additional_Default_Handler;
    var charstring v_TcName := testcasename() &": ";
    timer t_Procedure_Guard_Timer;
    var NAS_MSG_Indication_Type v_NAS_Ind;
     var template (present) B3_Type v_PDNType := (f_GetPdnType(), '101'B, '001'B);
    var template (present) NAS_UL_Message_Type v_ESMMessage := cr_CIOT_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach, v_PDNType);
    var float tsc_GuardProcedureTimer_240 := 240.0;
      
    log(v_TcName,"<<<<<<<<<< Test Execution Started >>>>>>>>>>");
    log(v_TcName, "NETWORK FAILS TO REFRESH THE IPV6 ADDRESS FOR THE INTERNET PDN, IPV4 ADDRESS ASSIGNED");
    
    log(v_TcName, "Step1: Configure the test setup so that the DUT finds service on a single eNodeB with cell_id X1 = 1, PLMN id Y1 = " &
                  f_ConvertPLMNtoString(f_Asn2Nas_PlmnId(valueof(cs_HPLMN_Def))) & ", and TAI Z1 = ", oct2int(tsc_TAC1));
    f_NBIOT_Init (c1); 
      
      
    
    
    f_NBIOT_CellConfig_Def(nbiot_Cell1, CONTROL_PLANE); 
   
    f_NBIOT_SetCellPower(nbiot_Cell1, tsc_ServingCellRS_EPRE); 
    log(v_TcName, "Step1: Cell configuration successful"); 
      
    log(v_TcName, "Step2: Configure the test equipment such that the network will allow the UE to attach and connect to the " &
                          "Internet PDN and the Internet PDN will respond to the UE's initial request for an IPv6 Router Solicitation message " &
                          "but will not respond to all subsequent requests");
    
    log(v_TcName, "Step3: Configure the test equipment so that the network will assign an IPv6 Interface ID and " &
                          "an IPv4 address when the device connects to the Internet PDN");

    log(v_TcName, "Step4: Configured DUT which has an Internet application that will attempt to connect as soon as " &
                          "the DUT is powered on and an application that will connect to the Admin PDN");     
      
    
    log (v_TcName, "Step5: Powering ON the DUT and allowing it to find LTE service");  
    f_UT_SwitchOnUE(UT);
      
    t_Procedure_Guard_Timer.start(tsc_GuardProcedureTimer_240); //Guard Procedure Started
                
    v_NAS_Ind := f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell1,
                                                  cr_EstablishmentCause_NB_Any,
                                                  cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                    cr_CIOT_ATTACH_REQUEST(cr_AdditionalUpdateType_CIOT), //Table 22.5.7a.3.3-4
                                                                                    v_ESMMessage)); 

    f_NBIOT_InitialRegistration_Step5_14(nbiot_Cell1, CONTROL_PLANE, STATE2_NB_CONNECTED_UPDATED, v_NAS_Ind); 
   log (v_TcName, "Step6: DUT successfully established RRC connection, attached to the network and connected to the Internet PDN");

     log(v_TcName, " Default Procedure Guard Timer Stopped");
    t_Procedure_Guard_Timer.stop; //Guard Procedure Ended
      
    
         
    t_MinTmr.start;  
    t_MaxTmr.start;
      
    //Waiting for router solicitation to be received within 3-4 mins
    log(v_TcName, "Step8: Verifying that the DUT sends a Router Solicit msg to the Internet PDN after between 3 and 4 mins ",
                        "have elapsed from the receipt of the first Router Advertisement msg");
    f_VZ_Rtr_Solicit_Min_Max_Retry(t_MinTmr, t_MaxTmr, "Step8");  

    log(v_TcName, "Step9: Network does not respond to the Router Solicitation messages");  
      
    //Max retries of router solicitation message  
    f_VZ_NBIOT_Msg_Retransmit_Retry(v_Rtr_Solicit_Interval, count, v_Max_Rtr_Solicit, "Step9");  
    log(v_TcName, "Step9: Successfully verified that the UE does not send more than MAX_RTR_SOLICITATION = 3 Router ",
                        "Solicitation messages separated by RTR_SOLICITATION_INTERVAL = 4 seconds");

    log(v_TcName, "Step10: Verify that the UE stays connected to the Internet PDN and uses the IPv4 address for all" &
                  "communication with the Internet PDN.");
    f_VZ_NBIOT_Verify_Internet_Pdn_Connected(120.0, '5'H, "Step10");
    log(v_TcName, "Step10: Verified that the UE stays connected to the Internet PDN and uses the IPv4 address for all " &
              "communication with the Internet PDN");    
     f_NBIOT_SS_ConfigRachPreambleIndMode(nbiot_Cell1, disable);
    f_NBIOT_TestBody_Set(false);

    log(v_TcName, "Postamble Execution started");
    f_NBIOT_ReleaseAllCells();
    log(v_TcName, "Cell is released"); 
    f_UT_SwitchOffUE (UT, false);
    log(v_TcName, ": UE is Switched Off");
    f_NBIOT_PreliminaryPass(__FILE__, __LINE__, v_TcName & " PASSED: Successfully verified that the UE follows the required retry algorithm when the PDN does not refresh the IPv6 address of the Internet PDN.");
    log(v_TcName, "Postamble Execution done");
    log (v_TcName, "<<<<<<<<<< Test Execution Finished >>>>>>>>>>");  
      
      
  }
    
    
   function f_VZ_IMSLess_TC_6_10_NBIOT(charstring TestPlan_Name) runs on NBIOT_PTC
  { var charstring v_TcName := testcasename() & ": ";
      var float v_Rtr_Solicit_Interval := 3.5;
    var integer v_Max_Rtr_Solicit := 3;
    var integer count := 0;
    var NAS_MSG_Indication_Type v_NAS_Ind;
    var UInt32_Type v_ValidLifetime := 5 * 60; // 5 mins
    var UInt32_Type v_PreferredLifetime := 5 * 60; // 5 mins
    var UInt16_Type v_RouterLifetime := 4 * 60; // 4 mins
    var charstring v_ClientIpAddress := px_IPv6_Address1_UE;  
    var octetstring v_RouterAdv;
    timer t_Procedure_Guard_Timer;
    var float tsc_GuardProcedureTimer_240 := 240.0;
    var template (present) B3_Type v_PDNType := (f_GetPdnType(), '101'B, '001'B);
    var template (present) NAS_UL_Message_Type v_ESMMessage := cr_CIOT_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach, v_PDNType);
   

    log(v_TcName, "NETWORK FAILS TO ASSIGN AN IPV6 ADDRESS FOR THE INTERNET PDN ON NETWORK ATTACH, IPV4 ADDRESS ASSIGNED TO INTERNET");
    
    log(v_TcName, "Step1: Configure the test setup so that the DUT finds service on a single eNodeB with cell_id X1 = 1, PLMN id Y1 = ", 
                  f_ConvertPLMNtoString(f_Asn2Nas_PlmnId(valueof(cs_HPLMN_Def))) & ", and TAI Z1 = ", oct2int(tsc_TAC1));
    f_NBIOT_Init (c1); 
      
    

    f_NBIOT_CellConfig_Def(nbiot_Cell1, CONTROL_PLANE); 
      
    f_NBIOT_SetCellPower(nbiot_Cell1, tsc_ServingCellRS_EPRE); 
    log(v_TcName, "Step1: Cell configuration successful");

    log(v_TcName, "Step2: Configured the test equipment such that the network will allow the UE to attach and connect to the Internet PDN " &
                  "but the network will not respond to the UE‘s IPv6 Router Solicitation messages for the Internet PDN.");

    log(v_TcName, "Step3: Configured the test equipment so that the network will assign an IPv6 Interface ID and IPv4 address when the device connects to the Internet PDN.");

    log(v_TcName, "Step4: Configured an application at DUT to connect to Internet pdn as soon as DUT ispowered ON.");

    
    log(v_TcName, "Step5: Power the DUT on and allow it to find LTE service.");
    f_UT_SwitchOnUE(UT);

    t_Procedure_Guard_Timer.start(tsc_GuardProcedureTimer_240);//Guard Procedure Started
            
    log(v_TcName, "Step6: Verify that the DUT successfully establishes an RRC connection, attaches to the network, " &
                  "and connects to the Internet PDN.");
   v_NAS_Ind := f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell1,
                                                  cr_EstablishmentCause_NB_Any,
                                                  cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                    cr_CIOT_ATTACH_REQUEST(cr_AdditionalUpdateType_CIOT), //Table 22.5.7a.3.3-4
                                                                                     cr_CIOT_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach, (f_GetPdnType(), '101'B, '001'B)))); 



    f_NBIOT_InitialRegistration_Step5_14(nbiot_Cell1, CONTROL_PLANE, STATE2_NB_CONNECTED_UPDATED, v_NAS_Ind);   
    log(v_TcName, "Step6: DUT successfully established RRC connection, attached to the network and connected to the Internet PDN");

    log(v_TcName, "Default Procedure Guard Timer Stopped");
    t_Procedure_Guard_Timer.stop; //Guard Procedure Ended

    log(v_TcName, "Step7: Verify that the UE sends IPv6 Router Solicitation messages to the network for the Internet PDN and that the network does not respond.");
    f_VZ_NBIOT_Receive_Router_Solicit_Msg_6_10("Step7", v_TcName, tsc_EpsDefaultBearerId);

    count := count + 1;
    log(v_TcName, "Step7: Received Router Solicitation Msg from the DUT. Count = ", count, ". Not responding to this msg");
    log(v_TcName, "Step8: Verify that the UE does not send more than MAX_RTR_SOLICITATION (3 per RFC 4861) " &
                  "Router Solicitation messages separated by RTR_SOLICITATION_INTERVAL (4) seconds.");
    f_VZ_NBIOT_Msg_Retransmit_Retry(v_Rtr_Solicit_Interval, count, v_Max_Rtr_Solicit,  "Step8");
    log(v_TcName, "Step8: Successfully verified that the UE does not send more than MAX_RTR_SOLICITATION = 3 " &
                  "Router Solicitation messages separated by RTR_SOLICITATION_INTERVAL = 4 seconds");

    log(v_TcName, "Step9: Verify that the UE stays connected to the Internet PDN and uses the IPv4 address for all " &
                  "communication with the Internet PDN.");
    f_VZ_NBIOT_Verify_Internet_Pdn_Connected(120.0,  '5'H, "Step9");
    log(v_TcName, "Step9: Verified that the UE stays connected to the Internet PDN and uses the IPv4 address for all " &
              "communication with the Internet PDN");    

    log(v_TcName, "Step10: Re-configure the network to respond to the UE's IPv6 Router Solicitation messages for the Internet PDN.");
    //f_EUTRA_RRC_ConnectionRelease( eutra_Cell1 );
    //f_EUTRA_RRC_ConnectionRelease_Local (eutra_Cell1,f_EUTRA_GetNextSendOccasion(eutra_Cell1));
    f_Delay(2.0);
    f_NBIOT_ReleaseAllCells();
    f_NBIOT_Init (c1); 
    f_NBIOT_CellConfig_Def(nbiot_Cell1, CONTROL_PLANE); 
    f_Delay(2.0);
    f_NBIOT_SetCellPower(nbiot_Cell1, tsc_ServingCellRS_EPRE );

    log(v_TcName,"Step11: Power Cycle the DUT");
    fl_UT_ApplyCommand(UT, cas_UT_Req(POWER_CYCLE, NO_CNF_REQUIRED));  

    t_Procedure_Guard_Timer.start(tsc_GuardProcedureTimer_240); //Guard Procedure Started
                      
    log(v_TcName, "Step12: Verify that the UE successfully attaches to the LTE network and connects to the Internet PDN.");
    v_NAS_Ind := f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell1,
                                                  cr_EstablishmentCause_NB_Any,
                                                  cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                    cr_CIOT_ATTACH_REQUEST(cr_AdditionalUpdateType_CIOT), //Table 22.5.7a.3.3-4
                                                                                     cr_CIOT_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach, (f_GetPdnType(), '101'B, '001'B)))); 



    f_NBIOT_InitialRegistration_Step5_14(nbiot_Cell1, CONTROL_PLANE, STATE2_NB_CONNECTED_UPDATED, v_NAS_Ind);   
    log(v_TcName, "Step12: DUT successfully attached to the LTE network and connected to the Internet PDN.");
    f_VZ_NBIOT_Receive_Router_Solicit_Msg_6_10("Step12", v_TcName, tsc_EpsDefaultBearerId);

    log(v_TcName, "Default Procedure Guard Timer Stopped");
    t_Procedure_Guard_Timer.stop; //Guard Procedure Ended

   
     f_NBIOT_SS_ConfigRachPreambleIndMode(nbiot_Cell1, disable);
   
    f_NBIOT_TestBody_Set(false);

    f_NBIOT_ReleaseAllCells();
  
    log(v_TcName,"Step13: Power the device off."); 
    f_UT_SwitchOffUE (UT, false);
    log(v_TcName,"Step13: UE is Powered off");

    f_NBIOT_PreliminaryPass(__FILE__, __LINE__, v_TcName &"PASSED");
 }
      
     function f_TC_VZ_DATARETRYIMSLESS_6_11(charstring TestPlan_Name) runs on NBIOT_PTC
  {
    var charstring v_TcName := testcasename() & ": ";
    var GutiParameters_Type v_GutiParameters;
    var NAS_PlmnId v_PLMN;

    log(v_TcName, "NETWORK FAILS TO ASSIGN AN IPV6 ADDRESS FOR THE INTERNET PDN ON NETWORK ATTACH, NO IPV4 ADDRESS ASSIGNED");
    
    log(v_TcName, "Step1: Configure the test setup so that the DUT finds service on a single eNodeB with cell_id X1 = 1, PLMN id Y1 = ", 
                  f_ConvertPLMNtoString(f_Asn2Nas_PlmnId(valueof(cs_HPLMN_Def))) & ", and TAI Z1 = ", oct2int(tsc_TAC1),
                  ". Configure the test equipment such that the network sets the T3402 timer to 4 minutes in the Attach Accept message");
    f_NBIOT_Init (c1);

    f_NBIOT_CellConfig_Def(nbiot_Cell1, CONTROL_PLANE);
    
    f_NBIOT_SetCellPower(nbiot_Cell1, tsc_ServingCellRS_EPRE);
   
    fl_VZ_IMSLess_TC_6_11_NBIOT_Body (TestPlan_Name);    
    f_NBIOT_TestBody_Set(false);

    f_NBIOT_ReleaseAllCells();
    log(v_TcName,"Power the device off."); 
    f_UT_SwitchOffUE (UT, false);
    log(v_TcName,"UE is Powered off");
    f_NBIOT_PreliminaryPass(__FILE__, __LINE__, v_TcName &" PASSED");
  }
    
    function fl_VZ_IMSLess_TC_6_11_NBIOT_Body (charstring TestPlan_Name) runs on NBIOT_PTC
  {
    template (value) GPRS_Timer v_GT3402 := cs_GprsTimer_tv('17'O, tsc_GprsTimerUnit_1min, '00100'B); // 4 minutes
    var charstring v_TcName := testcasename() &": ";
    var float v_Rtr_Solicit_Interval := 3.5;
    var integer v_Max_Rtr_Solicit := 3;
    var integer count := 1;
    timer t_T3402;
    var float v_T3402 := (4.0 * 60.0);
    var NAS_MSG_Indication_Type v_NasInd;  
     var EUTRA_ASN1_RRC_TransactionIdentifier_Type v_RRC_TI := tsc_RRC_TI_Def;
   
    var UInt32_Type v_ValidLifetime := 5 * 60; // 5 mins
    var UInt32_Type v_PreferredLifetime := 5 * 60; // 5 mins
    var UInt16_Type v_RouterLifetime := 4 * 60; // 4 mins
    var charstring v_ClientIpAddress := px_IPv6_Address1_UE;  
    var octetstring v_RouterAdv;
    timer t_Procedure_Guard_Timer;
    var float tsc_GuardProcedureTimer_240 := 240.0;
    var NAS_MSG_Indication_Type v_NAS_Ind; 
    var template (present) B3_Type v_PDNType := (f_GetPdnType(), '101'B, '001'B);
    var template (present) NAS_UL_Message_Type v_ESMMessage := cr_CIOT_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach, v_PDNType);
   

    log(v_TcName, "Step2: Verify that the device under test (DUT) has an Internet application that will attempt to connect to the " &
                  "Internet PDN as soon as the DUT is powered on and finds service on the LTE network.");

    log(v_TcName, "Step3: Power the DUT on and allow it to find LTE service");
    f_UT_SwitchOnUE(UT);

    t_Procedure_Guard_Timer.start(tsc_GuardProcedureTimer_240); //Guard Procedure Started

     v_NAS_Ind :=  f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell1,
                                               cr_EstablishmentCause_NB_Any,
                                               cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                  cr_CIOT_ATTACH_REQUEST(cr_AdditionalUpdateType_CIOT),
                                                                                  v_ESMMessage)); 


    f_NBIOT_InitialRegistration_Step5_14(nbiot_Cell1, CONTROL_PLANE, STATE2_NB_CONNECTED_UPDATED, v_NAS_Ind, v_GT3402);
    
    log(v_TcName, "Step4: Verified that the DUT sends an Attach Request and that the network responds with an Attach Accept " &
                  "with the T3402 timer set to 4 minutes.");       
    log(v_TcName,"Step4: UE Attach Success and connects to the Internet PDN.");

    log(v_TcName, "Default Procedure Guard Timer Stopped");
    t_Procedure_Guard_Timer.stop; //Guard Procedure Ended

    log(v_TcName, "Step5: Configure the test equipment such that the network sends a Detach Request to the DUT with " &
                  "re-attach required in the Detach Type IE.");
    log(v_TcName, "Step5: Sending Detach Request to UE with reattach required in the Detach Type");
    SRB.send(cas_NB_SRB1bis_NasPdu_REQ(nbiot_Cell1,
                                       cs_TimingInfo_Now,
                                       cs_NAS_Request(tsc_SHT_IntegrityProtected_Ciphered,
                                                      cs_508_DETACH_REQUEST_MT(cs_DetachType(tsc_DetachMT_ReAttach), omit))));

    log(v_TcName, "Step6: Expecting Detach Accept from the UE");
    alt{
  [] SRB.receive(car_NB_SRB1bis_NasPdu_IND(nbiot_Cell1,
                                          cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered,
                                                            cr_508_DETACH_ACCEPT))){}
         
  []  SRB.receive(car_NB_SRB_NasPdu_IND(nbiot_Cell1,
                            tsc_SRB1bis,
                            cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered,
                                             cr_ESM_DATA_TRANSPORT (tsc_EpsDefaultBearerId, cr_UserDataContainer(?, ?), omit))))  { // @sic R5s180192 sic@
          repeat;         
    }
    }
   log(v_TcName, "Step6: Verified that the DUT detaches from the LTE network.");

    //f_EUTRA_RRC_ConnectionRelease_Local (eutra_Cell1,f_EUTRA_GetNextSendOccasion(eutra_Cell1));
    f_NBIOT_RRC_ConnectionRelease(nbiot_Cell1);
    log(v_TcName, "Step7: Configure the test equipment such that the network will allow the UE to attach and connect to the " &
                  "Internet PDN but the network will not respond to the UEs IPv6 Router Solicitation messages for the Internet PDN.");
    
    log(v_TcName, "Step8: Configure the test equipment to assign only ipv6 interface address but not IPV4 when device connects to Internet pdn");

    t_Procedure_Guard_Timer.start(tsc_GuardProcedureTimer_240); //Guard Procedure Started
                    
    log(v_TcName, "Step9: Verify that the DUT successfully establishes an RRC connection, attaches to the network, " &
                  "and connects to the Internet PDN.");
     v_NAS_Ind :=  f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell1,
                                               cr_EstablishmentCause_NB_Any,
                                               cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                  cr_CIOT_ATTACH_REQUEST(cr_AdditionalUpdateType_CIOT),
                                                                                  v_ESMMessage)); 


    f_NBIOT_InitialRegistration_Step5_14(nbiot_Cell1, CONTROL_PLANE, STATE2_NB_CONNECTED_UPDATED, v_NAS_Ind, v_GT3402);
   log(v_TcName, "Step9: DUT successfully established RRC connection, attached to the network and connected to the Internet PDN");

    log(v_TcName, "Default Procedure Guard Timer Stopped");
    t_Procedure_Guard_Timer.stop; //Guard Procedure Ended

    log(v_TcName, "Step10: Verify that the UE sends IPv6 Router Solicitation messages to the network for the Internet PDN " &
                  "and that the network does not respond.");
    f_VZ_NBIOT_Receive_Router_Solicit_Msg_6_10( "Step10", v_TcName, tsc_EpsDefaultBearerId);
    log(v_TcName, "Step10: Received Router Solicitation Msg from the DUT. Count = ", count, ". Not responding to this msg");

    log(v_TcName, "Step11: Verify that the UE does not send more than MAX_RTR_SOLICITATION (3 per RFC 4861) " &
                  "Router Solicitation messages separated by RTR_SOLICITATION_INTERVAL (4) seconds.");
    f_VZ_NBIOT_Msg_Retransmit_Retry(v_Rtr_Solicit_Interval, count, v_Max_Rtr_Solicit, "Step11");
    log(v_TcName, "Step11: Successfully verified that the UE does not send more than MAX_RTR_SOLICITATION = 3 " &
                  "Router Solicitation messages separated by RTR_SOLICITATION_INTERVAL = 4 seconds");

    log(v_TcName, "Step12: Verify that the UE detaches from the LTE network. and starts timer T3402.");
     log(v_TcName, "Step12: Expecting Detach Request from the UE");
      t_Procedure_Guard_Timer.start(tsc_GuardProcedureTimer_240); //Guard Procedure Started
    
   alt{
      []SRB.receive(car_NB_SRB1bis_NasPdu_IND(nbiot_Cell1,
                                            cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered,
                                                              cr_508_DETACH_REQUEST_MO(?,?,?)))){}
   []SRB.receive ( car_NB_SRB_NasPdu_IND ( nbiot_Cell1, tsc_SRB1bis,
                                                cr_NAS_Indication ( tsc_SHT_IntegrityProtected_Ciphered,
                                                                    cr_PDNConnReqAdditionalPDN(('001'B, '011'B), cr_AccessPointName_Any))))
          {
              repeat;
           }
    }
    log(v_TcName, "Default Procedure Guard Timer Stopped");
     t_Procedure_Guard_Timer.stop; //Guard Procedure Ended
        SRB.send(cas_NB_SRB_NasPdu_REQ(nbiot_Cell50,
                                     tsc_SRB1bis,
                                     cs_TimingInfo_Now,
                                     cs_NAS_Request(tsc_SHT_IntegrityProtected_Ciphered,
                                                    cs_508_DETACH_ACCEPT)));
        
        
     
     
    
    log(v_TcName, "Step12: Verified that the DUT detaches from the LTE network.");
    t_T3402.start (f_NBIOT_SetTimerToleranceMin( nonProtocolTimer, v_T3402 ));

    //f_EUTRA_RRC_ConnectionRelease_Local (eutra_Cell1,f_EUTRA_GetNextSendOccasion(eutra_Cell1));
    f_NBIOT_RRC_ConnectionRelease(nbiot_Cell1);
    log(v_TcName, "Step13: Monitor the UE for 4 minutes and verify that the UE does not initiate attachment attempts before T3402 expires.");
    alt
    {
      [] SRB.check (receive(car_NB_SRB0_RrcPdu_IND(nbiot_Cell2, cr_RRCConnectionRequest_NB(cr_EstablishmentCause_NB_Any, ?))))
      {
          t_T3402.stop;
           v_NAS_Ind :=  f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell1,
                                               cr_EstablishmentCause_NB_Any,
                                               cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                  cr_CIOT_ATTACH_REQUEST(cr_AdditionalUpdateType_CIOT),
                                                                                  v_ESMMessage)); 
          f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, v_TcName &"Step13: UE sent Attach Request while the T3402 timer running");
    
       }
       []t_T3402.timeout
       {
           log(v_TcName,"Step13: Not Received Attach Request message while T3402 timer running");
       }
    }

    log(v_TcName, "Step14: While T3402 is running, re-configure the network to respond to the UE's IPv6 Router Solicitation messages on the Internet PDN.");
    
    t_Procedure_Guard_Timer.start(tsc_GuardProcedureTimer_240); //Guard Procedure Started
            
    log(v_TcName, "Step15: Upon expiry of timer T3402, verify that the UE re-attaches to the network and connects to the Internet PDN.");
     v_NAS_Ind :=  f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell1,
                                               cr_EstablishmentCause_NB_Any,
                                               cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                  cr_CIOT_ATTACH_REQUEST(cr_AdditionalUpdateType_CIOT),
                                                                                  v_ESMMessage)); 


    f_NBIOT_InitialRegistration_Step5_14(nbiot_Cell1, CONTROL_PLANE, STATE2_NB_CONNECTED_UPDATED, v_NAS_Ind, v_GT3402);
    log(v_TcName, "Step15: DUT successfully attached to the network and connected to the Internet PDN");

    log(v_TcName, "Default Procedure Guard Timer Stopped");
    t_Procedure_Guard_Timer.stop; //Guard Procedure Ended

     f_NBIOT_SS_ConfigRachPreambleIndMode(nbiot_Cell1, disable);
   
  }
    
    
   function f_TC_VZ_DATARETRYIMSLESS_6_13_Test1(charstring TestPlan_Name) runs on NBIOT_PTC
  {
    var EUTRA_ASN1_RRC_TransactionIdentifier_Type v_RRC_TI := tsc_RRC_TI_Def;
    var integer p_SelectedPlmnId := 1; 
    var charstring v_TcName := testcasename() & ": ";
    timer t_Procedure_Guard_Timer;
     
    log(v_TcName, "Step1: Configure the test setup so that the DUT finds service on a single eNodeB with cell_id X1 = 1, PLMN id Y1 = ", 
                  f_ConvertPLMNtoString(f_Asn2Nas_PlmnId(valueof(cs_HPLMN_Def))) & ", and TAI Z1 = ", oct2int(tsc_TAC1));
    log(v_TcName, "Step1: Configure the DUT with MAX_CONN parameter to 2, the MAX_CONN_T parameter to 300 seconds, WAIT_TIME parameter to 60 seconds for Admin PDN");
    log(v_TcName, "##### Manual configuration of WAIT_TIME parameter is required for Step 18 and Step 29 #####");
    f_NBIOT_Init (c1);
    log(v_TcName, "Step2: Configure the test equipment such that the network will allow the UE to attach to the LTE network and connect to the Admin PDN");
    
    f_NBIOT_CellConfig_Def (nbiot_Cell1, CONTROL_PLANE);
    f_NBIOT_SetCellPower ( nbiot_Cell1, tsc_ServingCellRS_EPRE );
    
    f_TC_VZ_DATARETRYIMSLESS_6_13_Body_step3_step45( TestPlan_Name);
    f_TC_VZ_DATARETRYIMSLESS_6_13_Body_step46_step51_Test1( TestPlan_Name);
    f_TC_VZ_DATARETRYIMSLESS_6_13_Body_step52_LastStep(52);
    f_NBIOT_TestBody_Set(false);
     
    f_NBIOT_ReleaseAllCells();

    f_UT_SwitchOffUE (UT, false);
    f_NBIOT_PreliminaryPass(__FILE__, __LINE__, v_TcName &"PASSED");

  } 
    
  function f_TC_VZ_DATARETRYIMSLESS_6_13_Body_step3_step45( charstring TestPlan_Name) runs on NBIOT_PTC
  {
    var NAS_MSG_Indication_Type v_NasInd;
    var charstring v_TcName := testcasename() & ": ";
    var EPS_BearerIdentity v_EpsBearerId2 := '6'H;
    var template (value) LinkedEpsBearerIdentity v_LinkedEpsBearerId := {idValue := hex2bit(v_EpsBearerId2)};
    var NB_SRB_COMMON_IND v_ReceivedAsp;
    var template  AccessPointName v_ExpectedAccessPointName := cr_AccessPointName(tsc_Octet_ADMIN_APN); //cr_AccessPointName_Any;
    var charstring v_apn;
    var B3_Type v_PDN_RequestType := '001'B; 
    var charstring v_UpperCasePattern_apn;
    var PDN_CONNECTIVITY_REQUEST v_PDNConnReq;
    var float v_Wait_Timer := ( 15.0 * 60.0 ); // 15 minute 
    var float v_Interval_Timer := (60.0); // 1 minute
    timer t_WaitTime;
    timer t_IntervalTime;
    timer t_Procedure_Guard_Timer;    
     var float tsc_GuardProcedureTimer_240 := 240.0;
    var charstring v_sApn := "vzwadmin";
     var NB_SRB_Identity_Type v_SrbId := f_NBIOT_GetSrb1Id(CONTROL_PLANE);
    var template (present) B3_Type v_PDNType := (f_GetPdnType(), '101'B, '001'B);
       var template (present) NAS_UL_Message_Type v_ESMMessage := cr_CIOT_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach, v_PDNType);
   var boolean v_wait_for_attach := true;
       
      
    log(v_TcName,"Step3: Power the DUT on and allow it to find LTE service.");
    f_UT_SwitchOnUE(UT, true);
      
    t_Procedure_Guard_Timer.start(tsc_GuardProcedureTimer_240); //Guard Procedure Started
            
    v_NasInd := f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell1,
                                               cr_EstablishmentCause_NB_Any,
                                               cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                  cr_CIOT_ATTACH_REQUEST(cr_AdditionalUpdateType_CIOT),
                                                                                  v_ESMMessage)); 
      
    f_NBIOT_InitialRegistration_Step5_14(nbiot_Cell1, CONTROL_PLANE, STATE2_NB_CONNECTED_UPDATED, v_NasInd);
  
      log(v_TcName,"Step4: Verified that the DUT successfully establishes an RRC connection and attaches to the LTE network");  

    log(v_TcName, "Default Procedure Guard Timer Stopped");
    t_Procedure_Guard_Timer.stop; //Guard Procedure Ended
      
    log(v_TcName,"Step5: Send the AT test command to define a PDP context (+CGACT) on the DUT for the Admin PDN"); 
   
     fl_UT_ApplyCommand(UT, cas_UT_Req(INITIATE_ADMIN_TEST_APP, NO_CNF_REQUIRED));
    log(v_TcName,"Step6: Verify that the UE sends a NAS PDN Connectivity Request and successfully connects to the Admin PDN");
    f_NBIOT_TriggerAdditionalPDN_Modified (nbiot_Cell1, CONTROL_PLANE, ?, cs_AccessPointName (tsc_Octet_Lower_ADMIN_APN), v_sApn);
    log(v_TcName,"Step6: Verified that the UE successfully connected to the Admin PDN");
      
    log(v_TcName,"Step7: Send the AT test command to deactivate the PDP context (+CGACT) on the DUT for the Admin PDN");
    fl_UT_ApplyCommand(UT, cas_UT_Req(DEACTIVATE_ADMIN_APN, NO_CNF_REQUIRED));
    log(v_TcName,"Step8: Verify that the UE disconnects from the Admin PDN");
    f_Vz_NBIOT_VerifyPdnDisConnect(nbiot_Cell1, v_LinkedEpsBearerId, v_EpsBearerId2); 
    log(v_TcName,"Step8: Admin PDN disconnected successfully");
      
    log(v_TcName,"Step9: Wait one minute, then send the AT test command to define a PDP context (+CGACT) on the DUT for the Admin PDN");
    log(v_TcName,"Step9: One minute timer started");
    //f_Delay(60.0);
    log(v_TcName,"Step9: One minute timer elapsed");
    //fl_UT_ApplyCommand(UT, cas_UT_Req(INITIATE_ADMIN_TEST_APP, NO_CNF_REQUIRED));
    log(v_TcName,"Step10: Verify that the UE sends a second NAS PDN Connectivity Request and successfully re-connects to the Admin PDN");
   f_NBIOT_TriggerAdditionalPDN_Modified (nbiot_Cell1, CONTROL_PLANE, ?, cs_AccessPointName (tsc_Octet_Lower_ADMIN_APN), v_sApn);
     log(v_TcName,"Step10: Verified that the UE successfully connected to the Admin PDN");
      
    log(v_TcName,"Step11: Send the AT test command to deactivate the PDP context (+CGACT) on the DUT for the Admin PDN");
    fl_UT_ApplyCommand(UT, cas_UT_Req(DEACTIVATE_ADMIN_APN, NO_CNF_REQUIRED));
    log(v_TcName,"Step12: Verify that the UE disconnects from the Admin PDN");
    f_Vz_NBIOT_VerifyPdnDisConnect(nbiot_Cell1, v_LinkedEpsBearerId, v_EpsBearerId2); 
    log(v_TcName,"Step12: Admin PDN disconnected successfully");
      
    log(v_TcName,"Step13: At one minute intervals, send the AT test command to define a PDP context (+CGACT) on the DUT for the Admin PDN");
    f_VZ_DefineDeactivateAdminPDN_common(v_Wait_Timer,v_Interval_Timer,14, 18);
    
    if (match(testcasename(), "TC_VZ_DATARETRYIMSLESS_6_13_Test2"))
    { //Step 18 is same for test2 but in test 1, step 17 and 18 are swapped
        log(v_TcName,"Step18: ##### Reconfigure the DUT so that the WAIT_TIME parameter is set to 180 seconds#####");
        log(v_TcName,"Step18: Timer of 30 seconds started for user to complete above manual step");
        f_Delay(30.0);
    }  
    log(v_TcName,"Step19: At 30 second intervals, send the AT test command to define a PDP context (+CGACT) on the DUT for the Admin PDN");
    v_Wait_Timer := (3.0*60.0); 
    v_Interval_Timer := 30.0;
    f_VZ_DefineDeactivateAdminPDN_common(v_Wait_Timer,v_Interval_Timer,20);
      
    log(v_TcName,"Step24: At one minute intervals, send the AT test command to define a PDP context (+CGACT) on the DUT for the Admin PDN");
    if (match(testcasename(), "TC_VZ_DATARETRYIMSLESS_6_13_Test2"))
    {
        v_Wait_Timer := (2.0*60.0); 
    }
    else
    {
        v_Wait_Timer := (3.0*60.0); //In test 1, timer is increased to 3mins
    }
    v_Interval_Timer := 60.0;
    f_VZ_DefineDeactivateAdminPDN_common(v_Wait_Timer,v_Interval_Timer,25, 28);
    if (match(testcasename(), "TC_VZ_DATARETRYIMSLESS_6_13_Test2"))
    {  //step 28 and 29 swapped for test1 
        log(v_TcName,"Step29: ##### Reconfigure the DUT so that the WAIT_TIME parameter is set to 30 seconds#####");
        log(v_TcName,"Step29: Timer of 30 seconds started for user to complete above manual step");
        f_Delay(30.0);
    } 
    log(v_TcName,"Step30: At 15 seconds intervals, send the AT test command to define a PDP context (+CGACT) on the DUT for the Admin PDN");
    v_Wait_Timer := (30.0); 
    v_Interval_Timer := 15.0;
    f_VZ_DefineDeactivateAdminPDN_common(v_Wait_Timer,v_Interval_Timer,31);
      
    log("Step35: At one minute intervals, send the AT test command to define a PDP context (+CGACT) on the DUT for the Admin PDN");
    v_Wait_Timer := (15.0*60.0); 
    v_Interval_Timer := 60.0;
    //f_UT_TriggerActivateAdminApn(UT);
    
    log(v_TcName,"Step35: Starting ",float2int(v_Wait_Timer)/60," minutes timer");
    t_WaitTime.start(v_Wait_Timer);
    log(v_TcName,"Step35: Starting ",float2int(v_Interval_Timer)/60," minute interval timer");
    t_IntervalTime.start(v_Interval_Timer);
    log(v_TcName,"Step36: Verify that the UE waits at least 15 minutes before sending another NAS PDN Connectivity Request for the Admin PDN");
    log(v_TcName,"Step37: While the 15 minute timer is running, Re-configure the network so that the UE finds service on an eNodeB with a PLMN id equal to Y4 = " & f_ConvertPLMNtoString(f_Asn2Nas_PlmnId(valueof(cs_HPLMN_311_481)))
     & " where Y4 is not equal to Y1. The frequency of the second PLMN shall be the same as the first");
      
    f_NBIOT_ReleaseAllCells();
    log(v_TcName, "Step37: Modifying PLMN to Y4 = 311481");
    f_NBIOT_CellInfo_SetPLMN_Common(nbiot_Cell1, {cs_HPLMN_311_481}, -, false);
    f_NBIOT_CellConfig_Def( nbiot_Cell1, CONTROL_PLANE);
    f_Delay(2.0);
    f_NBIOT_SetCellPower ( nbiot_Cell1, tsc_ServingCellRS_EPRE );
    
    log(v_TcName,"Step38: Verify that the UE waits until the 15 minute timer has expired before sending another NAS PDN Connectivity Request for the Admin PDN");
      
    alt 
    {
      []SRB.receive ( car_NB_SRB_NasPdu_IND ( nbiot_Cell1, v_SrbId,
                                                cr_NAS_Indication ( tsc_SHT_IntegrityProtected_Ciphered,
                                                                    cr_PDNConnReqAdditionalPDN(?,  cr_AccessPointName(tsc_Octet_Lower_ADMIN_APN), v_PDN_RequestType ))))-> value v_ReceivedAsp 
       {
        
	      log(v_TcName, "Step38: UE sent unexpected PDN Connectivity Request message");
          f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, "UE sent PDN Connectivity Request message for Deactivated APN");
          
 	    }
      
          
       [v_wait_for_attach]  SRB.receive(car_NB_SRB0_RrcPdu_IND(nbiot_Cell1, cr_RRCConnectionRequest_NB ( cr_EstablishmentCause_NB_Any, ? ) ))
      {
                log("Tracking area update Received");
                
                f_NBIOT_TrackingAreaUpdate_Step1_5(nbiot_Cell1, CONTROL_PLANE);
                log(v_TcName, "Step38: UE established connection on reconfigured PLMN");
                v_wait_for_attach := false;
                repeat;
            }
       []t_WaitTime.timeout
      {
        t_IntervalTime.stop;
        log(v_TcName, float2int(v_Wait_Timer/60.0)," minutes timer elapsed, successfully verified Step 38, UE did not send PDN Connectivity Reuest for ADMIN ");
      }
       []t_IntervalTime.timeout
      {
        log(v_TcName, float2int(v_Interval_Timer/60.0)," minute timer elapsed, sending AT test command to define a PDP context (+CGACT) on the DUT for the Admin PDN");
        fl_UT_ApplyCommand(UT, cas_UT_Req(INITIATE_ADMIN_TEST_APP, NO_CNF_REQUIRED));
        t_IntervalTime.start(v_Interval_Timer);
        repeat;
      }
    }
    log(v_TcName,"Step39: Verify the UE successfully connects to the Admin PDN");
    fl_UT_ApplyCommand(UT, cas_UT_Req(INITIATE_ADMIN_TEST_APP, NO_CNF_REQUIRED));
	  f_NBIOT_TriggerAdditionalPDN_Modified (nbiot_Cell1, CONTROL_PLANE, ?, cs_AccessPointName (tsc_Octet_Lower_ADMIN_APN), v_sApn);
   
      //f_EUTRA_Optionally_ActivateAdditionalPDN(eutra_Cell1,v_EpsBearerId2,tsc_Octet_ADMIN_APN,tsc_DRB2,-,"Step39",true);
    log(v_TcName,"Step39: Verified that the UE successfully connected to the Admin PDN");
    
    log(v_TcName,"Step40: Send AT test command to deactivate the PDP context (+CGACT) on the DUT for the Admin PDN");
    fl_UT_ApplyCommand(UT, cas_UT_Req(DEACTIVATE_ADMIN_APN, NO_CNF_REQUIRED));
    log(v_TcName,"Step41: Verify that the UE disconnects from the Admin PDN");
    f_Vz_NBIOT_VerifyPdnDisConnect(nbiot_Cell1, v_LinkedEpsBearerId, v_EpsBearerId2); 
    log(v_TcName,"Step41: Admin PDN disconnected successfully");
      
    v_Wait_Timer := (30.0); 
    t_WaitTime.start(v_Wait_Timer);
    
    log(v_TcName,"Step42: Verify that the UE waits at least 30 seconds before sending another NAS PDN Connectivity Request for the Admin PDN");
      
    alt 
    {
        []SRB.receive ( car_NB_SRB_NasPdu_IND ( nbiot_Cell1, v_SrbId,
                                                cr_NAS_Indication ( tsc_SHT_IntegrityProtected_Ciphered,
                                                                    cr_PDNConnReqAdditionalPDN(?,  cr_AccessPointName(tsc_Octet_Lower_ADMIN_APN), v_PDN_RequestType ))))-> value v_ReceivedAsp 
       {
        
          t_IntervalTime.stop;
          t_WaitTime.stop;
	      log(v_TcName, "Step42: UE sent PDN Connectivity Request message");
          f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, "UE sent PDN Connectivity Request message for Deactivated APN");
        }
            
       []t_WaitTime.timeout
      {
        t_IntervalTime.stop;
        log(v_TcName, float2int(v_Wait_Timer/60.0)," minute timer elapsed, successfully verified UE did not send PDN Connectivity Reuest for Admin PDN ");
      }
    }
    log(v_TcName,"Step43: Verify the UE successfully connects to the Admin PDN");
    fl_UT_ApplyCommand(UT, cas_UT_Req(INITIATE_ADMIN_TEST_APP, NO_CNF_REQUIRED));
	f_NBIOT_TriggerAdditionalPDN_Modified (nbiot_Cell1, CONTROL_PLANE, ?, cs_AccessPointName (tsc_Octet_Lower_ADMIN_APN), v_sApn);
    log(v_TcName,"Step43: Verified that the UE successfully connected to the Admin PDN");
 
    log(v_TcName,"Step44: Send AT test command to deactivate the PDP context (+CGACT) on the DUT for the Admin PDN");
     fl_UT_ApplyCommand(UT, cas_UT_Req(DEACTIVATE_ADMIN_APN, NO_CNF_REQUIRED));
    log(v_TcName,"Step45: Verify that the UE disconnects from the Admin PDN");
    f_Vz_NBIOT_VerifyPdnDisConnect(nbiot_Cell1, v_LinkedEpsBearerId, v_EpsBearerId2); 
    log(v_TcName, "Step45: Admin PDN disconnected successfully");
     
  }
    
  function f_TC_VZ_DATARETRYIMSLESS_6_13_Body_step46_step51_Test1( charstring TestPlan_Name) runs on NBIOT_PTC
  {
    var NAS_MSG_Indication_Type v_NasInd;
    var charstring v_TcName := testcasename() & ": ";
    var EPS_BearerIdentity v_EpsBearerId2 := '6'H;
    var NB_SRB_COMMON_IND v_ReceivedAsp;
    var template  AccessPointName v_ExpectedAccessPointName := cr_AccessPointName(tsc_Octet_Lower_ADMIN_APN); //cr_AccessPointName_Any;
    var charstring v_apn;
    var B3_Type v_PDN_RequestType := '001'B; 
    var charstring v_UpperCasePattern_apn;
    var PDN_CONNECTIVITY_REQUEST v_PDNConnReq;
    var float v_Wait_Timer; 
    var float v_Intermediate_Timer := (10.0*60.0);
    timer t_WaitTime;
    timer t_IntermediateTime;
    var charstring v_sApn := "vzwadmin";
     var NB_SRB_Identity_Type v_SrbId := f_NBIOT_GetSrb1Id(CONTROL_PLANE);
      var template (present) B3_Type v_PDNType := (f_GetPdnType(), '101'B, '001'B);
      var template (present) NAS_UL_Message_Type v_ESMMessage := cr_CIOT_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach, v_PDNType);
   
    
    v_Wait_Timer := (15.0*60.0); 
    t_WaitTime.start(v_Wait_Timer);
    t_IntermediateTime.start(v_Intermediate_Timer);
    
    log(v_TcName,"Step46: Verify that the UE waits at least 15 minutes before sending another NAS PDN Connectivity Request for the Admin PDN");
      
    alt 
    { 
        []SRB.receive ( car_NB_SRB_NasPdu_IND ( nbiot_Cell1, v_SrbId,
                                                cr_NAS_Indication ( tsc_SHT_IntegrityProtected_Ciphered,
                                                                    cr_PDNConnReqAdditionalPDN(?,  cr_AccessPointName(tsc_Octet_Lower_ADMIN_APN), v_PDN_RequestType ))))-> value v_ReceivedAsp 
       {
          t_IntermediateTime.stop;
          t_WaitTime.stop;
          f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, "UE sent PDN Connectivity Request message for Deactivated APN");
 	    }
              
   
      []t_IntermediateTime.timeout
      {
        log(v_TcName,"Step47: ", float2int(v_Intermediate_Timer/60.0)," minute timer elapsed, power off the UE for 5 minutes ");
        log(v_TcName, "Powering off the DUT");
        f_UT_SwitchOffUE(UT, false);
        log(v_TcName,"UE is Powered off");  
        f_NBIOT_ReleaseAllCells();
         f_NBIOT_CellInfo_SetPLMN_Common(nbiot_Cell1, {cs_HPLMN_311_481}, -, false);
        f_Delay(2.0);   
        f_NBIOT_CellConfig_Def( nbiot_Cell1, CONTROL_PLANE);
        f_NBIOT_SetCellPower ( nbiot_Cell1, tsc_ServingCellRS_EPRE );
        f_Delay(2.0);
        repeat;
      }
      []t_WaitTime.timeout
       {
           log(v_TcName, float2int(v_Wait_Timer/60.0)," minute timer elapsed, successfully verified Step46 as UE did not send PDN Connectivity Request for ADMIN ");                 
       }
    }
    log(v_TcName,"Step48: 5 minutes timer elapsed, power on the UE");
    f_UT_SwitchOnUE(UT, true); 
    log(v_TcName,"Step49: Waiting for Attach Request from UE");
     v_NasInd :=    f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell1,
                                                  cr_EstablishmentCause_NB_Any,
                                                  cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                    cr_CIOT_ATTACH_REQUEST(cr_AdditionalUpdateType_CIOT), //Table 22.5.7a.3.3-4
                                                                                    v_ESMMessage)); 
    f_NBIOT_InitialRegistration_Step5_14(nbiot_Cell1, CONTROL_PLANE, STATE2_NB_CONNECTED_UPDATED, v_NasInd);
  log(v_TcName,"Step49: Verified that the DUT successfully establishes an RRC connection and attaches to the LTE network");
      
    
    log(v_TcName,"Step50: Sending the AT test command to define a PDP context (+CGACT) on the DUT for the Admin PDN");
    v_Wait_Timer := (5.0*60.0); 
    log(v_TcName,"Step51: Verify that the UE sends a NAS PDN Connectivity Request within 5 minutes and successfully connects to the Admin PDN");
    log(v_TcName,"Step51: Starting",float2int(v_Wait_Timer/60.0),"minute timer");
    t_WaitTime.start(v_Wait_Timer);
     fl_UT_ApplyCommand(UT, cas_UT_Req(INITIATE_ADMIN_TEST_APP, NO_CNF_REQUIRED));
    f_NBIOT_TriggerAdditionalPDN_Modified (nbiot_Cell1, CONTROL_PLANE, ?, cs_AccessPointName (tsc_Octet_Lower_ADMIN_APN), v_sApn);
    

  }
    
  function f_TC_VZ_DATARETRYIMSLESS_6_13_Body_step52_LastStep(integer step_no) runs on NBIOT_PTC
  {
    var NAS_MSG_Indication_Type v_NasInd;
    var charstring v_TcName := testcasename() & ": ";
    var EPS_BearerIdentity v_EpsBearerId2 := '6'H;
    var template (value) LinkedEpsBearerIdentity v_LinkedEpsBearerId := {idValue := hex2bit(v_EpsBearerId2)};
    var NB_SRB_COMMON_IND v_ReceivedAsp;
    var template  AccessPointName v_ExpectedAccessPointName := cr_AccessPointName(tsc_Octet_Lower_ADMIN_APN); //cr_AccessPointName_Any;
    var charstring v_apn;
    var B3_Type v_PDN_RequestType := '001'B; 
    var charstring v_UpperCasePattern_apn;
    var PDN_CONNECTIVITY_REQUEST v_PDNConnReq;
    timer t_WaitTime;
    timer t_IntervalTime;
    var float v_Wait_Timer := (60.0); 
    var float v_Interval_Timer;
    var charstring v_sApn := "vzwadmin";
     var NB_SRB_Identity_Type v_SrbId := f_NBIOT_GetSrb1Id(CONTROL_PLANE);
   
    log(v_TcName,"Step",step_no,": Send AT test command to deactivate the PDP context (+CGACT) on the DUT for the Admin PDN");
    fl_UT_ApplyCommand(UT, cas_UT_Req(DEACTIVATE_ADMIN_APN, NO_CNF_REQUIRED));
      
    log(v_TcName,"Step",step_no,": Verify that the UE disconnects from the Admin PDN");
    f_Vz_NBIOT_VerifyPdnDisConnect(nbiot_Cell1, v_LinkedEpsBearerId, v_EpsBearerId2); 
    log(v_TcName,"Step",step_no+1,": Admin PDN disconnected successfully");
      
    log(v_TcName,"Step",step_no+2,": Wait one minute, then send the AT test command to define a PDP context (+CGACT) on the DUT for the Admin PDN");

    log(v_TcName,"Step",step_no+2,": Starting ",float2int(v_Wait_Timer/60.0)," minute timer");
    t_WaitTime.start(v_Wait_Timer);
    
    
    alt 
    {
      []SRB.receive ( car_NB_SRB_NasPdu_IND ( nbiot_Cell1, v_SrbId,
                                                cr_NAS_Indication ( tsc_SHT_IntegrityProtected_Ciphered,
                                                                    cr_PDNConnReqAdditionalPDN(?,  cr_AccessPointName(tsc_Octet_Lower_ADMIN_APN), v_PDN_RequestType ))))-> value v_ReceivedAsp 
       {
          t_WaitTime.stop;
	      log(v_TcName,"Step",step_no+2,": UE sent PDN Connectivity Request message");
          f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, "UE sent PDN Connectivity Request message for Deactivated APN");
 	    }
            
       []t_WaitTime.timeout
      {
        log(v_TcName," ", float2int(v_Wait_Timer/60.0)," minutes timer elapsed, successfully verified UE did not send PDN Connectivity Reuest for Admin PDN");
      }
    }
    log(v_TcName,"Step",step_no+3,": Verify that the UE sends a second NAS PDN Connectivity Request and successfully re-connects to the Admin PDN");
     fl_UT_ApplyCommand(UT, cas_UT_Req(INITIATE_ADMIN_TEST_APP, NO_CNF_REQUIRED));
	 f_NBIOT_TriggerAdditionalPDN_Modified (nbiot_Cell1, CONTROL_PLANE, ?, cs_AccessPointName (tsc_Octet_Lower_ADMIN_APN), v_sApn);
  //f_EUTRA_Optionally_ActivateAdditionalPDN(eutra_Cell1,v_EpsBearerId2,tsc_Octet_ADMIN_APN,tsc_DRB2,-,"Step10",true);
    log(v_TcName,"Step",step_no+3,": Verified that the UE successfully connected to the Admin PDN");
      
    log(v_TcName,"Step",step_no+4,": Send the AT test command to deactivate the PDP context (+CGACT) on the DUT for the Admin PDN");
    fl_UT_ApplyCommand(UT, cas_UT_Req(DEACTIVATE_ADMIN_APN, NO_CNF_REQUIRED));
    
      
    log(v_TcName,"Step",step_no+5,": Verify that the UE disconnects from the Admin PDN");
    f_Vz_NBIOT_VerifyPdnDisConnect(nbiot_Cell1, v_LinkedEpsBearerId, v_EpsBearerId2); 
    log(v_TcName,"Step",step_no+5,": Admin PDN disconnected successfully");
      
    log(v_TcName,"Step",step_no+6,": At 30 seconds intervals, send the AT test command to define a PDP context (+CGACT) on the DUT for the Admin PDN");
    v_Wait_Timer := (15.0*60.0); 
    v_Interval_Timer := 30.0;
    //f_VZ_DefineDeactivateAdminPDN_common(v_Wait_Timer,v_Interval_Timer,step_no+7);
    //f_UT_TriggerActivateAdminApn(UT);
    log(v_TcName,"Step",step_no+7,": Starting ",float2int(v_Wait_Timer/60.0)," minutes timer");
    t_WaitTime.start(v_Wait_Timer);
    log(v_TcName,"Step",step_no+7,": Starting ",float2int(v_Interval_Timer/60.0)," interval timer");
    t_IntervalTime.start(v_Interval_Timer);
    
    log(v_TcName,"Step",step_no+7,": Verify that the UE waits at least ", float2int(v_Wait_Timer/60.0), " minutes before sending another NAS PDN Connectivity Request for the Admin PDN");
      
    alt 
    {
         []SRB.receive ( car_NB_SRB_NasPdu_IND ( nbiot_Cell1, v_SrbId,
                                                cr_NAS_Indication ( tsc_SHT_IntegrityProtected_Ciphered,
                                                                    cr_PDNConnReqAdditionalPDN(?,  cr_AccessPointName(tsc_Octet_Lower_ADMIN_APN), v_PDN_RequestType ))))-> value v_ReceivedAsp 
     {
          t_IntervalTime.stop;
          t_WaitTime.stop;
	      log(v_TcName,"Step",step_no+7,": UE sent PDN Connectivity Request message");
          f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, "UE sent PDN Connectivity Request message for Deactivated APN");
 	    }
              
       []t_WaitTime.timeout
      {
        t_IntervalTime.stop;
        log(v_TcName," ", float2int(v_Wait_Timer/60.0)," minutes timer elapsed, successfully verified UE did not send PDN Connectivity Reuest for Admin PDN");
      }
       []t_IntervalTime.timeout
      {
        log(v_TcName," ", float2int(v_Interval_Timer/60.0)," minute interval elapsed, sending AT test command to define a PDP context (+CGACT) on the DUT for the Admin PDN");
         fl_UT_ApplyCommand(UT, cas_UT_Req(INITIATE_ADMIN_TEST_APP, NO_CNF_REQUIRED));
   
        t_IntervalTime.start(v_Interval_Timer);
        repeat;
      }
    }
    log(v_TcName,"Step",step_no+8,": Verify the UE successfully connects to the Admin PDN");
     fl_UT_ApplyCommand(UT, cas_UT_Req(INITIATE_ADMIN_TEST_APP, NO_CNF_REQUIRED));
   
     f_NBIOT_TriggerAdditionalPDN_Modified (nbiot_Cell1, CONTROL_PLANE, ?, cs_AccessPointName (tsc_Octet_Lower_ADMIN_APN), v_sApn);
  //f_EUTRA_Optionally_ActivateAdditionalPDN(eutra_Cell1,v_EpsBearerId2,tsc_Octet_ADMIN_APN,tsc_DRB2,-,"Step15",true);
    log(v_TcName,"Step",step_no+8,": Verified that the UE successfully connected to the Admin PDN");
    f_NBIOT_SS_ConfigRachPreambleIndMode(nbiot_Cell1, disable);

  }
    
    
    
    
    
    
    
    function f_TC_VZ_DATARETRYIMSLESS_6_13_Test2(charstring TestPlan_Name) runs on NBIOT_PTC
  {
      
    
    var integer p_SelectedPlmnId := 1; 
    var charstring v_TcName := testcasename() & ": ";
     
    log(v_TcName, "Step1: Configure the test setup so that the DUT finds service on a single eNodeB with cell_id X1 = 1, PLMN id Y1 = ", 
                  f_ConvertPLMNtoString(f_Asn2Nas_PlmnId(valueof(cs_HPLMN_Def))) & ", and TAI Z1 = ", oct2int(tsc_TAC1));
    log(v_TcName, "Step1: Configure the DUT with MAX_CONN parameter to 2, the MAX_CONN_T parameter to 300 seconds, WAIT_TIME parameter to 60 seconds for Admin PDN");
    log(v_TcName, "##### Manual configuration of WAIT_TIME parameter is required for Step 18 and Step 29 #####");
    f_NBIOT_Init (c1);
    log(v_TcName, "Step2: Configure the test equipment such that the network will allow the UE to attach to the LTE network and connect to the Admin PDN");
    
    f_NBIOT_CellConfig_Def (nbiot_Cell1, CONTROL_PLANE);
    f_NBIOT_SetCellPower ( nbiot_Cell1, tsc_ServingCellRS_EPRE );
    
    f_TC_VZ_DATARETRYIMSLESS_6_13_Body_step3_step45( TestPlan_Name);
    f_TC_VZ_DATARETRYIMSLESS_6_13_Body_step46_step51_Test2( TestPlan_Name);
    f_TC_VZ_DATARETRYIMSLESS_6_13_Body_step52_LastStep(53);
    f_NBIOT_TestBody_Set(false);
     
    f_NBIOT_ReleaseAllCells();

    f_UT_SwitchOffUE (UT, false);
    f_NBIOT_PreliminaryPass(__FILE__, __LINE__, v_TcName &"PASSED");

  }
    
    
     function f_TC_VZ_DATARETRYIMSLESS_6_13_Body_step46_step51_Test2( charstring TestPlan_Name) runs on NBIOT_PTC
  {
    var NAS_MSG_Indication_Type v_NasInd;
    
    var charstring v_TcName := testcasename() & ": ";
    var EPS_BearerIdentity v_EpsBearerId2 := '6'H;
    var NB_SRB_COMMON_IND v_ReceivedAsp;
    var template  AccessPointName v_ExpectedAccessPointName := cr_AccessPointName(tsc_Octet_ADMIN_APN); //cr_AccessPointName_Any;
    var charstring v_sApn := "vzwadmin";
    var B3_Type v_PDN_RequestType := '001'B; 
    var charstring v_UpperCasePattern_apn;
    var PDN_CONNECTIVITY_REQUEST v_PDNConnReq;
    var float v_Wait_Timer := ( 15.0 * 60.0 ); // 15 minute 
    var float v_Intermediate_Timer := (10.0*60.0);
    var float v_PowerOff_Timer := (5.0*60.0);
    timer t_WaitTime;
    timer t_IntermediateTime;
    timer t_PowerOffTime;
    timer t_IntermediateTime2;
    timer t_IntermediateTime3;
    var NB_SRB_Identity_Type v_SrbId := f_NBIOT_GetSrb1Id(CONTROL_PLANE);
      var template (present) B3_Type v_PDNType := (f_GetPdnType(), '101'B, '001'B);
    var template (present) NAS_UL_Message_Type v_ESMMessage := cr_CIOT_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach, v_PDNType);
  
    
    v_Wait_Timer := (15.0*60.0); 
    t_WaitTime.start(v_Wait_Timer);
    t_IntermediateTime.start(v_PowerOff_Timer);
    
    log(v_TcName,"Step46: Verify that the UE waits at least 15 minutes before sending another NAS PDN Connectivity Request for the Admin PDN");
      
    alt 
    {
         []SRB.receive ( car_NB_SRB_NasPdu_IND ( nbiot_Cell1, v_SrbId,
                                                cr_NAS_Indication ( tsc_SHT_IntegrityProtected_Ciphered,
                                                                    cr_PDNConnReqAdditionalPDN(?,  cr_AccessPointName(tsc_Octet_Lower_ADMIN_APN), v_PDN_RequestType ))))-> value v_ReceivedAsp 
       {
          t_IntermediateTime.stop;
          t_WaitTime.stop;
          f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, "UE sent PDN Connectivity Request message for Deactivated APN");
 	   }
      
   
      []t_IntermediateTime.timeout
      {
        log(v_TcName, float2int(v_PowerOff_Timer/60.0)," minutes timer elapsed, power off the UE for 5 minutes ");
        log(v_TcName, "Powering off the DUT");
        f_UT_PowerOffUE(UT);
        t_IntermediateTime2.start(v_PowerOff_Timer);
        log(v_TcName,"UE is Powered off");  
        f_NBIOT_ReleaseAllCells();
        
         f_NBIOT_CellInfo_SetPLMN_Common(nbiot_Cell1, {cs_HPLMN_311_481}, -, false);
        f_Delay(2.0);   
        f_NBIOT_CellConfig_Def( nbiot_Cell1, CONTROL_PLANE);
        f_NBIOT_SetCellPower ( nbiot_Cell1, tsc_ServingCellRS_EPRE );
        f_Delay(2.0);
        
        alt 
            {
             []t_IntermediateTime2.timeout
              {
                log(v_TcName,"Step48: 5 minutes timer elapsed, power on the UE");
                f_UT_SwitchOnUE(UT, true); 
                 v_NasInd :=    f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell1,
                                                  cr_EstablishmentCause_NB_Any,
                                                  cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                    cr_CIOT_ATTACH_REQUEST(cr_AdditionalUpdateType_CIOT), //Table 22.5.7a.3.3-4
                                                                                    v_ESMMessage)); 
                f_NBIOT_InitialRegistration_Step5_14(nbiot_Cell1, CONTROL_PLANE, STATE2_NB_CONNECTED_UPDATED, v_NasInd);
  
                t_IntermediateTime3.start(v_Intermediate_Timer);
                log(v_TcName,"Step49: Verified that the DUT successfully establishes an RRC connection and attaches to the LTE network");
                fl_UT_ApplyCommand(UT, cas_UT_Req(INITIATE_ADMIN_TEST_APP, NO_CNF_REQUIRED));
                log(v_TcName,"Step50: Sent the AT test command to define a PDP context (+CGACT) on the DUT for the Admin PDN");
                log(v_TcName,"Step51: Timer started for 10 minutes for Step 51");  
                
              }
            }
          
        
       repeat;
      }
      []t_WaitTime.timeout
       {
           log(v_TcName, float2int(v_Wait_Timer/60.0)," minute timer elapsed, successfully verified Step46 as UE did not send PDN Connectivity Reuest for ADMIN ");                 
           repeat;
       }
      []t_IntermediateTime3.timeout
              {
                log(v_TcName, float2int(v_Intermediate_Timer/60.0)," minute timer elapsed, successfully verified Step51 as UE did not send PDN Connectivity Reuest for ADMIN ");
              }
    }
    
    log(v_TcName,"Step52: Waiting for PDN Connectivity Request from UE");
  f_NBIOT_TriggerAdditionalPDN_Modified (nbiot_Cell1, CONTROL_PLANE, ?, cs_AccessPointName (tsc_Octet_Lower_ADMIN_APN), v_sApn);
     log(v_TcName,"Step52: Verified that the UE successfully connected to the Admin PDN");
  }

  
    
  
    
    
    
    
    
    
     function f_TC_VZ_DATARETRYIMSLESS_6_14_NBIOT_Tests(NAS_CauseValue_Type rejectCause, charstring TestPlan_Name) runs on NBIOT_PTC
  {
    var GutiParameters_Type v_GutiParameters;
    var NAS_PlmnId v_PLMN;
      
    var charstring v_TcName := testcasename()&": ";
      
    // Cell Init
    log (v_TcName,"<<<<<<<<<< Test Execution Started >>>>>>>>>>");  
    log (v_TcName,"UE MAKES ATTACH REQUEST WHILE THROTTLING ON PDN");
    f_NBIOT_Init (c1);

    
    log(v_TcName,"Step1: Configure the test setup so that the device under test (DUT) finds service on a single " &
             "eNodeB with cell_id (where cell_id refers to the CellIdentity parameter that is broadcast in SIB1) " &
             "equal to value X1=1, PLMN id equal to value Y1 and TAI equal to value Z1.");
 
    // Create cell and send out system information
    f_NBIOT_CellConfig_Def(nbiot_Cell1, CONTROL_PLANE);      /* @sic R5s150338: f_EUTRA_CellConfig_DRB_Common replaced by f_EUTRA_CellConfig_Def sic@ */
    v_GutiParameters := f_NBIOT_CellInfo_GetGuti ( nbiot_Cell1 );
    v_PLMN := f_Asn2Nas_PlmnId (v_GutiParameters.PLMN_Identity);

    log(v_TcName,"Step1: Configured the test setup so that the device under test (DUT) finds service on a single " &
             "eNodeB with cell_id (where cell_id refers to the CellIdentity parameter that is broadcast in SIB1) " &
             "equal to value X1=1, PLMN id equal to value Y1 = ",f_ConvertPLMNtoString(v_PLMN) &
             " and TAI equal to value Z1 = {iei := '52'O, plmnId := ",v_PLMN,", tac := ",tsc_TAC1,"}");
    
    f_NBIOT_SetCellPower ( nbiot_Cell1, tsc_ServingCellRS_EPRE );

    
    f_TC_VZ_DATARETRYIMSLESS_6_14_NBIOT_Body ( rejectCause);      
    f_NBIOT_TestBody_Set(false);

    //And now remove the cell(s)
    f_NBIOT_ReleaseAllCells();
    f_NBIOT_PreliminaryPass(__FILE__, __LINE__, v_TcName &" PASSED");
    log (v_TcName,"<<<<<<<<<< Test Execution Finished >>>>>>>>>>"); 
  }
    
     function f_TC_VZ_DATARETRYIMSLESS_6_14_NBIOT_Body ( 
                                     NAS_CauseValue_Type esm_Reject_Cause) runs on NBIOT_PTC
  {

    var template (value) ESM_Cause v_EsmCause36 := cs_ESM_Cause_v ('00100100'B); /* Normal Deactivation */
    
    var EUTRA_ASN1_RRC_TransactionIdentifier_Type v_RRC_TI := tsc_RRC_TI_Def;
    
   var EPS_BearerIdentity v_EpsBearerId1 := '5'H;
    var ProcedureTransactionIdentifier v_EpsTi := tsc_PTI_Unassigned;
    var PDN_CONNECTIVITY_REQUEST v_PDNConnReq;
    var NB_SRB_COMMON_IND v_ReceivedAsp;
    var ProcedureTransactionIdentifier v_PTId_UE;
     timer t_Procedure_Guard_Timer;
    var charstring v_sApn := "vzwadmin";
    var float tsc_GuardProcedureTimer_240 := 240.0;
     var template (present) B3_Type v_PDNType := (f_GetPdnType(), '101'B, '001'B);
    var template (present) NAS_UL_Message_Type v_ESMMessage := cr_CIOT_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach, v_PDNType);
    var LinkedEpsBearerIdentity linkedEpsBearerId := {idValue := '0110'B};
      
    var float v_Timer_1 := ( 1.0 * 60.0 ); // 1minute
    var float v_Timer_3 := (10.0); //Random timer (0-15)s
    var float v_Timer_5 := ( 2.0 * 60.0 ); // 2minute
    var float v_Timer_6 := ( 8.0 * 60.0 ); // 8minute
  
    timer t_WaitTime_10 := f_NBIOT_SetTimerToleranceMin ( nonProtocolTimer, v_Timer_3);//15s timer;
    timer t_WaitTime_1min := f_NBIOT_SetTimerToleranceMin ( nonProtocolTimer, v_Timer_1);//1 minute timer;
    timer t_WaitTime_2min := f_NBIOT_SetTimerToleranceMin ( nonProtocolTimer, v_Timer_5);//2 minute timer;
    timer t_WaitTime_8min := f_NBIOT_SetTimerToleranceMin ( nonProtocolTimer, v_Timer_6);//8 minute timer;      

    var charstring v_Internet_Apn_string := px_Lower_INTERNET_APN;
    var octetstring v_Internet_Apn_val := tsc_Octet_Lower_INTERNET_APN;    
    var charstring v_TcName := testcasename()&": ";
    var NAS_MSG_Indication_Type v_NAS_Ind; 
   
      
    log(v_TcName,"Step 2: Configure the test equipment to allow the device to attach and connect to all PDNs.");
    log(v_TcName,"Step 3: Verify that the DUT has an Internet application that will attempt to connect as soon as the DUT is powered on.");      

    /* 3. Power the DUT on and allow it to find LTE service. */ 
    log(v_TcName,"Step 4: Power the DUT on and allow it to find LTE service.");
    
    f_UT_SwitchOnUE(UT, true);
    
     t_Procedure_Guard_Timer.start(tsc_GuardProcedureTimer_240); //Guard Procedure Started           
   /*  4. Verify that the DUT successfully establishes an RRC connection and attaches to the LTE network. */
    log(v_TcName,"Step 5: Verify that the DUT successfully establishes an RRC connection, attaches to the network, and connects to the Internet PDN.");  
    v_NAS_Ind :=    f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell1,
                                                  cr_EstablishmentCause_NB_Any,
                                                  cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                    cr_CIOT_ATTACH_REQUEST(cr_AdditionalUpdateType_CIOT), //Table 22.5.7a.3.3-4
                                                                                    v_ESMMessage)); 
    f_NBIOT_InitialRegistration_Step5_14(nbiot_Cell1, CONTROL_PLANE, STATE2_NB_CONNECTED_UPDATED, v_NAS_Ind);
     log(v_TcName,"Step 5: UE Attach Success and connects to the Internet PDN.");

    log(v_TcName, "Default Procedure Guard Timer Stopped");
    t_Procedure_Guard_Timer.stop; //Guard Procedure Ended

    log(v_TcName,"Step 6: Initiate the test application (see section TEST EQUIPMENT CONFIGURATION) and verify "&
      "that it connects successfully to the Admin PDN. Configure the test application for the application idle state.");

    /* 6.Force UE to connect to the Admin PDN by Sending AT command*/
      fl_UT_ApplyCommand(UT, cas_UT_Req(INITIATE_ADMIN_TEST_APP, NO_CNF_REQUIRED));
     f_NBIOT_TriggerAdditionalPDN_Modified (nbiot_Cell1, CONTROL_PLANE, ?, cs_AccessPointName (tsc_Octet_Lower_ADMIN_APN), v_sApn);
    // Step7 is not required as discussed It is Allow and not Force UE to RRC Idle. So commected as of Now.
    // 7. Allow the RRC connection to go idle. //
   log(v_TcName,"Step 7a: Sending De-activate EPS Bearer Request to UE");
    
    SRB.send(cas_NB_SRB_NasPdu_REQ(nbiot_Cell1,
                                   tsc_SRB1bis,
                                   cs_TimingInfo_Now,
                                   cs_NAS_Request(tsc_SHT_IntegrityProtected_Ciphered,
                                                  cs_508_DeactivateEPSBearerCxtReq(v_EpsBearerId1,
                                                                                   v_EpsTi,
                                                                                   v_EsmCause36
                                                                                   ))));
  

      log(v_TcName,"Step 8: Verify that the UE disconnects from the Internet PDN.");
      
      alt{
      // The UE transmits a DEACTIVATE EPS BEARER CONTEXT ACCEPT message.
    
      []SRB.receive(car_NB_SRB_NasPdu_IND(nbiot_Cell1,
                                      tsc_SRB1bis,
                                      cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered,
                                                        cr_508_DeactivateEPSBearerCxtAccept(v_EpsBearerId1)))){
       log(v_TcName,"Step 8: Received DEACTIVATE EPS BEARER CONTEXT ACCEPT, So UE disconnected from the Internet PDN");
   
      }
           []  SRB.receive(car_NB_SRB_NasPdu_IND(nbiot_Cell1,
                            tsc_SRB1bis,
                            cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered,
                                             cr_ESM_DATA_TRANSPORT (tsc_EpsDefaultBearerId2, cr_UserDataContainer(?, ?), omit)))) {repeat;}
       
   
      
      
      }
     
    
   
      
    //log(v_TcName,"Step 9: Allow the RRC connection to go idle");
    //f_NBIOT_RRC_ConnectionRelease(nbiot_Cell1);
    
      
      log(v_TcName,"Step 10: Configure the test equipment such that the network will send a NAS PDN Connectivity Reject" &
      " message with cause code 26 when the UE attempts to connect to the Internet PDN. Note that the T3396 Value IE " &
      "is not included in the PDN Connectivity Reject message");
    
    log(v_TcName,"Step 11: Verify that the UE immediately attempts to re-connect to the Internet PDN by sending a "&
      "NAS PDN Connectivity Request message.");
      
    log(v_TcName,"Step 12: Verify that the network sends a NAS PDN Connectivity Reject message with cause code 26 when the "&
      "UE attempts to connect to the Internet PDN.");    
    f_NBIOT_PDN_Connectivity_Reject_Imsless_6_14(esm_Reject_Cause);
    log(v_TcName,"Step 12: Network sent a NAS PDN Connectivity Reject message 1st time.");

    
    log(v_TcName,"Step 13: Verify that the UE immediately attempts to re-connect to the Internet PDN by sending a"&
      " NAS PDN Connectivity Request message and that the network responds with a NAS PDN Connectivity Reject "&
      "message with cause code 26.");  
    f_NBIOT_PDN_Connectivity_Reject_Imsless_6_14(esm_Reject_Cause);
    log(v_TcName,"Step 13: Network sent a NAS PDN Connectivity Reject message 2nd time.");

    log(v_TcName,"Step 14: Verify that the UE immediately attempts a third time to connect to the Internet PDN by "&
      "sending a NAS PDN Connectivity Request message and that the network responds with a NAS PDN Connectivity Reject "&
      "message with cause code 26.");
    f_NBIOT_PDN_Connectivity_Reject_Imsless_6_14(esm_Reject_Cause);
    log(v_TcName,"Step 14: Network sent a NAS PDN Connectivity Reject message 3rd time.");
      
    log(v_TcName,"Step 15: Verify that the UE does not attempt a NAS PDN Connectivity Request for the Internet PDN "&
      "for the next 1 minute plus a random time between 0 and 15 seconds.");
    t_WaitTime_1min.start;
    alt
    {
      []SRB.receive ( car_NB_SRB_NasPdu_IND ( nbiot_Cell1, tsc_SRB1bis,
                                                cr_NAS_Indication ( tsc_SHT_IntegrityProtected_Ciphered,
                                                                    cr_PDNConnReqAdditionalPDN(?,  *, '001'B ))))-> value v_ReceivedAsp 
      {
          t_WaitTime_1min.stop;
          f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, v_TcName &"Step 15: UE Triggers Unexpected PDN Request before timer expiry");
      }
      []t_WaitTime_1min.timeout
      {
          log(v_TcName,"Step 15: UE not triggered PDN Request before timer expiry");   
      }
      []  SRB.receive(car_NB_SRB_NasPdu_IND(nbiot_Cell1,
                            tsc_SRB1bis,
                            cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered,
                                             cr_ESM_DATA_TRANSPORT (tsc_EpsDefaultBearerId2, cr_UserDataContainer(?, ?), omit)))) {repeat;}
       
   
        [] SRB.receive(car_NB_SRB_NasPdu_IND(nbiot_Cell1, tsc_SRB1bis, cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered,
                                                                cr_PDNDisconnectReq(linkedEpsBearerId)))){repeat;}
          
    }
    log(v_TcName,"Step 15: Verified Test Application successfully");
      
    log(v_TcName,"Step 16: Once the 1+ minute timer expires, verify that the UE sends another NAS PDN Connectivity "&
      "Request and that the network responds with a NAS PDN Connectivity Reject message with cause code 26.");

    t_WaitTime_10.start;
    alt {   
        []t_WaitTime_10.timeout
        {
            log(v_TcName,"UE not received PDN Connectivity request in random time between 0 and 15 seconds");
            repeat;
        }
        []SRB.receive ( car_NB_SRB_NasPdu_IND ( nbiot_Cell1, tsc_SRB1bis,
                                                cr_NAS_Indication ( tsc_SHT_IntegrityProtected_Ciphered,
                                                                    cr_PDNConnReqAdditionalPDN(?,  *, '001'B ))))-> value v_ReceivedAsp 
       {
            v_PDNConnReq := v_ReceivedAsp.Signalling.Nas[0].Pdu.Msg.pDN_CONNECTIVITY_REQUEST;
            v_PTId_UE := v_PDNConnReq.procedureTransactionIdentifier;
            t_WaitTime_10.stop;
           SRB.send (cas_NB_SRB_NasPdu_REQ (nbiot_Cell1,
                                     tsc_SRB1bis,
                                     cs_TimingInfo_Now,
                                     cs_NAS_Request(tsc_SHT_IntegrityProtected_Ciphered,
                                                                    cs_PdnConnectReject('0'H, // no EPS bearer assigned
                                                                    v_PTId_UE, // @sic R5s170962 sic@
                                                                    cs_ESM_Cause_v (esm_Reject_Cause))))); 
      
              f_NBIOT_PreliminaryPass(__FILE__, __LINE__, v_TcName&"Step17: PDN Reject Sent to DUT");
        }
        []  SRB.receive(car_NB_SRB_NasPdu_IND(nbiot_Cell1,
                            tsc_SRB1bis,
                            cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered,
                                             cr_ESM_DATA_TRANSPORT (tsc_EpsDefaultBearerId2, cr_UserDataContainer(?, ?), omit)))) {repeat;}
       
   
    }
      
    log(v_TcName,"Step 17: Verify that the UE does not attempt a NAS PDN Connectivity Request for the Internet PDN "&
      "for the next 2 minutes.");
    t_WaitTime_2min.start;
    alt
    {
     []SRB.receive ( car_NB_SRB_NasPdu_IND ( nbiot_Cell1, tsc_SRB1bis,
                                                cr_NAS_Indication ( tsc_SHT_IntegrityProtected_Ciphered,
                                                                    cr_PDNConnReqAdditionalPDN(?,  *, '001'B ))))-> value v_ReceivedAsp 
        {
          t_WaitTime_2min.stop;
          f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, v_TcName &"Step 17: UE Triggers Unexpected PDN Request before timer expiry");
      }
      []t_WaitTime_2min.timeout
      {
          log(v_TcName,"Step 17: UE not triggered PDN Request before timer expiry");   
      }
      []  SRB.receive(car_NB_SRB_NasPdu_IND(nbiot_Cell1,
                            tsc_SRB1bis,
                            cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered,
                                             cr_ESM_DATA_TRANSPORT (tsc_EpsDefaultBearerId2, cr_UserDataContainer(?, ?), omit)))) {repeat;}
       
      [] SRB.receive(car_NB_SRB_NasPdu_IND(nbiot_Cell1, tsc_SRB1bis, cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered,
                                                                cr_PDNDisconnectReq(linkedEpsBearerId)))){repeat;}
          
    }    
    log(v_TcName,"Step 17: Verified Test Application successfully");
   
    log(v_TcName,"Step 18: Once the 2 minute timer expires, verify that the UE sends another NAS PDN Connectivity "&
      "Request and that the network responds with a NAS PDN Connectivity Reject message with cause code 26.");
    f_NBIOT_PDN_Connectivity_Reject_Imsless_6_14(esm_Reject_Cause); 
    log(v_TcName,"Step 18: PDN Connectivity Reject Sent to DUT");
      
    log(v_TcName,"Step 19: Verify that the UE does not attempt a NAS PDN Connectivity Request for the Internet PDN "&
      "for the next 8 minutes.");
    t_WaitTime_8min.start;
    alt
    {
     []SRB.receive ( car_NB_SRB_NasPdu_IND ( nbiot_Cell1, tsc_SRB1bis,
                                                cr_NAS_Indication ( tsc_SHT_IntegrityProtected_Ciphered,
                                                                    cr_PDNConnReqAdditionalPDN(?,  *, '001'B ))))-> value v_ReceivedAsp 
        {
          t_WaitTime_8min.stop;
          f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, v_TcName &"Step 19: UE Triggers Unexpected PDN Request before timer expiry");
      }
      []t_WaitTime_8min.timeout
      {
          log(v_TcName,"Step 19: UE not triggered PDN Request before timer expiry");   
      }
      []  SRB.receive(car_NB_SRB_NasPdu_IND(nbiot_Cell1,
                            tsc_SRB1bis,
                            cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered,
                                             cr_ESM_DATA_TRANSPORT (tsc_EpsDefaultBearerId2, cr_UserDataContainer(?, ?), omit)))) {repeat;}
       
     [] SRB.receive(car_NB_SRB_NasPdu_IND(nbiot_Cell1, tsc_SRB1bis, cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered,
                                                                cr_PDNDisconnectReq(linkedEpsBearerId)))){repeat;}
          
    }    
    log(v_TcName,"Step 19: Verified Test Application successfully");  
      
    log(v_TcName,"Step 20: 8 minute timer is expired, re-configure the test equipment to send a NAS Detach Request"&
      " with 're-attach required'. Configure the test equipment to accept connection requests to the Internet PDN.");
      
    log(v_TcName,"Step 20: Sending Detach Request to UE with reattach required in the Detach Type");    
      SRB.send(cas_NB_SRB1bis_NasPdu_REQ(nbiot_Cell1, cs_TimingInfo_Now,
                                 cs_NAS_Request(tsc_SHT_IntegrityProtected_Ciphered,
                                                cs_508_DETACH_REQUEST_MT(cs_DetachType(tsc_DetachMT_ReAttach), omit))));
    
    log(v_TcName, "Expecting Detach Accept from the UE");
    SRB.receive(car_NB_SRB1bis_NasPdu_IND(
                nbiot_Cell1,
                cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered,
                                  cr_508_DETACH_ACCEPT)));
    log(v_TcName,"Step 20: Verified that the DUT detaches from the LTE network.");
    
    //NEED to check this is required or not Release RRC connection 
    f_NBIOT_RRC_ConnectionRelease( nbiot_Cell1 );
    
    t_Procedure_Guard_Timer.start(tsc_GuardProcedureTimer_240); //Guard Procedure Started            
    log(v_TcName,"Step 21: Verify that the UE immediately attempts to attach to the LTE network and connect to the Internet PDN");
     v_NAS_Ind :=    f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell1,
                                                  cr_EstablishmentCause_NB_Any,
                                                  cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                    cr_CIOT_ATTACH_REQUEST(cr_AdditionalUpdateType_CIOT), //Table 22.5.7a.3.3-4
                                                                                    v_ESMMessage)); 
    f_NBIOT_InitialRegistration_Step5_14(nbiot_Cell1, CONTROL_PLANE, STATE2_NB_CONNECTED_UPDATED, v_NAS_Ind);
  log(v_TcName,"Step 22: Verifed that the UE successfully attached to the LTE network and connects to the Internet PDN");

     log(v_TcName, "Default Procedure Guard Timer Stopped");
    t_Procedure_Guard_Timer.stop; //Guard Procedure Ended

    f_NBIOT_SS_ConfigRachPreambleIndMode(nbiot_Cell1, disable);           //added for LCCP-2346
    
  }
    
    
    
    
    
    
    
    
    
    function f_TC_VZ_DATARETRYIMSLESS_6_15(charstring TestPlan_Name, 
                                         NAS_CauseValue_Type rejectCause) runs on NBIOT_PTC
  {
   var charstring v_TcName := testcasename() & ": ";

    f_NBIOT_Init (c1); 

   
      log (v_TcName, "UE RECEIVES PDN CONNECTIVITY REJECT MESSAGE FROM THE NETWORK FOR ADMIN PDN CODE ", bit2int(rejectCause));
        
      
     
      
    log(v_TcName, "Step1: Configure the test setup so that the DUT finds service on a single eNodeB with cell_id X1 = 1, PLMN id Y1 = ", 
                  f_ConvertPLMNtoString(f_Asn2Nas_PlmnId(valueof(cs_HPLMN_Def))) & ", and TAI Z1 = ", oct2int(tsc_TAC1));      
      
    f_NBIOT_CellConfig_Def(nbiot_Cell1, CONTROL_PLANE);      /* @sic R5s150338: f_EUTRA_CellConfig_DRB_Common replaced by f_EUTRA_CellConfig_Def sic@ */
   f_NBIOT_SetCellPower(nbiot_Cell1, tsc_ServingCellRS_EPRE);
    log(v_TcName, "Step1: Cell Configuration Successful");   
      
    log(v_TcName, "Execution Started for Cause Code - ", bit2int(rejectCause));   
    fl_VZ_IMSLess_TC_6_15_NBIOT_Body(TestPlan_Name,rejectCause);
    f_NBIOT_TestBody_Set(false);
    log(v_TcName, "Execution Completed for Cause Code - ",bit2int(rejectCause));

    f_NBIOT_ReleaseAllCells();

    log(v_TcName,"Step18: Power the device off."); 
    f_UT_PowerOffUE (UT);
    log(v_TcName,"Step18: UE is Powered off");

    f_NBIOT_PreliminaryPass(__FILE__, __LINE__, v_TcName &" PASSED");
  }
    
  function fl_VZ_IMSLess_TC_6_15_NBIOT_Body(charstring TestPlan_Name,
                                            NAS_CauseValue_Type rejectCause) runs on NBIOT_PTC
  {
    
    var charstring v_TcName := testcasename() & ": ";
    var ProcedureTransactionIdentifier v_PTId_UE;
    var PDN_CONNECTIVITY_REQUEST v_PDNConnReq;
    var NB_SRB_COMMON_IND v_ReceivedAsp;
    timer t_T3396;
    var float v_T3396 := (10.0 * 60.0);
    timer t_testapp_retry_timer := (8.0);
    timer t_WaitTime;
    var float v_current;
    var float v_Remaining;
    var EPS_BearerIdentity v_EpsBearerId2 := '6'H;  
    timer t_Procedure_Guard_Timer;
    var NAS_MSG_Indication_Type v_NAS_Ind;
    var float tsc_GuardProcedureTimer_240 := 240.0;
    var template (present) B3_Type v_PDNType := (f_GetPdnType(), '101'B, '001'B);
    var template (present) NAS_UL_Message_Type v_ESMMessage := cr_CIOT_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach, v_PDNType);
   


    log(v_TcName, "Step2: Configure the test equipment such that the network will allow the UE to attach to the LTE network" &
                  "but the network will send a NAS PDN Connectivity Reject message with cause code =", bit2int(rejectCause),
                  "and the T3396 Value IE set to 10 minutes when the UE attempts to connect to the Admin PDN.");        
    
    
    f_UT_SwitchOnUE(UT, true);
    
    log(v_TcName, "Step3: Powering ON the DUT and allowing it to find LTE service");
      
     t_Procedure_Guard_Timer.start(tsc_GuardProcedureTimer_240); //Guard Procedure Started
    log(v_TcName, "Step4: Verifying that the DUT successfully establishes an RRC connection and attaches to the LTE network.");  
   v_NAS_Ind := f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell1,
                                                  cr_EstablishmentCause_NB_Any,
                                                  cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                    cr_CIOT_ATTACH_REQUEST(cr_AdditionalUpdateType_CIOT), //Table 22.5.7a.3.3-4
                                                                                    v_ESMMessage)); 

    f_NBIOT_InitialRegistration_Step5_14(nbiot_Cell1, CONTROL_PLANE, STATE2_NB_CONNECTED_UPDATED, v_NAS_Ind); 
     log(v_TcName, "Step4: DUT successfully attached to the LTE network");

    log(v_TcName, "Default Procedure Guard Timer Stopped");
    t_Procedure_Guard_Timer.stop; //Guard Procedure Ended
      
    log(v_TcName, "Step5: Initiate the test application. Configure the test application for the application transmitting state" &
                  "with the retransmission timer set to 8 seconds.");
    
    fl_UT_ApplyCommand(UT, cas_UT_Req(APP_TRANSMIT_STATE_ON, NO_CNF_REQUIRED,{cs_Ut_Parameter_Common ("ACTIVATE_ADMIN_APN", "8")}));
    
    log(v_TcName, "Step6: Verify that the UE sends a NAS PDN Connectivity Request message for the Admin PDN, and that the network" &
                  "responds by sending a PDN Connectivity Reject message with an ESM cause code =", bit2int(rejectCause),
                  "and a T3396 Value IE set to 10 minutes.");
   
    alt 
    {
      []SRB.receive ( car_NB_SRB_NasPdu_IND ( nbiot_Cell1, tsc_SRB1bis,
                                                cr_NAS_Indication ( tsc_SHT_IntegrityProtected_Ciphered,
                                                                    cr_PDNConnReqAdditionalPDN(?,  *, '001'B ))))-> value v_ReceivedAsp 
      {
         log(v_TcName, "Step6: Received NAS PDN Connectivity Request message for the Admin PDN");         
         v_PDNConnReq := v_ReceivedAsp.Signalling.Nas[0].Pdu.Msg.pDN_CONNECTIVITY_REQUEST;
         v_PTId_UE := v_PDNConnReq.procedureTransactionIdentifier;
        
           SRB.send (cas_NB_SRB_NasPdu_REQ (nbiot_Cell1,
                                     tsc_SRB1bis,
                                     cs_TimingInfo_Now,
                                     cs_NAS_Request(tsc_SHT_IntegrityProtected_Ciphered,
                                                                    cs_PdnConnectReject('0'H, // no EPS bearer assigned
                                                                    v_PTId_UE, // @sic R5s170962 sic@
                                                                    cs_ESM_Cause_v (rejectCause),
                                                                     cs_GprsTimer3('37'O, tsc_Gprs3TimerUnit_1min, '01010'B))))); 
      
         
         
        
         log(v_TcName,"Step6: Sent PDN Connectivity Reject message with an ESM cause code = ", bit2int(rejectCause), " and a T3396 Value IE set to 10 minutes.");  
      }
      
         
    }
    t_T3396.start(v_T3396);

    log(v_TcName, "Step7: Verify that the UE waits 10 minutes before issuing another NAS PDN Connectivity Request for the Admin PDN" &
                  " and that the network responds with a PDN Connectivity Reject message");

    alt 
    {
      []SRB.receive ( car_NB_SRB_NasPdu_IND ( nbiot_Cell1, tsc_SRB1bis,
                                                cr_NAS_Indication ( tsc_SHT_IntegrityProtected_Ciphered,
                                                                    cr_PDNConnReqAdditionalPDN(?,  *, '001'B ))))-> value v_ReceivedAsp 
      {
        t_T3396.stop;
        f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, v_TcName & "Step7: Received PDN connectivity Request while Timer T3396 running");
      }
            
      []t_T3396.timeout
      {
         f_NBIOT_PreliminaryPass(__FILE__, __LINE__,v_TcName & "Step7: PASS");
      }
     
    }
    log(v_TcName, "Step7: Waiting for PDN connectivity Request after Timer T3396 Expiry");
    
 
   t_WaitTime.start(120.0); 
    alt
    {
        
   
        []SRB.receive ( car_NB_SRB_NasPdu_IND ( nbiot_Cell1, tsc_SRB1bis,
                                                cr_NAS_Indication ( tsc_SHT_IntegrityProtected_Ciphered,
                                                                    cr_PDNConnReqAdditionalPDN(?,  *, '001'B ))))-> value v_ReceivedAsp 
        {
          log(v_TcName, "Step7: Received PDN connectivity Request after Timer T3396 Expiry");
          t_WaitTime.stop;  
        }
          

        []t_WaitTime.timeout
        {
             f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, v_TcName & "UE did not trigger NAS PDN Connectivity Request.");
        }
    }
      v_PDNConnReq := v_ReceivedAsp.Signalling.Nas[0].Pdu.Msg.pDN_CONNECTIVITY_REQUEST;
      v_PTId_UE := v_PDNConnReq.procedureTransactionIdentifier;
     
   SRB.send (cas_NB_SRB_NasPdu_REQ (nbiot_Cell1,
                                     tsc_SRB1bis,
                                     cs_TimingInfo_Now,
                                     cs_NAS_Request(tsc_SHT_IntegrityProtected_Ciphered,
                                                                    cs_PdnConnectReject('0'H, // no EPS bearer assigned
                                                                    v_PTId_UE, // @sic R5s170962 sic@
                                                                    cs_ESM_Cause_v (rejectCause),
                                                                     cs_GprsTimer3('37'O, tsc_Gprs3TimerUnit_1min, '01010'B))))); 
      
         
    log(v_TcName, "Step7: Sent PDN connectivity Reject with ESM cause ",bit2int(rejectCause));
    t_T3396.start(v_T3396);
      
    log(v_TcName, "Step8: Verify that the UE does not re-issue a NAS PDN Connectivity Request in PLMN Y1 for at least 10 minutes" &
                  "while the T3396 timer is running.");
    t_WaitTime.start(60.0); 
    alt 
    {
       []SRB.receive ( car_NB_SRB_NasPdu_IND ( nbiot_Cell1, tsc_SRB1bis,
                                                cr_NAS_Indication ( tsc_SHT_IntegrityProtected_Ciphered,
                                                                    cr_PDNConnReqAdditionalPDN(?,  *, '001'B ))))-> value v_ReceivedAsp 
       {
        t_WaitTime.stop;
        t_T3396.stop;
        f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, v_TcName & "Step8: Received PDN connectivity Request while Timer T3396 running");
      }
     
      []t_WaitTime.timeout
      {
        log(v_TcName, "while Timer T3396 running, configuring network with PLMN Y4");
      }
    }
      
    log(v_TcName, "Step9: While the T3346 timer is running, re-configure the network so that the UE finds service on an eNodeB with a PLMN id equal to Y4 = " & f_ConvertPLMNtoString(f_Asn2Nas_PlmnId(valueof(cs_HPLMN_311_481)))
                  & " where Y4 is not equal to Y1. The frequency of the second PLMN shall be the same as the first");
    
    f_NBIOT_ReleaseAllCells();
          
    
    f_NBIOT_CellInfo_SetPLMN_Common(nbiot_Cell1, {cs_HPLMN_311_481}, -, false);
    f_NBIOT_CellConfig_Def( nbiot_Cell1, CONTROL_PLANE);
    f_Delay(2.0);
    f_NBIOT_SetCellPower (nbiot_Cell1, tsc_ServingCellRS_EPRE );
    //f_EUTRA_UE_PageSysinfoMod_Send(eutra_Cell1);    
    
    log(v_TcName, "Step9: PLMN-Id Modified for Roaming PLMN");
    f_NBIOT_PreliminaryPass(__FILE__, __LINE__,v_TcName & "Step9 PASS");
      
    log(v_TcName, "Step10: Verify that the UE successfully attaches to the LTE network and that the UE issues a PDN Connectivity Request" &
                  "for the Admin PDN upon request of the test application."); 

    t_Procedure_Guard_Timer.start(tsc_GuardProcedureTimer_240); //Guard Procedure Started
  
    log(v_TcName,"Step10: Waiting for attach from UE");
       
   
      
     v_NAS_Ind := f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell1,
                                                  cr_EstablishmentCause_NB_Any,
                                                  cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                    cr_CIOT_ATTACH_REQUEST(cr_AdditionalUpdateType_CIOT), //Table 22.5.7a.3.3-4
                                                                                    v_ESMMessage)); 

    f_NBIOT_InitialRegistration_Step5_14(nbiot_Cell1, CONTROL_PLANE, STATE2_NB_CONNECTED_UPDATED, v_NAS_Ind); 
   

    log(v_TcName, "Default Procedure Guard Timer Stopped");
    t_Procedure_Guard_Timer.stop; //Guard Procedure Ended
      
    log(v_TcName, "Step10: Waiting for PDN connectivity Request.");
  
    t_WaitTime.start(120.0);
    alt 
    {
       []SRB.receive ( car_NB_SRB_NasPdu_IND ( nbiot_Cell1, tsc_SRB1bis,
                                                cr_NAS_Indication ( tsc_SHT_IntegrityProtected_Ciphered,
                                                                    cr_PDNConnReqAdditionalPDN(?,  cr_AccessPointName(tsc_Octet_Lower_ADMIN_APN), '001'B ))))-> value v_ReceivedAsp 
     {
        log(v_TcName, "Step10: Received PDN connectivity Request");
        t_WaitTime.stop;  
      }
    
      []t_WaitTime.timeout
      {
        t_T3396.stop;
        f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, v_TcName & "UE did not trigger NAS PDN Connectivity Request.");
      }
    }

    v_PDNConnReq := v_ReceivedAsp.Signalling.Nas[0].Pdu.Msg.pDN_CONNECTIVITY_REQUEST;
    v_PTId_UE := v_PDNConnReq.procedureTransactionIdentifier;
    SRB.send (cas_NB_SRB_NasPdu_REQ (nbiot_Cell1,
                                     tsc_SRB1bis,
                                     cs_TimingInfo_Now,
                                     cs_NAS_Request(tsc_SHT_IntegrityProtected_Ciphered,
                                                                    cs_PdnConnectReject('0'H, // no EPS bearer assigned
                                                                    v_PTId_UE, // @sic R5s170962 sic@
                                                                    cs_ESM_Cause_v (rejectCause),
                                                                     cs_GprsTimer3('37'O, tsc_Gprs3TimerUnit_1min, '01010'B))))); 
      
        
    log(v_TcName,"Step10: Sent PDN Connectivity Reject message. Graceful reject on PLMN Y4");  
     
    log(v_TcName, "Step11: While the T3396 timer is running, re-configure the test setup so that the DUT again finds service on PLMN Y1.");
    f_NBIOT_ReleaseAllCells();
   //Configuring back to HOME PLMN
    f_NBIOT_CellInfo_SetPLMN_Common(nbiot_Cell1, {cs_HPLMN_311_480}, -, false);
    f_NBIOT_CellConfig_Def( nbiot_Cell1, CONTROL_PLANE);
   f_Delay(2.0);   
    f_NBIOT_SetCellPower (nbiot_Cell1, tsc_ServingCellRS_EPRE );

    // NOTE: Here Procedure Guard Timer is not required here, UE has to trigger before 10 Minutes.  
                      
    log(v_TcName, "Step12: Verify that the UE successfully attaches to the LTE network but that the UE waits until the 10 minute" &
                  "T3396 timer expires before issuing a PDN Connectivity Request for the Admin PDN.");

    log(v_TcName,"Step12: Waiting for attach from UE");
       
     v_NAS_Ind := f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell1,
                                                  cr_EstablishmentCause_NB_Any,
                                                  cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                    cr_CIOT_ATTACH_REQUEST(cr_AdditionalUpdateType_CIOT), //Table 22.5.7a.3.3-4
                                                                                    v_ESMMessage)); 

    f_NBIOT_InitialRegistration_Step5_14(nbiot_Cell1, CONTROL_PLANE, STATE2_NB_CONNECTED_UPDATED, v_NAS_Ind); 
   

    v_current := t_T3396.read; 
    v_Remaining := v_T3396 - v_current;   
    log(" Timer T3396 with remaining value :",float2int(v_Remaining)," Sec.");

   if(v_Remaining > 0.0)
    {
        alt 
        {
          []SRB.receive ( car_NB_SRB_NasPdu_IND ( nbiot_Cell1, tsc_SRB1bis,
                                                cr_NAS_Indication ( tsc_SHT_IntegrityProtected_Ciphered,
                                                                    cr_PDNConnReqAdditionalPDN(?,  cr_AccessPointName(tsc_Octet_Lower_ADMIN_APN), '001'B ))))-> value v_ReceivedAsp 
    {
            t_T3396.stop;
            f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, v_TcName & "Step12: Received PDN connectivity Request while Timer T3396 running");
          }
                   
           []t_T3396.timeout
          {
                f_NBIOT_PreliminaryPass(__FILE__, __LINE__,v_TcName & "Step12: PASS");
          }
        }
    }

    log(v_TcName, "Step13: Waiting for PDN connectivity Request after Timer T3396 Expiry");
    
    t_WaitTime.start(120.0);
    alt
    {
        []SRB.receive ( car_NB_SRB_NasPdu_IND ( nbiot_Cell1, tsc_SRB1bis,
                                                cr_NAS_Indication ( tsc_SHT_IntegrityProtected_Ciphered,
                                                                    cr_PDNConnReqAdditionalPDN(?,  cr_AccessPointName(tsc_Octet_Lower_ADMIN_APN), '001'B ))))-> value v_ReceivedAsp 
    {
            log(v_TcName, "Step13: Received PDN connectivity Request after Timer T3396 Expiry");
            t_WaitTime.stop;
        }
       

        []t_WaitTime.timeout
        {
             f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, v_TcName & "UE did not trigger NAS PDN Connectivity Request.");
        }        
    }
      
    v_PDNConnReq := v_ReceivedAsp.Signalling.Nas[0].Pdu.Msg.pDN_CONNECTIVITY_REQUEST;
    v_PTId_UE := v_PDNConnReq.procedureTransactionIdentifier;
     
     SRB.send (cas_NB_SRB_NasPdu_REQ (nbiot_Cell1,
                                     tsc_SRB1bis,
                                     cs_TimingInfo_Now,
                                     cs_NAS_Request(tsc_SHT_IntegrityProtected_Ciphered,
                                                                    cs_PdnConnectReject('0'H, // no EPS bearer assigned
                                                                    v_PTId_UE, // @sic R5s170962 sic@
                                                                    cs_ESM_Cause_v (rejectCause),
                                                                     cs_GprsTimer3('37'O, tsc_Gprs3TimerUnit_1min, '01010'B))))); 
      
      
    log(v_TcName, "Step13: Sent PDN connectivity Reject with ESM cause ",bit2int(rejectCause));

    t_T3396.start(v_T3396);
    t_WaitTime.start(60.0);
    alt 
    {
       []SRB.receive ( car_NB_SRB_NasPdu_IND ( nbiot_Cell1, tsc_SRB1bis,
                                                cr_NAS_Indication ( tsc_SHT_IntegrityProtected_Ciphered,
                                                                    cr_PDNConnReqAdditionalPDN(?,  cr_AccessPointName(tsc_Octet_Lower_ADMIN_APN), '001'B ))))-> value v_ReceivedAsp 
    {
        t_T3396.stop;
        t_WaitTime.stop;  
        f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, v_TcName & "Step14: Received PDN connectivity Request while Timer T3396 running");
      }
          

      []t_WaitTime.timeout
      {
        log(v_TcName, "UE did not sent PDN Connectivity Request");
      }
    }    
    
    
     fl_UT_ApplyCommand(UT, cas_UT_Req(APP_TRANSMIT_STATE_OFF, NO_CNF_REQUIRED,{cs_Ut_Parameter_Common ("ACTIVATE_ADMIN_APN", "0")}));
   
    log(v_TcName, "Step14: While the T3396 timer is running, power cycle the UE.");
    
    fl_UT_ApplyCommand(UT, cas_UT_Req(POWER_CYCLE, NO_CNF_REQUIRED));
      
     

    t_Procedure_Guard_Timer.start(tsc_GuardProcedureTimer_240); //Guard Procedure Started  //Guard Procedure Started
              
    log(v_TcName, "Step15: Verify that the DUT successfully establishes an RRC connection and attaches to the LTE network.");
    v_NAS_Ind := f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell1,
                                                  cr_EstablishmentCause_NB_Any,
                                                  cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                    cr_CIOT_ATTACH_REQUEST(cr_AdditionalUpdateType_CIOT), //Table 22.5.7a.3.3-4
                                                                                    v_ESMMessage)); 

    f_NBIOT_InitialRegistration_Step5_14(nbiot_Cell1, CONTROL_PLANE, STATE2_NB_CONNECTED_UPDATED, v_NAS_Ind); 
    log(v_TcName, "Step15: DUT successfully attached to the LTE network");

    log(v_TcName, "Default Procedure Guard Timer Stopped");
    t_Procedure_Guard_Timer.stop; //Guard Procedure Ended

    log(v_TcName, "Step16: Initiate the test application. Configure the test application for the application transmitting state" &
                  "with the retransmission timer set to 8 seconds.");
    log(v_TcName, "Step17: Verify that the UE exhibits the correct behavior, according to cause code: For ESM cause code 26," &
                  "the UE waits for the T3396 timer to expire before issuing a PDN Connectivity Request for the Admin PDN." &
                  "For ESM cause code 27, the UE issues a PDN Connectivity Request for the Admin PDN without waiting for the T3396 timer to expire.");

   
    fl_UT_ApplyCommand(UT, cas_UT_Req(APP_TRANSMIT_STATE_ON, NO_CNF_REQUIRED,{cs_Ut_Parameter_Common ("ACTIVATE_ADMIN_APN", "8")}));
    
    if(rejectCause == tsc_Cause_nonEPS_AuthUnacceptable)
    {        
       alt 
       {
         []SRB.receive ( car_NB_SRB_NasPdu_IND ( nbiot_Cell1, tsc_SRB1bis,
                                                cr_NAS_Indication ( tsc_SHT_IntegrityProtected_Ciphered,
                                                                    cr_PDNConnReqAdditionalPDN(?,  cr_AccessPointName(tsc_Octet_Lower_ADMIN_APN), '001'B ))))-> value v_ReceivedAsp 
         {
            t_T3396.stop;
           f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, v_TcName & "Step17: Received PDN connectivity Request while Timer T3396 running");
         }
               
         []t_T3396.timeout
         {
           f_NBIOT_PreliminaryPass(__FILE__, __LINE__,v_TcName & "Step17: PASS");
         }
        
       }
       log(v_TcName, "Step17: Waiting for PDN connectivity Request after Timer T3396 Expiry");
    
       t_WaitTime.start(120.0);
       alt
       {
         []SRB.receive ( car_NB_SRB_NasPdu_IND ( nbiot_Cell1, tsc_SRB1bis,
                                                cr_NAS_Indication ( tsc_SHT_IntegrityProtected_Ciphered,
                                                                    cr_PDNConnReqAdditionalPDN(?,  cr_AccessPointName(tsc_Octet_Lower_ADMIN_APN), '001'B ))))-> value v_ReceivedAsp 
         {
            log(v_TcName, "Step17: Received PDN connectivity Request after Timer T3396 Expiry");
            t_WaitTime.stop;
         }
         

         []t_WaitTime.timeout
         {
                log("Step17: UE did not trigger NAS PDN Connectivity Request till 2 minutes after attach.");
         }
       }
    }
    else if(rejectCause == tsc_Cause_missingOrUnknownApn)
    {
       alt 
       {
           []SRB.receive ( car_NB_SRB_NasPdu_IND ( nbiot_Cell1, tsc_SRB1bis,
                                                cr_NAS_Indication ( tsc_SHT_IntegrityProtected_Ciphered,
                                                                    cr_PDNConnReqAdditionalPDN(?,  cr_AccessPointName(tsc_Octet_Lower_ADMIN_APN), '001'B ))))-> value v_ReceivedAsp 
          {
            t_T3396.stop;
            f_NBIOT_PreliminaryPass(__FILE__, __LINE__,v_TcName & "Step17: PASS");
          }
                 
          []t_T3396.timeout
          {
              f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, v_TcName & "Step17: SS not triggered PDN connectivity Request after Timer T3396 expired also");
          }
       }   
    }
    f_NBIOT_SS_ConfigRachPreambleIndMode(nbiot_Cell1, disable);
     fl_UT_ApplyCommand(UT, cas_UT_Req(APP_TRANSMIT_STATE_OFF, NO_CNF_REQUIRED,{cs_Ut_Parameter_Common ("ACTIVATE_ADMIN_APN", "0")}));
   
  }  
    
    
    
    
  function f_VZ_TC_7_1_IMSLESS_NBIOT(charstring p_APN := px_IMS_APN, charstring TestPlan_Name) runs on NBIOT_PTC
  {      
    var charstring v_TcName := testcasename() & ": ";
      
    log(v_TcName, "UE RECEIVES DEACTIVATE EPS BEARER CONTEXT REQUEST MESSAGE FROM THE NETWORK 2 PDN CONNECTIONS OPEN");
    
    f_NBIOT_Init (c1);
       
    log(v_TcName, "Step1: Configure the test setup so that the device under test (DUT) finds service on a single eNodeB " &
                  "with cell_id X1 = 1, PLMN Id Y1 = ", f_ConvertPLMNtoString(f_Asn2Nas_PlmnId(valueof(cs_HPLMN_Def))),
                  " and TAI Z1 = ", oct2int(tsc_TAC1));
    f_NBIOT_CellConfig_Def(nbiot_Cell1, CONTROL_PLANE);    
    f_NBIOT_SetCellPower(nbiot_Cell1, tsc_ServingCellRS_EPRE );
    log(v_TcName, "Step1: Cell Configuration Successful");
      
  
    f_VZ_TC_7_1_IMSLESS_Body(p_APN); 
    f_NBIOT_TestBody_Set(false);
    f_UT_SwitchOffUE (UT, false);
    f_NBIOT_ReleaseAllCells();
      
    f_NBIOT_PreliminaryPass(__FILE__, __LINE__, testcasename()& ": Successfully Verified Expected Result : UE follows the " &
                                                                "algorithm described in the section entitled 'PDN Disconnection' " &
                                                                "in the document 'Device Requirements LTE 3GPP Network Access' " &
                                                                "when it receives a NAS PDN Deactivate EPS Bearer Context Request " &
                                                                "message for the Primary PDN");     
  }   
   
    
   function f_VZ_TC_7_1_IMSLESS_Body (charstring p_APN) runs on NBIOT_PTC 
  {    
    var EPS_BearerIdentity v_EpsBearerId1 := '5'H;
    var EPS_BearerIdentity v_EpsBearerId2 := '6'H;      
    var charstring Internet_APN_string := px_INTERNET_APN;
    var octetstring Internet_APN_Value := tsc_Octet_INTERNET_APN;
    
    var charstring Admin_APN_string := px_ADMIN_APN;
    var octetstring Admin_APN_Value := tsc_Octet_ADMIN_APN;
    var charstring v_sApn := "vzwadmin"; 
    var EUTRA_ASN1_RRC_TransactionIdentifier_Type v_RRC_TI := tsc_RRC_TI_Def;
    var ProcedureTransactionIdentifier v_EpsTi := tsc_PTI_Unassigned;
    var template (value) ESM_Cause v_EsmCause36 := cs_ESM_Cause_v ('00100100'B); /* Regular Deactivation */
    var DelayForUserPlaneSignalling_Type isIMS := waitForIMS;
    var NAS_MSG_Indication_Type v_NAS_Ind, v_NasInd;
    timer t_AppTxTime := 15.0;
    var charstring v_TcName := testcasename() & ": ";
    var template (present) B3_Type v_PDNType := (f_GetPdnType(), '101'B, '001'B);
    var template (present) NAS_UL_Message_Type v_ESMMessage := cr_CIOT_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach, v_PDNType);
    timer t_T2sec := 2.0; 
    var float tsc_GuardProcedureTimer_240 := 240.0; 
    timer t_Procedure_Guard_Timer;
    
    log(v_TcName, "Step2: Configure the test equipment to allow the device to attach and connect to all PDNs");
    log(v_TcName, "Step3: Verify that the DUT has an Internet application that will attempt to connect as soon as the DUT is powered on");
    log(v_TcName, "Test Equipment Configured");

    log(v_TcName, "Step4: Power the DUT on and allow it to find LTE service");
    f_UT_SwitchOnUE(UT, true);
  
 
      isIMS := noDelay;
      log(v_TcName, "Step5: Verify that the DUT successfully establishes an RRC connection, attaches to the network, and connects to the Internet PDN");        
      t_Procedure_Guard_Timer.start(tsc_GuardProcedureTimer_240); //Guard Procedure Started
      v_NasInd := f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell1,
                                               cr_EstablishmentCause_NB_Any,
                                               cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                  cr_CIOT_ATTACH_REQUEST(cr_AdditionalUpdateType_CIOT),
                                                                                  v_ESMMessage)); 
      
     f_NBIOT_InitialRegistration_Step5_14(nbiot_Cell1, CONTROL_PLANE, STATE2_NB_CONNECTED_UPDATED, v_NasInd);
     
      
      log(v_TcName, "Verified that the DUT successfully establishes an RRC connection and attaches to the network.");        
       log(v_TcName, "Default Procedure Guard Timer Stopped");
    t_Procedure_Guard_Timer.stop; //Guard Procedure Ended
 
       t_Procedure_Guard_Timer.start(tsc_GuardProcedureTimer_240); //Guard Procedure Started
 
      log(v_TcName, "Step6: Initiate the test application and verify that it connects successfully to the Admin PDN.
                    Configure the test application for the application idle state.");
      f_NBIOT_TriggerAdditionalPDN_Modified (nbiot_Cell1, CONTROL_PLANE, ?, cs_AccessPointName (tsc_Octet_Lower_ADMIN_APN), v_sApn);
    
      log(v_TcName, "Admin PDN established");
        log(v_TcName, "Default Procedure Guard Timer Stopped");
    t_Procedure_Guard_Timer.stop; //Guard Procedure Ended
 
      log(v_TcName, "Step7: Configure the test equipment to send a NAS 'Deactivate EPS Bearer Context Request' message to disconnect the Internet PDN");        
      
      
      
     SRB.send(cas_NB_SRB_NasPdu_REQ(nbiot_Cell1,
                                   tsc_SRB1bis,
                                   cs_TimingInfo_Now,
                                   cs_NAS_Request(tsc_SHT_IntegrityProtected_Ciphered,
                                                  cs_508_DeactivateEPSBearerCxtReq('5'H,
                                                                                   v_EpsTi,
                                                                                   v_EsmCause36))));  
    
      

    log(v_TcName, "Expecting DEACTIVATE EPS BEARER CONTEXT ACCEPT from UE");
     
     alt {
        []  SRB.receive(car_NB_SRB_NasPdu_IND(nbiot_Cell1,
                                           tsc_SRB1bis,
                                           cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered,
                                                             cr_ESM_DATA_TRANSPORT (tsc_EpsDefaultBearerId2, cr_UserDataContainer(?, ?), omit)))) {repeat;}
              
        
          [] SRB.receive(car_NB_SRB_NasPdu_IND(nbiot_Cell1,
                                      tsc_SRB1bis,
                                      cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered,
                                                        cr_508_DeactivateEPSBearerCxtAccept('5'H,
                                                                                             v_EpsTi)))){}
     }     
      
      log(v_TcName, "Received DEACTIVATE EPS BEARER CONTEXT ACCEPT from UE");

      log(v_TcName, "Step8: Verified that the UE disconnects from the Internet PDN");
      log(v_TcName, "Step9: Configure the test equipment such that the network will allow connectivity to the Internet PDN " &
                    "when the UE attempts to re-connect to the Internet PDN.");
      log(v_TcName, "Step10: Initiate the Internet test application for the application transmitting state with a " &
                    "retransmission timer of 10 seconds");
       
       fl_UT_ApplyCommand(UT, cas_UT_Req(ACTIVATE_INTERNET_APN, NO_CNF_REQUIRED));    
      //f_UT_TriggerActivateInternetApn(UT);
      t_AppTxTime.start;
      alt
      {
          
        []  SRB.receive(car_NB_SRB_NasPdu_IND(nbiot_Cell1,
                                           tsc_SRB1bis,
                                           cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered,
                                                             cr_ESM_DATA_TRANSPORT (tsc_EpsDefaultBearerId2, cr_UserDataContainer(?, ?), omit)))) {
              
          
            repeat;
        }
          []SRB.receive(car_NB_SRB_NasPdu_IND(nbiot_Cell1, tsc_SRB1bis, cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered,
                                                                               cr_PDNConnReqAdditionalPDN((f_GetPdnType(), '101'B, '001'B), *,
                                                                               '001'B))))
                {
                 t_AppTxTime.stop;
                 log(v_TcName, "Step11: Verified that the UE immediately attempts to re-connect to the Internet PDN on behalf of the test " &
                        "application and that the reconnection is successful");            
               }  
          
      
        []t_AppTxTime.timeout
          {
               f_NBIOT_SetVerdictFailOrInconc(__FILE__,__LINE__, v_TcName &"UE didn't immediately attempts to re-connect to the Internet PDN");
          }
  
      }
    fl_UT_ApplyCommand(UT, cas_UT_Req(DEACTIVATE_INTERNET_APN, NO_CNF_REQUIRED));
   // f_VZ_Ignore_Rach_Enable_Ind_Disable(eutra_Cell1);            //added for LCCP-2346
     t_T2sec.start;
    alt {
      []SRB.receive(car_NB_SRB0_RrcPdu_IND(nbiot_Cell1, cr_RRCConnectionRequest_NB ( cr_EstablishmentCause_NB_Any, ? ) ))
      {
          t_T2sec.stop;
           SRB.send(cas_NB_SRB0_RrcPdu_REQ(nbiot_Cell1, cs_TimingInfo_Now, cs_RRCConnectionReject_NB));    
      }
      []  SRB.receive(car_NB_SRB_NasPdu_IND(nbiot_Cell1,
                                           tsc_SRB1bis,
                                           cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered,
                                                             cr_ESM_DATA_TRANSPORT (tsc_EpsDefaultBearerId2, cr_UserDataContainer(?, ?), omit)))) {
                 t_T2sec.stop;                                            
      }   
      []t_T2sec.timeout{}
    }
}  
    
    
    
    
  function f_VZ_TC_7_2_NBIOT(charstring TestPlan_Name) runs on NBIOT_PTC
  {
    var charstring v_TcName := testcasename() & ": ";
    timer t_WaitForAttach := 20.0;
    var template (present) B3_Type v_PDNType := (f_GetPdnType(), '101'B, '001'B);
    var template (present) NAS_UL_Message_Type v_ESMMessage := cr_CIOT_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach, v_PDNType);
    var NAS_MSG_Indication_Type v_NAS_Ind, v_NasInd;  
    
    
    log(v_TcName, "UE RECEIVES DETACH REQUEST MESSAGE FROM THE NETWORK 1 PDN CONNECTION OPEN");
    
    log(v_TcName, "Step1: Configure the test setup so that the DUT finds service on a single eNodeB with cell_id X1 = 1, PLMN id Y1 = ", 
                  f_ConvertPLMNtoString(f_Asn2Nas_PlmnId(valueof(cs_HPLMN_Def))) & ", and TAI Z1 = ", oct2int(tsc_TAC1));
    f_NBIOT_Init (c1);
    
    f_NBIOT_CellConfig_Def(nbiot_Cell1, CONTROL_PLANE);
    
    f_NBIOT_SetCellPower(nbiot_Cell1, tsc_ServingCellRS_EPRE);
    log(v_TcName, "Step1: Cell configuration successful");
    
    log(v_TcName, "Step2: Configuring the test equipment to allow the DUT to attach to the LTE network and connect to all PDNs");
    log(v_TcName, "Step3: Verify that the DUT has an Internet application that will attempt to connect as
        soon as the DUT is powered on.");
    log(v_TcName, "Step4: Powering on the DUT");
     f_UT_SwitchOnUE(UT, true);
    
    log(v_TcName, "Step5: Waiting for the DUT to attach to the LTE network");
    v_NasInd := f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell1,
                                               cr_EstablishmentCause_NB_Any,
                                               cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                  cr_CIOT_ATTACH_REQUEST(cr_AdditionalUpdateType_CIOT),
                                                                                  v_ESMMessage)); 
      
     f_NBIOT_InitialRegistration_Step5_14(nbiot_Cell1, CONTROL_PLANE, STATE2_NB_CONNECTED_UPDATED, v_NasInd);
     
    log(v_TcName, "Step5: DUT successfully attached to the LTE Network and connected to the Internet PDN"); 
    
    log(v_TcName, "Step6: Configured the test equipment to send a NAS Detach Request to DUT to disconnect the Internet PDN");  
    
     SRB.send(cas_NB_SRB_NasPdu_REQ(nbiot_Cell1,
                                     tsc_SRB1bis,
                                     cs_TimingInfo_Now,
                                     cs_NAS_Request(tsc_SHT_IntegrityProtected_Ciphered,
                                                cs_508_DETACH_REQUEST_MT(cs_DetachType(tsc_DetachMT_ReAttach),
                                                                         omit))));
  
      
    log(v_TcName, "Step6: Sent NAS Detach Req to the DUT");
      
    log(v_TcName, "Step7: Expecting Detach Accept from the DUT");
    
     SRB.receive(car_NB_SRB1bis_NasPdu_IND(nbiot_Cell1,
                                          cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered,
                                                            cr_508_DETACH_ACCEPT)));
      
      
    log(v_TcName, "Step7: Received Detach Accept from the DUT. DUT disconnected from the Internet PDN");
    
    log(v_TcName, "Releasing the RRC Connection");
    f_NBIOT_RRC_ConnectionRelease( nbiot_Cell1 );
      
    log(v_TcName, "Step8: Waiting for the DUT to re-attach to the LTE network and reconnect to the Internet PDN");
    t_WaitForAttach.start;
   
     alt
    {  
       []SRB.check(receive(car_NB_SRB0_RrcPdu_IND(nbiot_Cell1, cr_RRCConnectionRequest_NB ( cr_EstablishmentCause_NB_Any, ? ) )))      
      {   
   v_NAS_Ind := f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell1,
                                               cr_EstablishmentCause_NB_Any,
                                               cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                  cr_CIOT_ATTACH_REQUEST(cr_AdditionalUpdateType_CIOT),
                                                                                  v_ESMMessage)); 

        f_NBIOT_InitialRegistration_Step5_14(nbiot_Cell1, CONTROL_PLANE, STATE2_NB_CONNECTED_UPDATED, v_NasInd);
      }
      []t_WaitForAttach.timeout
      {
        f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, v_TcName & "UE did not attempt to immediately attach to the LTE Network & reconnect to the Internet PDN");
      }
    }
        log(v_TcName, "Step8: Verified that the DUT immediately attaches to the LTE Network and reconnects to the Internet PDN");
      
     t_WaitForAttach.stop;
       
    f_NBIOT_TestBody_Set(false);
    log(v_TcName, "Powering off the DUT");
    f_UT_SwitchOffUE (UT, false);
    
    f_NBIOT_ReleaseAllCells();
    f_NBIOT_PreliminaryPass(__FILE__, __LINE__, v_TcName & "Successfully verified the DUT follows the 'PDN Disconnection' algorithm when it receives a NAS PDN Detach Request message for the Internet PDN");
  }
    
     function f_TC_7_3_IMSLESS_NBIOT(charstring TestPlan_Name) runs on NBIOT_PTC
  { 
    var charstring v_TcName := testcasename()&": ";
    log(v_TcName,"UE RECEIVES DEACTIVATE EPS BEARER CONTEXT REQUEST MESSAGE FROM THE NETWORK CODE 39");
      
    f_NBIOT_Init (c1);
  
    //Create and configure cell
    log(v_TcName,"Step1: Configure the test setup do that the DUT finds service on a single eNodeB with cell id X1 = 1",
                  " and PLMN id Y1 = ", f_ConvertPLMNtoString(f_Asn2Nas_PlmnId(valueof(cs_HPLMN_Def))));
   
    log(v_TcName, " Configure the test equipment to allow the device to attach and connect to all
     PDNs.");
    f_NBIOT_CellConfig_Def(nbiot_Cell1, CONTROL_PLANE);      /* @sic R5s150338: f_EUTRA_CellConfig_DRB_Common replaced by f_EUTRA_CellConfig_Def sic@ */
    
    f_NBIOT_SetCellPower ( nbiot_Cell1, tsc_ServingCellRS_EPRE );
    fl_TC_7_3_IMSLESS_Body (); 
    f_NBIOT_TestBody_Set(false);
 
    log(v_TcName,"Postamble Execution Start");

    f_UT_SwitchOffUE (UT, false);
    f_NBIOT_ReleaseAllCells();
    f_NBIOT_PreliminaryPass(__FILE__, __LINE__, v_TcName &"PASSED");

    log(v_TcName,"Postamble Execution Done"); 
  } 
    
    
    
    
    function fl_TC_7_3_IMSLESS_Body() runs on NBIOT_PTC
  {
    var EUTRA_ASN1_RRC_TransactionIdentifier_Type v_RRC_TI := tsc_RRC_TI_Def;
    
    
    var charstring v_Additional_APN_string := px_INTERNET_APN;
    var octetstring v_Additional_APN_value := tsc_Octet_INTERNET_APN;
    var octetstring v_Additional_Lower_APN_value := tsc_Octet_Lower_INTERNET_APN;
    var template (value) ESM_Cause v_EsmCause39 := cs_ESM_Cause_v ('00100111'B); /* Reactivation Requested */
    var ProcedureTransactionIdentifier v_EpsTi := tsc_PTI_Unassigned;
     var charstring v_TcName := testcasename()&": ";
    var float tsc_GuardProcedureTimer_240 := 240.0;
    var charstring v_sApn := "vzwadmin";
    timer t_T2sec := 2.0;  
    timer t_Procedure_Guard_Timer;
    var float v_Timer_1 := 10.0;  
    timer t_WaitTime_10 := f_NBIOT_SetTimerToleranceMin ( nonProtocolTimer, v_Timer_1);//10s timer;
    var template (present) B3_Type v_PDNType := (f_GetPdnType(), '101'B, '001'B);
    var template (present) NAS_UL_Message_Type v_ESMMessage := cr_CIOT_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach, v_PDNType);
    var NAS_MSG_Indication_Type v_NasInd;
    // Power the DUT on
    log(v_TcName,"Step3: Power the DUT on and allow it to find LTE service");
    f_UT_SwitchOnUE(UT, true);
  
   t_Procedure_Guard_Timer.start(tsc_GuardProcedureTimer_240); //Guard Procedure Started
    
    // Verify that the DUT successfully establishes an RRC connection, attaches to the network, and connects to the IMS/INTERNET PDN.
    v_NasInd := f_NBIOT_RRC_ConnEst_DefWithNas(nbiot_Cell1,
                                               cr_EstablishmentCause_NB_Any,
                                               cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                  cr_CIOT_ATTACH_REQUEST(cr_AdditionalUpdateType_CIOT),
                                                                                  v_ESMMessage)); 
      
     f_NBIOT_InitialRegistration_Step5_14(nbiot_Cell1, CONTROL_PLANE, STATE2_NB_CONNECTED_UPDATED, v_NasInd);
      
      
      log(v_TcName,"Step4: Verify that the DUT successfully establishes an RRC connection and attaches to the LTE network");
    
     log(v_TcName, "Default Procedure Guard Timer Stopped");
    t_Procedure_Guard_Timer.stop; //Guard Procedure Ended
    
    log(v_TcName,"Step4: UE attached successfully");
      
    // Initiate the test application and verify that it connects successfully to the internet/admin PDN.
   t_Procedure_Guard_Timer.start(tsc_GuardProcedureTimer_240); //Guard Procedure Started
 
      log(v_TcName, "Step5: Initiate the test application (see section TEST EQUIPMENT CONFIGURATION) and verify that it connects successfully to the Admin PDN.");
    f_NBIOT_TriggerAdditionalPDN_Modified (nbiot_Cell1, CONTROL_PLANE, ?, cs_AccessPointName (tsc_Octet_Lower_ADMIN_APN), v_sApn);
     
      log(v_TcName,"Step5: UE connected to ",v_sApn," PDN");
 
     log(v_TcName, "Default Procedure Guard Timer Stopped");
    t_Procedure_Guard_Timer.stop; //Guard Procedure Ended
      
       log(v_TcName, "Step5: Configure the test application for the application idle state.");
    // The SS transmits a DEACTIVATE EPS BEARER CONTEXT REQUEST including the EPS bearer identity of the INTERNET/ADMIN PDN.
    log(v_TcName,"Step6: NAS Deactivate EPS Bearer Context Request for ",v_sApn," PDN message with an ESM Cause Code of 39 (Reactivation required)");
  
    SRB.send(cas_NB_SRB_NasPdu_REQ(nbiot_Cell1,
                                   tsc_SRB1bis,
                                   cs_TimingInfo_Now,
                                   cs_NAS_Request(tsc_SHT_IntegrityProtected_Ciphered,
                                                  cs_508_DeactivateEPSBearerCxtReq('6'H,
                                                                                   v_EpsTi,
                                                                                   v_EsmCause39))));  
    
    
     alt {
        []  SRB.receive(car_NB_SRB_NasPdu_IND(nbiot_Cell1,
                                           tsc_SRB1bis,
                                           cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered,
                                                             cr_ESM_DATA_TRANSPORT (tsc_EpsDefaultBearerId2, cr_UserDataContainer(?, ?), omit)))) {
              
            alt{                                                     
                [] SRB.receive(car_NB_SRB_NasPdu_IND(nbiot_Cell1,
                                      tsc_SRB1bis,
                                      cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered,
                                                        cr_508_DeactivateEPSBearerCxtAccept('6'H,
                                                                                             v_EpsTi)))){}
            
                []  SRB.receive(car_NB_SRB_NasPdu_IND(nbiot_Cell1,
                                           tsc_SRB1bis,
                                           cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered,
                                                             cr_ESM_DATA_TRANSPORT (tsc_EpsDefaultBearerId2, cr_UserDataContainer(?, ?), omit)))){
                                    
                     SRB.receive(car_NB_SRB_NasPdu_IND(nbiot_Cell1,
                                      tsc_SRB1bis,
                                      cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered,
                                                        cr_508_DeactivateEPSBearerCxtAccept('6'H,
                                                                                             v_EpsTi))));
                                    
                 }
            }
        }
          [] SRB.receive(car_NB_SRB_NasPdu_IND(nbiot_Cell1,
                                      tsc_SRB1bis,
                                      cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered,
                                                        cr_508_DeactivateEPSBearerCxtAccept('6'H,
                                                                                             v_EpsTi)))){}
     }
     
   
    
      
    log(v_TcName,"Step7: Received DEACTIVATE EPS BEARER CONTEXT ACCEPT"); 
    log (v_TcName,"Step8: Configure the test equipment such that the network will allow connectivity to the ",v_sApn," PDN when the UE attempts to re-connect to the ",v_sApn," PDN. Configure the test application for the application transmitting state with a retransmission timer set to 10 seconds."); 
    // Verify that the UE attempts to re-connect to the INTERNET/ADMIN PDN and that the reconnection is successful.
   // fl_UT_ApplyCommand(UT, cas_UT_Req(APP_TRANSMIT_STATE_ON, NO_CNF_REQUIRED,{cs_Ut_Parameter_Common ("ACTIVATE_ADMIN_APN", "10")}));
    fl_UT_ApplyCommand(UT, cas_UT_Req(INITIATE_ADMIN_TEST_APP, NO_CNF_REQUIRED));
    // Added Internet/Admin Application handling 
  
    log(v_TcName,"Step9: UE attempts to re-connect to ",v_sApn," PDN ");
    f_NBIOT_TriggerAdditionalPDN_Modified (nbiot_Cell1, CONTROL_PLANE, ?, cs_AccessPointName (tsc_Octet_Lower_ADMIN_APN), v_sApn);
    
     log(v_TcName, "Default Procedure Guard Timer Stopped");
    t_Procedure_Guard_Timer.stop; //Guard Procedure Ended
    fl_UT_ApplyCommand(UT, cas_UT_Req(APP_TRANSMIT_STATE_OFF, NO_CNF_REQUIRED,{cs_Ut_Parameter_Common ("ACTIVATE_ADMIN_APN", "0")}));
    
    log(v_TcName,"Step9a: UE successfully connected to ",v_sApn," PDN");
     
    
      //f_VZ_Ignore_Rach_Enable_Ind_Disable(eutra_Cell1);            //added for LCCP-2346
      t_T2sec.start;
    alt {
      []SRB.receive(car_NB_SRB0_RrcPdu_IND(nbiot_Cell1, cr_RRCConnectionRequest_NB ( cr_EstablishmentCause_NB_Any, ? ) ))
      {
          t_T2sec.stop;
           SRB.send(cas_NB_SRB0_RrcPdu_REQ(nbiot_Cell1, cs_TimingInfo_Now, cs_RRCConnectionReject_NB));    
      }
      []  SRB.receive(car_NB_SRB_NasPdu_IND(nbiot_Cell1,
                                           tsc_SRB1bis,
                                           cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered,
                                                             cr_ESM_DATA_TRANSPORT (tsc_EpsDefaultBearerId2, cr_UserDataContainer(?, ?), omit)))) {
                 t_T2sec.stop;                                            
      }   
      []t_T2sec.timeout{}
    }
 }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
     function f_TC_7_4_IMSLESS_NBIOT(charstring TestPlan_Name) runs on NBIOT_PTC
  { 
    
    log("Postamble Execution Done"); 
  } 
    
    
    
    
    
}