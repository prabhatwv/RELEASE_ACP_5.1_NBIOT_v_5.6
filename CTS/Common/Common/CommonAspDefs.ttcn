/******************************************************************************/
// @copyright   Copyright Notification
//   No part may be reproduced except as authorized by written permission.
//   The copyright and the foregoing restriction extend to reproduction in all media.
//   Trademark 2019, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).
//   All rights reserved.
// @version: 36.523-3 v15.3.0
// $Date: 2018-08-08 15:28:17 +0200 (Wed, 08 Aug 2018) $
// $Rev: 21981 $
/******************************************************************************/

module CommonAspDefs {

  import from CommonDefs all;

  //----------------------------------------------------------------------------

  group Cell_Configuration_Common {
  
  type record CellTimingInfo_Type {
                                        /* Cell Timing */
    integer TcOffset (0..63)  optional, /* For NR according to TS 38.211 clause 4.1 Ts/Tc = 64 with Tc = 1/(480000 * 4096) and Ts = 1/(15000 * 2048) as for EUTRA;
                                           => for NR to specify granularity per Tc; for EUTRA to be set to 0 (and/or to be ignored by the SS) */
    integer Tcell (0..307199),          /* frame duration Tf = 307200 * Ts = 10ms; System Time Unit Ts = 1/(15000 * 2048) */
    integer SfnOffset (0..1023),
    integer HsfnOffset (0..1023)
  };
  
  } // End group Cell_Configuration_Common
  
  //----------------------------------------------------------------------------

  group MAC_Layer {

  type union ULGrant_Period_Type {
    Null_Type                           OnlyOnce,                        /* grant is sent out only once; no period */
    integer                             Duration (1..infinity)           /* duration of the grant period in number of sub-frames (1ms) for EUTRA and number of slots for NR */
  };

  type union TransmissionRepetition_Type {
    Null_Type           Continuous,
    integer             NumOfCycles (1..infinity)
  };
  
  type record PeriodicGrant_Type {
    ULGrant_Period_Type                 Period,                 /* time period after which UL Grant need to be automatically transmitted or 'OnlyOnce' */
    TransmissionRepetition_Type         NoOfRepetitions         /* number of UL Grant repetitions to be automatically transmitted or continuous repetition */
  };

  type union UL_GrantConfig_Type  {
    Null_Type                   OnSR_Reception,                 /* SS transmits UL Grant as configured by DciInfoUL_Type at every reception of SR;
                                                                 * to be used in non L2 Test */
    PeriodicGrant_Type          Periodic,                       /* SS transmits UL Grant as configured by DciInfoUL_Type periodically;
                                                                 * to be used in L2 tests;
                                                                 * MAC tests testing Grants might set the period as infinite and num grant as 1 */
    PeriodicGrant_Type          PeriodicOnSR_Reception,        /* SS transmits UL Grant as configured by DciInfoUL_Type periodically; the periodic grant transmission
                                                                  * is started/restarted on reception of a SR from UE
                                                                  * to be used in non L2 Test to enable large UL data transmission for lower category UEs (Cat<=1)
                                                                  */

    Null_Type                   None                            /* disable any grant transmission */
  };

  type union RAR_RapIdCtrl_Type {
    Null_Type                           Automatic,              /* SS shall automatically use same RAPID as received from the UE */
    Null_Type                           Unmatched               /* SS shall use RAPID being different from preamble sent by the UE;
                                                                 * SS shall calculate this RAPID acc. to RAPID := (RAPID + 3..63) mod 64
                                                                 * if single RAR is transmitted in a MAC PDU then only 3 is added
                                                                 * if multiple RAR's are transmitted in MAC PDU, then for first unmatched RAR 3 is added, second unmatched 4 is added, third unmatched 5 is added and so on */
  };

  } // End group MAC_Layer

  //----------------------------------------------------------------------------

  group System_Indications {

  type enumerated HARQ_Type {ack, nack};                        /* ack represents HARQ ACK; nack represents HARQ NACK */

  } // End group System_Indications
  
  //----------------------------------------------------------------------------

  group ASP_CommonPart {                                        /* Definition of ASP common parts for REQ-, CNF- and IND-ASPs */

  group ASP_CommonPart_Definitions {
  
  group Routing_Info {

  // **** Common 4G/5G routing info ****

  const integer tsc_SRB0 := 0;
  const integer tsc_SRB1 := 1;
  const integer tsc_SRB2 := 2;
  const integer tsc_SRB3 := 3;

  type integer SRB_Identity_Type (tsc_SRB0, tsc_SRB1, tsc_SRB2, tsc_SRB3);

  type union DC_RlcBearerRouting_Type {              /* data routing e.g. in case of split bearer (split DRB or split SRB);
                                                        applicable for multi-RAT Dual Connectivity (MR-DC) as well as single-RAT Dual Connectivity */
    EUTRA_CellId_Type           EUTRA,
    NR_CellId_Type              NR,
    Null_Type                   None                    /* normal case: PDCP and RLC are configured at the same cell */
  };

  } // End sub-sub-group Routing_Info
  
  //----------------------------------------------------------------------------

  group Timing_Info {
  
  type integer SystemFrameNumber_Type (0..1023);
  type integer SubFrameNumber_Type (0..9);
  
  type union SubFrameInfo_Type {
    SubFrameNumber_Type         Number,
    Null_Type                   Any     /* no specific sub-frame (valid for REQ ASPs only) */
  };
  type union SystemFrameNumberInfo_Type {
    SystemFrameNumber_Type      Number,
    Null_Type                   Any     /* no specific frame number (valid for REQ ASPs only) */
  };
  type SystemFrameNumberInfo_Type HyperSystemFrameNumberInfo_Type;

  type union SlotOffset_Type {  /* slots per subframe according to TS 38.211 Table 4.3.2-1 */
    Null_Type                   Numerology0,            /* mu=0; only one slot per subframe */
    integer                     Numerology1 (0..1),     /* mu=1; 2 slots per subframe */
    integer                     Numerology2 (0..3),     /* mu=2; 4 slots per subframe */
    integer                     Numerology3 (0..7),     /* mu=3; 8 slots per subframe */
    integer                     Numerology4 (0..15)     /* mu=4; 16 slots per subframe */
  };

  type union SlotTimingInfo_Type {      /* EUTRA, NBIOT:
                                         * REQ ASPs: TTCN shall set the SlotTimingInfo to "FirstSlot" for EUTRA, NBIOT addressing the whole subframe
                                         * IND ASPs: TTCN shall ignore the SlotTimingInfo sent by the SS for EUTRA, NBIOT
                                         * NR:
                                         * REQ ASPs: Any:=true only if the slot number is not relevant,
                                         *           in which case the SS may choose the next available slot of the given subframe
                                         * IND ASPs: Any:=true only if there is no slot information available for the particular kind of indication */
    SlotOffset_Type             SlotOffset,             /* to address a particular slot in a subframe */
    Null_Type                   FirstSlot,              /* to address the first slot independent from the numerology (REQ ASPs only) or for REQ ASPs in EUTRA and NBIOT */
    Null_Type                   Any                     /* for IND ASPs in EUTRA and NBIOT or if slot number is not relevant or not available */
  };

  type record  SubFrameTiming_Type {
    SystemFrameNumberInfo_Type  SFN,
    SubFrameInfo_Type           Subframe,
    HyperSystemFrameNumberInfo_Type  HSFN,
    SlotTimingInfo_Type         Slot
  };
  type record  of SubFrameTiming_Type SubFrameTimingList_Type;
  type union TimingInfo_Type {
    SubFrameTiming_Type         SubFrame,
    Null_Type                   Now,    /* to be used in REQ ASPs when there is no 'activation time' */
    Null_Type                   None    /* only to be used in SYSTEM_CTRL_CNF or NR_SYSTEM_CTRL_CNF but not for EnquireTiming */
  };
  
  } // End sub-sub-group Timing_Info
  } // End sub-group ASP_CommonPart_Definitions
  
  //----------------------------------------------------------------------------

  group REQ_ASP_CommonPart {
  
  const boolean tsc_CnfReq := true;
  const boolean tsc_NoCnfReq := false;
  
  type record ReqAspControlInfo_Type {
    boolean CnfFlag,                    /* true => SS shall send CNF:
                                         * when the REQ is with no timing information (no activation time), SS shall send the confirmation when the configuration is done, i.e. when the test case may continue.
                                         * Example:
                                         * when there is a configuration followed by a send event it shall not be necessary to have a wait timer in between but the CNF triggers the send event.
                                         * If there are other triggers e.g. like the UE sending a message, CnfFlag shall be set to false by the test case to avoid racing conditions with the CNF and the signalling message.
                                         * When there is an activation time SS shall send the CNF after the configuration has been scheduled;
                                         * that means SS shall not wait until the activation time has been expired. */
    boolean FollowOnFlag                /* false => no further (related) information
                                         * true: further related information will be sent to SS (semantics depending on respective ASP) */
  };
  
  } // End sub-group REQ_ASP_CommonPart
  
  //----------------------------------------------------------------------------

  group CNF_ASP_CommonPart {

  type union ConfirmationResult_Type {
    Null_Type Success,
    integer   Error                     /* may contain SS specific error code; this will not be evaluated by TTCN */
  };
  
  } // End sub-group CNF_ASP_CommonPart
  
  //----------------------------------------------------------------------------

  group IND_ASP_CommonPart {
  
  type record IntegrityErrorIndication_Type {
    boolean   Nas,                                              /* NAS Integrity: set to true when received MAC does not match calculated MAC */
    boolean   Pdcp                                              /* PDCP Integrity: set to true when received MAC does not match calculated MAC */
  };

  type record ErrorIndication_Type {
    IntegrityErrorIndication_Type       Integrity,              /* Integrity error: received MAC does not match calculated MAC */
    integer                             System                  /* any other error: may be SS specific error code; this will not be evaluated by TTCN;
                                                                 * e.g. an error shall be raised when the UE requests retransmission of an RLC PDU */
  };
  
  type union IndicationStatus_Type {
    Null_Type Ok,
    ErrorIndication_Type        Error
  };
  
  } // End sub-group IND_ASP_CommonPart
  } // End group ASP_CommonPart
}
