/*
 * @author
 *     
 * @version
 *     1.0
 * @desc
 *     
 * @remark
 *     
 * @see
 *     
 */ 
module VZW_NBIOT_AlgMilenage 
{
    import from CommonDefs all;
  import from EUTRA_NB_Parameters all;  
  import from Parameters all;
    import from NAS_AuthenticationCommon all;
   
    
    
     /*--------------------- Rijndael S box table ----------------------*/
    const UInt8_Type S[256]:= {
     99,124,119,123,242,107,111,197, 48,  1,103, 43,254,215,171,118,
    202,130,201,125,250, 89, 71,240,173,212,162,175,156,164,114,192,
    183,253,147, 38, 54, 63,247,204, 52,165,229,241,113,216, 49, 21,
      4,199, 35,195, 24,150,  5,154,  7, 18,128,226,235, 39,178,117,
      9,131, 44, 26, 27,110, 90,160, 82, 59,214,179, 41,227, 47,132,
     83,209,  0,237, 32,252,177, 91,106,203,190, 57, 74, 76, 88,207,
    208,239,170,251, 67, 77, 51,133, 69,249,  2,127, 80, 60,159,168,
     81,163, 64,143,146,157, 56,245,188,182,218, 33, 16,255,243,210,
    205, 12, 19,236, 95,151, 68, 23,196,167,126, 61,100, 93, 25,115,
     96,129, 79,220, 34, 42,144,136, 70,238,184, 20,222, 94, 11,219,
    224, 50, 58, 10, 73,  6, 36, 92,194,211,172, 98,145,149,228,121,
    231,200, 55,109,141,213, 78,169,108, 86,244,234,101,122,174,  8,
    186,120, 37, 46, 28,166,180,198,232,221,116, 31, 75,189,139,138,
    112, 62,181,102, 72,  3,246, 14, 97, 53, 87,185,134,193, 29,158,
    225,248,152, 17,105,217,142,148,155, 30,135,233,206, 85, 40,223,
    140,161,137, 13,191,230, 66,104, 65,153, 45, 15,176, 84,187, 22};
        
        
    /*------- This array does the multiplication by x in GF(2^8) ------*/
    const UInt8_Type Xtime[256] := {
      0,  2,  4,  6,  8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30,
     32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62,
     64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94,
     96, 98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,
    128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,158,
    160,162,164,166,168,170,172,174,176,178,180,182,184,186,188,190,
    192,194,196,198,200,202,204,206,208,210,212,214,216,218,220,222,
    224,226,228,230,232,234,236,238,240,242,244,246,248,250,252,254,
     27, 25, 31, 29, 19, 17, 23, 21, 11,  9, 15, 13,  3,  1,  7,  5,
     59, 57, 63, 61, 51, 49, 55, 53, 43, 41, 47, 45, 35, 33, 39, 37,
     91, 89, 95, 93, 83, 81, 87, 85, 75, 73, 79, 77, 67, 65, 71, 69,
    123,121,127,125,115,113,119,117,107,105,111,109, 99, 97,103,101,
    155,153,159,157,147,145,151,149,139,137,143,141,131,129,135,133,
    187,185,191,189,179,177,183,181,171,169,175,173,163,161,167,165,
    219,217,223,221,211,209,215,213,203,201,207,205,195,193,199,197,
    251,249,255,253,243,241,247,245,235,233,239,237,227,225,231,229
    };
   
    type record length(4) of  UInt8_Type UInt8List_Type4;
    type record length(4) of  UInt8List_Type4 UInt8List_Type4_4; 
    type record length(11) of  UInt8List_Type4_4 UInt8List_Type11_4_4; 
    type record length(16) of UInt8_Type UInt8List_Type16;
    type record length(6) of UInt8_Type UInt8List_Type6;
    type record length(2) of UInt8_Type UInt8List_Type2; 
    type record length(8) of UInt8_Type UInt8List_Type8;   
        
        /* Byte substitution transformation */
    function  f_ByteSub(inout UInt8List_Type4_4 state) 
    {
       var UInt8_Type i, j;
       for (i:=0; i<4; i:=i+1)
       {
        for (j:=0; j<4; j:=j+1)
        { 
          state[i][j] := S[state[i][j]];
        }
       }
    }
    /* Row shift transformation */
    function f_ShiftRow(inout UInt8List_Type4_4 state)
    {
      var UInt8_Type temp;
    
      /* left rotate row 1 by 1 */
      temp := state[1][0];
      state[1][0] := state[1][1];
      state[1][1] := state[1][2];
      state[1][2] := state[1][3];
      state[1][3] := temp;
    
      /* left rotate row 2 by 2 */
      temp := state[2][0];
      state[2][0] := state[2][2];
      state[2][2] := temp;
      temp := state[2][1];
      state[2][1] := state[2][3];
      state[2][3] := temp;
    
      /* left rotate row 3 by 3 */
      temp := state[3][0];
      state[3][0] := state[3][3];
      state[3][3] := state[3][2];
      state[3][2] := state[3][1];
      state[3][1] := temp;
    
    }
    /* MixColumn transformation*/
    function f_MixColumn(inout UInt8List_Type4_4 state)
    {
      var UInt8_Type temp, tmp, tmp0;
      var UInt8_Type i;
    
      /* do one column at a time */
      for (i:=0; i<4;i:=i+1)
      {
        temp := bit2int(int2bit(state[0][i],8) xor4b int2bit(state[1][i],8) xor4b int2bit(state[2][i],8) xor4b int2bit(state[3][i],8));
        tmp0 := state[0][i];
    
        /* Xtime array does multiply by x in GF2^8 */
        tmp := Xtime[bit2int(int2bit(state[0][i],8) xor4b int2bit(state[1][i],8))];
        state[0][i] := bit2int(int2bit(state[0][i],8)xor4b(int2bit(temp,8) xor4b int2bit(tmp,8)));
    
        tmp := Xtime[bit2int(int2bit(state[1][i],8) xor4b int2bit(state[2][i],8))];
        state[1][i] :=bit2int(int2bit( state[1][i],8) xor4b (int2bit(temp,8) xor4b int2bit(tmp,8)));
    
        tmp := Xtime[bit2int(int2bit(state[2][i],8) xor4b int2bit(state[3][i],8))];
        state[2][i] := bit2int(int2bit(state[2][i],8) xor4b (int2bit(temp,8) xor4b int2bit(tmp,8)));
    
        tmp := Xtime[bit2int(int2bit(state[3][i],8) xor4b int2bit(tmp0,8))];
        state[3][i] := bit2int(int2bit(state[3][i],8) xor4b(int2bit(temp,8) xor4b int2bit(tmp,8)));
      }
    }  
    /* Round key addition function */
    function f_KeyAdd(inout UInt8List_Type4_4 state,  in UInt8List_Type11_4_4 rndKeys, in UInt8_Type round)
    {
      var UInt8_Type i, j;
       
      for (i:=0; i<4; i:=i+1)
      {
        for (j:=0; j<4; j:=j+1)
          {
          state[i][j] := bit2int(int2bit(state[i][j],8) xor4b int2bit(rndKeys[round][i][j],8));
          }    
      }
    }
    /*-------------------------------------------------------------------
     *  Rijndael encryption function.  Takes 16-byte input and creates 
     *  16-byte output (using round keys already derived from 16-byte 
     *  key).
     *-----------------------------------------------------------------*/
    
    function f_RijndaelEncrypt( in UInt8List_Type16 input, in UInt8List_Type11_4_4 roundKeys, out  UInt8List_Type16 output)
    {
      var UInt8List_Type4_4 state;
      var UInt8_Type i, r;
      
      /* initialise state array from input byte string */
      for (i:=0; i<16; i:=i+1)
        {
        state[bit2int(int2bit(i,8) and4b int2bit(3,8))][bit2int(int2bit(i,8)>>2)] := input[i];
        }
      /* add first round_key */
      f_KeyAdd(state, roundKeys, 0);
      
      /* do lots of full rounds */
      for (r:=1; r<=9; r:=r+1)
      {
        f_ByteSub(state);
        f_ShiftRow(state);
        f_MixColumn(state);
        f_KeyAdd(state, roundKeys, r);
      }
    
      /* final round */
      f_ByteSub(state);
      f_ShiftRow(state);
      f_KeyAdd(state, roundKeys, r);
    
      /* produce output byte string from state array */
      for (i:=0; i<16; i:=i+1)
      {
       output[i] := state[bit2int(int2bit(i,8) and4b int2bit(3,8))][bit2int(int2bit(i,8)>>2)];
      }
    } /* end of function RijndaelEncrypt */   
    /*-------------------------------------------------------------------
     *  Rijndael key schedule function.  Takes 16-byte key and creates 
     *  all Rijndael's internal subkeys ready for encryption.
     *-----------------------------------------------------------------*/
    
    function f_RijndaelKeySchedule( in UInt8List_Type16 key,out UInt8List_Type11_4_4 roundKeys)
    {
      var UInt8_Type roundConst;
      var UInt8_Type i, j;
      /* first round key equals key */
      for (i:=0; i<16; i:=i+1)
        {
            //log("Rijnda:", int2bit(i,8), int2bit(3,8), (int2bit(i,8) and4b int2bit(3,8)),int2bit(i,8),int2bit(i,8)>>2);
            //log("Rijnda:", bit2int(int2bit(i,8) & int2bit(3,8)),bit2int(int2bit(i,8)>>2));
        roundKeys[0][bit2int(int2bit(i,8) and4b int2bit(3,8))][bit2int(int2bit(i,8)>>2)] := key[i];
        }
      roundConst := 1;
    
      /* now calculate round keys */
      for (i:=1; i<11; i:=i+1)
      {
        roundKeys[i][0][0] := bit2int(int2bit(S[roundKeys[i-1][1][3]],8)
                             xor4b int2bit(roundKeys[i-1][0][0],8) xor4b int2bit(roundConst,8));
        roundKeys[i][1][0] := bit2int(int2bit(S[roundKeys[i-1][2][3]],8)
                             xor4b int2bit(roundKeys[i-1][1][0],8));
        roundKeys[i][2][0] := bit2int(int2bit(S[roundKeys[i-1][3][3]],8)
                             xor4b int2bit( roundKeys[i-1][2][0],8));
        roundKeys[i][3][0] := bit2int(int2bit(S[roundKeys[i-1][0][3]],8)
                              xor4b int2bit(roundKeys[i-1][3][0],8));
    
        for (j:=0; j<4; j:=j+1)
        {
          roundKeys[i][j][1] := bit2int(int2bit(roundKeys[i-1][j][1],8) xor4b int2bit( roundKeys[i][j][0],8));
          roundKeys[i][j][2] := bit2int(int2bit(roundKeys[i-1][j][2],8) xor4b int2bit( roundKeys[i][j][1],8));
          roundKeys[i][j][3] := bit2int(int2bit(roundKeys[i-1][j][3],8) xor4b int2bit( roundKeys[i][j][2],8));
        }
    
        /* update round constant */
        roundConst := Xtime[roundConst];
      }
    }
    
    /*-------------------------------------------------------------------
     *  Function to compute OPc from OP and K.  Assumes key schedule has
        already been performed.
     *-----------------------------------------------------------------*/
    
    function f_ComputeOPc(in UInt8List_Type11_4_4 roundKeys, out UInt8List_Type16 op_c)
    {
      var UInt8_Type i;
      var UInt8_Type OP[16];  
      
      //var boolean OPc_configured := true;
        
      for(i:=0;i<16;i:=i+1)
      {
         OP[i]:=bit2int(substr(px_OPKey,i*8,8));
      }    
      
      f_RijndaelEncrypt( OP,roundKeys,op_c);
      for (i:=0; i<16; i:=i+1)
      {  
         if(px_OPc_configured == false)
         {
           op_c[i]:= bit2int(int2bit(op_c[i],8) xor4b int2bit(OP[i],8));
         }
         else
         {
           op_c[i] := OP[i];
         }
      } 
    } /* end of function ComputeOPc */    
    /*-------------------------------------------------------------------
     *                            Algorithm f1
     *-------------------------------------------------------------------
     *
     *  Computes network authentication code MAC-A from key K, random
     *  challenge RAND, sequence number SQN and authentication management
     *  field AMF.
     *
     *-----------------------------------------------------------------*/
    
    function f_f1    ( in B128_Type key, in B128_Type random, in B48_Type sequence, in B16_Type authmf, 
                 inout B64_Type mac )
    {
      var UInt8List_Type16 k;
      var UInt8List_Type16 rand;
      var UInt8List_Type6 sqn;
      var UInt8List_Type2 amf; 
      var UInt8List_Type8 mac_a;  
      var UInt8List_Type16 op_c;
      var UInt8List_Type16 temp;
      var UInt8List_Type16 in1;
      var UInt8List_Type16 out1;
      var UInt8List_Type16 rijndaelInput;
      var UInt8_Type i;
      var UInt8List_Type11_4_4 roundkeys;  
    
      for(i:=0;i<16;i:=i+1)
      {
         k[i]:=bit2int(substr(key,i*8,8));
         rand[i]:=bit2int(substr(random,i*8,8));
              
         if(i<6)
         {
            sqn[i]:=bit2int(substr(sequence,i*8,8));
            if(i<2)
            {
             amf[i]:=bit2int(substr(authmf,i*8,8));
            }    
         }    
       }    
        
      f_RijndaelKeySchedule( k,roundkeys);
    
      f_ComputeOPc( roundkeys,op_c );
    
      for (i:=0; i<16; i:=i+1)
      {
        rijndaelInput[i] := bit2int(int2bit(rand[i],8) xor4b int2bit(op_c[i],8));
      }
     
      f_RijndaelEncrypt( rijndaelInput, roundkeys,temp );
    
      for (i:=0; i<6; i:=i+1)
      {
        in1[i]    := sqn[i];
        in1[i+8]  := sqn[i];
      }
      for (i:=0; i<2; i:=i+1)
      {
        in1[i+6]  := amf[i];
        in1[i+14] := amf[i];
      }
    
      /* XOR op_c and in1, rotate by r1=64, and XOR *
       * on the constant c1 (which is all zeroes)   */
    
      for (i:=0; i<16; i:=i+1)
      {  
        rijndaelInput[(i+8) mod 16] := bit2int(int2bit(in1[i],8) xor4b int2bit(op_c[i],8));
      }
      /* XOR on the value temp computed before */
    
      for (i:=0; i<16; i:=i+1)
      {  
        rijndaelInput[i] := bit2int(int2bit(rijndaelInput[i],8) xor4b int2bit(temp[i],8));
      }
      f_RijndaelEncrypt( rijndaelInput, roundkeys, out1 );
      for (i:=0; i<16; i:=i+1)
      {  
        out1[i] := bit2int(int2bit(out1[i],8) xor4b int2bit(op_c[i],8));
      }
      for (i:=0; i<8; i:=i+1)
      {  
        mac_a[i] := out1[i];   
        mac:=replace(mac,i*8,8,int2bit(mac_a[i],8));  
      }

    } /* end of function f1 */
    
    
      
    /*-------------------------------------------------------------------
     *                            Algorithms f2-f5
     *-------------------------------------------------------------------
     *
     *  Takes key K and random challenge RAND, and returns response RES,
     *  confidentiality key CK, integrity key IK and anonymity key AK.
     *
     *-----------------------------------------------------------------*/
    
    function f_f2345 ( in B128_Type key, in B128_Type random,
                 inout B32_128_Type response, inout B128_Type ckey, inout B128_Type ikey, inout B48_Type akey )
    {
      var UInt8List_Type16 k;
      var UInt8List_Type16 rand;
      var UInt8List_Type8 res;
      var UInt8List_Type16 ck;
      var UInt8List_Type16 ik;
      var UInt8List_Type6 ak;  
      var UInt8List_Type16 op_c;
      var UInt8List_Type16 temp;
      var UInt8List_Type16 out1;
      var UInt8List_Type16 rijndaelInput;
      var UInt8List_Type11_4_4 roundkeys;  
      var UInt8_Type i;
      for(i:=0;i<16;i:=i+1)
      {
        k[i]:=bit2int(substr(key,i*8,8));
        rand[i]:=bit2int(substr(random,i*8,8));
                 
      }
      f_RijndaelKeySchedule( k,roundkeys );
    
      f_ComputeOPc( roundkeys,op_c );
      
        
      for (i:=0; i<16; i:=i+1)
      {  
        rijndaelInput[i] := bit2int(int2bit(rand[i],8) xor4b int2bit(op_c[i],8));
      }    
      f_RijndaelEncrypt( rijndaelInput, roundkeys,temp );
    
      /* To obtain output block OUT2: XOR OPc and TEMP,    *
       * rotate by r2=0, and XOR on the constant c2 (which *
       * is all zeroes except that the last bit is 1).     */
    
      for (i:=0; i<16; i:=i+1)
      {  
        rijndaelInput[i] := bit2int(int2bit(temp[i],8) xor4b int2bit(op_c[i],8));
      }    
      rijndaelInput[15] := bit2int(int2bit(rijndaelInput[15],8) xor4b int2bit(1,8));
    
      f_RijndaelEncrypt( rijndaelInput, roundkeys,out1 );
      for (i:=0; i<16; i:=i+1)
      {  
        out1[i] := bit2int(int2bit(out1[i],8) xor4b int2bit(op_c[i],8));
      } 
      for (i:=0; i<8; i:=i+1)
      {  
        res[i] := out1[i+8];
        response:=replace(response,i*8,8,int2bit(res[i],8));  
      }    
      for (i:=0; i<6; i:=i+1)
      {  
        ak[i]  := out1[i];
        akey:=replace(akey,i*8,8,int2bit(ak[i],8));  
      } 
      /* To obtain output block OUT3: XOR OPc and TEMP,        *
       * rotate by r3=32, and XOR on the constant c3 (which    *
       * is all zeroes except that the next to last bit is 1). */
    
      for (i:=0; i<16; i:=i+1)
      {  
        rijndaelInput[(i+12) mod 16] := bit2int(int2bit(temp[i],8) xor4b int2bit(op_c[i],8));
      }    
      rijndaelInput[15] := bit2int(int2bit(rijndaelInput[15],8) xor4b int2bit(2,8));
    
      f_RijndaelEncrypt( rijndaelInput, roundkeys,out1 );
      for (i:=0; i<16; i:=i+1)
      {  
        out1[i] := bit2int(int2bit(out1[i],8) xor4b int2bit(op_c[i],8));
      }
      for (i:=0; i<16; i:=i+1)
      {  
        ck[i] := out1[i];
        ckey:=replace(ckey,i*8,8,int2bit(ck[i],8));  
      }
      /* To obtain output block OUT4: XOR OPc and TEMP,         *
       * rotate by r4=64, and XOR on the constant c4 (which     *
       * is all zeroes except that the 2nd from last bit is 1). */
    
      for (i:=0; i<16; i:=i+1)
      { 
        rijndaelInput[(i+8) mod 16] := bit2int(int2bit(temp[i],8) xor4b int2bit(op_c[i],8));
      }     
      rijndaelInput[15] :=bit2int(int2bit(rijndaelInput[15],8) xor4b int2bit(4,8));
    
      f_RijndaelEncrypt( rijndaelInput, roundkeys,out1 );
      for (i:=0; i<16; i:=i+1)
      {  
        out1[i] := bit2int(int2bit(out1[i],8) xor4b int2bit(op_c[i],8));
      }
      for (i:=0; i<16; i:=i+1)
      {  
        ik[i] := out1[i];
        ikey:=replace(ikey,i*8,8,int2bit(ik[i],8));  
      }
    } /* end of function f2345 */
    
      
    /*-------------------------------------------------------------------
     *                            Algorithm f1*
     *-------------------------------------------------------------------
     *
     *  Computes resynch authentication code MAC-S from key K, random
     *  challenge RAND, sequence number SQN and authentication management
     *  field AMF.
     *
     *-----------------------------------------------------------------*/
    
    function f_f1star( in B128_Type key, in B128_Type random, in B48_Type sequence, in B16_Type  authmf, 
                  inout B64_Type  mac )
    {
      var UInt8List_Type16 k;
      var UInt8List_Type16 rand;
      var UInt8List_Type6 sqn;
      var UInt8List_Type2 amf;  
      var UInt8List_Type16 op_c;
      var UInt8List_Type16 temp;
      var UInt8List_Type16 in1;
      var UInt8List_Type16 out1;
      var UInt8List_Type16 rijndaelInput;
      var UInt8_Type i;
      var UInt8List_Type11_4_4 roundkeys;
      
      for(i:=0;i<16;i:=i+1)
      {
         k[i]:=bit2int(substr(key,i*8,8));
         rand[i]:=bit2int(substr(random,i*8,8));
              
         if(i<6)
         {
             sqn[i]:=bit2int(substr(sequence,i*8,8));
             if(i<2)
             {
                 amf[i]:=bit2int(substr(authmf,i*8,8));
             }    
         }    
      }     
      f_RijndaelKeySchedule( k,roundkeys );
    
      f_ComputeOPc( roundkeys,op_c );
    
      for (i:=0; i<16; i:=i+1)
      {  
        rijndaelInput[i] := bit2int(int2bit(rand[i],8) xor4b int2bit(op_c[i],8));
      }    
      f_RijndaelEncrypt( rijndaelInput, roundkeys, temp );
    
      for (i:=0; i<6; i:=i+1)
      {
        in1[i]   := sqn[i];
        in1[i+8]  := sqn[i];
      }
      for (i:=0; i<2; i:=i+1)
      {
        in1[i+6]  := amf[i];
        in1[i+14] := amf[i];
      }
    
      /* XOR op_c and in1, rotate by r1=64, and XOR *
       * on the constant c1 (which is all zeroes)   */
    
      for (i:=0; i<16; i:=i+1)
      {  
        rijndaelInput[(i+8) mod 16] := bit2int(int2bit(in1[i],8) xor4b int2bit(op_c[i],8));
      }
      /* XOR on the value temp computed before */
    
      for (i:=0; i<16; i:=i+1)
      {  
        rijndaelInput[i] :=bit2int(int2bit(rijndaelInput[i],8) xor4b int2bit(temp[i],8));
      }
      f_RijndaelEncrypt( rijndaelInput, roundkeys, out1 );
      for (i:=0; i<16; i:=i+1)
      {  
        out1[i] :=bit2int(int2bit(out1[i],8) xor4b int2bit(op_c[i],8));
      }

       mac := (int2bit(out1[8],8) & int2bit(out1[9],8) & int2bit(out1[10],8) 
              & int2bit(out1[11],8) & int2bit(out1[12],8) & int2bit(out1[13],8)
              & int2bit(out1[14],8) & int2bit(out1[15],8));
    } /* end of function f1star */
    /*-------------------------------------------------------------------
     *                            Algorithm f5*
     *-------------------------------------------------------------------
     *
     *  Takes key K and random challenge RAND, and returns resynch
     *  anonymity key AK.
     *
     *-----------------------------------------------------------------*/
    
    function f_f5star( in B128_Type  key, in B128_Type  random, inout B48_Type  akey)
    {
      var UInt8List_Type16 k;
      var UInt8List_Type16 rand;
      var UInt8List_Type6 ak;  
      var UInt8List_Type16 op_c;
      var UInt8List_Type16 temp;
      var UInt8List_Type16 out1;
      var UInt8List_Type16 rijndaelInput;
      var UInt8_Type i;
      var UInt8List_Type11_4_4 roundkeys;  
      for(i:=0;i<16;i:=i+1)
      {
        k[i]:=bit2int(substr(key,i*8,8));
        rand[i]:=bit2int(substr(random,i*8,8));         
      }  
      f_RijndaelKeySchedule( k ,roundkeys);
    
      f_ComputeOPc( roundkeys,op_c );
    
      for (i:=0; i<16; i:=i+1)
      {  
        rijndaelInput[i] := bit2int(int2bit(rand[i],8) xor4b int2bit(op_c[i],8));
      }    
      f_RijndaelEncrypt( rijndaelInput, roundkeys, temp );
    
      /* To obtain output block OUT5: XOR OPc and TEMP,         *
       * rotate by r5=96, and XOR on the constant c5 (which     *
       * is all zeroes except that the 3rd from last bit is 1). */
    
      for (i:=0; i<16; i:=i+1)
      {  
        rijndaelInput[(i+4) mod 16] := bit2int(int2bit(temp[i],8) xor4b int2bit(op_c[i],8));
      }    
      rijndaelInput[15] :=bit2int(int2bit(rijndaelInput[15],8) xor4b int2bit(8,8));
    
      f_RijndaelEncrypt( rijndaelInput, roundkeys, out1 );
      for (i:=0; i<16; i:=i+1)
      {  
        out1[i] :=bit2int(int2bit(out1[i],8) xor4b int2bit(op_c[i],8));
      }
       
      akey:= (int2bit(out1[0],8) & int2bit(out1[1],8) & int2bit(out1[2],8) 
              & int2bit(out1[3],8) & int2bit(out1[4],8) & int2bit(out1[5],8));  
       
    } /* end of function f5star */
    
    
    
    function f_AuthenticationResync_InvalidSqn(Common_AuthenticationParams_Type p_Auth_Params
                                ) return Common_AuthenticationParams_Type
    {
      
      var Common_AuthenticationParams_Type v_Auth_Params := p_Auth_Params;
      var B64_Type macRcvd;
      var B64_Type macCalc:=hex2bit('0000000000000000'H);
      var B48_Type sqnMS;
      var B48_Type v_AuthSQN;
      var B16_Type v_AuthAMF := hex2bit('0000'H); 
    
      //log("==========MILENAGE KEY RESYNC for AUTH FAIL=============");  
      //log("Shared key:",bit2hex(px_AuthK));
      //log("Rand:",bit2hex(v_Auth_Params.RandValue));  
      //log("AUTS:",bit2hex(v_Auth_Params.AUTS));  
      
      f_f5star(px_AuthK, p_Auth_Params.RandValue, p_Auth_Params.AK) ;
      //log("AK Key:",bit2hex(p_Auth_Params.AK));
      
      /*Construct UEs Seq Num*/
      sqnMS := substr(p_Auth_Params.AUTS,0,48) xor4b p_Auth_Params.AK;

       
       /*Extract MAC Received From UE*/
       macRcvd := substr(p_Auth_Params.AUTS,48,64);
       //log("MAC RCVD:",bit2hex(macRcvd));
             /*Generate MAC*/
       //log("AMF :", bit2hex(px_AuthAMF));
       //log("K :", bit2hex(px_AuthK));   
       //log("Rand:",bit2hex(v_Auth_Params.RandValue));   
       //log("SQNMS:",bit2hex(sqnMS));

       f_f1star(px_AuthK,p_Auth_Params.RandValue, sqnMS, v_AuthAMF, macCalc);
       //log("MAC CALC:",bit2hex(macCalc));

       /*Received MAC And Calculated MAC Should Match*/
       if(macCalc == macRcvd)
       {
          /*Update UE's Sequence Number*/
           v_Auth_Params.AUTH_SQN := sqnMS and4b '100000111011101110111101111101111101111101111101'B;
       }
       else
       {
           v_Auth_Params.AUTH_SQN := sqnMS and4b '100000111011101110111101111101111101111101111101'B;
          /* MAC Failure: Illegal UE */
       }
       
       return v_Auth_Params;
  }

    
    
    
    function f_AuthenticationResync(Common_AuthenticationParams_Type p_Auth_Params
                                ) return Common_AuthenticationParams_Type
    {
      
      var Common_AuthenticationParams_Type v_Auth_Params := p_Auth_Params;
      var B64_Type macRcvd;
      var B64_Type macCalc:=hex2bit('0000000000000000'H);
      var B48_Type sqnMS;
      var B48_Type v_AuthSQN;
      var B16_Type v_AuthAMF := hex2bit('0000'H); 
    
      //log("==========MILENAGE KEY RESYNC for AUTH FAIL=============");  
      //log("Shared key:",bit2hex(px_AuthK));
      //log("Rand:",bit2hex(v_Auth_Params.RandValue));  
      //log("AUTS:",bit2hex(v_Auth_Params.AUTS));  
      
      f_f5star(px_AuthK, p_Auth_Params.RandValue, p_Auth_Params.AK) ;
      //log("AK Key:",bit2hex(p_Auth_Params.AK));
      
      /*Construct UEs Seq Num*/
      sqnMS := substr(p_Auth_Params.AUTS,0,48) xor4b p_Auth_Params.AK;

       
       /*Extract MAC Received From UE*/
       macRcvd := substr(p_Auth_Params.AUTS,48,64);
       //log("MAC RCVD:",bit2hex(macRcvd));
             /*Generate MAC*/
       //log("AMF :", bit2hex(px_AuthAMF));
       //log("K :", bit2hex(px_AuthK));   
       //log("Rand:",bit2hex(v_Auth_Params.RandValue));   
       //log("SQNMS:",bit2hex(sqnMS));

       f_f1star(px_AuthK,p_Auth_Params.RandValue, sqnMS, v_AuthAMF, macCalc);
       //log("MAC CALC:",bit2hex(macCalc));

       /*Received MAC And Calculated MAC Should Match*/
       if(macCalc == macRcvd)
       {
          /*Update UE's Sequence Number*/
           v_Auth_Params.AUTH_SQN := sqnMS;
       }
       else
       {
           v_Auth_Params.AUTH_SQN := sqnMS;
          /* MAC Failure: Illegal UE */
       }
       
       return v_Auth_Params;
  }

    
 /* function f_AuthenticationResync_InvalidSqn(Common_AuthenticationParams_Type p_Auth_Params
                                ) return Common_AuthenticationParams_Type
    {
      
      var Common_AuthenticationParams_Type v_Auth_Params := p_Auth_Params;
      var B64_Type macRcvd;
      var B64_Type macCalc:=hex2bit('0000000000000000'H);
      var B48_Type sqnMS;
      var B48_Type v_AuthSQN;
      var B16_Type v_AuthAMF := hex2bit('0000'H); 
    
      //log("==========MILENAGE KEY RESYNC for AUTH FAIL=============");  
           
      f_f5star(px_AuthK, p_Auth_Params.RandValue, p_Auth_Params.AK) ;
       
      //Construct UEs Seq Num
      sqnMS := substr(p_Auth_Params.AUTS,0,48) xor4b p_Auth_Params.AK;

       
       //Extract MAC Received From UE
       macRcvd := substr(p_Auth_Params.AUTS,48,64);
       
       f_f1star(px_AuthK,p_Auth_Params.RandValue, sqnMS, v_AuthAMF, macCalc);
    
       //Received MAC And Calculated MAC Should Match
       if(macCalc == macRcvd)
       {
          //Update UE's Sequence Number
           v_Auth_Params.AUTH_SQN := sqnMS and4b '100000111011101110111101111101111101111101111101'B;
       }
       else
       {
           v_Auth_Params.AUTH_SQN := sqnMS and4b '100000111011101110111101111101111101111101111101'B;
          // MAC Failure: Illegal UE 
       }
       
       return v_Auth_Params;
  }    */

function f_IncrementAuth_Sqn(Common_AuthenticationParams_Type p_Auth_Params) return B48_Type
{
   var UInt8_Type ind := 0;
   var UInt8_Type bits := 0;
   var UInt8_Type inc := 0;
   var UInt8_Type indx :=0;
   var B48_Type seqNmb1;
   var integer VB_HSS_SEQ_NMB_SIZE:=6;
   var UInt8List_Type6 seqNmb;  
  
   for(indx:=0;indx<VB_HSS_SEQ_NMB_SIZE;indx:=indx+1)
   {
      seqNmb[indx] :=bit2int(substr(p_Auth_Params.AUTH_SQN,indx*8,8));
   }
  
 
   ind  := bit2int(int2bit(seqNmb[VB_HSS_SEQ_NMB_SIZE - 1],8) and4b hex2bit('1F'H));
   bits := bit2int((int2bit(seqNmb[VB_HSS_SEQ_NMB_SIZE - 1],8) and4b hex2bit('e0'H)) >> 5);

   ind := (ind+1) mod 32;
   if(hex2int('07'H) == bits)
   {
      bits := 0;
      inc := 1;
   }
   else
   {
      bits := bits+1;
   }

   seqNmb[VB_HSS_SEQ_NMB_SIZE - 1] := bit2int((int2bit(bits,8) << 5) or4b int2bit(ind,8));

   for(indx := VB_HSS_SEQ_NMB_SIZE - 2; (indx >= 0) and (1 == inc); indx:=indx-1)
   {
      if(hex2int('FF'H) == seqNmb[indx])
      {
         seqNmb[indx] := 0;
      }
      else
      {
         seqNmb[indx] := seqNmb[indx]+1;
         inc := 0;
      }
   }
   seqNmb1 := (int2bit(seqNmb[0],8) & int2bit(seqNmb[1],8) & int2bit(seqNmb[2],8) 
          & int2bit(seqNmb[3],8) & int2bit(seqNmb[4],8) & int2bit(seqNmb[5],8));  
   return seqNmb1;
}
    
    
   //VZW NBIOT: Added for DR TC 3.2 
  function f_AuthenticationInit_MILENAGE_ZeroAMF(Common_AuthenticationParams_Type p_Auth_Params,
                                AuthenticationError_Type p_AuthenticationError := noError) return Common_AuthenticationParams_Type
  {  //@sic R5-123085 harmonisation of IMS (AuthenticationInit and the two error variants are needed for IMS too) sic@ 
    var Common_AuthenticationParams_Type v_Auth_Params := p_Auth_Params;
    var B48_Type v_AuthSQN;
    var B16_Type v_AuthAMF := '0000000000000000'B;//1000000000000000//
    var B64_Type v_MAC:= hex2bit('0000000000000000'H);
    var B48_Type seq_Xor_Ak;
    
      
    v_AuthSQN := f_IncrementAuth_Sqn(p_Auth_Params);
     
     
    p_Auth_Params.AUTH_SQN := v_AuthSQN;
      
      

    log("==========MILENAGE KEY GEN for AKA=============");
    //log("Shared key:",bit2hex(px_AuthK));
    //log("Rand:",bit2hex(v_Auth_Params.RandValue));
   
    f_f2345(px_AuthK,
                     v_Auth_Params.RandValue , v_Auth_Params.XRES,
                     v_Auth_Params.CK, v_Auth_Params.IK, v_Auth_Params.AK);

      
    f_f1(px_AuthK,
               v_Auth_Params.RandValue, v_AuthSQN, v_AuthAMF, v_MAC);
    
    if ((p_AuthenticationError == macError) or (p_AuthenticationError == macErrorPlusSepBit)) 
    {  // @sic R5s130201 sic@
      v_MAC := not4b(v_MAC);  // @sic R5s110313 sic@
    }
      
    
      log("VZW: Construct AUTN");
     
    seq_Xor_Ak := v_AuthSQN xor4b v_Auth_Params.AK;      
     v_Auth_Params.AUTN := seq_Xor_Ak & v_AuthAMF & v_MAC; 
      
    /*log("XRES:",bit2hex(v_Auth_Params.XRES));
    log("CK:",bit2hex(v_Auth_Params.CK));
    log("IK:",bit2hex(v_Auth_Params.IK));
    log("AK:",bit2hex(v_Auth_Params.AK));   
    log("MAC:",bit2hex(v_MAC));*/   
     
    
   
      
    return v_Auth_Params;
  }  

    //----------------------------------------------------------------------------
  /*
   * @desc      Calculation is done according to 34.108, clause 8.1.2 and 33.102, clause 6.8.1.2
   *            Generation of Ck, Ik, AUTN and XRES
   * @param     p_Auth_Params
   * @param     p_AuthenticationError (default value: noError)
   * @return    Common_AuthenticationParams_Type
   * @status    
   */
 function f_AuthenticationInit_MILENAGE(Common_AuthenticationParams_Type p_Auth_Params,
                                AuthenticationError_Type p_AuthenticationError := noError) return Common_AuthenticationParams_Type
  {  //@sic R5-123085 harmonisation of IMS (AuthenticationInit and the two error variants are needed for IMS too) sic@ 
    var Common_AuthenticationParams_Type v_Auth_Params := p_Auth_Params;
    var B48_Type v_AuthSQN;
    var B16_Type v_AuthAMF := px_AuthAMF;
    var B64_Type v_MAC:= hex2bit('0000000000000000'H);
    var B48_Type seq_Xor_Ak;
    
      
    v_AuthSQN := f_IncrementAuth_Sqn(p_Auth_Params);
     
     
    p_Auth_Params.AUTH_SQN := v_AuthSQN;
      
      

    //log("==========MILENAGE KEY GEN for AKA=============");
    //log("Shared key:",bit2hex(px_AuthK));
    //log("Rand:",bit2hex(v_Auth_Params.RandValue));
   
    f_f2345(px_AuthK,
                     v_Auth_Params.RandValue , v_Auth_Params.XRES,
                     v_Auth_Params.CK, v_Auth_Params.IK, v_Auth_Params.AK);

      
    f_f1(px_AuthK,
               v_Auth_Params.RandValue, v_AuthSQN, v_AuthAMF, v_MAC);
    
    if ((p_AuthenticationError == macError) or (p_AuthenticationError == macErrorPlusSepBit)) 
    {  // @sic R5s130201 sic@
      v_MAC := not4b(v_MAC);  // @sic R5s110313 sic@
    }
      
    
      //log("VZW: Construct AUTN");
     
    seq_Xor_Ak := v_AuthSQN xor4b v_Auth_Params.AK;      
     v_Auth_Params.AUTN := seq_Xor_Ak & v_AuthAMF & v_MAC; 
      
    /*log("XRES:",bit2hex(v_Auth_Params.XRES));
    log("CK:",bit2hex(v_Auth_Params.CK));
    log("IK:",bit2hex(v_Auth_Params.IK));
    log("AK:",bit2hex(v_Auth_Params.AK));   
    log("MAC:",bit2hex(v_MAC));*/   
     
    
   
      
    return v_Auth_Params;
  }  
    
     
}