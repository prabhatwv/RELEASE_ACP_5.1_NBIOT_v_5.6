/******************************************************************************/
// @copyright   Copyright Notification
//   No part may be reproduced except as authorized by written permission.
//   The copyright and the foregoing restriction extend to reproduction in all media.
//   Trademark 2019, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).
//   All rights reserved.
// @version: 36.523-3 v15.3.0
// $Date: 2018-12-05 13:58:58 +0100 (Wed, 05 Dec 2018) $
// $Rev: 23388 $
/******************************************************************************/

module NBIOT_Paging {

  import from NBIOT_RRC_ASN1_Definitions language "ASN.1:2002" all with {encode "UNALIGNED_PER_OctetAligned"};
  import from CommonAspDefs all;
  import from CommonDefs all;
  import from EUTRA_NB_CommonDefs all;
  import from EUTRA_NB_RRC_Templates all;
  import from NBIOT_ASP_TypeDefs all;
  import from NBIOT_CellInfo all;
  import from NBIOT_CommonDefs all;
  import from NBIOT_Component all;
  import from NBIOT_Imported_EUTRA_ASN1_Types all;
  import from NBIOT_RRC_Templates all;
  import from NBIOT_SRB_DRB_Templates all;
  import from NBIOT_Timing all;
  import from Parameters all;

  const PTWLengthParameters tsc_PTWLengthParameters_NB := { 2.56, 5.12, 7.68, 10.24, 12.8, 15.36, 17.92, 20.48, 23.04, 25.6, 28.16, 30.72, 33.28, 35.84, 38.4, 40.96 }; /* @status    APPROVED (NBIOT) */

  const float tsc_NBIOT_DelayForCellSelection := 1.0;                        /* delay to allow the UE to perform cell selection, e.g. before paging or change of power level
                                                                                @status    APPROVED (NBIOT) */

  template (value) PagingRecord_NB_r13 cs_NB_PagingRecord(template (value) EUTRA_ASN1_PagingUE_Identity_Type p_PagingUE_Identity) := { ue_Identity_r13 := p_PagingUE_Identity };            /* @status    APPROVED (NBIOT) */

  template (value) PagingRecordList_NB_r13 cs_NB_Paging_OneRecord(template (value) EUTRA_ASN1_PagingUE_Identity_Type p_PagingUE_Identity) := { cs_NB_PagingRecord(p_PagingUE_Identity) };   /* @status    APPROVED (NBIOT) */

  template (value) PCCH_Message_NB cs_NB_RRC_Paging(template (omit)  PagingRecordList_NB_r13 p_PagingRecordList,
                                                    template (omit)  NB_Paging_SystemInfoModification_Type p_SystemInfoModification,
                                                    template (omit)  NB_Paging_SystemInfoModification_eDRX_Type p_SystemInfoMod_eDRX) :=
  { /* @status    APPROVED (NBIOT) */
    message_ := {
      c1 := {
        paging_r13 := {
          pagingRecordList_r13 := p_PagingRecordList,
          systemInfoModification_r13 := p_SystemInfoModification,
          systemInfoModification_eDRX_r13 := p_SystemInfoMod_eDRX,
          nonCriticalExtension := omit
        }
      }
    }
  };

  template (value) NB_SYSTEM_CTRL_REQ cas_NB_CellConfig_Paging_REQ_Common(NBIOT_CellId_Type p_CellId,
                                                                          template (value) SubFrameTiming_Type p_PagingOcassion,
                                                                          template (value) NB_PagingMessage_Type p_PCCH_Message,
                                                                          template (omit) integer p_PagingCarrierId  := omit) :=
  { /* @status    APPROVED (NBIOT) */
    Common := {
      CellId := p_CellId,
      RoutingInfo := { None := true },
      TimingInfo := {
        SubFrame := p_PagingOcassion
      },
      ControlInfo := {
        CnfFlag := false,
        FollowOnFlag := false
      }
    },
    Request := {
      Paging := {
        Paging := p_PCCH_Message,
        PagingCarrierId := p_PagingCarrierId   /* @sic R5w180306: Support of non-anchor carrier sic@ */
      }
    }
  };

  template (value) NB_PagingMessage_Type cs_NB_PagingMessage_Paging(template (value) PCCH_Message_NB p_Paging) := { Paging := p_Paging };                                  /* @status    APPROVED (NBIOT) */

  template (value) NB_PagingMessage_Type cs_NB_PagingMessage_DirectIndication(template (value) B8_Type p_DirectIndication) := {DirectIndication := p_DirectIndication };   /* @status    APPROVED (NBIOT) */

  template (value) NB_SYSTEM_CTRL_REQ cas_NB_CellConfig_Paging_REQ(NBIOT_CellId_Type p_CellId,
                                                                   template (value) SubFrameTiming_Type p_PagingOcassion,
                                                                   template (value) PagingRecordList_NB_r13 p_PagingRecordList,
                                                                   template (omit) integer p_PagingCarrierId  := omit) :=
  /* @status    APPROVED (NBIOT) */
    cas_NB_CellConfig_Paging_REQ_Common(p_CellId, p_PagingOcassion, cs_NB_PagingMessage_Paging(cs_NB_RRC_Paging(p_PagingRecordList, omit, omit)), p_PagingCarrierId);  /* @sic R5w180306: Support of non-anchor carrier sic@ */

  template (value) NB_SYSTEM_CTRL_REQ cas_NB_CellConfig_PagingSysinfoMod_REQ(NBIOT_CellId_Type p_CellId,
                                                                             template (value) SubFrameTiming_Type p_PagingOcassion,
                                                                             template (omit)  PagingRecordList_NB_r13 p_PagingRecordList,
                                                                             template (omit)  NB_Paging_SystemInfoModification_Type p_SystemInfoModification := true_,
                                                                             template (omit)  NB_Paging_SystemInfoModification_eDRX_Type p_SystemInfoMod_eDRX := omit,
                                                                             template (omit) integer p_PagingCarrierId  := omit) :=
  /* @status    APPROVED (NBIOT) */
    cas_NB_CellConfig_Paging_REQ_Common(p_CellId, p_PagingOcassion, cs_NB_PagingMessage_Paging(cs_NB_RRC_Paging(p_PagingRecordList, p_SystemInfoModification, p_SystemInfoMod_eDRX)), p_PagingCarrierId);  /* @sic R5w180306: Support of non-anchor carrier sic@ */

  template (value) NB_SYSTEM_CTRL_REQ cas_NB_CellConfig_PagingSysinfoMod_DirectIndication_REQ(NBIOT_CellId_Type p_CellId,
                                                                                              template (value) SubFrameTiming_Type p_PagingOcassion,
                                                                                              template (value) B8_Type p_DirectIndication,
                                                                                              template (omit) integer p_PagingCarrierId  := omit) :=
  /* @status    APPROVED (NBIOT) */
    cas_NB_CellConfig_Paging_REQ_Common(p_CellId, p_PagingOcassion, cs_NB_PagingMessage_DirectIndication(p_DirectIndication), p_PagingCarrierId);  /* @sic R5w180306: Support of non-anchor carrier sic@ */

  /*
   * @desc      Function used to convert the paging cycle from the asn.1 enumerated type to integer.
   * @param     p_PagingCycle     A value of the enumerated type NB_DefaultPagingCycle_Type (which is derived from the asn.1 PCCH-Config.defaultPagingCycle)
   * @return    integer           Number of radio frames which corresponds to the paging cycle
   * @status    APPROVED (NBIOT)
   */
  function f_NBIOT_GetPagingCycleValue(NB_DefaultPagingCycle_Type p_PagingCycle) return integer
  {
    var integer v_PagingCycleValue;

    select (p_PagingCycle) {
      case (rf128) { v_PagingCycleValue := 128; }
      case (rf256) { v_PagingCycleValue := 256; }
      case (rf512) { v_PagingCycleValue := 512;}
      case (rf1024) { v_PagingCycleValue := 1024;}
      case else {  FatalError(__FILE__, __LINE__, "PagingCycle has unrecognizable value");}
    }
    return v_PagingCycleValue;
  }

  /*
   * @desc      Calculates and returns next available Paging frames and occasions
   *            Calulations are according to 36.304 clause 7
   * @param     p_Sfn
   * @param     p_HSFN
   * @param     p_T
   * @param     p_Nb
   * @param     p_Imsi
   * @return    SubFrameTimingList_Type
   * @status    APPROVED (NBIOT)
   */
  function f_NBIOT_Calculate_PF_PO(SystemFrameNumber_Type  p_Sfn,
                                   SystemFrameNumber_Type  p_HSFN,
                                   NB_DefaultPagingCycle_Type p_T,
                                   PCCH_Config_NB_r13.nB_r13 p_Nb,
                                   hexstring p_Imsi)
    return SubFrameTimingList_Type
  {
    var integer v_T := 0;
    var integer v_Nb := 0;
    var integer v_N := 0;//min(T,nB)
    var integer v_Ns := 0;//max(1,nB/T)
    var charstring v_Imsi_String := hex2str(p_Imsi);
    var integer v_Imsi_Integer := str2int(v_Imsi_String);
    var integer v_Ue_Id := v_Imsi_Integer mod 4096;
    var SubFrameNumber_Type v_Po := 0;
    var SubFrameTimingList_Type v_PagingOccasionList;
    var integer v_SfnModT;
    var integer v_NextSfn := (p_Sfn + tsc_SfnDelay) mod 1024;
    var integer v_NextHSFN := (p_HSFN + (p_Sfn + tsc_SfnDelay)/1024) mod 1024;
    var integer v_FirstPagingFrame;
    var integer v_FirstPagingHSFN;
    var integer v_I_s;//i_s = floor(UE_ID/N) mod Ns
    var integer v_I3;
    var integer v_NextPagingFrame;
    var integer v_NextPagingHSFN;
    
    //* @desc Derive integer type T from enumerated type defaultPagingCycle
    v_T := f_NBIOT_GetPagingCycleValue(p_T);
    
    //* @desc Calculate integer type nB based on enumerated type p_Nb and integer type T
    select (p_Nb) {
      case (fourT)      { v_Nb := 4*v_T; }
      case (twoT)       { v_Nb := 2*v_T; }
      case (oneT)       { v_Nb := v_T; }
      case (halfT)      { v_Nb := v_T/2; }
      case (quarterT)   { v_Nb := v_T/4;}
      case (one8thT)    { v_Nb := v_T/8; }
      case (one16thT)   { v_Nb := v_T/16; }
      case (one32ndT)   { v_Nb := v_T/32; }
      case (one64thT)   { v_Nb := v_T/64; }
      case (one128thT)  { v_Nb := v_T/128; }
      case (one256thT)  { v_Nb := v_T/256; }
      case (one512thT)  { v_Nb := v_T/512; }
      case (one1024thT) { v_Nb := v_T/1024; }
      case else {
        FatalError(__FILE__, __LINE__, "Provided value for nB is unrecognizable");
      }
    }
    
    //* @desc Derive N and Ns based on values on nB and T
    if (v_T <= v_Nb) { v_N := v_T } else { v_N := v_Nb }
    if (1 >= ( v_Nb/v_T)) { v_Ns := 1 } else { v_Ns := v_Nb/v_T }

    //* @desc Calculate next available PF based on v_NextSfn and SFN mod T = (T div N)*(UE_ID mod N)
    v_SfnModT := (v_T / v_N) * (v_Ue_Id mod v_N);

    if ((v_NextSfn mod v_T) < v_SfnModT) {
      v_FirstPagingHSFN  := (v_NextHSFN + ((v_NextSfn - v_NextSfn mod v_T) + v_SfnModT) /1024) mod 1024;
      v_FirstPagingFrame := ((v_NextSfn - v_NextSfn mod v_T) + v_SfnModT) mod 1024;
    }
    else {
      v_FirstPagingHSFN  := (v_NextHSFN +  (v_T * (((v_NextSfn - v_NextSfn mod v_T) / v_T) + 1) + v_SfnModT) / 1024) mod 1024;
      v_FirstPagingFrame := (v_T * (((v_NextSfn - v_NextSfn mod v_T) / v_T) + 1) + v_SfnModT) mod 1024;
    }

    //* @desc Calculate i_s = floor(UE_ID/N) mod Ns
    v_I_s := (v_Ue_Id / v_N) mod v_Ns;
    
    //* @desc Derive PO based on i_s, Ns and FDD or TDD - 36.304 cl 7.2
    select (v_I_s) {
      case (0) {
        if (v_Ns == 1) { // v_Ns=1
          v_Po := 9;
        } else if (v_Ns == 2) { // v_Ns=2
          v_Po := 4;
        } else {  // v_Ns=4
          v_Po := 0;
        }
      }
      case (1) {
        if (v_Ns == 2) {
          v_Po := 9;
        } else if (v_Ns == 4) {
          v_Po := 4;
        } else {
          FatalError(__FILE__, __LINE__, "PO is calculated to N/A");
        }
      }
      case (2) {
        if (v_Ns == 4) {
          v_Po := 5;
        } else {
          FatalError(__FILE__, __LINE__, "PO is calculated to N/A");
        }
      }
      case (3) {
        if (v_Ns == 4) {
            v_Po := 9;
        } else {
          FatalError(__FILE__, __LINE__, "PO is calculated to N/A");
        }
      }
      case else {
        FatalError(__FILE__, __LINE__, "Provided value for i_s is unrecognizable");
      }
    }

    //* @desc Fill and save PagingOccasionList
    for (v_I3 := 0; v_I3 < 10; v_I3 := v_I3 + 1) {
      v_NextPagingFrame := v_FirstPagingFrame + (v_I3 * v_T);
      v_NextPagingHSFN := v_FirstPagingHSFN + (v_FirstPagingFrame / 1024) mod 1024;
      v_PagingOccasionList[v_I3] := {
        SFN  := {
          Number := v_NextPagingFrame mod 1024
        },
        Subframe := {
          Number := v_Po
        },
        HSFN := {
          Number := v_NextPagingHSFN
        },
        Slot := { FirstSlot := true } //@sic R5w180111 sic@
      }
    }

    return v_PagingOccasionList;
  }

  /*
   * @desc      Trigger SS to send paging request to UE with but expects no answer (i.e. RRCConnectionRequest from UE.
   * @param     p_CellId
   * @param     p_PagingRecordList
   * @param     p_NoReactionTimer
   * @status    APPROVED (NBIOT)
   */
  function f_NBIOT_UE_Page_NoReaction(NBIOT_CellId_Type p_CellId,
                                      template (value) PagingRecordList_NB_r13  p_PagingRecordList,
                                      float p_NoReactionTimer) runs on NBIOT_PTC
  {
    var PCCH_Config_NB_r13 v_SI_Pcch_Configuration;
    var NB_DefaultPagingCycle_Type v_PagingCycle;
    var SubFrameTiming_Type v_CurrentTiming;
    var SubFrameTimingList_Type v_PoList;
    var hexstring v_Imsi := px_IMSI_Def;
    timer t_NoReaction;

    f_Delay(tsc_NBIOT_DelayForCellSelection);

    //Derive DRX params from SYS Info
    v_SI_Pcch_Configuration := f_NBIOT_CellInfo_GetPCCH_ConfigInSYSINFO(p_CellId);

    //Set the Pagingcycle
    v_PagingCycle := v_SI_Pcch_Configuration.defaultPagingCycle_r13;

    //Get current SFN and subframe
    v_CurrentTiming := f_NBIOT_GetCurrentTiming(p_CellId);
    
    //Calculate next Paging Ocassion
    v_PoList := f_NBIOT_Calculate_PF_PO(v_CurrentTiming.SFN.Number, v_CurrentTiming.HSFN.Number, v_PagingCycle, v_SI_Pcch_Configuration.nB_r13, v_Imsi);
    
    SYS.send(cas_NB_CellConfig_Paging_REQ(p_CellId, v_PoList[0], p_PagingRecordList));

    if (v_PoList[0].SFN.Number > v_CurrentTiming.SFN.Number) {
      p_NoReactionTimer := p_NoReactionTimer + 0.01 * (int2float(v_PoList[0].SFN.Number - v_CurrentTiming.SFN.Number));
    }
    else {
      p_NoReactionTimer := p_NoReactionTimer + 0.01 * (int2float(1024 - v_CurrentTiming.SFN.Number + v_PoList[0].SFN.Number));
    }
    
    t_NoReaction.start(p_NoReactionTimer);
    
    alt {
      [] SRB.receive(car_NB_SRB0_RrcPdu_IND(p_CellId, cr_RRCConnectionRequest_NB(?)))
        {
          f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, "Page NoReaction");
        }
      [] t_NoReaction.timeout {}
    }
  }

  /*
   * @desc      Trigger SS to send paging request to UE
   * @param     p_CellId
   * @param     p_PagingRecordList  (default value: omit)
   * @param     p_PagingCarrierId   (default value: omit)
   * @status    APPROVED (NBIOT)
   */
  function f_NBIOT_UE_Page(NBIOT_CellId_Type p_CellId,
                           template (omit) PagingRecordList_NB_r13 p_PagingRecordList := omit,
                           template (omit) integer p_PagingCarrierId  := omit) runs on NBIOT_PTC
  {
    var PCCH_Config_NB_r13 v_SI_Pcch_Configuration;
    var NB_DefaultPagingCycle_Type v_PagingCycle;
    var SubFrameTiming_Type v_CurrentTiming;
    var SubFrameTimingList_Type v_PoList;
    var hexstring v_Imsi := px_IMSI_Def;
    var GutiParameters_Type v_GutiParameters;
    var template (value) PagingRecordList_NB_r13 v_PagingRecordList;
    
    if (isvalue(p_PagingRecordList)) {
      v_PagingRecordList := valueof(p_PagingRecordList);
    } else {
      v_GutiParameters := f_NBIOT_CellInfo_GetGuti(p_CellId);
      v_PagingRecordList := cs_NB_Paging_OneRecord(cs_PagingUE_Identity_S_TMSI(v_GutiParameters.MME_Code, v_GutiParameters.M_TMSI));
    }

    f_Delay(tsc_NBIOT_DelayForCellSelection);
    
    //Derive DRX params from SYS Info
    v_SI_Pcch_Configuration := f_NBIOT_CellInfo_GetPCCH_ConfigInSYSINFO(p_CellId);
    
    //Set the Pagingcycle
    v_PagingCycle := v_SI_Pcch_Configuration.defaultPagingCycle_r13;
    
    //Get current SFN and subframe
    v_CurrentTiming := f_NBIOT_GetCurrentTiming(p_CellId);
    
    //Calculate next Paging Ocassion
    v_PoList := f_NBIOT_Calculate_PF_PO(v_CurrentTiming.SFN.Number, v_CurrentTiming.HSFN.Number, v_PagingCycle, v_SI_Pcch_Configuration.nB_r13, v_Imsi);
    
    SYS.send(cas_NB_CellConfig_Paging_REQ(p_CellId, v_PoList[0], v_PagingRecordList, p_PagingCarrierId));  /* @sic R5w180306: Support of non-anchor carrier sic@ */
  }

  /*
   * @desc      Paging calculations on eDRX
   * @param     p_CellId
   * @param     p_Sfn
   * @param     p_HSFN
   * @param     p_Imsi
   * @param     p_PTWLength
   * @param     p_TeDRX
   * @return    SubFrameTimingList_Type
   * @status    APPROVED (NBIOT)
   */
  function f_NBIOT_Calculate_PTW_PH(NBIOT_CellId_Type       p_CellId,
                                    SystemFrameNumber_Type  p_Sfn,
                                    SystemFrameNumber_Type  p_HSFN,
                                    hexstring               p_Imsi,
                                    float                   p_PTWLength,
                                    integer                 p_TeDRX) runs on NBIOT_PTC return SubFrameTimingList_Type
  {
    var SubFrameTimingList_Type v_PagingOccasionList;

    var NB_DefaultPagingCycle_Type v_PagingCycle;
    var PCCH_Config_NB_r13 v_SI_Pcch_Configuration;
    var GutiParameters_Type v_GutiParameters := f_NBIOT_CellInfo_GetGuti(p_CellId);
    var M_TMSI_Type v_M_TMSI;
    var integer v_FirstPagingHSFN;
    var integer v_FirstSfn;
    var integer v_LastSfn;//PTWstart
    var integer v_IeDRX;//i_s = floor(UE_ID/N) mod Ns
    var integer v_H_UE_ID; // Hashed ID is the CRC-32 of b31, b30,... b0 of S-TMSI

    v_M_TMSI := v_GutiParameters.M_TMSI;
    v_H_UE_ID := bit2int(substr((fx_CalculateFCS32(v_M_TMSI)),0, 12)); // @sic R5-172046, R5s170460 sic@ different for NBIOT

    //Derive DRX params from SYS Info
    v_SI_Pcch_Configuration := f_NBIOT_CellInfo_GetPCCH_ConfigInSYSINFO(p_CellId);
    //Set the Pagingcycle
    v_PagingCycle := v_SI_Pcch_Configuration.defaultPagingCycle_r13;

    //Calculate next available PH based on v_NextHsfn and HSFN mod T = (UE_ID mod TeDRX)
    v_FirstPagingHSFN := f_EUTRA_NB_Calculate_FirstPagingHSFN (p_Sfn, p_HSFN, p_TeDRX, v_H_UE_ID);  // @sic R5s170460 sic@

    //Calculation of PTW values (SFN)
    v_IeDRX := (v_H_UE_ID / p_TeDRX) mod 4;
    v_FirstSfn := 256*v_IeDRX; //PTWstart = first radio frame of the PH that is part of the PTW with SFN=256*ieDRX
    v_LastSfn := v_FirstSfn + (float2int(p_PTWLength*100.0)-1) mod 1024; //PTWend = last radio frame of the PTW satisfyng SFN formula

    // A UE configured with eDRX monitors POs as defined in 7.1, during a periodic Paging Time Window (PTW) configured for the UE or until a paging message
    // including the UE's NAS identity is received for the UE during the PTW, whichever is earlier.
    // The PTW is UE-specific and is determined by a Paging Hyperframe (PH), a starting position within the PH (PTW_start) and an ending position PTW_end

    // Calculate next Paging Occasion
    // Calculate the subframe offset list
    // Page UE in each periodic PTW: the first reference time is already the PagingOcassion
    //PTWsize = difference between last and first radio frames of the PTW satisfyng SFN formula
    
    v_PagingOccasionList := f_NBIOT_Calculate_PF_PO(v_FirstSfn, v_FirstPagingHSFN, v_PagingCycle, v_SI_Pcch_Configuration.nB_r13, p_Imsi); // @sic R5s170460 restricted calculation to only one instance to simplify implementation sic@
    //Set the occasion list for each PO fitting on the Paging Time Window
    return v_PagingOccasionList;
  }

  /*
   * @desc      Calculate applicable paging list on eDRX
   * @param     p_CellId
   * @param     p_PTWLength_Index
   * @param     p_EDRXValue_Index
   * @return    SubFrameTimingList_Type
   * @status    APPROVED (NBIOT)
   */
  function f_NBIOT_PO_List_eDRX(NBIOT_CellId_Type p_CellId,
                                integer p_PTWLength_Index,
                                integer p_EDRXValue_Index) runs on NBIOT_PTC return SubFrameTimingList_Type
  {
    var SubFrameTiming_Type v_CurrentTiming;
    var SubFrameTimingList_Type v_PoList;
    var hexstring v_Imsi := px_IMSI_Def;
    var float v_PTWLengthValue;
    var integer v_TeDRX;
        
    f_Delay(tsc_NBIOT_DelayForCellSelection);
    
    //Get current SFN and subframe
    v_CurrentTiming := f_NBIOT_GetCurrentTiming(p_CellId);
    
    v_PTWLengthValue := tsc_PTWLengthParameters_NB[p_PTWLength_Index];
    if (p_EDRXValue_Index == 0 or p_EDRXValue_Index == 1) { // TS24.008 Table 10.5.5.32 NOTE 4 - this value is not applicable for NB-IoT
     f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, "Invalid value of Tedrx for NB-IoT"); // @sic R5s170597 Baseline Moving sic@
    }
    v_TeDRX := tsc_TEDRX_CycleParameters[p_EDRXValue_Index];
    if (v_TeDRX == 6 or v_TeDRX == 10 or v_TeDRX == 12 or v_TeDRX == 14) { // TS24.008 Table 10.5.5.32 NOTE 4 - this value is not applicable for NB-IoT
     v_TeDRX := 2; // @sic R5s170597 Baseline Moving sic@
    }
    
    //Calculate next Paging Occasion
    // eDRX: UE monitors on POs as TS36.304 cl.7.1 during UE's periodic PTW
    v_PoList := f_NBIOT_Calculate_PTW_PH(p_CellId, v_CurrentTiming.SFN.Number, v_CurrentTiming.HSFN.Number, v_Imsi, v_PTWLengthValue, v_TeDRX);
    return v_PoList;
  }

  /*
   * @desc      Trigger SS to send paging request to UE on eDRX
   * @param     p_CellId
   * @param     p_PagingRecordList
   * @param     p_PTWLength_Index
   * @param     p_EDRXValue_Index
   * @param     p_PagingCarrierId   (default value: omit)
   * @status    APPROVED (NBIOT)
   */
  function f_NBIOT_UE_Page_eDRX(NBIOT_CellId_Type p_CellId,
                                template (value) PagingRecordList_NB_r13 p_PagingRecordList,
                                integer p_PTWLength_Index,
                                integer p_EDRXValue_Index,
                                template (omit) integer p_PagingCarrierId  := omit) runs on NBIOT_PTC
  {
    var SubFrameTimingList_Type v_PoList;
    
    v_PoList := f_NBIOT_PO_List_eDRX (p_CellId, p_PTWLength_Index, p_EDRXValue_Index);
    SYS.send(cas_NB_CellConfig_Paging_REQ(p_CellId, v_PoList[0], p_PagingRecordList, p_PagingCarrierId));  /* @sic R5w180306: Support of non-anchor carrier sic@ */
  }

  /*
   * @desc      Trigger SS to send paging request to indicate sysinfo modification to UE from a given SFN
   * @param     p_CellId
   * @param     p_StartSFN
   * @param     p_SystemInfoModification (default value: true_)
   * @param     p_SystemInfoMod_eDRX (default value: omit)
   * @param     p_DirectIndication  (default value: omit)
   * @param     p_EDRXValue_Index   (default value: omit)
   * @status    APPROVED (NBIOT)
   */
  function f_NBIOT_UE_PageSysinfoMod(NBIOT_CellId_Type p_CellId,
                                     SubFrameTiming_Type  p_StartSFN,
                                     template (omit)  NB_Paging_SystemInfoModification_Type p_SystemInfoModification := true_,
                                     template (omit)  NB_Paging_SystemInfoModification_eDRX_Type p_SystemInfoMod_eDRX := omit,
                                     template (omit)  B8_Type p_DirectIndication := omit,
                                     template (omit) integer p_EDRXValue_Index := omit) // @sic R5s170949 Ch. 1 sic@
    runs on NBIOT_PTC
  {
    var PCCH_Config_NB_r13 v_SI_Pcch_Configuration := f_NBIOT_CellInfo_GetPCCH_ConfigInSYSINFO(p_CellId);  // Derive DRX params from SYS Info
    var SubFrameTimingList_Type v_PoList;
    var template (value) SubFrameTiming_Type v_SubFrameTiming;
    
    if (isvalue (p_SystemInfoMod_eDRX) and isvalue(p_EDRXValue_Index))  { //eDRX pagings cannot be calculated without eDRX index value
      // When UE is in IDLE mode: page UE at PF/PO calculated as per 36.304 cl 7
      // Calculate next Paging Occasion
      v_PoList := f_NBIOT_PO_List_eDRX (p_CellId, 1, valueof(p_EDRXValue_Index));
      // Calculate the subframe offset list
      // Page UE in each pagingCycle
      // The first offset is 0: the first reference time is the PagingOcassion
      v_SubFrameTiming := v_PoList[0];
    } else { // non-eDRX
      v_PoList := f_NBIOT_Calculate_PF_PO(p_StartSFN.SFN.Number, p_StartSFN.HSFN.Number, v_SI_Pcch_Configuration.defaultPagingCycle_r13, v_SI_Pcch_Configuration.nB_r13, px_IMSI_Def);
      v_SubFrameTiming := v_PoList[0];
    }

    // Send Paging indicating SysinfoModification
    if (isvalue(p_DirectIndication)) {
      SYS.send(cas_NB_CellConfig_PagingSysinfoMod_DirectIndication_REQ(p_CellId, v_SubFrameTiming, p_DirectIndication));
    } else {
      SYS.send(cas_NB_CellConfig_PagingSysinfoMod_REQ(p_CellId, v_SubFrameTiming, omit, p_SystemInfoModification, p_SystemInfoMod_eDRX));
    }
  }

  /*
   * @desc      Trigger SS to send paging request to indicate sysinfo modification to UE for eDRX
   * @param     p_CellId
   * @param     p_PTWLength_Index
   * @param     p_EDRXValue_Index
   * @param     p_SystemInfoMod_eDRX (default value: true_)
   * @param     p_DirectIndication  (default value: omit)
   * @status    APPROVED (NBIOT)
   */
  function f_NBIOT_UE_PageSysinfoMod_eDRX(NBIOT_CellId_Type p_CellId,
                                          integer p_PTWLength_Index,
                                          integer p_EDRXValue_Index,
                                          template (omit)  NB_Paging_SystemInfoModification_eDRX_Type p_SystemInfoMod_eDRX := true_,
                                          template (omit)  B8_Type p_DirectIndication := omit)
    runs on NBIOT_PTC
  {
    var SubFrameTimingList_Type v_PoList;
    v_PoList := f_NBIOT_PO_List_eDRX (p_CellId, p_PTWLength_Index, p_EDRXValue_Index);
    f_NBIOT_UE_PageSysinfoMod(p_CellId, v_PoList[0], omit, p_SystemInfoMod_eDRX, p_DirectIndication, p_EDRXValue_Index); // @sic R5s170949 Ch. 2 sic@
  }

}
