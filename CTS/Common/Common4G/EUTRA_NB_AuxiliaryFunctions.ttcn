/******************************************************************************/
// @copyright   Copyright Notification
//   No part may be reproduced except as authorized by written permission.
//   The copyright and the foregoing restriction extend to reproduction in all media.
//   Trademark 2019, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).
//   All rights reserved.
// @version: 36.523-3 v15.3.0
// $Date: 2018-12-16 11:45:57 +0100 (Sun, 16 Dec 2018) $
// $Rev: 23491 $
/******************************************************************************/

module EUTRA_NB_AuxiliaryFunctions {

  import from EUTRA_RRC_ASN1_Definitions language "ASN.1:2002" all with {encode "UNALIGNED_PER_OctetAligned"};
  import from CommonDefs all;
  import from EPS_NAS_TypeDefs all;
  import from EUTRA_NB_CommonDefs all;
  import from NAS_CommonTemplates all;
  import from NAS_CommonTypeDefs all;

  /*
   * @desc      Converts a PLMN ID from ASN.1 to NAS representation.
   * @param     p_PlmnId   .. PLMN ID as defined in LTE RRC ASN.1.
   * @return    NAS_PlmnId .. NAS representation of the PLMN ID (O3_Type).
   * @status    APPROVED (ENDC, IMS, IMS_IRAT, LTE, LTE_A_IRAT, LTE_A_PRO, LTE_A_R10_R11, LTE_A_R12, LTE_IRAT, NBIOT, POS)
   */
  function f_Asn2Nas_PlmnId(PLMN_Identity p_PlmnId) return NAS_PlmnId
  {
    var hexstring v_MCC := '000'H; // initialised with 3 digits which will be overwritten
    var hexstring v_MNC := 'FFF'H; // initialised with 3 'F'H => if lengthof(p_PlmnId.mnc) < 3 the remaining digits are 'F'H
    var MCC_MNC_Digit v_Digit;     // MCC-MNC-Digit ::= INTEGER (0..9)
    var integer I;

    for (I := 0; (I < lengthof(p_PlmnId.mcc)) and (I < lengthof(v_MCC)); I := I + 1) {
      /* p_PlmnId.mcc consists of 3 digits; nevertheless to be sure v_MCC is checked as well */
      v_Digit := p_PlmnId.mcc[I];
      v_MCC[I] := int2hex(v_Digit, 1);
    }

    for (I := 0; (I < lengthof(p_PlmnId.mnc)) and (I < lengthof(v_MNC)); I := I + 1) {
      /* p_PlmnId.mcc consists of 2 or 3 digits; nevertheless to be sure v_MNC is checked as well */
      v_Digit := p_PlmnId.mnc[I];
      v_MNC[I] := int2hex(v_Digit, 1);
    }

    // build PLMN ID representation as used in NAS
    // TAI/TAI list/MobileIdentity[GUTI]/...
    return hex2oct(v_MCC[1] & v_MCC[0] &
                   v_MNC[2] & v_MCC[2] &
                   v_MNC[1] & v_MNC[0]);
  }

  /*
   * @desc      check esmInfoTransferFlag in PDN_CONNECTIVITY_REQUEST
   * @param     p_PDN_CONNECTIVITY_REQUEST
   * @return    boolean
   * @status    APPROVED (ENDC, IMS, IMS_IRAT, LTE, LTE_A_IRAT, LTE_A_PRO, LTE_A_R10_R11, LTE_A_R12, LTE_IRAT, NBIOT, POS)
   */
  function f_CheckEsmInfoTransferFlag(PDN_CONNECTIVITY_REQUEST p_PDN_CONNECTIVITY_REQUEST) return boolean
  {
    if (ispresent(p_PDN_CONNECTIVITY_REQUEST.esmInfoTransferFlag)) {
      if (p_PDN_CONNECTIVITY_REQUEST.esmInfoTransferFlag.eitValue == '1'B) {
        return true;
      }
    }
    return false;
  }

  /*
   * @desc      convert parameters contained in GutiParameters_Type into an octetstring being used in NAS messages
   *
   * @param     p_GutiParams   parameters to construct the Guti string (see 24.301 cl. 9.9.3.12)
   * @return    octetstring representing the Guti
   * @status    APPROVED (ENDC, IMS, IMS_IRAT, LTE, LTE_A_IRAT, LTE_A_PRO, LTE_A_R10_R11, LTE_A_R12, LTE_IRAT, NBIOT, POS)
   */
  function f_GutiParameters2GutiString(GutiParameters_Type p_GutiParams) return octetstring
  {
    var NAS_PlmnId v_PlmnId := f_Asn2Nas_PlmnId(p_GutiParams.PLMN_Identity);  // 3 octets
    var EPS_MmeGi  v_MmeGi  := bit2oct(p_GutiParams.MME_GroupId);             // 2 octets
    var EPS_Mmec   v_Mmec   := bit2oct(p_GutiParams.MME_Code);                // 1 octets
    var EPS_M_Tmsi v_Mtmsi  := bit2oct(p_GutiParams.M_TMSI);                  // 4 octets
    return v_PlmnId & v_MmeGi & v_Mmec & v_Mtmsi;
  }

  /*
   * @desc      convert from GutiParameters_Type to NAS MobileIdentity
   *            returned IE does not contain an IEI
   * @param     p_IEI
   * @param     p_GutiParams                       .. parameters which are required to construct a GUTI
   * @return    template (value) MobileIdentity    .. representing the given GutiParameters_Type
   * @status    APPROVED (ENDC, IMS, IMS_IRAT, LTE, LTE_A_IRAT, LTE_A_PRO, LTE_A_R10_R11, LTE_A_R12, LTE_IRAT, NBIOT, POS)
   */
  function f_GutiParameters2MobileIdentity(template (omit) IEI8_Type p_IEI,
                                           GutiParameters_Type p_GutiParams) return template (value) MobileIdentity
  {
    var octetstring v_GutiString := f_GutiParameters2GutiString(p_GutiParams);
    return cs_MobileIdentityGuti(p_IEI, v_GutiString);
  }

  /*
   * @desc      Creates a new GutiParameters_Type variable which is identical to the given GUTI
   *            except that both MMEC and M-TMSI (i.e. S-TMSI) will be updated to new values.
   * @param     p_GutiParams             Current GUTI.
   * @return    GutiParameters_Type      New GUTI.
   * @status    APPROVED (LTE, LTE_A_R10_R11, LTE_A_R12, LTE_IRAT, NBIOT)
   */
  function f_CreateGutiParamsWithUpdatedSTmsi(GutiParameters_Type p_GutiParams) return GutiParameters_Type
  {
    var GutiParameters_Type v_NewGutiParams := p_GutiParams;
    var S_TMSI v_S_Tmsi := {
      mmec := p_GutiParams.MME_Code,
      m_TMSI := p_GutiParams.M_TMSI
    };

    v_S_Tmsi := f_CreateNewS_Tmsi(v_S_Tmsi);

    v_NewGutiParams.MME_Code := v_S_Tmsi.mmec;
    v_NewGutiParams.M_TMSI := v_S_Tmsi.m_TMSI;

    return v_NewGutiParams;
  }

  /*
   * @desc      Convert the hexstring IMSI into the ASN.1 sequence of digits
   * @param     p_Hex
   * @return    IMSI           ASN.1 type IMSI
   * @status    APPROVED (LTE, NBIOT)
   */
  function f_ConvertImsi2ASN(hexstring p_Hex) return IMSI
  {
    var IMSI v_ReturnValue;
    var integer I;
    var integer v_Length := lengthof(p_Hex);

    if (v_Length < 6 or v_Length > 21) {
      FatalError(__FILE__, __LINE__, "invalid length of IMSI");
    }
    for (I := 0; I < v_Length; I := I + 1) {
      v_ReturnValue[I] := hex2int(p_Hex[I]);
    }
    return v_ReturnValue;
  }

  /*
   * @desc      Creates a new unique M-TMSI based on the current one.
   * @param     p_M_Tmsi      Current M-TMSI value.
   * @return    M_TMSI_Type   New M-TMSI (which is guarantied to be different from p_M_Tmsi).
   * @status    APPROVED (LTE, LTE_A_R10_R11, LTE_A_R12, LTE_IRAT, NBIOT)
   */
  function f_CreateNewM_Tmsi(M_TMSI_Type p_M_Tmsi) return M_TMSI_Type
  {
    return p_M_Tmsi <@ 1;
  }

  /*
   * @desc      Creates a new unique S-TMSI based on the current one by
   *            incrementing MMEC and changing S-TMSI to a new value.
   * @param     p_S_Tmsi      Current S-TMSI value.
   * @return    S_TMSI        New S-TMSI (which is guarantied to be different from p_S_Tmsi).
   * @status    APPROVED (LTE, LTE_A_R10_R11, LTE_A_R12, LTE_IRAT, NBIOT)
   */
  function f_CreateNewS_Tmsi(S_TMSI p_S_Tmsi) return S_TMSI
  {
    var S_TMSI v_S_TMSI := {
      mmec := int2bit(((bit2int(p_S_Tmsi.mmec) + 1) mod 255), 8),
      m_TMSI := f_CreateNewM_Tmsi(p_S_Tmsi.m_TMSI)
    };
    return v_S_TMSI;
  }

   /*
   * @desc      Convert the DL bandwidth value from Dl_Bandwidth_Type to Ul_Bandwidth_Type
   * @param     p_DL_Bandwidth
   * @return    Ul_Bandwidth_Type
   * @status    APPROVED (ENDC, IMS, IMS_IRAT, LTE, LTE_A_IRAT, LTE_A_PRO, LTE_A_R10_R11, LTE_A_R12, LTE_IRAT, NBIOT, POS)
   */
  function f_ConvertDL_BandwidthToUL ( Dl_Bandwidth_Type p_DL_Bandwidth ) return Ul_Bandwidth_Type
  {
    var Ul_Bandwidth_Type v_UL_Bandwidth;
    select (p_DL_Bandwidth) {
      case (n6){ v_UL_Bandwidth := n6  }
      case (n15){ v_UL_Bandwidth := n15  }
      case (n25){ v_UL_Bandwidth := n25  }
      case (n50){ v_UL_Bandwidth := n50  }
      case (n75){ v_UL_Bandwidth := n75  }
      case (n100){ v_UL_Bandwidth := n100  }
      case else { FatalError (__FILE__, __LINE__, "invalid value for ChannelBandwidth"); }
    };
    return v_UL_Bandwidth;
  };

}
