/******************************************************************************/
// @copyright   Copyright Notification
//   No part may be reproduced except as authorized by written permission.
//   The copyright and the foregoing restriction extend to reproduction in all media.
//   Trademark 2019, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).
//   All rights reserved.
// @version: 36.523-3 v15.3.0
// $Date: 2017-12-02 20:36:11 +0100 (Sat, 02 Dec 2017) $
// $Rev: 19963 $
/******************************************************************************/

module LoopbackIP_PacketFilterTest {

  import from CommonDefs all;
  import from CommonIP all;
  import from LoopbackIP all;

  /*
   * @desc      Common function to create IPv4 or IPv6 datagram
   * @param     p_IpTypeIsIPv4
   * @param     p_Protocol
   * @param     p_IPv4_SourceAddr
   * @param     p_IPv4_DestAddr
   * @param     p_IPv6_SourceAddr
   * @param     p_IPv6_DestAddr
   * @param     p_IPv6_FlowLabel
   * @param     p_SourcePort
   * @param     p_DestPort
   * @param     p_IPSecSPI
   * @param     p_TOS_TC
   * @return    octetstring
   * @status    APPROVED (LTE, NBIOT, UTRAN)
   */
  function f_PacketFilterTest_CreateDatagram(boolean p_IpTypeIsIPv4,
                                             UInt8_Type p_Protocol,
                                             charstring p_IPv4_SourceAddr,
                                             charstring p_IPv4_DestAddr,
                                             charstring p_IPv6_SourceAddr,
                                             charstring p_IPv6_DestAddr,
                                             UInt20_Type p_IPv6_FlowLabel,
                                             UInt16_Type p_SourcePort,
                                             UInt16_Type p_DestPort,
                                             O4_Type p_IPSecSPI,
                                             O1_Type p_TOS_TC) return octetstring
  {
    var octetstring v_IpPacket;
    var octetstring v_IPPayload;

    if (p_IpTypeIsIPv4) {
      select (p_Protocol) {
        case (tsc_IP_Protocol_UDP) {
          v_IPPayload := f_IPv4UdpDatagram_Create(p_IPv4_SourceAddr, p_IPv4_DestAddr, p_SourcePort, p_DestPort, tsc_IP_AnyData);
        }
        case (tsc_IP_Protocol_TCP) {
          v_IPPayload := f_IPv4TcpDatagram_Create(p_IPv4_SourceAddr, p_IPv4_DestAddr, p_SourcePort, p_DestPort, tsc_IP_AnyData);
        }
        case (tsc_IP_Protocol_IPSec) {
          v_IPPayload := f_IPSecESPDatagram_Create(p_Protocol,
                                                   p_IPSecSPI,
                                                   f_IPv4UdpDatagram_Create(p_IPv4_SourceAddr, p_IPv4_DestAddr, p_SourcePort, p_DestPort, tsc_IP_AnyData));
        }
      }
      v_IpPacket := f_IPv4Packet_Create(-, p_TOS_TC, p_Protocol, p_IPv4_SourceAddr, p_IPv4_DestAddr, v_IPPayload);
    }
    else {
      select (p_Protocol) {
        case (tsc_IP_Protocol_UDP) {
          v_IPPayload := f_IPv6UdpDatagram_Create(p_IPv6_SourceAddr, p_IPv6_DestAddr, p_SourcePort, p_DestPort, tsc_IP_AnyData);
        }
        case (tsc_IP_Protocol_TCP) {
          v_IPPayload := f_IPv6TcpDatagram_Create(p_IPv6_SourceAddr, p_IPv6_DestAddr, p_SourcePort, p_DestPort, tsc_IP_AnyData);
        }
        case (tsc_IP_Protocol_IPSec) {
          v_IPPayload := f_IPSecESPDatagram_Create(p_Protocol,
                                                   p_IPSecSPI,
                                                   f_IPv6UdpDatagram_Create(p_IPv6_SourceAddr, p_IPv6_DestAddr, p_SourcePort, p_DestPort, tsc_IP_AnyData));
        }
      }
      v_IpPacket := f_IPv6Packet_Create(p_TOS_TC, p_IPv6_FlowLabel, p_Protocol, -, p_IPv6_SourceAddr, p_IPv6_DestAddr, v_IPPayload);

    }
    return v_IpPacket;
  }

}
