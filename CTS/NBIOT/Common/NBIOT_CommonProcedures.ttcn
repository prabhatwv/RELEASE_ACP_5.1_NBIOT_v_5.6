/******************************************************************************/
// @copyright   Copyright Notification
//   No part may be reproduced except as authorized by written permission.
//   The copyright and the foregoing restriction extend to reproduction in all media.
//   Trademark 2019, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).
//   All rights reserved.
// @version: 36.523-3 v15.3.0
// $Date: 2019-01-24 22:05:23 +0100 (Thu, 24 Jan 2019) $
// $Rev: 23585 $
/******************************************************************************/

module NBIOT_CommonProcedures {

  import from NBIOT_RRC_ASN1_Definitions language "ASN.1:2002" all with {encode "UNALIGNED_PER_OctetAligned"};
  import from CIOT_NASTemplates all;
  import from Common4G5G_Templates all;
  import from CommonDefs all;
  import from EPS_NAS_Constants all;
  import from EPS_NAS_MsgContainers all;
  import from EPS_NAS_Templates all;
  import from EPS_NAS_TypeDefs all;
  import from EUTRA_NB_AuxiliaryFunctions all;
  import from EUTRA_NB_CommonDefs all;
  import from EUTRA_NB_NASSteps all;
  import from EUTRA_NB_Parameters all;
  import from NAS_AuxiliaryDefsAndFunctions all;
  import from NAS_CommonTemplates all;
  import from NAS_CommonTypeDefs all;
  import from NBIOT_ASP_SrbDefs all;
  import from NBIOT_ASP_TypeDefs all;
  import from NBIOT_CellInfo all;
  import from NBIOT_CommonDefs all;
  import from NBIOT_Component all;
  import from NBIOT_ConfigurationSteps all;
  import from NBIOT_Imported_EUTRA_ASN1_Types all;
  import from NBIOT_LoopBack all;
  import from NBIOT_NASSteps all;
  import from NBIOT_Paging all;
  import from NBIOT_Parameters all;
  import from NBIOT_RRCSteps all;
  import from NBIOT_RRC_Templates all;
  import from NBIOT_SRB_DRB_Templates all;
  import from NBIOT_SecurityFunctions all;
  import from NBIOT_SecuritySteps all;
  import from NBIOT_Timing all;
  import from Parameters all;
  import from UpperTesterFunctions all;

  /*
   * @desc      to be used in the test case preamble
   *            N.B. The power level used in this function is tsc_ServingCellRS_EPRE, if you need this cell to be
   *            set to a different level for your test, please adjust the level after this function.
   * @param     p_CellId
   * @param     p_IOT_State
   * @param     p_State             (default value: STATE2_NB_CONNECTED_UPDATED)
   * @status    APPROVED (NBIOT)
   */
  function f_NBIOT_Preamble(NBIOT_CellId_Type p_CellId,
                            IOT_STATE_Type p_IOT_State,
                            NBIOT_IDLEUPDATED_STATE_Type p_State := STATE2_NB_CONNECTED_UPDATED) runs on NBIOT_PTC
  {
    timer t_GuardTimer := tsc_GuardTimePreamble;

    t_GuardTimer.start;

    // First switch cell back on
    f_NBIOT_SetCellPower(p_CellId, tsc_ServingCellRS_EPRE);

    // Switch on UE
    //f_UT_SwitchOnUE(UT, false);

    // Now continue with the procedure
    f_NBIOT_InitialRegistration(p_CellId, p_IOT_State, PREAMBLE, p_State);
    
    t_GuardTimer.stop;
  }

  /*
   * @desc      UE Registration acc. to 36.508 cl. 8.1.5.2
   * @param     p_CellId
   * @param     p_IOT_State
   * @param     p_Type
   * @param     p_State             (default value: STATE2_NB_CONNECTED_UPDATED)
   * @param     p_PDN_TypeToBeUsed  (default value: pdnTypeAsSupportedByUE)
   * @status    APPROVED (NBIOT)
   */
  function f_NBIOT_InitialRegistration(NBIOT_CellId_Type p_CellId,
                                       IOT_STATE_Type p_IOT_State,
                                       IDLEUPDATED_Type p_Type,
                                       NBIOT_IDLEUPDATED_STATE_Type p_State := STATE2_NB_CONNECTED_UPDATED,
                                       PDN_TypeToBeUsed_Type p_PDN_TypeToBeUsed := pdnTypeAsSupportedByUE) runs on NBIOT_PTC
  { /* @sic R5-171559: p_PDN_TypeToBeUsed sic@ */
    var NAS_MSG_Indication_Type v_NAS_Ind;

    v_NAS_Ind := f_NBIOT_InitialRegistration_Step2_4(p_CellId, p_IOT_State, p_Type); // @sic R5-171992 sic@

    f_NBIOT_InitialRegistration_Step5_14(p_CellId, p_IOT_State, p_State, v_NAS_Ind,-, p_PDN_TypeToBeUsed);
    
    select (p_State) {
      case (STATE3_NB_IDLEUPDATED,
            STATE3A_NB_IDLEUPDATED_TESTLOOP_ModeA,
            STATE3A_NB_IDLEUPDATED_TESTLOOP_ModeB,
            STATE3A_NB_IDLEUPDATED_TESTLOOP_ModeG,
            STATE3A_NB_IDLEUPDATED_TESTLOOP_ModeH,
            STATE3A_NB_IDLEUPDATED_TESTLOOP_ModeI) { // @sic R5-172854 sic@
        f_NBIOT_RRC_ConnectionRelease(p_CellId, p_IOT_State);   /* @sic R5s170250 change 3 sic@ */
      }
    }
  }

  /*
   * @desc      UE Registration steps 1 - 4 acc. to 36.508 cl. 8.1.5.2
   * @param     p_CellId
   * @param     p_IOT_State
   * @param     p_Type
   * @return    NAS_MSG_Indication_Type
   * @status    APPROVED (NBIOT)
   */
  function f_NBIOT_InitialRegistration_Step2_4(NBIOT_CellId_Type p_CellId,
                                               IOT_STATE_Type p_IOT_State,
                                               IDLEUPDATED_Type p_Type) runs on NBIOT_PTC return NAS_MSG_Indication_Type
  {
    var NAS_MSG_Indication_Type v_NAS_Ind;
    var template (present) NAS_UL_Message_Type v_AttachReq;
    var template (present) NAS_UL_Message_Type v_ESMMessage;
    var template (present) SecurityHeaderType v_AttReqSecurityHeader;
    var template (present) B3_Type v_PDNType := (f_GetPdnType(), '101'B);
    
    if (p_Type == PREAMBLE) {
      v_AttReqSecurityHeader := (tsc_SHT_NoSecurityProtection, tsc_SHT_IntegrityProtected);
    }
    else  {
      v_AttReqSecurityHeader := tsc_SHT_IntegrityProtected;
    }
    if ((not p_IOT_State == USER_PLANE) and px_DoAttachWithoutPDN) {  // @sic R5-171992 sic@
      v_ESMMessage := cr_ESM_DUMMY_MESSAGE;
    } else {
      v_ESMMessage := cr_CIOT_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach, v_PDNType);
    }
    
    v_AttachReq := cr_CIOT_ATTACH_REQUEST(cr_AdditionalUpdateType_CIOT);

    // Receive RRC Connection Setup Complete with NAS
    v_NAS_Ind := f_NBIOT_RRC_ConnEst_DefWithNas(p_CellId,
                                                cr_EstablishmentCause_NB_Any,
                                                cr_NAS_IndicationWithPiggybacking(v_AttReqSecurityHeader,
                                                                                  v_AttachReq,
                                                                                  v_ESMMessage));
    return v_NAS_Ind;
  }

  /*
   * @desc      step 5 .. 14 of UE Registration acc. to 36.508 cl. 8.1.5.2
   * @param     p_CellId
   * @param     p_IOT_State
   * @param     p_State
   * @param     p_NAS_Ind
   * @param     p_PDN_TypeToBeUsed  (default value: pdnTypeAsSupportedByUE)
   * @status    APPROVED (NBIOT)
   */
  function f_NBIOT_InitialRegistration_Step5_14(NBIOT_CellId_Type p_CellId,
                                                IOT_STATE_Type p_IOT_State,
                                                NBIOT_IDLEUPDATED_STATE_Type p_State,
                                                NAS_MSG_Indication_Type p_NAS_Ind,
                                                template (omit) GPRS_Timer p_T3402 := omit,
                                                PDN_TypeToBeUsed_Type p_PDN_TypeToBeUsed := pdnTypeAsSupportedByUE)
    runs on NBIOT_PTC
  { /* @sic R5-171559: p_PDN_TypeToBeUsed sic@ */

    f_NBIOT_InitialRegistration_Step5_12(p_CellId, p_IOT_State, p_State, p_NAS_Ind);
    
    f_NBIOT_InitialRegistration_Step13(p_CellId,
                                       p_IOT_State,
                                       p_NAS_Ind,
                                       p_PDN_TypeToBeUsed,-,-,-,-,-,p_T3402);
    
    f_NBIOT_InitialRegistration_Step14(p_CellId, p_IOT_State, tsc_EpsDefaultBearerId);
  }

  /*
   * @desc      step 5 .. 12 of UE Registration acc. to 36.508 cl. 8.1.5.2
   * @param     p_CellId
   * @param     p_IOT_State
   * @param     p_State
   * @param     p_NAS_Ind
   * @param     p_SecurityContextActive (default value: false)
   * @status    APPROVED (NBIOT)
   */
  function f_NBIOT_InitialRegistration_Step5_12(NBIOT_CellId_Type p_CellId,
                                                IOT_STATE_Type p_IOT_State,
                                                NBIOT_IDLEUPDATED_STATE_Type p_State,
                                                NAS_MSG_Indication_Type p_NAS_Ind,
                                                boolean p_SecurityContextActive := false) runs on NBIOT_PTC
  {
    var NasCount_Type v_NasCountUL;

    v_NasCountUL := f_NBIOT_InitialRegistration_Step5_8 (p_CellId,
                                                         p_NAS_Ind,
                                                         p_SecurityContextActive);
    
    f_NBIOT_InitialRegistration_Step9_12(p_CellId,
                                         p_IOT_State,
                                         p_State,
                                         p_NAS_Ind,
                                         v_NasCountUL);
  }

  /*
   * @desc      step 5 .. 10a of UE Registration acc. to 36.508 cl. 8.1.5.2
   * @param     p_CellId
   * @param     p_IOT_State
   * @param     p_State
   * @param     p_NAS_Ind
   * @param     p_SecurityContextActive (default value: false)
   * @status    APPROVED (NBIOT)
   */
  function f_NBIOT_InitialRegistration_Step5_10a(NBIOT_CellId_Type p_CellId,
                                                IOT_STATE_Type p_IOT_State,
                                                NBIOT_IDLEUPDATED_STATE_Type p_State,
                                                NAS_MSG_Indication_Type p_NAS_Ind,
                                                boolean p_SecurityContextActive := false) runs on NBIOT_PTC
  {
    var NasCount_Type v_NasCountUL;

    v_NasCountUL := f_NBIOT_InitialRegistration_Step5_8(p_CellId,
                                                        p_NAS_Ind,
                                                        p_SecurityContextActive);
    
    f_NBIOT_InitialRegistration_Step9_10a(p_CellId,
                                         p_IOT_State,
                                         p_State,
                                         p_NAS_Ind,
                                         v_NasCountUL);
  }

       //Added VZW NBIOT for Data Retry TC 3.3
    function f_NBIOT_InitialRegistration_SyncFailure(NBIOT_CellId_Type p_CellId,
                                               NAS_MSG_Indication_Type p_NAS_Ind,
                                               boolean p_SecurityContextActive := false) runs on NBIOT_PTC 
  {
    var NasCount_Type v_NasCountUL;
    var template (present) SecurityHeaderType v_ExpectedSecurityHeader:= (tsc_SHT_NoSecurityProtection, tsc_SHT_IntegrityProtected);
    var SecurityHeaderType v_SentSecurityHeader;
    var NBIOT_SecurityParams_Type v_AuthParams := f_NBIOT_Security_Get();
    var GutiParameters_Type v_GutiParams := f_NBIOT_CellInfo_GetGuti(p_CellId);
    var NAS_PlmnId v_PLMN := f_Asn2Nas_PlmnId (v_GutiParams.PLMN_Identity);
    
    // Set UE network capabilities as sent by the UE to be used later (see TS 24.301 clause 5.4.3.3)
    v_AuthParams.NAS_SecurityCap := f_EUTRA_NB_FillNAS_SecurityCapability(p_NAS_Ind.Pdu.Msg.aTTACH_REQUEST);
    f_NBIOT_Security_Set(v_AuthParams);
    
    if (p_SecurityContextActive) {
      v_SentSecurityHeader := tsc_SHT_IntegrityProtected_Ciphered;
      v_ExpectedSecurityHeader := tsc_SHT_IntegrityProtected_Ciphered;
    } else {
      v_SentSecurityHeader := tsc_SHT_NoSecurityProtection;
    }
    if (p_NAS_Ind.SecurityProtection.Status == tsc_SHT_NoSecurityProtection) {
      v_ExpectedSecurityHeader := tsc_SHT_NoSecurityProtection;
    }
    
    // Step 5-6: Authentication
    v_AuthParams := f_NBIOT_NAS_Authentication_SyncFailure(p_CellId,
                                               tsc_SRB1bis,
                                               v_AuthParams,
                                               v_SentSecurityHeader,
                                               v_ExpectedSecurityHeader,
                                               v_PLMN);                        // AUTHENTICATION REQUEST & RESPONSE
    f_NBIOT_Security_Set(v_AuthParams);
    
   
  }
    
    
    
    
       //Added VZW NBIOT for Data Retry TC 3.2
    function f_NBIOT_InitialRegistration_EMMCause26(NBIOT_CellId_Type p_CellId,
                                               NAS_MSG_Indication_Type p_NAS_Ind,
                                               boolean p_SecurityContextActive := false) runs on NBIOT_PTC 
  {
    var NasCount_Type v_NasCountUL;
    var template (present) SecurityHeaderType v_ExpectedSecurityHeader:= (tsc_SHT_NoSecurityProtection, tsc_SHT_IntegrityProtected);
    var SecurityHeaderType v_SentSecurityHeader;
    var NBIOT_SecurityParams_Type v_AuthParams := f_NBIOT_Security_Get();
    var GutiParameters_Type v_GutiParams := f_NBIOT_CellInfo_GetGuti(p_CellId);
    var NAS_PlmnId v_PLMN := f_Asn2Nas_PlmnId (v_GutiParams.PLMN_Identity);
    
    // Set UE network capabilities as sent by the UE to be used later (see TS 24.301 clause 5.4.3.3)
    v_AuthParams.NAS_SecurityCap := f_EUTRA_NB_FillNAS_SecurityCapability(p_NAS_Ind.Pdu.Msg.aTTACH_REQUEST);
    f_NBIOT_Security_Set(v_AuthParams);
    
    if (p_SecurityContextActive) {
      v_SentSecurityHeader := tsc_SHT_IntegrityProtected_Ciphered;
      v_ExpectedSecurityHeader := tsc_SHT_IntegrityProtected_Ciphered;
    } else {
      v_SentSecurityHeader := tsc_SHT_NoSecurityProtection;
    }
    if (p_NAS_Ind.SecurityProtection.Status == tsc_SHT_NoSecurityProtection) {
      v_ExpectedSecurityHeader := tsc_SHT_NoSecurityProtection;
    }
    
    // Step 5-6: Authentication
    v_AuthParams := f_NBIOT_NAS_Authentication_EMMCause26(p_CellId,
                                               tsc_SRB1bis,
                                               v_AuthParams,
                                               v_SentSecurityHeader,
                                               v_ExpectedSecurityHeader,
                                               v_PLMN);                        // AUTHENTICATION REQUEST & RESPONSE
    f_NBIOT_Security_Set(v_AuthParams);
    
   
  }
    
     //Added VZW NBIOT for Data Retry TC 3.1
    function f_NBIOT_InitialRegistration_Step5_6_MAC_Failure(NBIOT_CellId_Type p_CellId,
                                               NAS_MSG_Indication_Type p_NAS_Ind,
                                               boolean p_SecurityContextActive := false) runs on NBIOT_PTC 
  {
    var NasCount_Type v_NasCountUL;
    var template (present) SecurityHeaderType v_ExpectedSecurityHeader:= (tsc_SHT_NoSecurityProtection, tsc_SHT_IntegrityProtected);
    var SecurityHeaderType v_SentSecurityHeader;
    var NBIOT_SecurityParams_Type v_AuthParams := f_NBIOT_Security_Get();
    var GutiParameters_Type v_GutiParams := f_NBIOT_CellInfo_GetGuti(p_CellId);
    var NAS_PlmnId v_PLMN := f_Asn2Nas_PlmnId (v_GutiParams.PLMN_Identity);
    
    // Set UE network capabilities as sent by the UE to be used later (see TS 24.301 clause 5.4.3.3)
    v_AuthParams.NAS_SecurityCap := f_EUTRA_NB_FillNAS_SecurityCapability(p_NAS_Ind.Pdu.Msg.aTTACH_REQUEST);
    f_NBIOT_Security_Set(v_AuthParams);
    
    if (p_SecurityContextActive) {
      v_SentSecurityHeader := tsc_SHT_IntegrityProtected_Ciphered;
      v_ExpectedSecurityHeader := tsc_SHT_IntegrityProtected_Ciphered;
    } else {
      v_SentSecurityHeader := tsc_SHT_NoSecurityProtection;
    }
    if (p_NAS_Ind.SecurityProtection.Status == tsc_SHT_NoSecurityProtection) {
      v_ExpectedSecurityHeader := tsc_SHT_NoSecurityProtection;
    }
    
    // Step 5-6: Authentication
    v_AuthParams := f_NBIOT_NAS_Authentication_MAC_Failure(p_CellId,
                                               tsc_SRB1bis,
                                               v_AuthParams,
                                               v_SentSecurityHeader,
                                               v_ExpectedSecurityHeader,
                                               v_PLMN);                        // AUTHENTICATION REQUEST & RESPONSE
    f_NBIOT_Security_Set(v_AuthParams);
    
   
  }
    
    
    
    
  /*
   * @desc      step 5 .. 8 of UE Registration acc. to 36.508 cl. 8.1.5.2
   * @param     p_CellId
   * @param     p_NAS_Ind
   * @param     p_SecurityContextActive (default value: false)
   * @return    NasCount_Type
   * @status    APPROVED (NBIOT)
   */
  function f_NBIOT_InitialRegistration_Step5_8(NBIOT_CellId_Type p_CellId,
                                               NAS_MSG_Indication_Type p_NAS_Ind,
                                               boolean p_SecurityContextActive := false) runs on NBIOT_PTC return NasCount_Type
  {
    var NasCount_Type v_NasCountUL;
    var template (present) SecurityHeaderType v_ExpectedSecurityHeader:= (tsc_SHT_NoSecurityProtection, tsc_SHT_IntegrityProtected);
    var SecurityHeaderType v_SentSecurityHeader;
    var NBIOT_SecurityParams_Type v_AuthParams := f_NBIOT_Security_Get();
    var GutiParameters_Type v_GutiParams := f_NBIOT_CellInfo_GetGuti(p_CellId);
    var NAS_PlmnId v_PLMN := f_Asn2Nas_PlmnId (v_GutiParams.PLMN_Identity);
    
    // Set UE network capabilities as sent by the UE to be used later (see TS 24.301 clause 5.4.3.3)
    v_AuthParams.NAS_SecurityCap := f_EUTRA_NB_FillNAS_SecurityCapability(p_NAS_Ind.Pdu.Msg.aTTACH_REQUEST);
    f_NBIOT_Security_Set(v_AuthParams);
    
    if (p_SecurityContextActive) {
      v_SentSecurityHeader := tsc_SHT_IntegrityProtected_Ciphered;
      v_ExpectedSecurityHeader := tsc_SHT_IntegrityProtected_Ciphered;
    } else {
      v_SentSecurityHeader := tsc_SHT_NoSecurityProtection;
    }
    if (p_NAS_Ind.SecurityProtection.Status == tsc_SHT_NoSecurityProtection) {
      v_ExpectedSecurityHeader := tsc_SHT_NoSecurityProtection;
    }
    
    // Step 5-6: Authentication
    v_AuthParams := f_NBIOT_NAS_Authentication(p_CellId,
                                               tsc_SRB1bis,
                                               v_AuthParams,
                                               v_SentSecurityHeader,
                                               v_ExpectedSecurityHeader,
                                               v_PLMN);                        // AUTHENTICATION REQUEST & RESPONSE
    f_NBIOT_Security_Set(v_AuthParams);
    
    // Step 7-8: NAS Security
    if (ispresent(p_NAS_Ind.Pdu.Msg.aTTACH_REQUEST.ueAddSecurityCap)) {// @sic R5-182074 sic@
      v_AuthParams.NAS_SecurityCap5G := p_NAS_Ind.Pdu.Msg.aTTACH_REQUEST.ueAddSecurityCap;
    }
    v_NasCountUL := f_NBIOT_NAS_ActivateSecurity(p_CellId, v_AuthParams, -, true); // @sic R5-182074 sic@
    f_NBIOT_Security_Set(v_AuthParams);
    return v_NasCountUL;
  }

  /*
   * @desc      step 9 .. 10a of UE Registration acc. to 36.508 cl. 8.1.5.2
   * @param     p_CellId
   * @param     p_IOT_State
   * @param     p_State
   * @param     p_NAS_Ind
   * @param     p_NasCountUL
   * @status    APPROVED (NBIOT)
   */
  function f_NBIOT_InitialRegistration_Step9_10a(NBIOT_CellId_Type p_CellId,
                                                 IOT_STATE_Type p_IOT_State,
                                                 NBIOT_IDLEUPDATED_STATE_Type p_State,
                                                 NAS_MSG_Indication_Type p_NAS_Ind,
                                                 NasCount_Type p_NasCountUL) runs on NBIOT_PTC
  {
    var NAS_UL_Message_Type v_ESMMessage := p_NAS_Ind.Pdu.PiggybackedPduList[0].Msg;
    var NBIOT_SecurityParams_Type v_AuthParams := f_NBIOT_Security_Get();
    var NAS_UL_Message_Type v_PdnConnectivityRequest;
    var AccessPointName v_APN;
    var NBIOT_PDN_Type v_PDN;
    var UE_TestLoopMode_Type v_UE_TestLoopMode;
    var template (value) NB_RadioBearerList_Type v_DrbConfigList := cs_NB_DrbConfigList_DRB1; // per default DRB1 only (USER_PLANE)
    
    if (ischosen(v_ESMMessage.pDN_CONNECTIVITY_REQUEST)) { // PDN Requested
      
      v_PdnConnectivityRequest := p_NAS_Ind.Pdu.PiggybackedPduList[0].Msg;
      f_NBIOT_MobileInfo_SetAssignedPdnAndPTI (0, // This is registration, so this is the first PDN
                                               v_PdnConnectivityRequest.pDN_CONNECTIVITY_REQUEST.pdnType.typeValue,
                                               v_PdnConnectivityRequest.pDN_CONNECTIVITY_REQUEST.procedureTransactionIdentifier);
      
      if (ispresent(v_PdnConnectivityRequest.pDN_CONNECTIVITY_REQUEST.accessPointName)) {
        v_APN := v_PdnConnectivityRequest.pDN_CONNECTIVITY_REQUEST.accessPointName;
        v_APN.iei := omit;
        f_NBIOT_MobileInfo_SetAPN (0, v_APN);
          if(isvalue(v_PdnConnectivityRequest.pDN_CONNECTIVITY_REQUEST.accessPointName.nameValue))
       {
                log("APN is included in the PDN Connectivity Request message");
       }    
       else
       {
                log("APN is not included in the PDN Connectivity Request message");        
       }  
      }
        
     
      f_NBIOT_MobileInfo_SetExtPCO (0, v_PdnConnectivityRequest.pDN_CONNECTIVITY_REQUEST.extdProtocolConfigurationOptions);

      // Step 9a1 & 2 - ESM information optionally transferred;
      f_NBIOT_ESM_InformationTransfer_GetAPNandPCOs(p_CellId, f_CheckEsmInfoTransferFlag(v_PdnConnectivityRequest.pDN_CONNECTIVITY_REQUEST));
      
      v_PDN := f_NBIOT_MobileInfo_GetAssignedPdn(0); // Get latest values incase above function has updated it
      if (not isvalue (v_PDN.accessPointName)) {
        f_NBIOT_MobileInfo_SetAPN (0, valueof(cs_AccessPointName(px_AccessPointName))); // NOTE: APN is not omit anymore
      }
      select (p_State) {
        case (STATE2A_NB_TESTLOOP_ModeA, STATE3A_NB_IDLEUPDATED_TESTLOOP_ModeA,
              STATE2A_NB_TESTLOOP_ModeB, STATE3A_NB_IDLEUPDATED_TESTLOOP_ModeB,
              STATE2A_NB_TESTLOOP_ModeF, STATE3A_NB_IDLEUPDATED_TESTLOOP_ModeF, // @sic R5-185113 sic@
              STATE2A_NB_TESTLOOP_ModeG, STATE3A_NB_IDLEUPDATED_TESTLOOP_ModeG,
              STATE2A_NB_TESTLOOP_ModeH, STATE3A_NB_IDLEUPDATED_TESTLOOP_ModeH,
              STATE2A_NB_TESTLOOP_ModeI, STATE3A_NB_IDLEUPDATED_TESTLOOP_ModeI) { // @sic R5-172854 sic@
          v_UE_TestLoopMode := f_NBIOT_UE_TestLoopMode_Type(p_State);
          f_NBIOT_Activate_TestMode(p_CellId, v_UE_TestLoopMode);
          f_NBIOT_LoopbackIsActivated_Set(true);
        }
      }
    }
    
    if (p_IOT_State == USER_PLANE) { // Activate RRC Security
      // Step 10a1-10a2: RRC Security Mode procedures
      v_AuthParams := f_NBIOT_RRC_ActivateSecurity(p_CellId, v_AuthParams, p_NasCountUL, v_DrbConfigList); // RRC SECURITY COMMAND & COMPLETE; DRB1 gets configured at the SS
      f_NBIOT_Security_Set(v_AuthParams); //Saving security parameters
    }
  }

  /*
   * @desc      step 9 .. 12 of UE Registration acc. to 36.508 cl. 8.1.5.2
   * @param     p_CellId
   * @param     p_IOT_State
   * @param     p_State
   * @param     p_NAS_Ind
   * @param     p_NasCountUL
   * @status    APPROVED (NBIOT)
   */
  function f_NBIOT_InitialRegistration_Step9_12(NBIOT_CellId_Type p_CellId,
                                                IOT_STATE_Type p_IOT_State,
                                                NBIOT_IDLEUPDATED_STATE_Type p_State,
                                                NAS_MSG_Indication_Type p_NAS_Ind,
                                                NasCount_Type p_NasCountUL) runs on NBIOT_PTC
  {
    // Step 9 -10a
    f_NBIOT_InitialRegistration_Step9_10a(p_CellId,
                                          p_IOT_State,
                                          p_State,
                                          p_NAS_Ind,
                                          p_NasCountUL);
    // Step 11-12 UE Capability check
    f_NBIOT_Capability(p_CellId, p_IOT_State); // This enquires for the eutra capability but does not check the contents of the message received
  }
    
    
  function f_NBIOT_InitialRegistration_Step13_SS(NBIOT_CellId_Type p_CellId,
                                              IOT_STATE_Type p_IOT_State,
                                              NAS_MSG_Indication_Type p_NAS_Ind,
                                              PDN_TypeToBeUsed_Type p_PDN_TypeToBeUsed := pdnTypeAsSupportedByUE,
                                              template (omit) TrackingAreaIdList p_TaiList := omit,
                                              template (omit) MobileIdentity p_Guti := omit,
                                              template (omit) EPS_NetworkFeatureSupport p_NwkFeatSup := omit,
                                              template (omit) AdditionalUpdateResult p_AdditionalUpdateResult := omit,
                                              template (value) GPRS_Timer p_T3412 := cs_GprsTimer_v_deact,
                                              template (omit) GPRS_Timer p_T3402 := omit,
                                              template (omit) GPRS_Timer3 p_T3412Extd := omit,
                                              template (omit) GPRS_Timer2 p_T3324 := omit,
                                              template (omit) GPRS_Timer p_T3423 := omit,
                                              template (omit) PLMN_List p_EquivalentPlmnList := omit,
                                              template (omit) ExtdDRXParams p_ExtdDRXParams := omit,
                                              template (omit) GPRS_Timer2 p_T3448 := omit) runs on NBIOT_PTC
  { /* @sic R5-171559: p_PDN_TypeToBeUsed, R5-171414: Add extra parameters to send in Attach Accept sic@ */
    var GutiParameters_Type v_GutiParams := f_NBIOT_CellInfo_GetGuti(p_CellId);
    var template (value) MobileIdentity v_Guti;
    var NAS_PlmnId v_PLMN := f_Asn2Nas_PlmnId (v_GutiParams.PLMN_Identity);
    var NAS_UL_Message_Type v_ESMMessage := p_NAS_Ind.Pdu.PiggybackedPduList[0].Msg;
    var EUTRA_ASN1_TrackingAreaCode_Type v_TAC := f_NBIOT_CellInfo_GetTAC(p_CellId);
    var EPS_BearerIdentity v_EpsDefaultBearerId := tsc_EpsDefaultBearerId;
    var template (value) EPS_NetworkFeatureSupport v_NtwkFeatSupport;
    var boolean v_IPv4AllocationViaNasFlag := true; // @sic R5s170525 sic@
    var template (omit) ExtdProtocolConfigOptions v_PcoToUE := omit;
    var template (omit) ExtdProtocolConfigOptions v_PcoFromUE := omit;
    var NBIOT_PDN_Type v_PDN;
    var template (value) PDN_Address v_PDN_Address;
    var template (omit) AdditionalUpdateResult v_AdditionalUpdateResult;
    var BEARER_CONTEXT_TYPE v_BearerContextNumber := DEF_1;
    var template (omit) ESM_Cause v_ESM_Cause := omit;
    var template (value) TrackingAreaIdList v_TaiList;
    var B3_Type v_AttachTypeFromUE := p_NAS_Ind.Pdu.Msg.aTTACH_REQUEST.epsAttachType.typeValue; 
    var octetstring V_APN ;   
    var template (value) NAS_ExtdProtocolConfigOptions_Type p_ConfigOptionsRX;
    var charstring v_UpperCasePattern_apn;
    var charstring v_exapn ;
     var O2_Type v_ProtocolId;
       var octetstring v_Contents;
      var integer i:= 0;
      
      
      
    if (isvalue(p_TaiList)) {
      v_TaiList := valueof(p_TaiList);
    } else {
      v_TaiList := cs_TAIListNonConsecutive_lv(v_PLMN, {bit2oct(v_TAC)});
    }
    if (isvalue(p_Guti)) {
      v_Guti := valueof(p_Guti);
    } else {
     v_Guti := f_GutiParameters2MobileIdentity(tsc_IEI_Guti, v_GutiParams);
    }
    if (isvalue(p_NwkFeatSup)) {
      v_NtwkFeatSupport := valueof(p_NwkFeatSup);
    } else {
     v_NtwkFeatSupport := f_GetNBIOTNetworkFeatureSupport(p_IOT_State);
    }
    if (isvalue(p_AdditionalUpdateResult)) {
      v_AdditionalUpdateResult := valueof(p_AdditionalUpdateResult);
    } else {
      v_AdditionalUpdateResult  := f_GetNBIOTAdditionalUpdateResult(p_NAS_Ind.Pdu.Msg.aTTACH_REQUEST.addUpdateType);
    }
    
    if (f_NBIOT_MobileInfo_GetNoOfPDNsConfigured () > 0) { // PDN Requested
      v_PDN := f_NBIOT_MobileInfo_GetAssignedPdn (0);  // This is registration, so this is the first PDN
      v_PcoFromUE := v_PDN.protocolConfigurationOptions; // @sic R5s170597 sic@
      if (isvalue(v_PcoFromUE)){ // @sic R5s170597 sic@
        v_IPv4AllocationViaNasFlag := f_CheckExtdPCOforIPallocationViaNas(v_PcoFromUE);
      }
      v_PDN_Address := f_CIOT_GetPDNAddress(v_PDN.assignedPdnType, v_IPv4AllocationViaNasFlag, -, p_PDN_TypeToBeUsed); // @sic R5s170597 sic@
      v_PcoToUE := f_GetDefaultExtdProtocolConfigOptions(v_PcoFromUE); // @sic R5s170597 sic@
    }
    
    if (p_IOT_State == USER_PLANE) { // configure the DRB
      
      if (pc_IPv6 and pc_IPv4) { // @sic R5-171559 sic@
        select (p_PDN_TypeToBeUsed) {
          case (forceIPv4only)          { v_ESM_Cause := cs_ESM_Cause_tv('00110010'B); }     // PDN type IPv4 only allowed
          case (forceIPv6only)          { v_ESM_Cause := cs_ESM_Cause_tv('00110011'B); }     // PDN type IPv6 only allowed
          case (pdnTypeAsSupportedByUE) { v_ESM_Cause := omit; }
        }
      }
      
      f_NBIOT_RRCConnectionReconfigurationWithAttachAcceptAllParams(p_CellId,
                                                                    v_EpsDefaultBearerId,
                                                                    tsc_RRC_TI_Def,
                                                                    v_PDN.pti,
                                                                    tsc_EAttachType_EpsOnly,
                                                                    v_PDN_Address,
                                                                    v_Guti,
                                                                    v_TaiList,
                                                                    omit,
                                                                    omit,
                                                                    v_ESM_Cause,
                                                                    v_PDN.accessPointName,
                                                                    v_PcoToUE,
                                                                    v_AdditionalUpdateResult,
                                                                    p_T3412,
                                                                    p_T3402,
                                                                    p_T3423,
                                                                    p_EquivalentPlmnList,
                                                                    v_NtwkFeatSupport,
                                                                    p_T3412Extd,
                                                                    -,
                                                                    v_BearerContextNumber,
                                                                    omit,
                                                                    p_T3324,
                                                                    p_ExtdDRXParams,
                                                                    p_T3448); // @sic R5-183196 sic@
    } else { // CP
      if (px_DoAttachWithoutPDN) {
        SRB.send(cas_NB_SRB_NasPdu_REQ(p_CellId,
                                       tsc_SRB1bis,
                                       cs_TimingInfo_Now,
                                       cs_NAS_RequestWithPiggybacking(tsc_SHT_IntegrityProtected_Ciphered,
                                                                      cs_CIOT_ATTACH_ACCEPT(v_TaiList,
                                                                                            v_Guti,
                                                                                            v_NtwkFeatSupport,
                                                                                            v_AdditionalUpdateResult,
                                                                                            p_T3412,
                                                                                            p_T3402,
                                                                                            p_T3412Extd,
                                                                                            p_T3324,
                                                                                            p_T3423,
                                                                                            p_EquivalentPlmnList,
                                                                                            p_ExtdDRXParams,
                                                                                            -, -, -,
                                                                                            p_T3448), // @sic R5-183196 sic@
                                                                      cs_ESM_DUMMY_MESSAGE(v_ESMMessage.eSM_DUMMY_MESSAGE.procedureTransactionIdentifier))));
      } else { // PDN
        SRB.send(cas_NB_SRB_NasPdu_REQ(p_CellId,
                                       tsc_SRB1bis,
                                       cs_TimingInfo_Now,
                                       cs_NAS_RequestWithPiggybacking(tsc_SHT_IntegrityProtected_Ciphered,
                                                                      cs_CIOT_ATTACH_ACCEPT(v_TaiList, // @sic R5s170779 sic@
                                                                                            v_Guti,
                                                                                            v_NtwkFeatSupport,
                                                                                            v_AdditionalUpdateResult,
                                                                                            p_T3412,
                                                                                            p_T3402,
                                                                                            p_T3412Extd,
                                                                                            p_T3324,
                                                                                            p_T3423,
                                                                                            p_EquivalentPlmnList,
                                                                                            p_ExtdDRXParams,
                                                                                            -, -, -,
                                                                                            p_T3448), // @sic R5-183196 sic@
                                                                      cs_CIOT_ActivateDefEpsBearerContextRequest(v_EpsDefaultBearerId,
                                                                                                                v_PDN.pti,
                                                                                                                v_PDN.accessPointName,
                                                                                                                v_PDN_Address,
                                                                                                                v_PcoToUE,
                                                                                                                -,
                                                                                                                -,
                                                                                                                -,
                                                                                                                omit, // @sic R5s180054 sic@
                                                                                                                cs_ControlPlaneInd,
                                                                                                                cs_ServingPLMNRateControl('FFFF'O)))));
      }
    }
      
     
    
  }  

  /*
   * @desc      step 13 of UE Registration acc. to 36.508 cl. 8.1.5.2
   *            Send Attach Accept
   * @param     p_CellId
   * @param     p_IOT_State
   * @param     p_NAS_Ind
   * @param     p_PDN_TypeToBeUsed  (default value: pdnTypeAsSupportedByUE)
   * @param     p_TaiList           (default value: omit)
   * @param     p_Guti              (default value: omit)
   * @param     p_NwkFeatSup        (default value: omit)
   * @param     p_AdditionalUpdateResult (default value: omit)
   * @param     p_T3412             (default value: cs_GprsTimer_v_deact)
   * @param     p_T3402             (default value: omit)
   * @param     p_T3412Extd         (default value: omit)
   * @param     p_T3324             (default value: omit)
   * @param     p_T3423             (default value: omit)
   * @param     p_EquivalentPlmnList (default value: omit)
   * @param     p_ExtdDRXParams     (default value: omit)
   * @param     p_T3448             (default value: omit)
   * @status    APPROVED (NBIOT)
   */
  function f_NBIOT_InitialRegistration_Step13(NBIOT_CellId_Type p_CellId,
                                              IOT_STATE_Type p_IOT_State,
                                              NAS_MSG_Indication_Type p_NAS_Ind,
                                              PDN_TypeToBeUsed_Type p_PDN_TypeToBeUsed := pdnTypeAsSupportedByUE,
                                              template (omit) TrackingAreaIdList p_TaiList := omit,
                                              template (omit) MobileIdentity p_Guti := omit,
                                              template (omit) EPS_NetworkFeatureSupport p_NwkFeatSup := omit,
                                              template (omit) AdditionalUpdateResult p_AdditionalUpdateResult := omit,
                                              template (value) GPRS_Timer p_T3412 := cs_GprsTimer_v_deact,
                                              template (omit) GPRS_Timer p_T3402 := omit,
                                              template (omit) GPRS_Timer3 p_T3412Extd := omit,
                                              template (omit) GPRS_Timer2 p_T3324 := omit,
                                              template (omit) GPRS_Timer p_T3423 := omit,
                                              template (omit) PLMN_List p_EquivalentPlmnList := omit,
                                              template (omit) ExtdDRXParams p_ExtdDRXParams := omit,
                                              template (omit) GPRS_Timer2 p_T3448 := omit) runs on NBIOT_PTC
  { /* @sic R5-171559: p_PDN_TypeToBeUsed, R5-171414: Add extra parameters to send in Attach Accept sic@ */
    var GutiParameters_Type v_GutiParams := f_NBIOT_CellInfo_GetGuti(p_CellId);
    var template (value) MobileIdentity v_Guti;
    var NAS_PlmnId v_PLMN := f_Asn2Nas_PlmnId (v_GutiParams.PLMN_Identity);
    var NAS_UL_Message_Type v_ESMMessage := p_NAS_Ind.Pdu.PiggybackedPduList[0].Msg;
    var EUTRA_ASN1_TrackingAreaCode_Type v_TAC := f_NBIOT_CellInfo_GetTAC(p_CellId);
    var EPS_BearerIdentity v_EpsDefaultBearerId := tsc_EpsDefaultBearerId;
    var template (value) EPS_NetworkFeatureSupport v_NtwkFeatSupport;
    var boolean v_IPv4AllocationViaNasFlag := true; // @sic R5s170525 sic@
    var template (omit) ExtdProtocolConfigOptions v_PcoToUE := omit;
    var template (omit) ExtdProtocolConfigOptions v_PcoFromUE := omit;
    var NBIOT_PDN_Type v_PDN;
    var template (value) PDN_Address v_PDN_Address;
    var template (omit) AdditionalUpdateResult v_AdditionalUpdateResult;
    var BEARER_CONTEXT_TYPE v_BearerContextNumber := DEF_1;
    var template (omit) ESM_Cause v_ESM_Cause := omit;
    var template (value) TrackingAreaIdList v_TaiList;
    var B3_Type v_AttachTypeFromUE := p_NAS_Ind.Pdu.Msg.aTTACH_REQUEST.epsAttachType.typeValue; 
    var octetstring V_APN ;   
    var template (value) NAS_ExtdProtocolConfigOptions_Type p_ConfigOptionsRX;
    var charstring v_UpperCasePattern_apn;
    var charstring v_exapn ;
     var O2_Type v_ProtocolId;
       var octetstring v_Contents;
      var integer i:= 0;
      
      
      
    if (isvalue(p_TaiList)) {
      v_TaiList := valueof(p_TaiList);
    } else {
      v_TaiList := cs_TAIListNonConsecutive_lv(v_PLMN, {bit2oct(v_TAC)});
    }
    if (isvalue(p_Guti)) {
      v_Guti := valueof(p_Guti);
    } else {
     v_Guti := f_GutiParameters2MobileIdentity(tsc_IEI_Guti, v_GutiParams);
    }
    if (isvalue(p_NwkFeatSup)) {
      v_NtwkFeatSupport := valueof(p_NwkFeatSup);
    } else {
     v_NtwkFeatSupport := f_GetNBIOTNetworkFeatureSupport(p_IOT_State);
    }
    if (isvalue(p_AdditionalUpdateResult)) {
      v_AdditionalUpdateResult := valueof(p_AdditionalUpdateResult);
    } else {
      v_AdditionalUpdateResult  := f_GetNBIOTAdditionalUpdateResult(p_NAS_Ind.Pdu.Msg.aTTACH_REQUEST.addUpdateType);
    }
    
    if (f_NBIOT_MobileInfo_GetNoOfPDNsConfigured () > 0) { // PDN Requested
      v_PDN := f_NBIOT_MobileInfo_GetAssignedPdn (0);  // This is registration, so this is the first PDN
      v_PcoFromUE := v_PDN.protocolConfigurationOptions; // @sic R5s170597 sic@
      if (isvalue(v_PcoFromUE)){ // @sic R5s170597 sic@
        v_IPv4AllocationViaNasFlag := f_CheckExtdPCOforIPallocationViaNas(v_PcoFromUE);
      }
      v_PDN_Address := f_CIOT_GetPDNAddress(v_PDN.assignedPdnType, v_IPv4AllocationViaNasFlag, -, p_PDN_TypeToBeUsed); // @sic R5s170597 sic@
      v_PcoToUE := f_GetDefaultExtdProtocolConfigOptions(v_PcoFromUE); // @sic R5s170597 sic@
    }
    
    if (p_IOT_State == USER_PLANE) { // configure the DRB
      
      if (pc_IPv6 and pc_IPv4) { // @sic R5-171559 sic@
        select (p_PDN_TypeToBeUsed) {
          case (forceIPv4only)          { v_ESM_Cause := cs_ESM_Cause_tv('00110010'B); }     // PDN type IPv4 only allowed
          case (forceIPv6only)          { v_ESM_Cause := cs_ESM_Cause_tv('00110011'B); }     // PDN type IPv6 only allowed
          case (pdnTypeAsSupportedByUE) { v_ESM_Cause := omit; }
        }
      }
      
      f_NBIOT_RRCConnectionReconfigurationWithAttachAcceptAllParams(p_CellId,
                                                                    v_EpsDefaultBearerId,
                                                                    tsc_RRC_TI_Def,
                                                                    v_PDN.pti,
                                                                    tsc_EAttachType_EpsOnly,
                                                                    v_PDN_Address,
                                                                    v_Guti,
                                                                    v_TaiList,
                                                                    omit,
                                                                    omit,
                                                                    v_ESM_Cause,
                                                                    v_PDN.accessPointName,
                                                                    v_PcoToUE,
                                                                    v_AdditionalUpdateResult,
                                                                    p_T3412,
                                                                    p_T3402,
                                                                    p_T3423,
                                                                    p_EquivalentPlmnList,
                                                                    v_NtwkFeatSupport,
                                                                    p_T3412Extd,
                                                                    -,
                                                                    v_BearerContextNumber,
                                                                    omit,
                                                                    p_T3324,
                                                                    p_ExtdDRXParams,
                                                                    p_T3448); // @sic R5-183196 sic@
    } else { // CP
      if (px_DoAttachWithoutPDN) {
        SRB.send(cas_NB_SRB_NasPdu_REQ(p_CellId,
                                       tsc_SRB1bis,
                                       cs_TimingInfo_Now,
                                       cs_NAS_RequestWithPiggybacking(tsc_SHT_IntegrityProtected_Ciphered,
                                                                      cs_CIOT_ATTACH_ACCEPT(v_TaiList,
                                                                                            v_Guti,
                                                                                            v_NtwkFeatSupport,
                                                                                            v_AdditionalUpdateResult,
                                                                                            p_T3412,
                                                                                            p_T3402,
                                                                                            p_T3412Extd,
                                                                                            p_T3324,
                                                                                            p_T3423,
                                                                                            p_EquivalentPlmnList,
                                                                                            p_ExtdDRXParams,
                                                                                            -, -, -,
                                                                                            p_T3448), // @sic R5-183196 sic@
                                                                      cs_ESM_DUMMY_MESSAGE(v_ESMMessage.eSM_DUMMY_MESSAGE.procedureTransactionIdentifier))));
      } else { // PDN
        SRB.send(cas_NB_SRB_NasPdu_REQ(p_CellId,
                                       tsc_SRB1bis,
                                       cs_TimingInfo_Now,
                                       cs_NAS_RequestWithPiggybacking(tsc_SHT_IntegrityProtected_Ciphered,
                                                                      cs_CIOT_ATTACH_ACCEPT(v_TaiList, // @sic R5s170779 sic@
                                                                                            v_Guti,
                                                                                            v_NtwkFeatSupport,
                                                                                            v_AdditionalUpdateResult,
                                                                                            p_T3412,
                                                                                            p_T3402,
                                                                                            p_T3412Extd,
                                                                                            p_T3324,
                                                                                            p_T3423,
                                                                                            p_EquivalentPlmnList,
                                                                                            p_ExtdDRXParams,
                                                                                            -, -, -,
                                                                                            p_T3448), // @sic R5-183196 sic@
                                                                      cs_CIOT_ActivateDefEpsBearerContextRequest(v_EpsDefaultBearerId,
                                                                                                                v_PDN.pti,
                                                                                                                v_PDN.accessPointName,
                                                                                                                v_PDN_Address,
                                                                                                                v_PcoToUE,
                                                                                                                -,
                                                                                                                -,
                                                                                                                -,
                                                                                                                omit, // @sic R5s180054 sic@
                                                                                                                cs_ControlPlaneInd,
                                                                                                                cs_ServingPLMNRateControl('FFFF'O)))));
      }
    }
      log("aTTACH_ACCEPT ");
      log("aCTIVATE_DEFAULT_EPS_BEARER_CONTEXT_REQUEST ");
      log("AttachType From UE: ",v_AttachTypeFromUE," and AttachType from Network: ",tsc_EAttachType_EpsOnly);
      log("EMM Cause is omitted");
     
      if(ispresent(v_Guti.typeOfId)){
        log("	GUTI: Present"); 
      }else{
        log("	GUTI: Not Present");
      }
      
      log("	EMM Cause: Not Present");
        if(ispresent(v_AdditionalUpdateResult.addUpdateResultValue)){
            log("	Additional update type: Present"); 
        }else{
            log("	Additional update type: Not Present");
        }
    
      if(ispresent(p_T3402.timerValue)){
           log("T3402 timer Value: Present : ",(bit2int(valueof(p_T3402.unit)) * bit2int(valueof(p_T3402.timerValue)))," minutes");
      }else{
          log("T3402 timer : Not Present");
      }
      
      log("	APN-AMBR: Not Present");
      
      log("	EPS bearer Identity: Present: ",v_EpsDefaultBearerId);
      
      if(ispresent(v_PDN_Address.adressInfo)){
          log("	PDN Address: Present"); 
      }else{
          log("	PDN Address: Not Present");
      }
      
      if(ispresent(v_PDN.accessPointName.nameValue)){
         V_APN := valueof(v_PDN.accessPointName.nameValue);    
         v_UpperCasePattern_apn := f_StringToUpper(oct2char(V_APN));
         v_exapn := substr(v_UpperCasePattern_apn,1,lengthof(v_UpperCasePattern_apn)-1); 
          log("	Access Point Name: Present: ",v_exapn); 
      }else{
          log("	Access Point Name: Not Present");
      }
      
      p_ConfigOptionsRX := valueof(v_PcoToUE.pco);
      for (i := 0; i < lengthof(p_ConfigOptionsRX); i := i + 1) 
    {
       v_ProtocolId := valueof(v_PcoToUE.pco)[i].protocolID;
    //   v_ProtocolId := p_ConfigOptionsRX[i].protocolID;
       v_Contents := ''O;
      
       select (v_ProtocolId) 
       {// See 24.008 Table 10.5.154
         case ('0001'O) 
         {       // P-CSCF IPv6 address
           //P_CSCF_IPV6 := 1;
           log("	P-CSCF IPV6: Present"); 
         }
         case ('0002'O) 
         {            // IM CN Subsystem Signalling Flag, reply with an empty container
            //do nothing
         }
         case ('0003'O) 
         {   
             // DNS Server IPv6 address
          //   DNS_IPV6 := 1; 
             log("	DNS IPV6: Present");
         }
         case ('000C'O) 
         {       // P-CSCF IPv4 address
          //  P_CSCF := 1;
            log("	P-CSCF IPV4: Present");
         }
         case ('000D'O) 
         {       // DNS Server IPv4 address
          //  ipv4_DNS :=1;
            log("	DNS IPV4: Present");
         }
         case('FF00'O)
         {
            //Operator specific PCO
            log("	Operator Specific PCO : Present"); 
         }
         case ('000E'O) 
         {       // MSISDN
          // MSISDN :=1; 
            log("	MSISDN: Present"); 
         }
         case ('0010'O) 
         {       // IPV4 MTU SIZE
         //  ipv4_MTU:=1;
            log("	IPV4 MTU SIZE: Present");  
         } 		
       }
     
    }
  }

  /*
   * @desc      step 14 of UE Registration acc. to 36.508 cl. 8.1.5.2
   *            Receive Attach Complete
   * @param     p_CellId
   * @param     p_IOT_State
   * @param     p_EpsBearerId
   * @param     p_AttachComplete    (default value: omit)
   * @status    APPROVED (NBIOT)
   */
  function f_NBIOT_InitialRegistration_Step14(NBIOT_CellId_Type p_CellId,
                                              IOT_STATE_Type p_IOT_State,
                                              HalfOctet_Type p_EpsBearerId,
                                              template (omit) NAS_MSG_Indication_Type p_AttachComplete := omit) runs on NBIOT_PTC
  {
    if (p_IOT_State == USER_PLANE) {
      f_NBIOT_NAS_AttachComplete_UP(p_CellId, p_EpsBearerId, p_AttachComplete);
    } else { // CP
      f_NBIOT_NAS_AttachComplete_CP(p_CellId, p_EpsBearerId, p_AttachComplete);
      
    }
  }

  /*
   * @desc      This function sets the UE back to Automatic mode, then calls the normal Postamble function with N1_IDLE state
   *            as per 36.523-3 cl. 10.3.5
   * @param     p_CurrentCellId
   * @param     p_NeighbourCellId
   * @param     p_IOT_State
   * @status    APPROVED (NBIOT)
   */
  function f_NBIOT_Postamble_N5Manual(NBIOT_CellId_Type p_CurrentCellId,
                                      NBIOT_CellId_Type p_NeighbourCellId,
                                      IOT_STATE_Type p_IOT_State) runs on NBIOT_PTC
  {
    // Step 1
    f_UT_AutomaticPLMN_Select(UT);
    
    // Step 2
    f_NBIOT_SetCellPower(p_NeighbourCellId, tsc_ServingCellRS_EPRE);
    f_NBIOT_SetCellPower(p_CurrentCellId, tsc_NonSuitableOffNBIOTCellRS_EPRE);

    // Step 3
    f_NBIOT_TrackingAreaUpdate(p_NeighbourCellId, p_IOT_State);
    
    // Now call the normal postamble function with E1 state
    f_NBIOT_Postamble(p_NeighbourCellId, p_IOT_State, N1_IDLE);
  }

  /*
   * @desc      This function should be used at the end of every test case to ensure the UE
   *            detaches and release the RRC connection as it is turned off and only then will it
   *            take down the cell the UE is currently camped on
   * @param     p_CellId
   * @param     p_IOT_State
   * @param     p_Postamble_State ... values: N1_IDLE, N2_CONNECTED, N3_TESTMODE, N4_DEREGISTERED, N5_MANUAL is handled in it's own function: f_NBIOT_Postamble_E5Manual
   * @status    APPROVED (NBIOT)
   */
  function f_NBIOT_Postamble(NBIOT_CellId_Type p_CellId,
                             IOT_STATE_Type p_IOT_State,
                             NBIOT_POSTAMBLE_STATE_Type p_Postamble_State) runs on NBIOT_PTC
  {
    if (pc_SwitchOnOff) { // The UE can actually be switched off
      select (p_Postamble_State) {
        case (N1_IDLE) {
          //Expect the UE to detach and release RRC connection
          f_NBIOT_UE_Detach_SwitchOffUe(p_CellId, CONTROL_PLANE, RRC_IDLE, omit); // @sic R5s180574 Even if in USER PLANE, security & DRB not configured again before switch off sic@
        }
        case (N2_CONNECTED, N3_TESTMODE) {
          //Expect the UE to detach and release RRC connection
          f_NBIOT_UE_Detach_SwitchOffUe(p_CellId, p_IOT_State, RRC_CONNECTED, omit);
        }
        case (N4_DEREGISTERED) {
          f_UT_SwitchOffUE (UT, false);
        }
      }
    }
    else { // The power must be removed from the UE
      f_UT_PowerOffUE (UT);
    }
    //And now remove the cell(s)
    //VZW: Temporary Commented function as Cell Delete is not implemented at SS: 
      f_NBIOT_ReleaseAllCells();
  }

  /*
   * @desc      This function turns the UE off, waits for a Detach message in RRC IDLE state (default) or RRC CONNECTED state
   * @param     p_CellId
   * @param     p_RRCState          (default value: RRC_IDLE)
   * @param     p_DetachType        (default value: omit - which means it will be determind by the function)
   * @status    APPROVED (NBIOT)
   */
  function f_NBIOT_UE_DetachMO(NBIOT_CellId_Type p_CellId,
                               EUTRA_RRC_STATE_Type p_RRCState := RRC_IDLE,
                               template DetachType p_DetachType := omit)
    runs on NBIOT_PTC
  {
    var GutiParameters_Type v_Guti := f_NBIOT_CellInfo_GetGuti(p_CellId);
    var template (present) NAS_MSG_Indication_Type v_ExpectedDetachRequest;
    var template (present) DetachType v_DetachType;
    
    if (ispresent(p_DetachType.typeOfDetach)) {
      v_DetachType := p_DetachType;     // compiler warning cannot be suppressed as there is no way to convert 'template' to 'template (present)'
    } else {
      v_DetachType := cr_DetachType('1'B, tsc_DetachMO_EpsOnly);
    }
    
    v_ExpectedDetachRequest := cr_NAS_Indication((tsc_SHT_IntegrityProtected, tsc_SHT_IntegrityProtected_Ciphered),
                                                 cr_508_DETACH_REQUEST_MO(cr_NAS_KeySetIdentifier (?, ?),
                                                                          f_GutiParameters2MobileIdentity(omit, v_Guti),
                                                                          v_DetachType));
    select (p_RRCState) {
      case (RRC_IDLE) {
        f_NBIOT_RRC_ConnEst_DefWithNas(p_CellId, ?, v_ExpectedDetachRequest);
      }
      case (RRC_CONNECTED) {
        SRB.receive(car_NB_SRB_NasPdu_IND(p_CellId, ?, v_ExpectedDetachRequest));
      }
    }
  }

  /*
   * @desc      This function turns the UE off, waits for a Detach message and releases the RRC connection
   * @param     p_CellId
   * @param     p_IOT_State
   * @param     p_RRCState
   * @param     p_DetachType        (default value: omit)
   * @param     p_USIM_Rmvd         (default value: false)
   * @status    APPROVED (NBIOT)
   */
  function f_NBIOT_UE_Detach_SwitchOffUe(NBIOT_CellId_Type p_CellId,
                                         IOT_STATE_Type p_IOT_State,
                                         EUTRA_RRC_STATE_Type p_RRCState,
                                         template DetachType p_DetachType := omit,
                                         boolean p_USIM_Rmvd := false)
    runs on NBIOT_PTC
  {

    if (pc_SwitchOnOff or p_USIM_Rmvd and pc_USIM_Removal) {
      f_UT_SwitchOffUE(UT, p_USIM_Rmvd);
      f_NBIOT_UE_DetachMO(p_CellId, p_RRCState, p_DetachType);
      //Now the connection can be released
      f_NBIOT_RRC_ConnectionRelease(p_CellId, p_IOT_State);  /* @sic R5s170250 change 4: p_IOT_State sic@ */
    } else {
      if (p_RRCState == RRC_CONNECTED) { // @sic R5s170545 sic@
        log("vzw: RRC_CONNECTED");
        f_NBIOT_RRC_ConnectionRelease(p_CellId, p_IOT_State);
      } else { // @sic R5s170681 sic@
        //Reset all RBs
        f_NBIOT_SS_SRBs_DRBs_Reset(p_CellId, p_IOT_State);     /* @sic R5s170250 change 4 sic@ */
      }
      f_UT_PowerOffUE(UT); // @sic R5s170681 sic@
    }
  }

  /*
   * @desc      Test procedure to check Idle state, see TS 36.508 clause  8.1.5A.2
   * @param     p_CellId
   * @param     p_PagingRecordList  (default value: omit)
   * @status    APPROVED (NBIOT)
   */
  function f_NBIOT_508Check_CP_ResponseToPagingForMTAccess(NBIOT_CellId_Type p_CellId,
                                                           template (omit) PagingRecordList_NB_r13 p_PagingRecordList := omit) runs on NBIOT_PTC
  {
    // Step 1
    f_NBIOT_UE_Page(p_CellId, p_PagingRecordList);
    f_NBIOT_508Check_CP_ResponseToPagingForMTAccess_Step2_5 (p_CellId);
  }

  /*
   * @desc      Test procedure to check Idle state, see TS 36.508 clause  8.1.5A.2 steps 2 - 5
   * @param     p_CellId
   * @status    APPROVED (NBIOT)
   */
  function f_NBIOT_508Check_CP_ResponseToPagingForMTAccess_Step2_5(NBIOT_CellId_Type p_CellId) runs on NBIOT_PTC
  {
    var ExtdProtocolConfigOptions v_PcoToUE;
    var template (omit) ExtdProtocolConfigOptions v_PcoFromUE := omit;
    var template (omit) HeaderCompressConfig v_HeaderCompressConfigTX := omit;
    var template (omit) NAS_UL_Message_Type v_ReturnedValue;
    var NAS_UL_Message_Type v_PDNConnectivityReq_Rxd;
    var AccessPointName v_APN;
    var integer v_PDNIndex := 0;
    var template (value) PDN_Address v_PDN_Address;
    
    if (pc_HCCPCIoT and pc_IP_PDN){
      v_HeaderCompressConfigTX := crs_HeaderCompressConfigZeros;
    }
    v_ReturnedValue := f_NBIOT_508Check_CP_ResponseToPagingForMTAccess_Step2_4 (p_CellId); // @sic R5-169027 sic@
    if (isvalue (v_ReturnedValue)) { // @sic R5-169027 sic@
      v_PDNConnectivityReq_Rxd := valueof(v_ReturnedValue);
      v_PDNIndex := f_NBIOT_MobileInfo_GetNoOfPDNsConfigured();
      f_NBIOT_MobileInfo_SetAssignedPdnAndPTI (v_PDNIndex,
                                               v_PDNConnectivityReq_Rxd.pDN_CONNECTIVITY_REQUEST.pdnType.typeValue,
                                               v_PDNConnectivityReq_Rxd.pDN_CONNECTIVITY_REQUEST.procedureTransactionIdentifier);
      v_PcoFromUE := v_PDNConnectivityReq_Rxd.pDN_CONNECTIVITY_REQUEST.extdProtocolConfigurationOptions;
      v_PcoToUE := valueof(f_GetDefaultExtdProtocolConfigOptions(v_PcoFromUE));
      f_NBIOT_MobileInfo_SetExtPCO(v_PDNIndex, v_PcoFromUE);

      if (ispresent (v_PDNConnectivityReq_Rxd.pDN_CONNECTIVITY_REQUEST.accessPointName)) {
        v_APN := v_PDNConnectivityReq_Rxd.pDN_CONNECTIVITY_REQUEST.accessPointName;
        v_APN.iei := omit;
      } else {
        v_APN := valueof(cs_AccessPointName(px_AccessPointName));
      }
      f_NBIOT_MobileInfo_SetAPN (v_PDNIndex, v_APN); // NOTE: APN is not omit anymore
      v_PDN_Address := f_CIOT_GetPDNAddress(v_PDNConnectivityReq_Rxd.pDN_CONNECTIVITY_REQUEST.pdnType.typeValue, f_CheckExtdPCOforIPallocationViaNas(v_PcoFromUE)); // @sic R5s170597 sic@

      // Step 4a1b3a3
      SRB.send(cas_NB_SRB_NasPdu_REQ(p_CellId,
                                     tsc_SRB1bis,
                                     cs_TimingInfo_Now,
                                     cs_NAS_Request(tsc_SHT_IntegrityProtected_Ciphered,
                                                    cs_CIOT_ActivateDefEpsBearerContextRequest(tsc_EpsDefaultBearerId,
                                                                                              f_NBIOT_MobileInfo_GetPTI(0),
                                                                                              v_APN,
                                                                                              v_PDN_Address,
                                                                                              cs_ExtdPCO (int2oct(oct2int(v_PcoToUE.iel), 2), v_PcoToUE.pco),
                                                                                              -,
                                                                                              -,
                                                                                              -,
                                                                                              v_HeaderCompressConfigTX,
                                                                                              cs_ControlPlaneInd,
                                                                                              cs_ServingPLMNRateControl(int2oct (4, 2))))));      // Step 4a1b3a4
      SRB.receive(car_NB_SRB_NasPdu_IND(p_CellId,
                                        tsc_SRB1bis,
                                        cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered,
                                                          cdr_CIOT_ActivateDefEpsBearerContextAccept(tsc_EpsDefaultBearerId))));
      
      if (pc_IP_PDN) {
        f_NBIOT_DelayForUserPlaneSignalling_CP(p_CellId);
      }
    }
    
    // Step 5
    SRB.send(cas_NB_SRB_NasPdu_REQ(p_CellId,
                                   tsc_SRB1bis,
                                   cs_TimingInfo_Now,
                                   cs_NAS_Request(tsc_SHT_IntegrityProtected_Ciphered,
                                                  cs_SERVICE_ACCEPT)));
  }

  /*
   * @desc      Test procedure to check Idle state, see TS 36.508 clause  8.1.5A.2 steps 2 - 4
   *            - Without the paging message, up to and including all options for the PDN Connectivity,
   *            but not the Activate Default Bearer Req or Service Accept
   * @param     p_CellId
   * @return    template (omit) NAS_UL_Message_Type - PDNConnectivityReq if requested or omit if not
   * @status    APPROVED (NBIOT)
   */
  function f_NBIOT_508Check_CP_ResponseToPagingForMTAccess_Step2_4(NBIOT_CellId_Type p_CellId) runs on NBIOT_PTC return template (omit) NAS_UL_Message_Type
  {
    var template (present) B3_Type v_PDNType := (f_GetPdnType(), '101'B);
    var template (present) NAS_MSG_Indication_Type v_NasInd_Expected;
    var NAS_MSG_Indication_Type v_NasInd_Rxd;
    var template (present) NAS_UL_Message_Type v_PDNConnectivityReq_Expected;
    var NB_SRB_COMMON_IND v_ReceivedAsp;
    var NAS_UL_Message_Type v_PDNConnectivityReq_Rxd;
    var template HeaderCompressConfig v_HeaderCompressConfigRX := cr_HeaderCompressConfigAny ifpresent;
    var boolean v_ConfigurePDN := false;
    var integer v_SelectedPlmnIndex := f_NBIOT_CellInfo_GetSelectedPlmnIndex(p_CellId);
    var template (omit) RRCConnSetupComplete_AttachWithoutPDN_Type v_AttachWithoutPDN := omit;
    timer t_WaitForPDN := 2.0;
    
    if (pc_HCCPCIoT and pc_IP_PDN){
      v_HeaderCompressConfigRX := cr_HeaderCompressConfigAny;
    }
    v_PDNConnectivityReq_Expected := cr_CIOT_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach,
                                                                      v_PDNType,
                                                                      cr_AccessPointName_Any,
                                                                      v_HeaderCompressConfigRX);
    v_NasInd_Expected := (cr_NAS_IndicationWithPiggybacking (tsc_SHT_IntegrityProtected_PartiallyCiphered, cr_CONTROL_PLANE_SERVICE_REQUEST(?), cr_ESM_DATA_TRANSPORT (?, ?)),  // @sic R5-174456 sic@
                          cr_NAS_Indication (tsc_SHT_IntegrityProtected, cr_CONTROL_PLANE_SERVICE_REQUEST(?)));
    
    // Step 2
    f_NBIOT_RRC_ConnectionRequest_Def(p_CellId, mt_Access);
    f_NBIOT_PreliminaryPass (__FILE__, __LINE__, "508Check CP ResponseToPagingForMTAccess Step2");
    
    // Step 3
    f_NBIOT_RRC_ConnectionSetup_Def();
    
    // Step 4
    if (px_DoAttachWithoutPDN) {
      v_AttachWithoutPDN := true_;
    }
    v_NasInd_Rxd := f_NBIOT_RRCConnectionSetupComplete_Def(p_CellId,
                                                           cr_508_RRCConnectionSetupComplete_NB(tsc_RRC_TI_Def, v_SelectedPlmnIndex, -, -, -, v_AttachWithoutPDN),
                                                           v_NasInd_Expected);
    
    if (ispresent (v_NasInd_Rxd.Pdu.PiggybackedPduList)) { // Step 4a1a1
      if (ischosen (v_NasInd_Rxd.Pdu.PiggybackedPduList[0].Msg.eSM_DATA_TRANSPORT)) { // @sic R5-174456 sic@
        f_NBIOT_PreliminaryPass (__FILE__, __LINE__, "508Check CP ResponseToPagingForMTAccess Step4a1a1");
      } else {
        f_NBIOT_SetVerdictFailOrInconc (__FILE__, __LINE__, "Unexpected Message at Step4a1a1");
      }
    } else { // Step 4a1b1
      f_NBIOT_PreliminaryPass (__FILE__, __LINE__, "508Check CP ResponseToPagingForMTAccess Step4a1b1");
      // Step 4a1b2
      t_WaitForPDN.start;
      alt {
        [] SRB.receive(car_NB_SRB_NasPdu_IND(p_CellId,
                                             tsc_SRB1bis,
                                             cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered,
                                                               v_PDNConnectivityReq_Expected))) -> value v_ReceivedAsp
          {  // Step 4a1b3a1
            v_PDNConnectivityReq_Rxd := v_ReceivedAsp.Signalling.Nas[0].Pdu.Msg;
            v_ConfigurePDN := true;
            // Step 4a1b3a2
            t_WaitForPDN.stop;
          }
        // Step 4a1b3b1
        [] t_WaitForPDN.timeout {}
      }
    }
    if (v_ConfigurePDN) { // @sic R5-169027 sic@
      return v_PDNConnectivityReq_Rxd;
    } else {
      return omit;
    }
  }

  /*
   * @desc      Test procedure to check MO Non-SMS Data Transfer, see TS 36.508 clause  8.1.5A.3
   * @param     p_CellId
   * @param     p_DataExpected
   * @param     p_EstCause          (default value: mo_Data)
   * @status    APPROVED (NBIOT)
   */
  function f_NBIOT_508Check_CP_MONonSMSDataTransfer(NBIOT_CellId_Type p_CellId,
                                                    template (present) UserDataContainer p_DataExpected,
                                                    template (present) EstablishmentCause_NB_r13 p_EstCause := mo_Data) runs on NBIOT_PTC
  {
    var template (present) B3_Type v_PDNType := (f_GetPdnType(), '101'B);
    var template (present) NAS_MSG_Indication_Type v_NasInd_Expected;
    var NAS_MSG_Indication_Type v_NasInd_Rxd;
    var template (present) NAS_UL_Message_Type v_PDNConnectivityReq_Expected;
    var NB_SRB_COMMON_IND v_ReceivedAsp;
    var NAS_UL_Message_Type v_PDNConnectivityReq_Rxd;
    var ExtdProtocolConfigOptions v_PcoToUE;
    var template (omit) ExtdProtocolConfigOptions v_PcoFromUE := omit;
    var AccessPointName v_APN;
    var integer v_PDNIndex := 0;
    var template (value) PDN_Address v_PDN_Address;
    var template HeaderCompressConfig v_HeaderCompressConfigRX := cr_HeaderCompressConfigAny ifpresent;
    var template (omit) HeaderCompressConfig v_HeaderCompressConfigTX := omit;
    var integer v_SelectedPlmnIndex := f_NBIOT_CellInfo_GetSelectedPlmnIndex(p_CellId);
    var template (omit) RRCConnSetupComplete_AttachWithoutPDN_Type v_AttachWithoutPDN := omit;
    
    if (pc_HCCPCIoT and pc_IP_PDN){
      v_HeaderCompressConfigRX := cr_HeaderCompressConfigAny;
      v_HeaderCompressConfigTX := crs_HeaderCompressConfigZeros;
    }
    
    if (px_DoAttachWithoutPDN) {
      v_AttachWithoutPDN := true_;
      v_PDNConnectivityReq_Expected := cr_CIOT_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach,
                                                                        v_PDNType,
                                                                        -,
                                                                        v_HeaderCompressConfigRX);
      v_NasInd_Expected := cr_NAS_Indication (tsc_SHT_IntegrityProtected_PartiallyCiphered, cr_CONTROL_PLANE_SERVICE_REQUEST(?, cr_CPServiceType(-, '000'B))); // @sic R5-174456 sic@
    } else {
      v_NasInd_Expected := cr_NAS_IndicationWithPiggybacking (tsc_SHT_IntegrityProtected_PartiallyCiphered, cr_CONTROL_PLANE_SERVICE_REQUEST(?, cr_CPServiceType(-, '000'B)), cr_ESM_DATA_TRANSPORT (?, p_DataExpected));
    }
    
    // Step 1
    f_NBIOT_RRC_ConnectionRequest_Def(p_CellId, p_EstCause); // @sic R5-171137 sic@
    f_NBIOT_PreliminaryPass (__FILE__, __LINE__, "508Check CP MO NonSMS Data Transfer Step1");
    
    // Step 2
    f_NBIOT_RRC_ConnectionSetup_Def();
    
    // Step 3
    v_NasInd_Rxd := f_NBIOT_RRCConnectionSetupComplete_Def(p_CellId,
                                                           cr_508_RRCConnectionSetupComplete_NB(tsc_RRC_TI_Def, v_SelectedPlmnIndex, -, -, -, v_AttachWithoutPDN),
                                                           v_NasInd_Expected);
    
    if (ispresent (v_NasInd_Rxd.Pdu.PiggybackedPduList)) {
      if (ischosen (v_NasInd_Rxd.Pdu.PiggybackedPduList[0].Msg.eSM_DATA_TRANSPORT)) { // Step 3b1
        f_NBIOT_PreliminaryPass (__FILE__, __LINE__, "508Check CP MO NonSMS Data Transfer Step3b1");
      }
    } else { // Step 3a1b1
      f_NBIOT_PreliminaryPass (__FILE__, __LINE__, "508Check CP MO NonSMS Data Transfer Step3a1b1");
      // Step 3a1b2
      SRB.receive(car_NB_SRB_NasPdu_IND(p_CellId,
                                        tsc_SRB1bis,
                                        cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered,
                                                          v_PDNConnectivityReq_Expected))) -> value v_ReceivedAsp;
      v_PDNConnectivityReq_Rxd := v_ReceivedAsp.Signalling.Nas[0].Pdu.Msg;
      f_NBIOT_PreliminaryPass (__FILE__, __LINE__, "508Check CP MO NonSMS Data Transfer Step3a1b2");

      v_PDNIndex := f_NBIOT_MobileInfo_GetNoOfPDNsConfigured();
      f_NBIOT_MobileInfo_SetAssignedPdnAndPTI (v_PDNIndex,
                                               v_PDNConnectivityReq_Rxd.pDN_CONNECTIVITY_REQUEST.pdnType.typeValue,
                                               v_PDNConnectivityReq_Rxd.pDN_CONNECTIVITY_REQUEST.procedureTransactionIdentifier);
      v_PcoFromUE := v_PDNConnectivityReq_Rxd.pDN_CONNECTIVITY_REQUEST.extdProtocolConfigurationOptions;
      v_PcoToUE := valueof(f_GetDefaultExtdProtocolConfigOptions(v_PcoFromUE));
      f_NBIOT_MobileInfo_SetExtPCO(v_PDNIndex, v_PcoFromUE);

      if (ispresent(v_PDNConnectivityReq_Rxd.pDN_CONNECTIVITY_REQUEST.accessPointName)) {
        v_APN := v_PDNConnectivityReq_Rxd.pDN_CONNECTIVITY_REQUEST.accessPointName;
        v_APN.iei := omit;
      } else {
        v_APN := valueof(cs_AccessPointName(px_AccessPointName));
      }
      f_NBIOT_MobileInfo_SetAPN (v_PDNIndex, v_APN); // NOTE: APN is not omit anymore
      v_PDN_Address := f_CIOT_GetPDNAddress(v_PDNConnectivityReq_Rxd.pDN_CONNECTIVITY_REQUEST.pdnType.typeValue, f_CheckExtdPCOforIPallocationViaNas(v_PcoFromUE)); // @sic R5s170597 sic@
      // Step 3a2
      SRB.send(cas_NB_SRB_NasPdu_REQ(p_CellId,
                                     tsc_SRB1bis,
                                     cs_TimingInfo_Now,
                                     cs_NAS_Request(tsc_SHT_IntegrityProtected_Ciphered,
                                                    cs_CIOT_ActivateDefEpsBearerContextRequest(tsc_EpsDefaultBearerId,
                                                                                               f_NBIOT_MobileInfo_GetPTI(v_PDNIndex),
                                                                                               v_APN,
                                                                                               v_PDN_Address,
                                                                                               cs_ExtdPCO (int2oct(oct2int(v_PcoToUE.iel), 2), v_PcoToUE.pco),
                                                                                               -,
                                                                                               -,
                                                                                               -,
                                                                                               v_HeaderCompressConfigTX,
                                                                                               cs_ControlPlaneInd,
                                                                                               cs_ServingPLMNRateControl(int2oct (4, 2))))));      // Step 4a1b3a4
      // Step 3a3
      SRB.receive(car_NB_SRB_NasPdu_IND(p_CellId,
                                        tsc_SRB1bis,
                                        cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered,
                                                          cdr_CIOT_ActivateDefEpsBearerContextAccept(tsc_EpsDefaultBearerId))));
      
      f_NBIOT_PreliminaryPass (__FILE__, __LINE__, "508Check CP MO NonSMS Data Transfer Step3a3");
      
      if (pc_IP_PDN) {
        f_NBIOT_DelayForUserPlaneSignalling_CP(p_CellId);
      }
      
      // Step 3a4
      SRB.receive(car_NB_SRB_NasPdu_IND(p_CellId,
                                        tsc_SRB1bis,
                                        cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered,
                                                          cr_ESM_DATA_TRANSPORT (?, p_DataExpected))));
    }
    // Step 4
    SRB.send(cas_NB_SRB_NasPdu_REQ(p_CellId,
                                   tsc_SRB1bis,
                                   cs_TimingInfo_Now,
                                   cs_NAS_Request(tsc_SHT_IntegrityProtected_Ciphered,
                                                  cs_SERVICE_ACCEPT)));
  }

  /*
   * @desc      Test procedure to check MO SMS Data Transfer, see TS 36.508 clause  8.1.5A.3A
   * @param     p_CellId
   * @param     p_DataExpected      (default value: ?)
   * @return    octetstring
   * @status    APPROVED (NBIOT)
   */
  function f_NBIOT_508Check_CP_MOSMSDataTransfer(NBIOT_CellId_Type p_CellId,
                                                 template (present) octetstring p_DataExpected := ?) runs on NBIOT_PTC return octetstring // @sic R5-185125 sic@
  {
    var template (present) B3_Type v_PDNType := (f_GetPdnType(), '101'B);
    var template (present) NAS_MSG_Indication_Type v_NasInd_Expected;
    var NAS_MSG_Indication_Type v_NasInd_Rxd;
    var template (present) NAS_UL_Message_Type v_PDNConnectivityReq_Expected;
    var NB_SRB_COMMON_IND v_ReceivedAsp;
    var NAS_UL_Message_Type v_PDNConnectivityReq_Rxd;
    var ExtdProtocolConfigOptions v_PcoToUE;
    var template (omit) ExtdProtocolConfigOptions v_PcoFromUE := omit;
    var AccessPointName v_APN;
    var template (value) PDN_Address v_PDN_Address;
    var integer v_PDNIndex := 0;
    var boolean v_ConfigurePDN := false;
    var integer v_SelectedPlmnIndex := f_NBIOT_CellInfo_GetSelectedPlmnIndex(p_CellId);
    var template HeaderCompressConfig v_HeaderCompressConfigRX := cr_HeaderCompressConfigAny ifpresent;
    var template (omit) HeaderCompressConfig v_HeaderCompressConfigTX := omit;
    var template (omit) RRCConnSetupComplete_AttachWithoutPDN_Type v_AttachWithoutPDN := omit;
    timer t_WaitForPDN := 2.0;
    
    if (pc_HCCPCIoT and pc_IP_PDN){
      v_HeaderCompressConfigRX := cr_HeaderCompressConfigAny;
      v_HeaderCompressConfigTX := crs_HeaderCompressConfigZeros;
    }
    
    if (px_DoAttachWithoutPDN) {
      v_AttachWithoutPDN := true_;
    }
    
    v_PDNConnectivityReq_Expected := cr_CIOT_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach,
                                                                      v_PDNType,
                                                                      -,
                                                                      v_HeaderCompressConfigRX);
    v_NasInd_Expected := cr_NAS_Indication(tsc_SHT_IntegrityProtected_PartiallyCiphered, cr_CONTROL_PLANE_SERVICE_REQUEST(?, cr_CPServiceType(-, '000'B), cr_NAS_MsgContainer_SMS(p_DataExpected, '67'O))); // @sic R5-174456, R5s180584 sic@

    // Step 1
    f_NBIOT_RRC_ConnectionRequest_Def(p_CellId, mo_Data);
    f_NBIOT_PreliminaryPass (__FILE__, __LINE__, "508Check CP MO SMS Data Transfer Step1");
    
    // Step 2
    f_NBIOT_RRC_ConnectionSetup_Def();

    // Step 3
    v_NasInd_Rxd := f_NBIOT_RRCConnectionSetupComplete_Def(p_CellId,
                                                           cr_508_RRCConnectionSetupComplete_NB(tsc_RRC_TI_Def, v_SelectedPlmnIndex, -, -, -, v_AttachWithoutPDN),
                                                           v_NasInd_Expected);
    
    f_NBIOT_PreliminaryPass (__FILE__, __LINE__, "508Check CP MO SMS Data Transfer Step3b1");
    
    // Step 3b2
    t_WaitForPDN.start;
    alt {
      [px_nonSMSTransport_CP_CIoT and px_DoAttachWithoutPDN] SRB.receive(car_NB_SRB_NasPdu_IND(p_CellId,
                                                                                                 tsc_SRB1bis,
                                                                                                 cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered,
                                                                                                                   v_PDNConnectivityReq_Expected))) -> value v_ReceivedAsp
        {  // Step 3b3a1
          v_PDNConnectivityReq_Rxd := v_ReceivedAsp.Signalling.Nas[0].Pdu.Msg;
          v_ConfigurePDN := true;
          // Step 3b3a2
          t_WaitForPDN.stop;
        }
      // Step 3b3b1
      [] t_WaitForPDN.timeout {}
    }
    
    if (v_ConfigurePDN) {
      v_PDNIndex := f_NBIOT_MobileInfo_GetNoOfPDNsConfigured();
      f_NBIOT_MobileInfo_SetAssignedPdnAndPTI (v_PDNIndex,
                                               v_PDNConnectivityReq_Rxd.pDN_CONNECTIVITY_REQUEST.pdnType.typeValue,
                                               v_PDNConnectivityReq_Rxd.pDN_CONNECTIVITY_REQUEST.procedureTransactionIdentifier);
      v_PcoFromUE := v_PDNConnectivityReq_Rxd.pDN_CONNECTIVITY_REQUEST.extdProtocolConfigurationOptions;
      v_PcoToUE := valueof(f_GetDefaultExtdProtocolConfigOptions(v_PcoFromUE));
      f_NBIOT_MobileInfo_SetExtPCO (v_PDNIndex, v_PcoFromUE);
      
      if (ispresent (v_PDNConnectivityReq_Rxd.pDN_CONNECTIVITY_REQUEST.accessPointName)) {
        v_APN := v_PDNConnectivityReq_Rxd.pDN_CONNECTIVITY_REQUEST.accessPointName;
        v_APN.iei := omit;
      } else {
        v_APN := valueof(cs_AccessPointName(px_AccessPointName));
      }
      f_NBIOT_MobileInfo_SetAPN (v_PDNIndex, v_APN); // NOTE: APN is not omit anymore
      v_PDN_Address := f_CIOT_GetPDNAddress(v_PDNConnectivityReq_Rxd.pDN_CONNECTIVITY_REQUEST.pdnType.typeValue, f_CheckExtdPCOforIPallocationViaNas(v_PcoFromUE)); // @sic R5s170597 sic@

      // Step 3b3a3
      SRB.send(cas_NB_SRB_NasPdu_REQ(p_CellId,
                                     tsc_SRB1bis,
                                     cs_TimingInfo_Now,
                                     cs_NAS_Request(tsc_SHT_IntegrityProtected_Ciphered,
                                                    cs_CIOT_ActivateDefEpsBearerContextRequest(tsc_EpsDefaultBearerId,
                                                                                              f_NBIOT_MobileInfo_GetPTI(v_PDNIndex),
                                                                                              v_APN,
                                                                                              v_PDN_Address,
                                                                                              cs_ExtdPCO (int2oct(oct2int(v_PcoToUE.iel), 2), v_PcoToUE.pco),
                                                                                              -,
                                                                                              -,
                                                                                              -,
                                                                                              v_HeaderCompressConfigTX,
                                                                                              cs_ControlPlaneInd,
                                                                                              cs_ServingPLMNRateControl(int2oct (4, 2))))));      // Step 4a1b3a4
      // Step 3b3a4
      SRB.receive(car_NB_SRB_NasPdu_IND(p_CellId,
                                        tsc_SRB1bis,
                                        cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered,
                                                          cdr_CIOT_ActivateDefEpsBearerContextAccept(tsc_EpsDefaultBearerId))));
      if (pc_IP_PDN) {
        f_NBIOT_DelayForUserPlaneSignalling_CP(p_CellId);
      }
    }
    
    // Step 4
    SRB.send(cas_NB_SRB_NasPdu_REQ(p_CellId,
                                   tsc_SRB1bis,
                                   cs_TimingInfo_Now,
                                   cs_NAS_Request(tsc_SHT_IntegrityProtected_Ciphered,
                                                  cs_SERVICE_ACCEPT)));
    return v_NasInd_Rxd.Pdu.Msg.cONTROL_PLANE_SERVICE_REQUEST.nasMessage.smsmessage;
    }

  /*
   * @desc      Test procedure to check release of PDN, see TS 36.508 clause  8.1.5A.4
   * @param     p_CellId
   * @status    APPROVED (NBIOT)
   */
  function f_NBIOT_508Check_ReleasePDN_RRCConnected(NBIOT_CellId_Type p_CellId) runs on NBIOT_PTC
  {
    var NB_SRB_COMMON_IND v_ReceivedAsp;
    timer t_WaitForDisconnect := 60.0;

    // Step 1
    t_WaitForDisconnect.start;
    
      // Step 2a1
    alt {
      [] SRB.receive(car_NB_SRB_NasPdu_IND(p_CellId,
                                          tsc_SRB1bis,
                                          cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered,
                                                            cr_PDNDisconnectReq (?)))) -> value v_ReceivedAsp
        {
          f_NBIOT_PreliminaryPass (__FILE__, __LINE__, "508Check CP ReleasePDN_RRCConnected Step2a1");
          f_NBIOT_DeactivateEPS_BearerContext_CP (p_CellId);
          f_NBIOT_PreliminaryPass (__FILE__, __LINE__, "508Check CP ReleasePDN_RRCConnected Step2a3");
          t_WaitForDisconnect.stop;
        }
      [] t_WaitForDisconnect.timeout
        {
          f_NBIOT_DeactivateEPS_BearerContext_CP (p_CellId);
          f_NBIOT_PreliminaryPass (__FILE__, __LINE__, "508Check CP ReleasePDN_RRCConnected Step2b3");
        }
    }
  }

  /*
   * @desc      Test procedure to check Connected state, see TS 36.508 clause 8.1.5A.8
   * @param     p_CellId
   * @param     p_IOT_State
   * @status    APPROVED (NBIOT)
   */
  function f_NBIOT_508Check_ConnectedState(NBIOT_CellId_Type  p_CellId,
                                           IOT_STATE_Type p_IOT_State) runs on NBIOT_PTC
  {

    f_NBIOT_Capability(p_CellId, p_IOT_State); // This enquires for the eutra capability but does not check the contents of the message received

    f_NBIOT_PreliminaryPass (__FILE__, __LINE__, "508Check ConnectedState");
  }

  /*
   * @desc      Check whether the UE comes up with unexpected RRCConnectionRequest within the given time
   * @param     p_CellId
   * @param     p_TimerValue
   * @param     p_FailMsg
   * @status    APPROVED (NBIOT)
   */
  function fl_NBIOT_CheckNoAttach_Common(template (present) NBIOT_CellId_Type p_CellId,
                                         float p_TimerValue,
                                         charstring p_FailMsg) runs on NBIOT_PTC
  {
    if (f_NBIOT_RRC_RRCConnectionRequest_Check(p_CellId, p_TimerValue)) {
      if (p_FailMsg == "") {
        p_FailMsg := "Unexpected RRCConnectionRequest before timer expiry";
      }
      f_NBIOT_SetVerdictFailOrInconc(__FILE__, __LINE__, p_FailMsg);
    }
  }

  /*
   * @desc      Check whether the UE comes up with unexpected RRCConnectionRequest within the given time
   * @param     p_CellId
   * @param     p_Wait
   * @param     p_StepNo            (default value: "")
   * @status    APPROVED (NBIOT)
   */
  function f_NBIOT_CheckNoAttachOn1Cell(NBIOT_CellId_Type p_CellId,
                                        float p_Wait,
                                        charstring p_StepNo := "") runs on NBIOT_PTC
  {
    var float v_TimerValue := f_NBIOT_SetTimerToleranceMin(nonProtocolTimer, p_Wait);
    fl_NBIOT_CheckNoAttach_Common(p_CellId, v_TimerValue, p_StepNo);
  }

  /*
   * @desc      Check whether the UE comes up with unexpected RRCConnectionRequest within the given time
   * @param     p_CellId1
   * @param     p_CellId2
   * @param     p_Wait
   * @param     p_StepNo            (default value: "")
   * @status    APPROVED (NBIOT)
   */
  function f_NBIOT_CheckNoAttachOn2Cells(NBIOT_CellId_Type p_CellId1,
                                         NBIOT_CellId_Type p_CellId2,
                                         float p_Wait,
                                         charstring p_StepNo := "") runs on NBIOT_PTC
  {
    var float v_TimerValue := f_NBIOT_SetTimerToleranceMin(nonProtocolTimer, p_Wait);
    fl_NBIOT_CheckNoAttach_Common((p_CellId1, p_CellId2), v_TimerValue, p_StepNo);
  }

  /*
   * @desc      Generic test step to reject a registration attempt by the UE.
   *            This is based on the Preamble function and should be run as an alternative.
   *            This results in the UE being switched off, and  with no valid GUTI
   * @param     p_CellId
   * @param     p_RejectCause
   * @status    APPROVED (NBIOT)
   */
  function f_NBIOT_Preamble_Reject(NBIOT_CellId_Type p_CellId,
                                   NAS_CauseValue_Type p_RejectCause) runs on NBIOT_PTC
  {
    // First switch cell on
    f_NBIOT_SetCellPower(p_CellId, tsc_ServingCellRS_EPRE);
    f_NBIOT_AttachReject(p_CellId, p_RejectCause);
    
    // And then just need to switch UE off
    f_UT_SwitchOffUE(UT, false, CNF_REQUIRED);
  }

  /*
   * @desc      Generic test step to reject a registration attempt by the UE.
   *            This expects the UE to be switched off before calling this function, and leaves the UE switched on at the end
   * @param     p_CellId
   * @param     p_RejectCause
   * @status    APPROVED (NBIOT)
   */
  function f_NBIOT_AttachReject(NBIOT_CellId_Type p_CellId,
                                NAS_CauseValue_Type p_RejectCause) runs on NBIOT_PTC
  {
    var NAS_MSG_Indication_Type v_NAS_Ind;
    var template (present) B3_Type v_PDNType := (f_GetPdnType(), '101'B);
    var template (present) NAS_UL_Message_Type v_AttachReq;
    var template (present) NAS_UL_Message_Type v_ESMMessage;
    var NasCount_Type v_NasCountUL;

    //The UE is switched on.
    f_UT_SwitchOnUE(UT, true);

    //The UE transmits an ATTACH REQUEST message.
    if (px_DoAttachWithoutPDN) {
      v_ESMMessage := cr_ESM_DUMMY_MESSAGE;
    } else {
      v_ESMMessage := cr_CIOT_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach, v_PDNType);
    }
    
    v_AttachReq := cr_CIOT_ATTACH_REQUEST(cr_AdditionalUpdateType_CIOT);
    v_NAS_Ind := f_NBIOT_RRC_ConnEst_DefWithNas(p_CellId,
                                                cr_EstablishmentCause_NB_Any,
                                                cr_NAS_IndicationWithPiggybacking((tsc_SHT_IntegrityProtected, tsc_SHT_NoSecurityProtection), // @sic R5s170777 sic@
                                                                                  v_AttachReq,
                                                                                  v_ESMMessage));

    v_NasCountUL := f_NBIOT_InitialRegistration_Step5_8 (p_CellId, v_NAS_Ind); // @sic R5-175224 sic@
    //The SS transmits an ATTACH REJECT message
    SRB.send(cas_NB_SRB1bis_NasPdu_REQ(p_CellId,
                                       cs_TimingInfo_Now,
                                       cs_NAS_Request(tsc_SHT_IntegrityProtected_Ciphered,
                                                      cs_508_AttachReject(cs_EMM_Cause_v(p_RejectCause)))));

    //The SS releases the RRC connection.
    f_NBIOT_RRC_ConnectionRelease(p_CellId);
  }

}
