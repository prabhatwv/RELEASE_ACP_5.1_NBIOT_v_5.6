/******************************************************************************/
// @copyright   Copyright Notification
//   No part may be reproduced except as authorized by written permission.
//   The copyright and the foregoing restriction extend to reproduction in all media.
//   Trademark 2019, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).
//   All rights reserved.
// @version: 36.523-3 v15.3.0
// $Date: 2018-10-28 02:08:53 +0200 (Sun, 28 Oct 2018) $
// $Rev: 22830 $
/******************************************************************************/

module NBIOT_NAS_ServiceReq {

  import from NBIOT_RRC_ASN1_Definitions language "ASN.1:2002" all with {encode "UNALIGNED_PER_OctetAligned"};
  import from CIOT_NASTemplates all;
  import from Common4G5G_Templates all;
  import from CommonDefs all;
  import from EPS_NAS_Constants all;
  import from EPS_NAS_MsgContainers all;
  import from EPS_NAS_Templates all;
  import from EUTRA_NB_AuxiliaryFunctions all;
  import from EUTRA_NB_CommonDefs all;
  import from EUTRA_NB_NASSteps all;
  import from EUTRA_NB_RRC_Templates all;
  import from NAS_CommonTemplates all;
  import from NAS_CommonTypeDefs all;
  import from NBIOT_ASP_SrbDefs all;
  import from NBIOT_CellInfo all;
  import from NBIOT_CommonDefs all;
  import from NBIOT_CommonProcedures all;
  import from NBIOT_Component all;
  import from NBIOT_ConfigurationSteps all;
  import from NBIOT_Imported_EUTRA_ASN1_Types all;
  import from NBIOT_NASSteps all;
  import from NBIOT_Paging all;
  import from NBIOT_Parameters all;
  import from NBIOT_RRCSteps all;
  import from NBIOT_RRC_Templates all;
  import from NBIOT_SRB_DRB_Templates all;
  import from NBIOT_Timing all;
  import from Parameters all;
  import from UpperTesterFunctions all;

  /*
   * @desc      local, repeated, attach procedure used in 22.5.9
   * @param     p_CellId
   * @param     p_StepNo            (default value: "")
   * @param     p_NAS_CauseValue    (default value: tsc_EmmCause_IllegalUe)
   * @status    APPROVED (NBIOT)
   */
  function fl_TC_22_5_9_AttachProcedure(NBIOT_CellId_Type p_CellId,
                                        charstring p_StepNo := "",
                                        NAS_CauseValue_Type p_NAS_CauseValue := tsc_EmmCause_IllegalUe) runs on NBIOT_PTC
  {
    var NAS_MSG_Indication_Type v_NasInd;
    var NB_SRB_COMMON_IND v_ReceivedAsp;
    var template (present) NAS_UL_Message_Type v_AttachReq;
    var template (present) NAS_UL_Message_Type v_ESMMessage;
    var template (present) SecurityHeaderType v_AttReqSecurityHeader;
    var template (present) B3_Type v_PDNType := (f_GetPdnType(), '101'B);
    timer t_WaitforAttach := f_NBIOT_SetTimerToleranceMax( nonProtocolTimer, tsc_WaitforAttach);
    
    v_AttReqSecurityHeader := tsc_SHT_NoSecurityProtection;
    
    if (px_DoAttachWithoutPDN) {
      v_ESMMessage := cr_ESM_DUMMY_MESSAGE;
    } else {
      v_ESMMessage := cr_CIOT_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach, v_PDNType);
    }
    
    if (p_NAS_CauseValue == tsc_EmmCause_ImplicitlyDetached){
      v_AttachReq := cr_CIOT_ATTACH_REQUEST(cr_AdditionalUpdateType_CIOT);
      v_AttReqSecurityHeader := tsc_SHT_IntegrityProtected;
    }
    else {
      v_AttachReq := cdr_CIOT_ATTACH_REQUEST_WithIMSINoTai(cr_AdditionalUpdateType_CIOT);
    }

    select (p_NAS_CauseValue) {
      case (tsc_EmmCause_ImplicitlyDetached,
            tsc_EmmCause_UEIdentityNotDerived) {
        t_WaitforAttach.start;
        alt {
          []  SRB.receive(car_NB_SRB1bis_NasPdu_IND(p_CellId,
                                                    cr_NAS_IndicationWithPiggybacking(v_AttReqSecurityHeader,
                                                                                      v_AttachReq,
                                                                                      v_ESMMessage))) -> value v_ReceivedAsp
            {
              v_NasInd := v_ReceivedAsp.Signalling.Nas[0];
              t_WaitforAttach.stop;
            }
          [] t_WaitforAttach.timeout
            {
              //The SS releases the RRC connection.
              f_NBIOT_RRC_ConnectionRelease(p_CellId);
              
              //IF not pc_Automatic_EPS_Re_Attach, Attach is triggered by AT command.
              if (not pc_Automatic_EPS_Re_Attach) {
                f_UT_TriggerAttach(UT);
              }
              v_NasInd := f_NBIOT_RRC_ConnEst_DefWithNas(p_CellId,
                                                         cr_EstablishmentCause_NB_Any,
                                                         cr_NAS_IndicationWithPiggybacking(v_AttReqSecurityHeader,
                                                                                           v_AttachReq,
                                                                                           v_ESMMessage));
              f_NBIOT_PreliminaryPass (__FILE__, __LINE__, p_StepNo);
            }
        }
      }
      case else {
        //Check: RRC Connection setup is done.
        //Check: Does the UE transmit an RRCConnectionSetupComplete-NB message containing an ATTACH REQUEST message (not including any GUTI, last visited registered TAI nor KSI), and an ESM DUMMY MESSAGE?
        v_NasInd := f_NBIOT_RRC_ConnEst_DefWithNas(p_CellId,
                                                   cr_EstablishmentCause_NB_Any,
                                                   cr_NAS_IndicationWithPiggybacking(v_AttReqSecurityHeader,
                                                                                     v_AttachReq,
                                                                                     v_ESMMessage));
        f_NBIOT_PreliminaryPass (__FILE__, __LINE__, p_StepNo);
      }
    }

    //Steps 5-14b1 from the Generic procedure 'NB-IoT UE Attach, Connected mode (State 2-NB)' as described in TS 36.508 [18], clause 8.1.5.2 take place.
    f_NBIOT_InitialRegistration_Step5_14(p_CellId, CONTROL_PLANE, STATE2_NB_CONNECTED_UPDATED, v_NasInd);
  }

  /*
   * @desc      local, repeated procedure to receive then reject Service Req used in 22.5.9
   * @param     p_CellId
   * @param     p_CauseValue
   * @status    APPROVED (NBIOT)
   */
  function fl_TC_22_5_9_ServiceReject(NBIOT_CellId_Type p_CellId,
                                      NAS_CauseValue_Type p_CauseValue) runs on NBIOT_PTC
  {
    var template (omit) NAS_UL_Message_Type v_ReturnedValue;
    
    f_NBIOT_UE_Page(p_CellId);

    v_ReturnedValue := f_NBIOT_508Check_CP_ResponseToPagingForMTAccess_Step2_4(p_CellId);
    
    if (p_CauseValue == tsc_EmmCause_IllegalUe){
      f_NBIOT_PreliminaryPass (__FILE__, __LINE__, "Step 6b");
    }

    SRB.send(cas_NB_SRB_NasPdu_REQ(p_CellId,
                                 tsc_SRB1bis,
                                 cs_TimingInfo_Now,
                                 cs_NAS_Request(tsc_SHT_IntegrityProtected_Ciphered,
                                                cs_508_SERVICE_REJECT(p_CauseValue))));
    
    /* In order to handle the behaviour specified in Note 1 of expected test sequence,
       Do not release the RRC connection in case of service reject causes tsc_EmmCause_UEIdentityNotDerived and tsc_EmmCause_ImplicitlyDetached */
    
    select (p_CauseValue) {
      case (tsc_EmmCause_IllegalUe,
            tsc_EmmCause_IllegalMe,
            tsc_Cause_EPSServNotAllowed) {
        f_NBIOT_RRC_ConnectionRelease(p_CellId);
      }
    }
  }

  /*
   * @desc      REFERENCE TS 36.523-1 clause 22.5.9
   * @status    APPROVED (NBIOT)
   */
  function f_TC_22_5_9_NBIOT() runs on NBIOT_PTC
  { /* UE in NB-S1 mode supporting CIoT Optimizations / Paging with not matching identity /
       Control Plane Service request Rejected (IMSI invalid / Illegal ME / EPS services not allowed /
       UE identity cannot be derived by the network / UE implicitly detached) */
    f_NBIOT_Init(c1);
    
    // create cell and send out system information
    f_NBIOT_CellConfig_Def(nbiot_Cell1, CONTROL_PLANE);
    f_NBIOT_CellConfig_Def(nbiot_Cell2, CONTROL_PLANE);
    
    f_NBIOT_SetCellPower(nbiot_Cell2, tsc_NonSuitableNBIOTCellRS_EPRE);
    
    // Preamble: The UE is in state Registered, Idle mode (State 3-NB) on Ncell 1, according to TS 36.508 [18] Table 8.1.5.1-1.
    f_NBIOT_Preamble(nbiot_Cell1, CONTROL_PLANE, STATE3_NB_IDLEUPDATED);
    
    f_NBIOT_TestBody_Set(true);
    
    // Now continue with the procedure
    fl_TC_22_5_9_Body();
    
    // Postamble
    f_NBIOT_TestBody_Set(false);
    f_NBIOT_Postamble(nbiot_Cell1, CONTROL_PLANE, N1_IDLE);
  }

  /*
   * @desc      test body of TC_22_5_9
   * @status    APPROVED (NBIOT)
   */
  function fl_TC_22_5_9_Body() runs on NBIOT_PTC
  {
    var GutiParameters_Type v_GutiParameters;
    var EUTRA_ASN1_S_TMSI_Type v_S_TmsiDiff;
    var template (value) NB_CellPowerList_Type v_CellPowerList;
    var float v_NoReactionTime := 5.0;
    
    v_GutiParameters := f_NBIOT_CellInfo_GetGuti(nbiot_Cell1);
    v_S_TmsiDiff := f_CreateNewS_Tmsi({v_GutiParameters.MME_Code, v_GutiParameters.M_TMSI});
    
    //@siclog "Steps 1 - 2" siclog@
    //The UE does not respond to paging
    f_NBIOT_UE_Page_NoReaction(nbiot_Cell1,
                               cs_NB_Paging_OneRecord(cs_PagingUE_Identity_S_TMSI(v_S_TmsiDiff.mmec, v_S_TmsiDiff.m_TMSI)),
                               v_NoReactionTime);
    
    //@siclog "Step 3 - 8" siclog@
    fl_TC_22_5_9_ServiceReject(nbiot_Cell1, tsc_EmmCause_IllegalUe);
    
    //@siclog "Step 9" siclog@
    v_CellPowerList := {
      cs_NB_CellPower(nbiot_Cell1, tsc_NonSuitableNBIOTCellRS_EPRE),
      cs_NB_CellPower(nbiot_Cell2, tsc_ServingCellRS_EPRE)
    };
    f_NBIOT_SetCellPowerList(v_CellPowerList);
    
    //@siclog "Step 10" siclog@
    //The UE should not perform an ATTACH for 30 s
    f_NBIOT_CheckNoAttachOn1Cell(nbiot_Cell2, 30.0, "Step 10");
    
    //If possible (see ICS) switch off is performed or the USIM is removed.
    //Otherwise the power is removed.
    f_UT_SwitchOffUE(UT, true);
    
    //@siclog "Step 11" siclog@
    v_CellPowerList := {
      cs_NB_CellPower(nbiot_Cell1, tsc_ServingCellRS_EPRE),
      cs_NB_CellPower(nbiot_Cell2, tsc_NonSuitableNBIOTCellRS_EPRE)
    };
    f_NBIOT_SetCellPowerList(v_CellPowerList);
    
    //@siclog "Step 12" siclog@
    // Switch on UE
    f_UT_SwitchOnUE(UT, true);
    
    //@siclog "Step 13 - 25b1" siclog@
    // The UE is powered ON, and performs a successful ATTACH
    fl_TC_22_5_9_AttachProcedure(nbiot_Cell1,"Steps 13 - 25b1");
    
    //@siclog "Step 26" siclog@
    f_NBIOT_RRC_ConnectionRelease(nbiot_Cell1); // SS releases the RRC Connection
    
    //@siclog "Step 27 - 32" siclog@
    fl_TC_22_5_9_ServiceReject(nbiot_Cell1, tsc_EmmCause_IllegalMe);
    
    //@siclog "Step 33" siclog@
    v_CellPowerList := {
      cs_NB_CellPower(nbiot_Cell1, tsc_NonSuitableNBIOTCellRS_EPRE),
      cs_NB_CellPower(nbiot_Cell2, tsc_ServingCellRS_EPRE)
    };
    f_NBIOT_SetCellPowerList(v_CellPowerList);
    
    //@siclog "Step 34" siclog@
    //The UE should not perform an ATTACH for 30 s
    f_NBIOT_CheckNoAttachOn1Cell(nbiot_Cell12, 30.0, "Step 34");
    
    //If possible (see ICS) switch off is performed or the USIM is removed.
    //Otherwise the power is removed.
    f_UT_SwitchOffUE(UT, true);
    
    //@siclog "Step 35" siclog@
    v_CellPowerList := {
      cs_NB_CellPower(nbiot_Cell1, tsc_ServingCellRS_EPRE),
      cs_NB_CellPower(nbiot_Cell2, tsc_NonSuitableNBIOTCellRS_EPRE)
    };
    f_NBIOT_SetCellPowerList(v_CellPowerList);
    
    //@siclog "Step 36" siclog@
    // Switch on UE
    f_UT_SwitchOnUE(UT, true);
    
    //@siclog "Step 37 - 49b1" siclog@
    // The UE is powered ON, and performs a successful ATTACH
    fl_TC_22_5_9_AttachProcedure(nbiot_Cell1, "Steps 37 - 49b1");
    
    //@siclog "Step 50" siclog@
    f_NBIOT_RRC_ConnectionRelease(nbiot_Cell1); // SS releases the RRC Connection
    
    //@siclog "Step 51 - 56" siclog@
    fl_TC_22_5_9_ServiceReject(nbiot_Cell1, tsc_Cause_EPSServNotAllowed);
    
    //@siclog "Step 57" siclog@
    v_CellPowerList := {
      cs_NB_CellPower(nbiot_Cell1, tsc_NonSuitableNBIOTCellRS_EPRE),
      cs_NB_CellPower(nbiot_Cell2, tsc_ServingCellRS_EPRE)
    };
    f_NBIOT_SetCellPowerList(v_CellPowerList);
    
    //@siclog "Step 58" siclog@
    //The UE should not perform an ATTACH for 30 s
    f_NBIOT_CheckNoAttachOn1Cell(nbiot_Cell12, 30.0, "Step 58");
    
    //If possible (see ICS) switch off is performed or the USIM is removed.
    //Otherwise the power is removed.
    f_UT_SwitchOffUE(UT, true);
    
    //@siclog "Step 59" siclog@
    v_CellPowerList := {
      cs_NB_CellPower(nbiot_Cell1, tsc_ServingCellRS_EPRE),
      cs_NB_CellPower(nbiot_Cell2, tsc_NonSuitableNBIOTCellRS_EPRE)
    };
    f_NBIOT_SetCellPowerList(v_CellPowerList);
    
    //@siclog "Step 60" siclog@
    // Switch on UE
    f_UT_SwitchOnUE(UT, true);
    
    //@siclog "Step 61 - 73b1" siclog@
    // The UE is powered ON, and performs a successful ATTACH
    fl_TC_22_5_9_AttachProcedure(nbiot_Cell1, "Steps 61 - 73b1");

    //@siclog "Step 74" siclog@
    f_NBIOT_RRC_ConnectionRelease(nbiot_Cell1); // SS releases the RRC Connection
    
    //@siclog "Step 75 - 79" siclog@
    fl_TC_22_5_9_ServiceReject(nbiot_Cell1, tsc_EmmCause_UEIdentityNotDerived);
    
    //@siclog "Step 79a1 - 92b1" siclog@
    fl_TC_22_5_9_AttachProcedure(nbiot_Cell1, "Steps 79a1 - 92b1", tsc_EmmCause_UEIdentityNotDerived);
    
    //@siclog "Step 93" siclog@
    f_NBIOT_RRC_ConnectionRelease(nbiot_Cell1); // SS releases the RRC Connection
    
    //@siclog "Step 94 - 98" siclog@
    fl_TC_22_5_9_ServiceReject(nbiot_Cell1, tsc_EmmCause_ImplicitlyDetached);
    
    //@siclog "Step 99a1 - 112b1" siclog@
    fl_TC_22_5_9_AttachProcedure(nbiot_Cell1, "Steps 79a1 - 92b1", tsc_EmmCause_ImplicitlyDetached);
    
    //@siclog "Step 113" siclog@
    f_NBIOT_RRC_ConnectionRelease(nbiot_Cell1); // SS releases the RRC Connection
  }

}
