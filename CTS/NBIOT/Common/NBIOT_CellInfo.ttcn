/******************************************************************************/
// @copyright   Copyright Notification
//   No part may be reproduced except as authorized by written permission.
//   The copyright and the foregoing restriction extend to reproduction in all media.
//   Trademark 2019, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).
//   All rights reserved.
// @version: 36.523-3 v15.3.0
// $Date: 2019-01-24 22:05:23 +0100 (Thu, 24 Jan 2019) $
// $Rev: 23585 $
/******************************************************************************/
module NBIOT_CellInfo {

  import from NBIOT_RRC_ASN1_Definitions language "ASN.1:2002" all with {encode "UNALIGNED_PER_OctetAligned"};
  import from CommonAspDefs all;
  import from CommonDefs all;
  import from EUTRA_CellInfoFrequencyRF all;
  import from EUTRA_NB_ASP_TypeDefs all;
  import from EUTRA_NB_AuxiliaryFunctions all;
  import from EUTRA_NB_CommonDefs all;
  import from EUTRA_NB_Parameters all;
  import from EUTRA_Parameters all;
  import from NAS_CommonTypeDefs all;
  import from NBIOT_ASP_TypeDefs all;
  import from NBIOT_CellInfoFrequency all;
  import from NBIOT_CommonDefs all;
  import from NBIOT_Component all;
  import from NBIOT_Imported_EUTRA_ASN1_Types all;
  import from NBIOT_Parameters all;
  import from NBIOT_SecurityFunctions all;
  import from NBIOT_SysInfo_Templates all;
  import from Parameters all;
  import from TestcaseProperties all;

  type record NBIOT_EUTRAFrequency_fList_Type {   /* @status    APPROVED (NBIOT) */
    /* This structure is used to contain the different EUTRA frequencies f1, f2, f3 required for configuring in-band and guard band */
    CellCarrierFreqEUTRA_Type      f1,
    CellCarrierFreqEUTRA_Type      f2,
    CellCarrierFreqEUTRA_Type      f3
  };

  template (value) NBIOT_EUTRAFrequency_fList_Type  cs_NBIOT_EUTRAFrequencyInitDummy :=
  {   /* @status    APPROVED (NBIOT) */
    f1 := cs_DummyCarrierFreqEUTRA,
    f2 := cs_DummyCarrierFreqEUTRA,
    f3 := cs_DummyCarrierFreqEUTRA
  };

  template (value) NBIOT_CellInfo_Type cs_NBIOT_CellInfoDef(template (value) NB_CellIdentities_Type  p_CellIds,
                                                            template (value) NB_Combination_Type     p_Combination,
                                                            template (value) integer                 p_FrequencyBand,
                                                            template (value) NB_CarrierFreq_Type     p_UL_DL_Earfcn,
                                                            template (value) NAS_Parameter_Type      p_NAS_Param,
                                                            template (value) NB_BcchInfo_Type        p_BCCH_Info,
                                                            template (value) CellTimingInfo_Type     p_CellTimingInfo,
                                                            NB_SubCarrierSpacingUL_Type              p_SubCarrierSpacingUL,
                                                            integer                                  p_EUTRA_ARFCN) :=
  { /* Default cell info value  */
    /* @status    APPROVED (NBIOT) */
    CellIds :=  p_CellIds,
    Frequency := {
      FrequencyBandIndicator :=  p_FrequencyBand,
      UL_DL_Earfcn           :=  p_UL_DL_Earfcn
    },

    Sysinfo := {
      BCCH_Info       :=  p_BCCH_Info,
      Combination     :=  p_Combination
    },
    NAS_Parameters    :=  p_NAS_Param,
    CellTimingInfo    :=  p_CellTimingInfo,
    ReferencePower := {
      MaxReferencePower := tsc_ServingCellRS_EPRE,
      Attenuation := {Off := true}
    },
    RNTI  := tsc_C_RNTI_Def,
    PhysicalParameters := {
      SubCarrierSpacingUL := p_SubCarrierSpacingUL,
      RAR_TA := tsc_RACH_TA_Def
    },
    AntennaInfo := AN1,
    DrxCtrl := {
      None := true
    },
    SelectedPlmnIndex := 1,
    EUTRA_DL_ARFCN := p_EUTRA_ARFCN, // @sic R5w180205r1 sic@
    NumberOfHarqProcesses := 1       // @sic R5w180305 sic@
  };

  /*
   * @desc      Convert carrier freq offset to be used in the MIB
   * @param     p_Float
   * @return    ChannelRasterOffset_NB_r13
   * @status    APPROVED (NBIOT)
   */
  function fl_NBIOT_ConvertToRasterOffset(float p_Float) return ChannelRasterOffset_NB_r13
  {
    var ChannelRasterOffset_NB_r13 v_ReturnValue;
    
    select (p_Float) {
      case (-7.5) {
        v_ReturnValue := khz_7dot5;
      }
      case (-2.5) {
        v_ReturnValue := khz_2dot5;
      }
      case (2.5) {
        v_ReturnValue := khz2dot5;
      }
      case (7.5) {
        v_ReturnValue := khz7dot5;
      }
      case else {
        FatalError (__FILE__, __LINE__, "invalid calculation value of Raster Offset for MIB intialisation ");
      }
    }
    return v_ReturnValue;
  }

  /*
   * @desc      Convert carrier freq offset to float to be used in the MIB
   * @param     p_ASN1
   * @return    float
   * @status    APPROVED (NBIOT)
   */
  function fl_NBIOT_ConvertFromCarrierFreqOffset(NB_CarrierFreqOffset_r13_Type p_ASN1) return float
  {
    var float v_Number;

    select (p_ASN1) {
      case (v_10) {
        v_Number := -10.0;
      }
      case (v_9) {
        v_Number := -9.0;
      }
      case (v_8) {
        v_Number := -8.0;
      }
      case (v_7) {
        v_Number := -7.0;
      }
      case (v_6) {
        v_Number := -6.0;
      }
      case (v_5) {
        v_Number := -5.0;
      }
      case (v_4) {
        v_Number := -4.0;
      }
      case (v_3) {
        v_Number := -3.0;
      }
      case (v_2) {
        v_Number := -2.0;
      }
      case (v_1) {
        v_Number := -1.0;
      }
      case (v_0dot5) {
        v_Number := -0.5;
      }
      case (v0) {
        v_Number := 0.0;
      }
      case (v1) {
        v_Number := 1.0;
      }
      case (v2) {
        v_Number := 2.0;
      }
      case (v3) {
        v_Number := 3.0;
      }
      case (v4) {
        v_Number := 4.0;
      }
      case (v5) {
        v_Number := 5.0;
      }
      case (v6) {
        v_Number := 6.0;
      }
      case (v7) {
        v_Number := 7.0;
      }
      case (v8) {
        v_Number := 8.0;
      }
      case (v9) {
        v_Number := 9.0;
      }
    }
    return v_Number;
  }

  /*
   * @desc      function to get Carrier Freq according to 36.508 Table 8.1.4.3.3-1 and for clause 8.1.3.1
   * @param     p_CellId
   * @param     p_FrequencyBand     (default value: px_ePrimaryFrequencyBand)
   * @param     p_OperationMode
   * @param     p_CellsOnPLMN       (default value: LTE_AllCellsOnSamePLMN)
   * @return    NB_CarrierFreq_Type
   * @status    APPROVED (NBIOT)
   */
  function fl_NBIOT_Get_CarrierFreq(NBIOT_CellId_Type    p_CellId,
                                      integer              p_FrequencyBand := px_ePrimaryFrequencyBand,
                                      NB_OperationMode_Type p_OperationMode,
                                      EUTRA_NAS_NumOfPLMN_Type p_CellsOnPLMN := LTE_AllCellsOnSamePLMN)
    return NB_CarrierFreq_Type
  {
    var NB_CarrierFreq_Type v_CarrierFreq;
    var NBIOT_Frequency_fList_Type v_Frequency_PrimaryBand := f_NBIOT_InitFrequency_f1Tof3 (p_FrequencyBand, p_OperationMode); // @sic R5-171561 sic@

    select (p_CellId) {
      case (nbiot_Cell1, nbiot_Cell2, nbiot_Cell4, nbiot_Cell5, nbiot_Cell11, nbiot_Cell18) { // @sic R5-176139 sic@
        // For cell frequency of f1:  v_Frequency_PrimaryBand.f1
        v_CarrierFreq := v_Frequency_PrimaryBand.f1;
      }
        case (nbiot_Cell3, nbiot_Cell12, nbiot_Cell23) { // @sic R5s170476 sic@
        // For cell frequency of f2:         v_Frequency_PrimaryBand.f2
        v_CarrierFreq := v_Frequency_PrimaryBand.f2;
      }
      case (nbiot_Cell6, nbiot_Cell13) { // @sic R5s170476 sic@
        // For cell frequency of f3:         v_Frequency_PrimaryBand.f3
        v_CarrierFreq := v_Frequency_PrimaryBand.f3;
      }
      case (nbiot_Cell10) {
        // For cell frequency of f5:         v_Frequency_SecondaryBand.f1 (f5)
        v_CarrierFreq := v_Frequency_PrimaryBand.f1;
      }
      case (nbiot_Cell50, nbiot_Cell51, nbiot_Cell53, nbiot_Cell62, nbiot_Cell63) { // @sic R5s170476 sic@
        // For cell frequency of f1:         v_Frequency_PrimaryBand.f1
        v_CarrierFreq := v_Frequency_PrimaryBand.f1;
      }
      case (nbiot_Cell52, nbiot_Cell61) {
        if (p_CellsOnPLMN == LTE_AllCellsOnSamePLMN) { // @sic R5s170476 sic@
          // For cell frequency of f2:         v_Frequency_PrimaryBand.f2
          v_CarrierFreq := v_Frequency_PrimaryBand.f2;
        } else { // different PLMN
          // For cell frequency of f1:         v_Frequency_PrimaryBand.f1
          v_CarrierFreq := v_Frequency_PrimaryBand.f1;
        }
      }
      case (nbiot_Cell54, nbiot_Cell55, nbiot_Cell56) { // @sic R5s170476 sic@
        // For cell frequency of f2:         v_Frequency_PrimaryBand.f2
        v_CarrierFreq := v_Frequency_PrimaryBand.f2;
      }
      case (nbiot_Cell57, nbiot_Cell59, nbiot_Cell60) {  // @sic R5s170476 sic@
        // For cell frequency of f3:         v_Frequency_PrimaryBand.f3
        v_CarrierFreq := v_Frequency_PrimaryBand.f3;
      }
      case else {
        FatalError (__FILE__, __LINE__, "invalid value Cell Id for Carrier Freq");
      }
    }
    return v_CarrierFreq;
  }

  /*
   * @desc      function to get EUTRA Carrier Freq according to 36.508 Tables 8.1.4.2.1-1, 4 and 5
   * @param     p_CellId
   * @param     p_CellsOnPLMN       (default value: LTE_AllCellsOnSamePLMN)
   * @return    integer
   * @status    APPROVED (NBIOT)
   */
  function fl_NBIOT_Get_EUTRACarrierFreq(NBIOT_CellId_Type    p_CellId,
                                      EUTRA_NAS_NumOfPLMN_Type p_CellsOnPLMN := LTE_AllCellsOnSamePLMN)
    return integer
  {
    var CellCarrierFreqEUTRA_Type v_CarrierFreq;
    var template (value) NBIOT_EUTRAFrequency_fList_Type v_Freq := cs_NBIOT_EUTRAFrequencyInitDummy;   //Initialise with Dummy value
    var NBIOT_EUTRAFrequency_fList_Type v_EUTRA_Freq := valueof(v_Freq);
    var FrequencyLowMidHigh_Type v_FreqLMH := f_EUTRA_InitFrequencyLowMidHigh(px_ePrimaryFrequencyBand,
                                                      px_ePrimaryBandChannelBandwidth,
                                                      f_ConvertDL_BandwidthToUL(px_ePrimaryBandChannelBandwidth));
    if (p_CellId == nbiot_Cell10){ // @sic R5s180572 sic@
        v_FreqLMH := f_EUTRA_InitFrequencyLowMidHigh(px_eSecondaryFrequencyBand,
                                                     px_eSecondaryBandChannelBandwidth,
                                                     f_ConvertDL_BandwidthToUL(px_eSecondaryBandChannelBandwidth));
    }
    // Most of the bands assigns f1->Mid  f2->High  f3->Low
    v_EUTRA_Freq.f1 := v_FreqLMH.FrequencyMid;
    v_EUTRA_Freq.f2 := v_FreqLMH.FrequencyHigh;
    v_EUTRA_Freq.f3 := v_FreqLMH.FrequencyLow;

    select (p_CellId) {
      case (nbiot_Cell1, nbiot_Cell2, nbiot_Cell4, nbiot_Cell5, nbiot_Cell11, nbiot_Cell18) { // @sic R5-176139 sic@
        // For cell frequency of f1:  v_Frequency_PrimaryBand.f1
        v_CarrierFreq := v_EUTRA_Freq.f1;
      }
        case (nbiot_Cell3, nbiot_Cell12, nbiot_Cell23) { // @sic R5s170476 sic@
        // For cell frequency of f2:         v_Frequency_PrimaryBand.f2
        v_CarrierFreq := v_EUTRA_Freq.f2;
      }
      case (nbiot_Cell6, nbiot_Cell13) { // @sic R5s170476 sic@
        // For cell frequency of f3:         v_Frequency_PrimaryBand.f3
        v_CarrierFreq := v_EUTRA_Freq.f3;
      }
      case (nbiot_Cell10) {
        // For cell frequency of f5:         v_Frequency_SecondaryBand.f1 (f5)
        v_CarrierFreq := v_EUTRA_Freq.f1;
      }
      case (nbiot_Cell50, nbiot_Cell51, nbiot_Cell53, nbiot_Cell62, nbiot_Cell63) { // @sic R5s170476 sic@
        // For cell frequency of f1:         v_Frequency_PrimaryBand.f1
        v_CarrierFreq := v_EUTRA_Freq.f1;
      }
      case (nbiot_Cell52, nbiot_Cell61) {
        if (p_CellsOnPLMN == LTE_AllCellsOnSamePLMN) { // @sic R5s170476 sic@
          // For cell frequency of f2:         v_Frequency_PrimaryBand.f2
          v_CarrierFreq := v_EUTRA_Freq.f2;
        } else { // different PLMN
          // For cell frequency of f1:         v_Frequency_PrimaryBand.f1
          v_CarrierFreq := v_EUTRA_Freq.f1;
        }
      }
      case (nbiot_Cell54, nbiot_Cell55, nbiot_Cell56) { // @sic R5s170476 sic@
        // For cell frequency of f2:         v_Frequency_PrimaryBand.f2
        v_CarrierFreq := v_EUTRA_Freq.f2;
      }
      case (nbiot_Cell57, nbiot_Cell59, nbiot_Cell60) {  // @sic R5s170476 sic@
        // For cell frequency of f3:         v_Frequency_PrimaryBand.f3
        v_CarrierFreq := v_EUTRA_Freq.f3;
      }
      case else {
        FatalError (__FILE__, __LINE__, "invalid value Cell Id for Carrier Freq");
      }
    }
    return v_CarrierFreq.dl_CarrierFreq_r9;
  }

  /*
   * @desc      Return the raster offset to be used in the MIB
   * @param     p_CellId
   * @param     p_FrequencyBand
   * @param     p_OperationMode
   * @param     p_CellsOnPLMN       (default value: LTE_AllCellsOnSamePLMN; Parameter to be used for NAS cells)
   * @return    ChannelRasterOffset_NB_r13
   * @status    APPROVED (NBIOT)
   */
  function fl_NBIOT_MIB_GetRasterOffset(NBIOT_CellId_Type                         p_CellId,
                                        integer                                   p_FrequencyBand,
                                        NB_OperationMode_Type                     p_OperationMode,
                                        EUTRA_NAS_NumOfPLMN_Type p_CellsOnPLMN := LTE_AllCellsOnSamePLMN) return ChannelRasterOffset_NB_r13
  {
    var NBIOT_Frequency_fList_Type v_Frequency_PrimaryBand := f_NBIOT_InitFrequency_f1Tof3 (p_FrequencyBand, p_OperationMode);
    var NB_CarrierFreqOffset_r13_Type v_Mdl;
    var float v_Mdl_Number;
    var float v_Calculation;

    select (p_CellId) {
      case (nbiot_Cell1, nbiot_Cell2, nbiot_Cell4, nbiot_Cell5, nbiot_Cell11, nbiot_Cell18) { // @sic R5-176139 sic@
        // For cell frequency of f1:  v_Frequency_PrimaryBand.f1
        v_Mdl := v_Frequency_PrimaryBand.f1.DL.carrierFreqOffset_r13;
      }
      case (nbiot_Cell3, nbiot_Cell12, nbiot_Cell23) { // @sic R5s170476 sic@
        // For cell frequency of f2:         v_Frequency_PrimaryBand.f2
        v_Mdl := v_Frequency_PrimaryBand.f2.DL.carrierFreqOffset_r13;
      }
      case (nbiot_Cell6, nbiot_Cell13) { // @sic R5s170476 sic@
        // For cell frequency of f3:         v_Frequency_PrimaryBand.f3
        v_Mdl := v_Frequency_PrimaryBand.f3.DL.carrierFreqOffset_r13;
      }
      case (nbiot_Cell10) {
        // For cell frequency of f5:         v_Frequency_SecondaryBand.f1 (f5)
        v_Mdl := v_Frequency_PrimaryBand.f1.DL.carrierFreqOffset_r13;
      }
      case (nbiot_Cell50, nbiot_Cell51, nbiot_Cell53, nbiot_Cell62, nbiot_Cell63) { // @sic R5s170476 sic@
        // For cell frequency of f1:         v_Frequency_PrimaryBand.f1
        v_Mdl := v_Frequency_PrimaryBand.f1.DL.carrierFreqOffset_r13;
      }
      case (nbiot_Cell52, nbiot_Cell61) {
        if (p_CellsOnPLMN == LTE_AllCellsOnSamePLMN) { // @sic R5s170476 sic@
          // For cell frequency of f2:         v_Frequency_PrimaryBand.f2
          v_Mdl := v_Frequency_PrimaryBand.f2.DL.carrierFreqOffset_r13;
        } else { // different PLMN
          // For cell frequency of f1:         v_Frequency_PrimaryBand.f1
          v_Mdl := v_Frequency_PrimaryBand.f1.DL.carrierFreqOffset_r13;
        }
      }
      case (nbiot_Cell54, nbiot_Cell55, nbiot_Cell56) { // @sic R5s170476 sic@
        // For cell frequency of f2:         v_Frequency_PrimaryBand.f2
        v_Mdl := v_Frequency_PrimaryBand.f2.DL.carrierFreqOffset_r13;
      }
      case (nbiot_Cell57, nbiot_Cell59, nbiot_Cell60) {  // @sic R5s170476 sic@
        // For cell frequency of f3:         v_Frequency_PrimaryBand.f3
        v_Mdl := v_Frequency_PrimaryBand.f3.DL.carrierFreqOffset_r13;
      }
      case else {
        FatalError (__FILE__, __LINE__, "invalid value Cell Id for MIB intialisation");
      }
    }
    v_Mdl_Number := fl_NBIOT_ConvertFromCarrierFreqOffset (v_Mdl);
    v_Calculation := 2.5*((2.0*v_Mdl_Number + 1.0));
    return fl_NBIOT_ConvertToRasterOffset (v_Calculation);
  }

  /*
   * @desc      Return the EUTRA CRS Sequence Info to be used in the MIB
   * @param     p_FrequencyBand
   * @return    integer
   * @status    APPROVED (NBIOT)
   */
  function fl_NBIOT_MIB_GetEUTRA_CRS_SequenceInfo(integer    p_FrequencyBand) return integer
  {
    var integer v_SequenceInfo;

    select (p_FrequencyBand) {
      case (31) { // PRB 17
        v_SequenceInfo := 7;
      }
     case else { // PRB 30 Note: No value in 36.508 for band 70
        v_SequenceInfo := 23;
      }
    }
    return v_SequenceInfo;
  }

  /*
   * @desc      Return the index corresponding to p_CellId
   *            local function used only in that module
   * @param     p_CellId
   * @return    integer
   * @status    APPROVED (NBIOT)
   */
  function f_NBIOT_CellInfo_GetIndex(NBIOT_CellId_Type p_CellId) return integer
  {
    var integer v_Index := 0;
    
    select (p_CellId) {
      case (nbiot_Cell1) {
        v_Index := 0;
      }
      case (nbiot_Cell2) {
        v_Index := 1;
      }
      case (nbiot_Cell3) {
        v_Index := 2;
      }
      case (nbiot_Cell4) {
        v_Index := 3;
      }
      case (nbiot_Cell5) { // @sic R5-176139 sic@
        v_Index := 4;
      }
      case (nbiot_Cell6) {
        v_Index := 5;
      }
      case (nbiot_Cell10) {
        v_Index := 6;
      }
      case (nbiot_Cell11) {
        v_Index := 7;
      }
      case (nbiot_Cell12) {
        v_Index := 8;
      }
      case (nbiot_Cell13) {
        v_Index := 9;
      }
      case (nbiot_Cell14) {
        v_Index := 10;
      }
      case (nbiot_Cell18) { // @sic R5-176139 sic@
        v_Index := 11;
      }
      case (nbiot_Cell23) {
        v_Index := 12;
      }
      case (nbiot_Cell50) {
        v_Index := 13;
      }
      case (nbiot_Cell51) {
        v_Index := 14;
      }
      case (nbiot_Cell52) {
        v_Index := 15;
      }
      case (nbiot_Cell53) {
        v_Index := 16;
      }
      case (nbiot_Cell54) {
        v_Index := 17;
      }
      case (nbiot_Cell55) {
        v_Index := 18;
      }
      case (nbiot_Cell56) {
        v_Index := 19;
      }
      case (nbiot_Cell57) {
        v_Index := 20;
      }
      case (nbiot_Cell58) {
        v_Index := 21;
      }
      case (nbiot_Cell59) {
        v_Index := 22;
      }
      case (nbiot_Cell60) {
        v_Index := 23;
      }
      case (nbiot_Cell61) {
        v_Index := 24;
      }
      case (nbiot_Cell62) {
        v_Index := 25;
      }
      case (nbiot_Cell63) {
        v_Index := 26;
      }
      case else  {
        FatalError (__FILE__, __LINE__, "Invalid CellId");
      }
    }
    return v_Index;
  }

  /*
   * @desc      return operation mode depending on test case attributes
   * @return    NB_OperationMode_Type
   * @status    APPROVED (NBIOT)
   */
  function f_NBIOT_OperationMode() return NB_OperationMode_Type
  {
    var NB_OperationMode_Type v_OperationMode;

    if (f_GetTestcaseAttrib_NbiotOperationModeStandaloneOnly(testcasename())) {
      v_OperationMode := standalone;
    } else {
      v_OperationMode := px_NB_OperationMode;
    }
    return v_OperationMode;
  }

  /*
   * @desc      Initialise the cell physical ID according to 36.508 Table 8.1.4.2-1A and 36.523-3 cl 7.4.4
   * @param     p_CellId
   * @return    EUTRA_ASN1_PhysCellId_Type
   * @status    APPROVED (NBIOT)
   */
  function fl_NBIOT_InitPhysicalCellId (NBIOT_CellId_Type p_CellId) return EUTRA_ASN1_PhysCellId_Type
  {
    var EUTRA_ASN1_PhysCellId_Type v_PhysicalCellId;
    select (p_CellId) {
      case (nbiot_Cell1) {
        v_PhysicalCellId := 5; //vzw_modified 0;
      }
      case (nbiot_Cell2) {
        v_PhysicalCellId := 9;
      }
      case (nbiot_Cell3) {
        v_PhysicalCellId := 3;
      }
      case (nbiot_Cell4) {
        v_PhysicalCellId := 4;
      }
      case (nbiot_Cell5) { // @sic R5-179139 sic@
        v_PhysicalCellId := 5;
      }
      case (nbiot_Cell6) {
        v_PhysicalCellId := 6;
      }
      case (nbiot_Cell10) {
        v_PhysicalCellId := 10;
      }
      case (nbiot_Cell11) {
        v_PhysicalCellId := 11;
      }
      case (nbiot_Cell12) {
        v_PhysicalCellId := 12;
      }
      case (nbiot_Cell13) {
        v_PhysicalCellId := 13;
      }
      case (nbiot_Cell14) {
        v_PhysicalCellId := 14;
      }
      case (nbiot_Cell18) { // @sic R5-179139 sic@
        v_PhysicalCellId := 18;
      }
      case (nbiot_Cell23) {
        v_PhysicalCellId := 23;
      }
      case (nbiot_Cell50) {
        v_PhysicalCellId := 1;
      }
      case (nbiot_Cell51) {
        v_PhysicalCellId := 2;
      }
      case (nbiot_Cell52) {
        v_PhysicalCellId := 3;
      }
      case (nbiot_Cell53) {
        v_PhysicalCellId := 4;
      }
      case (nbiot_Cell54) {
        v_PhysicalCellId := 23;
      }
      case (nbiot_Cell55) {
        v_PhysicalCellId := 11;
      }
      case (nbiot_Cell56) {
        v_PhysicalCellId := 12;
      }
      case (nbiot_Cell57) {
        v_PhysicalCellId := 13;
      }
      case (nbiot_Cell58) {
        v_PhysicalCellId := 14;
      }
      case (nbiot_Cell59) {
        v_PhysicalCellId := 15;
      }
      case (nbiot_Cell60) {
        v_PhysicalCellId := 16;
      }
      case (nbiot_Cell61) {
        v_PhysicalCellId := 17;
      }
      case (nbiot_Cell62) {
        v_PhysicalCellId := 18;
      }
      case (nbiot_Cell63) {
        v_PhysicalCellId := 19;
      }
      case else  {
        FatalError (__FILE__, __LINE__, "Invalid CellId");
      }
    }
    
    return v_PhysicalCellId;
  }

  /*
   * @desc      Initialise the physical cell identity and the E-UTRAN cell identity according to 36.508 table 8.1.4.2-1A
   * @param     p_CellId
   * @return    NB_CellIdentities_Type
   * @status    APPROVED (NBIOT)
   */
  function fl_NBIOT_InitCellIdentities(NBIOT_CellId_Type p_CellId) return NB_CellIdentities_Type
  {
    var NB_CellIdentities_Type v_CellIds;
    
    // Initialise the physical cell indentity
    v_CellIds.PhysicalCellId := fl_NBIOT_InitPhysicalCellId (p_CellId);
    
    // Initialise the cell Identity: E-NodeB (20 bits) + Cell Identity (8 bits)
    // Values according to 36.508 Table 8.1.4.2-1A
    select (p_CellId) {
      case (nbiot_Cell1) {
        v_CellIds.CellIdentity := int2bit(1, 20) & int2bit(0, 8);
      }
      case (nbiot_Cell2) {
        v_CellIds.CellIdentity := int2bit(1, 20) & int2bit(2, 8);
      }
      case (nbiot_Cell3) {
        v_CellIds.CellIdentity := int2bit(2, 20) & int2bit(3, 8);
      }
      case (nbiot_Cell4) {
        v_CellIds.CellIdentity := int2bit(3, 20) & int2bit(4, 8);
      }
      case (nbiot_Cell5) { // @sic R5-176139 sic@
        v_CellIds.CellIdentity := int2bit(3, 20) & int2bit(5, 8);
      }
      case (nbiot_Cell6) {
        v_CellIds.CellIdentity := int2bit(4, 20) & int2bit(6, 8);
      }
      case (nbiot_Cell10) {
        v_CellIds.CellIdentity := int2bit(5, 20) & int2bit(10, 8);
      }
      case (nbiot_Cell11) {
        v_CellIds.CellIdentity := int2bit(6, 20) & int2bit(11, 8);
      }
      case (nbiot_Cell12) {
        v_CellIds.CellIdentity := int2bit(2, 20) & int2bit(12, 8);
      }
      case (nbiot_Cell13) {
        v_CellIds.CellIdentity := int2bit(4, 20) & int2bit(13, 8);
      }
      case (nbiot_Cell14) {
        v_CellIds.CellIdentity := int2bit(7, 20) & int2bit(14, 8);
      }
      case (nbiot_Cell18) { // @sic R5-176139 sic@
        v_CellIds.CellIdentity := int2bit(4, 20) & int2bit(18, 8);
      }
      case (nbiot_Cell23) {
        v_CellIds.CellIdentity := int2bit(6, 20) & int2bit(23, 8);
      }
      case else  {
        FatalError (__FILE__, __LINE__, "Invalid CellId");
      }
    }
    return v_CellIds;
  }

  /*
   * @desc      Initialise the physical cell identity and the E-UTRAN cell identity according to 36.508 clause 8.1.4.2
   * @param     p_CellId
   * @param     p_CellsOnPLMN
   * @return    NB_CellIdentities_Type
   * @status    APPROVED (NBIOT)
   */
  function fl_NBIOT_InitCellIdentities_NAS(NBIOT_CellId_Type p_CellId,
                                           EUTRA_NAS_NumOfPLMN_Type p_CellsOnPLMN) return NB_CellIdentities_Type
  {
    var NB_CellIdentities_Type v_CellIds;
    
    // Initialise the physical cell indentity @sic R5s170182 sic@
    v_CellIds.PhysicalCellId := fl_NBIOT_InitPhysicalCellId (p_CellId);

    // Initialise the cell Identity: E-NodeB (20 bits) + Cell Identity (8 bits)
    
    select (p_CellsOnPLMN) {
      case (LTE_CellsOnDifferentPLMN) {
        // Values according to 36.508 Table 8.1.4.2-4
        select (p_CellId) {
          case (nbiot_Cell50) {
            v_CellIds.CellIdentity := int2bit(33, 20) & int2bit(1, 8);
          }
          case (nbiot_Cell51) {
            v_CellIds.CellIdentity := int2bit(33, 20) & int2bit(2, 8);
          }
          case (nbiot_Cell52) {
            v_CellIds.CellIdentity := int2bit(33, 20) & int2bit(3, 8);
          }
          case (nbiot_Cell53) {
            v_CellIds.CellIdentity := int2bit(33, 20) & int2bit(4, 8);
          }
          case (nbiot_Cell54) {
            v_CellIds.CellIdentity := int2bit(53, 20) & int2bit(23, 8);
          }
          case (nbiot_Cell55) {
            v_CellIds.CellIdentity := int2bit(34, 20) & int2bit(11, 8);
          }
          case (nbiot_Cell56) {
            v_CellIds.CellIdentity := int2bit(34, 20) & int2bit(12, 8);
          }
          case (nbiot_Cell57) {
            v_CellIds.CellIdentity := int2bit(35, 20) & int2bit(13, 8);
          }
          case (nbiot_Cell58) {
            v_CellIds.CellIdentity := int2bit(36, 20) & int2bit(14, 8);
          }
          case (nbiot_Cell59) {
            v_CellIds.CellIdentity := int2bit(35, 20) & int2bit(15, 8);
          }
          case (nbiot_Cell60) {
            v_CellIds.CellIdentity := int2bit(35, 20) & int2bit(16, 8);
          }
          case (nbiot_Cell61) {
            v_CellIds.CellIdentity := int2bit(33, 20) & int2bit(17, 8);
          }
          case (nbiot_Cell62) {
            v_CellIds.CellIdentity := int2bit(34, 20) & int2bit(18, 8);
          }
          case (nbiot_Cell63) {
            v_CellIds.CellIdentity := int2bit(34, 20) & int2bit(19, 8);
          }
          case else {
            FatalError (__FILE__, __LINE__, "Invalid CellId");
          }
        }
      }
      case (LTE_AllCellsOnSamePLMN) {
        // Values according to 36.508 Table 6.3.2.2-2
        select (p_CellId) {
          case (nbiot_Cell50) {
            v_CellIds.CellIdentity := int2bit(17, 20) & int2bit(1, 8);
          }
          case (nbiot_Cell51) {
            v_CellIds.CellIdentity := int2bit(17, 20) & int2bit(2, 8);
          }
          case (nbiot_Cell52) {
            v_CellIds.CellIdentity := int2bit(18, 20) & int2bit(3, 8);
          }
          case (nbiot_Cell53) {
            v_CellIds.CellIdentity := int2bit(17, 20) & int2bit(4, 8);
          }
          case (nbiot_Cell61) {
            v_CellIds.CellIdentity := int2bit(33, 20) & int2bit(17, 8);
          }
          case else  {
            FatalError (__FILE__, __LINE__, "Invalid CellId for NAS cells on the same PLMN");
          }
        }
      }
      case else {
        FatalError (__FILE__, __LINE__, "Invalid EUTRA_NAS_NumOfPLMN");
      }
    }
    return v_CellIds;
  };

  /*
   * @desc      return the cell timing info according to 36.523-3 clause 7A.9.2
   * @param     p_CellId
   * @param     p_CellsOnPLMN       (default value: LTE_AllCellsOnSamePLMN; Parameter to be used for NAS cells)
   * @return    CellTimingInfo_Type
   * @status    APPROVED (NBIOT)
   */
  function fl_NBIOT_InitialiseCellTiming(NBIOT_CellId_Type p_CellId,
                                         EUTRA_NAS_NumOfPLMN_Type p_CellsOnPLMN := LTE_AllCellsOnSamePLMN) return CellTimingInfo_Type
  {
    var CellTimingInfo_Type v_CellTiming;
    var integer v_Tcell := 0;     // (0..307199) acc. to 36.523-3 Table 7A.9.2-1, Table 7A.9.2-2 and Table 7A.9.2-3
    var integer v_SfnOffset:= 0;  // (0..1023) acc. to 36.523-3 Table 7A.9.2-1, Table 7A.9.2-2 and Table 7A.9.2-3
    
    select (p_CellsOnPLMN) {
      case (LTE_AllCellsOnSamePLMN) {
        select (p_CellId) {
          case (nbiot_Cell1, nbiot_Cell50) {
            v_SfnOffset := 0;
            v_Tcell := 0;
          }
          case (nbiot_Cell2){
            v_SfnOffset := 124;
            v_Tcell := 184320;
          }
          case (nbiot_Cell3, nbiot_Cell52){
            v_SfnOffset := 257;
            v_Tcell := 150897;
          }
          case (nbiot_Cell4, nbiot_Cell53){
            v_SfnOffset := 1000;
            v_Tcell := 61440;
          }
          case (nbiot_Cell5){ // @sic R5-176139 sic@
            v_SfnOffset := 1020; // @sic R5s170055 sic@
            v_Tcell := 30720;
          }
          case (nbiot_Cell6){
            v_SfnOffset := 657;
            v_Tcell := 524;
          }
          case (nbiot_Cell10){
            v_SfnOffset := 129;
            v_Tcell := 43658;
          }
          case (nbiot_Cell11){
            v_SfnOffset := 957;
            v_Tcell := 92160;
          }
          case (nbiot_Cell12){
            v_SfnOffset := 1015;
            v_Tcell := 181617;
          }
          case (nbiot_Cell13){
            v_SfnOffset := 890;
            v_Tcell := 31244;
          }
          case (nbiot_Cell14){
            v_SfnOffset := 680;
            v_Tcell := 300501;
          }
          case (nbiot_Cell18){ // @sic R5-176139 sic@
            v_SfnOffset := 280;
            v_Tcell := 122880;
          }
          case (nbiot_Cell23) {
            v_SfnOffset := 383;
            v_Tcell := 212337;
          }
          case (nbiot_Cell51) {
            v_SfnOffset := 124;
            v_Tcell := 30720;
          }
          case (nbiot_Cell61) {
            v_SfnOffset := 471;
            v_Tcell := 31244;
          }
          case else {
            FatalError (__FILE__, __LINE__, "invalid cell Idendtity");
          }
        }
      }
      case (LTE_CellsOnDifferentPLMN) {
        select (p_CellId) {
          case (nbiot_Cell50) {
            v_SfnOffset := 0;
            v_Tcell := 0;
          }
          case (nbiot_Cell51) {
            v_SfnOffset := 124;
            v_Tcell := 30720;
          }
          case (nbiot_Cell52) {
            v_SfnOffset := 257;
            v_Tcell := 61440;
          }
          case (nbiot_Cell53) {
            v_SfnOffset := 1000;
            v_Tcell := 92160;
          }
          case (nbiot_Cell54) {
            v_SfnOffset := 752;
            v_Tcell := 32047;
          }
          case (nbiot_Cell55) {
            v_SfnOffset := 957;
            v_Tcell := 631;
          }
          case (nbiot_Cell56) {
            v_SfnOffset := 1015;
            v_Tcell := 31351;
          }
          case (nbiot_Cell57) {
            v_SfnOffset := 890;
            v_Tcell := 127200;
          }
          case (nbiot_Cell58) {
            v_SfnOffset := 680;
            v_Tcell := 1327;
          }
          case (nbiot_Cell59) {
            v_SfnOffset := 383;
            v_Tcell := 157920;
          }
          case (nbiot_Cell60) {
            v_SfnOffset := 562;
            v_Tcell := 188640;
          }
          case (nbiot_Cell61) {
            v_SfnOffset := 471;
            v_Tcell := 122880;
          }
          case (nbiot_Cell62) {
            v_SfnOffset := 595;
            v_Tcell := 153600;
          }
          case (nbiot_Cell63) {
            v_SfnOffset := 728;
            v_Tcell := 184320;
          }
          case else {
            FatalError (__FILE__, __LINE__, "invalid cell Idendtity");
          }
        }
      }
    }
    v_CellTiming.TcOffset := 0;               // @sic R5s180410 sic@
    v_CellTiming.Tcell := v_Tcell;
    v_CellTiming.SfnOffset := v_SfnOffset;
    v_CellTiming.HsfnOffset := 0;
    return v_CellTiming;
  }

  /*
   * @desc      return sysinfo combination
   * @param     p_CellId
   * @param     p_SysinfoCombination
   * @return    NB_Combination_Type
   * @status    APPROVED (NBIOT)
   */
  function fl_NBIOT_CheckSysinfoCombination(NBIOT_CellId_Type p_CellId,
                                            NB_Combination_Type p_SysinfoCombination) return NB_Combination_Type
  {
    var NB_Combination_Type v_SysinfoCombination := p_SysinfoCombination;
    
    // Some cells (14, 12, 13) cannot be assigned to combination c3 as no content is specified for SIB5 in 36.508
  
    select (p_CellId) {
      case (nbiot_Cell5, nbiot_Cell14, nbiot_Cell12, nbiot_Cell13, nbiot_Cell18) {
        select (p_SysinfoCombination) {
          case (c3)  {v_SysinfoCombination := c1}
        }
      }
    }
    return v_SysinfoCombination;
  }

  /*
   * @desc      function initialising SIB2 for all cells values defined
   *            Acc. To 36.508 Table 8.1.4.3.3-1 and for clause 8.1.3.1
   * @param     p_CellId
   * @param     p_FrequencyBand     (default value: px_ePrimaryFrequencyBand)
   * @param     p_OperationMode
   * @param     p_CellsOnPLMN       (default value: LTE_AllCellsOnSamePLMN)
   * @return    template (value) SystemInformationBlockType2_NB_r13
   * @status    APPROVED (NBIOT)
   */
  function f_NBIOT_InitSystemInformation2(NBIOT_CellId_Type    p_CellId,
                                          integer              p_FrequencyBand := px_ePrimaryFrequencyBand,
                                          NB_OperationMode_Type p_OperationMode,
                                          EUTRA_NAS_NumOfPLMN_Type p_CellsOnPLMN := LTE_AllCellsOnSamePLMN)
    return template (value) SystemInformationBlockType2_NB_r13
  {
    var NB_CarrierFreq_Type v_CarrierFreq := fl_NBIOT_Get_CarrierFreq(p_CellId, p_FrequencyBand, p_OperationMode, p_CellsOnPLMN); // @sic R5-185113 sic@
    var template (omit) CarrierFreq_NB_r13 v_UL_CarrierFreq;

    if (p_OperationMode == standalone) {
      v_UL_CarrierFreq := omit;
    } else {
      v_UL_CarrierFreq := v_CarrierFreq.UL;
    }
    return cs_508_SystemInformationBlockType2_NB_Def({ cs_NPRACH_Parameters_Default }, v_UL_CarrierFreq);
  }

  /*
   * @desc      function initialising SIB5 for all cells values defined
   *            Acc. To 36.508 Table 8.3.3.1.2-1 and for NAS tables 8.3.3.1.2-2 and 8.3.3.1.2-3
   * @param     p_CellId
   * @param     p_FrequencyBand     (default value: px_ePrimaryFrequencyBand)
   * @param     p_OperationMode
   * @return    template (value) SystemInformationBlockType5_NB_r13
   * @status    APPROVED (NBIOT)
   */
  function f_NBIOT_InitSystemInformation5(NBIOT_CellId_Type    p_CellId,
                                          integer              p_FrequencyBand := px_ePrimaryFrequencyBand,
                                          NB_OperationMode_Type p_OperationMode)
    return template (value) SystemInformationBlockType5_NB_r13
  {
    // NOTE: No SIB5 specified in 36.508 table 8.3.3.1.2-1 for Ncells 5, 12, 13, 18
    var template (value) InterFreqCarrierFreqList_NB_r13 v_InterFreqCarrierList;
    var NBIOT_Frequency_fList_Type v_Frequency_PrimaryBand := f_NBIOT_InitFrequency_f1Tof3 (p_FrequencyBand, p_OperationMode); // @sic R5-171561 sic@
    select (p_CellId) {
      case (nbiot_Cell1, nbiot_Cell2, nbiot_Cell4, nbiot_Cell11) {
        // For cell frequency of f1:  v_Frequency_PrimaryBand.f1
        // SIB5 contents: f2, f3
        if (v_Frequency_PrimaryBand.f3.DL.carrierFreq_r13 != tsc_NBIOT_DummyFrequency) {    // f3 is defined for the Band p_FrequencyBand
          v_InterFreqCarrierList := {
            cs_NB_InterFreqCarrierFreq(v_Frequency_PrimaryBand.f2),
            cs_NB_InterFreqCarrierFreq(v_Frequency_PrimaryBand.f3)
          };
        } else {  // f3 not defined for the band
          v_InterFreqCarrierList := {
            cs_NB_InterFreqCarrierFreq(v_Frequency_PrimaryBand.f2)
          };
        }
      }
      case (nbiot_Cell3, nbiot_Cell23) {
        // For cell frequency of f2:         v_Frequency_PrimaryBand.f2
        // SIB5 contents: f1, f3
        if (v_Frequency_PrimaryBand.f3.DL.carrierFreq_r13 != tsc_NBIOT_DummyFrequency) {    // f3 is defined for the Band p_FrequencyBand
          v_InterFreqCarrierList := {
            cs_NB_InterFreqCarrierFreq(v_Frequency_PrimaryBand.f1),
            cs_NB_InterFreqCarrierFreq(v_Frequency_PrimaryBand.f3)
          };
        } else {  // f3 not defined for the band
          v_InterFreqCarrierList := {
            cs_NB_InterFreqCarrierFreq(v_Frequency_PrimaryBand.f1)
          };
        }
      }
      case (nbiot_Cell6) {
        // For cell frequency of f3:         v_Frequency_PrimaryBand.f3
        // SIB5 contents: f1, f2
        v_InterFreqCarrierList := {
          cs_NB_InterFreqCarrierFreq(v_Frequency_PrimaryBand.f1),
          cs_NB_InterFreqCarrierFreq(v_Frequency_PrimaryBand.f2)
        };
      }
      case (nbiot_Cell10) {
        // For cell frequency of f5:         v_Frequency_SecondaryBand.f1 (f5)
        // SIB5 contents: f2, f3
        if (v_Frequency_PrimaryBand.f3.DL.carrierFreq_r13 != tsc_NBIOT_DummyFrequency) {    // f3 is defined for the Band p_FrequencyBand
          v_InterFreqCarrierList := {
            cs_NB_InterFreqCarrierFreq(v_Frequency_PrimaryBand.f2),
            cs_NB_InterFreqCarrierFreq(v_Frequency_PrimaryBand.f3)
          };
        } else {  // f3 not defined for the band
          v_InterFreqCarrierList := {
            cs_NB_InterFreqCarrierFreq(v_Frequency_PrimaryBand.f2)
          };
        }
      }
      case (nbiot_Cell50, nbiot_Cell51, nbiot_Cell53) {
        // For cell frequency of f1:         v_Frequency_PrimaryBand.f1
        // SIB5 contents: f2
        v_InterFreqCarrierList := {
          cs_NB_InterFreqCarrierFreq(v_Frequency_PrimaryBand.f2)
        };
      }
      case (nbiot_Cell52, nbiot_Cell61) { // @sic R5s170476 sic@
        // For cell frequency of f2:         v_Frequency_PrimaryBand.f2
        // SIB5 contents: f1
        v_InterFreqCarrierList := {
          cs_NB_InterFreqCarrierFreq(v_Frequency_PrimaryBand.f1)
        };
      }
      case (nbiot_Cell57, nbiot_Cell59, nbiot_Cell60) { // @sic R5s170476 sic@
        // For cell frequency of f3:         v_Frequency_PrimaryBand.f3
        // SIB5 contents: f2
        v_InterFreqCarrierList := {
          cs_NB_InterFreqCarrierFreq(v_Frequency_PrimaryBand.f2)
        };
      }
      case (nbiot_Cell54) {
        // For cell frequency of f2:         v_Frequency_PrimaryBand.f2
        // SIB5 contents: f3
        v_InterFreqCarrierList := {
          cs_NB_InterFreqCarrierFreq(v_Frequency_PrimaryBand.f3)
        };
      }
      case else {
        FatalError (__FILE__, __LINE__, "invalid value Cell Id for SIB5 intialisation");
      }
    }
    return cs_508_SystemInformationBlockType5_NB_Def(v_InterFreqCarrierList);
  }
    
    
    
    function f_GetUTCtimeInfo(out integer p_DayLightSavingTime) return integer
  {
    var Struct_tm_Type v_LocalTime;
    var integer v_TimezoneSeconds;
    var integer v_YearInSec;
    var integer v_MonthInSec;
    var integer v_DayInSec;
    var integer v_HourInSec;
    var integer v_MinuteInSec;
    var integer v_Second;
    var integer v_Timezone;
    var integer v_DayLightSaving := 0;
    var integer v_UTCTimeInfoInSec := 0;
    var charstring v_LocalTimePrinting := "";

    fx_GetSystemTime(v_LocalTime, v_TimezoneSeconds);
      
    v_YearInSec := (v_LocalTime.tm_year * 365 * 24 * 3600);
    v_MonthInSec := (v_LocalTime.tm_mon * 31 * 24 * 3600);
    v_DayInSec  := (v_LocalTime.tm_mday * 24 * 3600);
    v_HourInSec := (v_LocalTime.tm_hour * 3600);
    v_MinuteInSec := ((v_LocalTime.tm_min mod 60) * 60); /* v_LocalTime.tm_min can be 0..61 on some systems */
    v_Second := v_LocalTime.tm_sec;
      
    v_UTCTimeInfoInSec := v_YearInSec + v_MonthInSec + v_DayInSec + v_HourInSec + v_MinuteInSec + v_Second;
    log("UTC Time Info In Seconds = ",v_UTCTimeInfoInSec);
    p_DayLightSavingTime := v_LocalTime.tm_isdst;

    v_LocalTimePrinting := f_UTC_FormatDateTime(v_LocalTime);
    log("System Local Date and time : ",v_LocalTimePrinting);
      
    return v_UTCTimeInfoInSec;    
  }

  /*
   * @desc      function initialising the default sysinfo as per 36.508
   * @param     p_CellId
   * @param     p_CellIdentity
   * @param     p_Combination
   * @param     p_FrequencyBand
   * @param     p_OperationMode
   * @param     p_PLMN_Identity
   * @param     p_TrackingAreaCode
   * @param     p_CellsOnPLMN       (default value: LTE_AllCellsOnSamePLMN)
   * @return    template (value) NB_BcchInfo_Type
   * @status    APPROVED (NBIOT)
   */
  function f_NBIOT_InitSystemInformation(NBIOT_CellId_Type                         p_CellId,
                                         EUTRA_ASN1_CellIdentity_Type              p_CellIdentity,
                                         NB_Combination_Type                       p_Combination,
                                         integer                                   p_FrequencyBand,
                                         NB_OperationMode_Type                     p_OperationMode,
                                         template (value) PLMN_IdentityList_NB_r13 p_PLMN_Identity,
                                         EUTRA_ASN1_TrackingAreaCode_Type          p_TrackingAreaCode,
                                         EUTRA_NAS_NumOfPLMN_Type p_CellsOnPLMN := LTE_AllCellsOnSamePLMN)
    return template (value) NB_BcchInfo_Type
  {
    var template (value) NB_BcchInfo_Type v_CellBcchInfo;
    var template (value) BCCH_BCH_Message_NB v_MIB;
    var template (value) BCCH_DL_SCH_Message_NB v_SIB1;
    var template (value) NB_SI_List_Type v_SI_List;
    var template (value) SystemInformation_NB_r13_IEs v_SIB2;
    var template (value) SystemInformation_NB_r13_IEs v_SIB_SI2;
    var template (value) SystemInformation_NB_r13_IEs v_SIB_SI3;
    var template (omit) NRS_CRS_PowerOffset_Type v_NRS_CRS_PowerOffset;
    var template (omit) NB_EutraControlRegionSize_Type v_NB_EutraControlRegionSize;
    var template (value) NB_OperationModeInfo_Type v_OperationMode;
    var template (value) SchedulingInfoList_NB_r13 v_SchedulingInfoList;
    var SIB_MappingInfo_NB_r13 v_SIB_MappingInfo_SI2;
    var SIB_MappingInfo_NB_r13 v_SIB_MappingInfo_SI3;
    var NB_CarrierFreq_Type v_CarrierFreq := fl_NBIOT_Get_CarrierFreq(p_CellId, p_FrequencyBand, p_OperationMode, p_CellsOnPLMN); // @sic R5-185113 sic@
    var integer v_UTCTimeInfoInSec := 0;
    var integer v_DayLightSavingTime := 0;
      
    select (p_OperationMode) {
      case (standalone) {
        v_OperationMode := cs_NB_OperationModeInfo_Standalone;
        v_NB_EutraControlRegionSize := omit;
        v_NRS_CRS_PowerOffset := dB0; //vzw_modified omit;
      }
      case (inband_samePCI) {
        v_OperationMode := cs_NB_OperationModeInfo_InBandSamePCI (fl_NBIOT_MIB_GetEUTRA_CRS_SequenceInfo(p_FrequencyBand)); // @sic R5-181295 sic@
        v_NB_EutraControlRegionSize := n2;
        v_NRS_CRS_PowerOffset := dB0;
      }
      case (inband_differentPCI) {
        v_OperationMode := cs_NB_OperationModeInfo_InBandDifferentPCI (fl_NBIOT_MIB_GetRasterOffset (p_CellId, p_FrequencyBand, p_OperationMode, p_CellsOnPLMN)); // @sic R5-176998 R5s180571 sic@
        v_NB_EutraControlRegionSize := n2;
        v_NRS_CRS_PowerOffset := omit;
      }
      case (guardband) {
        v_OperationMode := cs_NB_OperationModeInfo_GuardBand (fl_NBIOT_MIB_GetRasterOffset (p_CellId, p_FrequencyBand, p_OperationMode, p_CellsOnPLMN)); // @sic R5-176998 R5s180571 sic@
        v_NB_EutraControlRegionSize := omit;
        v_NRS_CRS_PowerOffset := omit;
      }
    }
    // --- Initialise MIB ---
    v_MIB :=  cs_508_MasterInformationBlock_NB_Init(v_OperationMode);
    
    // --- Initialise SIB1 ---
    // -- A default scheduling assigned ----------
    v_SIB1 := cs_508_SystemInformationBlockType1_NB_Def(p_PLMN_Identity,
                                                        p_TrackingAreaCode,
                                                        p_CellIdentity,
                                                        p_FrequencyBand,
                                                        v_NB_EutraControlRegionSize,
                                                        v_NRS_CRS_PowerOffset,
                                                        cs_SchedulingInfo_NB_1SI);
    
     
      
    // --- Initialise SIB2 ---
    
    v_SIB2 := cs_SI_NB_SIB2(f_NBIOT_InitSystemInformation2(p_CellId, p_FrequencyBand, p_OperationMode, p_CellsOnPLMN));
    v_SI_List[0] := cs_SystemInformation_Common_NB(v_SIB2);
    
    // --- Initialise all SYSINFO --
    if (p_Combination == c1) {
      v_SchedulingInfoList := cs_SchedulingInfo_NB_1SI;
    } else if (p_Combination == c5) { // @sic R5-185113 sic@
      v_SI_List[1] := cs_SystemInformation_Common_NB(cs_SI_NB_SIB20(cs_508_SystemInformationBlockType20_NB_Def));
      v_SchedulingInfoList := cs_SchedulingInfo_NB_2SI({sibType20_NB_r14});
    } else if (p_Combination == c6) { // @sic R5-185113 sic@
      v_SI_List[1] := cs_SystemInformation_Common_NB(cs_SI_NB_SIB22(cs_508_SystemInformationBlockType22_NB_Def(cs_DL_CarrierConfigCommon_NB_r14(v_CarrierFreq.DL.carrierFreq_r13, v_CarrierFreq.DL.carrierFreqOffset_r13), v_CarrierFreq.UL)));
      v_SchedulingInfoList := cs_SchedulingInfo_NB_2SI({sibType22_NB_r14});
    }else if (p_Combination == c7) { // @sic R5-185113 sic@
      //Get current system time and convert to UTC format
          v_UTCTimeInfoInSec := f_GetUTCtimeInfo(v_DayLightSavingTime);    
           v_SI_List[1] := cs_SystemInformation_Common_NB(cs_SI_NB_SIB16(cs_SystemInformationBlockType16_NB_Def(v_UTCTimeInfoInSec,int2bit(v_DayLightSavingTime,2))));
           v_SchedulingInfoList := cs_SchedulingInfo_NB_2SI({sibType16_NB_r13});
   
           }else if(p_Combination == c2){
               v_SI_List[1] := cs_SystemInformation_Common_NB(cs_SI_NB_SIB3(cs_508_SystemInformationBlockType3_NB_Def));
              v_SchedulingInfoList := cs_SchedulingInfo_NB_2SI({sibType3_NB_r13});
   
           }  else {
      // --- Initialise SIB3 ---
      v_SIB_MappingInfo_SI2 := {sibType3_NB_r13};
      v_SIB_SI2 := cs_SI_NB_SIB3(cs_508_SystemInformationBlockType3_NB_Def);
      
      select (p_Combination) { // @sic R5-185113 sic@
        case (c2) { // SIB3 & SIB4 Intra-Frequency
          v_SIB_MappingInfo_SI3 := {sibType4_NB_r13};
          v_SIB_SI3 := cs_SI_NB_SIB4(cs_508_SystemInformationBlockType4_NB_Def);
        }
        case (c3) { // SIB 3 & SIB5 Inter-Frequency
          v_SIB_MappingInfo_SI3 := {sibType5_NB_r13};
          v_SIB_SI3 := cs_SI_NB_SIB5(f_NBIOT_InitSystemInformation5(p_CellId, p_FrequencyBand, p_OperationMode));
        }
        case (c4) { // SIB 3 & 14
          v_SIB_MappingInfo_SI3 := {sibType14_NB_r13};
          v_SIB_SI3 := cs_SI_NB_SIB14(cs_SystemInformationBlockType14_NB_Def);
        }
         /* case (c7) { // SIB 3 & 16
          v_SIB_MappingInfo_SI3 := {sibType16_NB_r13};
          //Get current system time and convert to UTC format
          v_UTCTimeInfoInSec := f_GetUTCtimeInfo(v_DayLightSavingTime);    
   
          v_SIB_SI3 := cs_SI_NB_SIB16(cs_SystemInformationBlockType16_NB_Def(v_UTCTimeInfoInSec,int2bit(v_DayLightSavingTime,2)));
        }*/
        case else {
          FatalError(__FILE__, __LINE__, "invalid sysinfo combination");
        }
      }
      v_SI_List[1] := cs_SystemInformation_Common_NB(v_SIB_SI2);
      v_SI_List[2] := cs_SystemInformation_Common_NB(v_SIB_SI3);
      v_SchedulingInfoList := cs_SchedulingInfo_NB_3SI(-, -, -, v_SIB_MappingInfo_SI2, -, -, -, v_SIB_MappingInfo_SI3);
    }
    v_SIB1.message_.c1.systemInformationBlockType1_r13.schedulingInfoList_r13 := v_SchedulingInfoList;
    v_CellBcchInfo := cs_BCCHInfo_NB_C1(v_MIB, v_SIB1, v_SI_List);
    
    return v_CellBcchInfo;
  }

  /*
   * @desc      To update Cells information with SIB5 for the specific requirements of test case 22.5.13
   * @param     p_CellId
   * @param     p_SystemInformation5
   * @param     p_FrequencyBand     (default value: px_ePrimaryFrequencyBand)
   * @param     p_CellsOnPLMN       (default value: LTE_AllCellsOnSamePLMN)
   * @status    APPROVED (NBIOT)
   */
  function f_NBIOT_ChangeSIB5_Combination3(NBIOT_CellId_Type p_CellId,
                                           template (value) SystemInformationBlockType5_NB_r13 p_SystemInformation5,
                                           integer p_FrequencyBand := px_ePrimaryFrequencyBand,
                                           EUTRA_NAS_NumOfPLMN_Type p_CellsOnPLMN := LTE_AllCellsOnSamePLMN) runs on NBIOT_PTC // @sic R5s180571 sic@
  {
    var template (value) NB_BcchInfo_Type v_CellBcchInfo;
    var template (value) BCCH_BCH_Message_NB v_MIB;
    var template (value) BCCH_DL_SCH_Message_NB v_SIB1;
    var template (value) NB_SI_List_Type v_SI_List;
    var template (value) SystemInformation_NB_r13_IEs v_SIB2;
    var template (value) SystemInformation_NB_r13_IEs v_SIB_SI2;
    var template (value) SystemInformation_NB_r13_IEs v_SIB_SI3;
    var template (omit) NRS_CRS_PowerOffset_Type v_NRS_CRS_PowerOffset;
    var template (omit) NB_EutraControlRegionSize_Type v_NB_EutraControlRegionSize;
    var template (value) NB_OperationModeInfo_Type v_OperationMode;
    var template (value) SchedulingInfoList_NB_r13 v_SchedulingInfoList;
    var SIB_MappingInfo_NB_r13 v_SIB_MappingInfo_SI2;
    var SIB_MappingInfo_NB_r13 v_SIB_MappingInfo_SI3;
    var NB_OperationMode_Type v_TypeOperationMode := f_NBIOT_OperationMode();
    var EUTRA_ASN1_TrackingAreaCode_Type v_TAC_CellId := f_NBIOT_CellInfo_GetTAC (p_CellId);
    var EUTRA_ASN1_CellIdentity_Type v_CellIdentity := f_NBIOT_CellInfo_GetCellIdentity(p_CellId);
    var GutiParameters_Type v_Guti_Params := f_NBIOT_CellInfo_GetGuti(p_CellId);
    var template (value) PLMN_IdentityList_NB_r13 v_PLMN_Identity := { f_NBIOT_PLMN_Identity(v_Guti_Params.PLMN_Identity, false) };  //VZW NBIOT AllowAttachWithoutPDN = FALSE CONTROL_PLANE
    
    select (v_TypeOperationMode) {
      case (standalone) {
        v_OperationMode := cs_NB_OperationModeInfo_Standalone;
        v_NB_EutraControlRegionSize := omit;
        v_NRS_CRS_PowerOffset := omit;
      }
      case (inband_samePCI) {
        v_OperationMode := cs_NB_OperationModeInfo_InBandSamePCI (fl_NBIOT_MIB_GetEUTRA_CRS_SequenceInfo(p_FrequencyBand)); // @sic R5-181295 sic@
        v_NB_EutraControlRegionSize := n2;
        v_NRS_CRS_PowerOffset := dB0;
      }
      case (inband_differentPCI) {
        v_OperationMode := cs_NB_OperationModeInfo_InBandDifferentPCI (fl_NBIOT_MIB_GetRasterOffset (p_CellId, p_FrequencyBand, v_TypeOperationMode, p_CellsOnPLMN)); // @sic R5-176998 sic@
        v_NB_EutraControlRegionSize := n2;
        v_NRS_CRS_PowerOffset := omit;
      }
      case (guardband) {
        v_OperationMode := cs_NB_OperationModeInfo_GuardBand (fl_NBIOT_MIB_GetRasterOffset (p_CellId, p_FrequencyBand, v_TypeOperationMode, p_CellsOnPLMN)); // @sic R5-176998 R5s180571 sic@
        v_NB_EutraControlRegionSize := omit;
        v_NRS_CRS_PowerOffset := omit;
      }
    }
    // --- Initialise MIB ---
    v_MIB :=  cs_508_MasterInformationBlock_NB_Init(v_OperationMode);
    
    // --- Initialise SIB1 ---
    // -- A default scheduling assigned ----------
    v_SIB1 := cs_508_SystemInformationBlockType1_NB_Def(v_PLMN_Identity,
                                                        v_TAC_CellId,
                                                        v_CellIdentity,
                                                        p_FrequencyBand,
                                                        v_NB_EutraControlRegionSize,
                                                        v_NRS_CRS_PowerOffset,
                                                        cs_SchedulingInfo_NB_1SI);
    // --- Initialise SIB2 ---
    v_SIB2 := cs_SI_NB_SIB2(f_NBIOT_InitSystemInformation2(p_CellId, p_FrequencyBand, v_TypeOperationMode, p_CellsOnPLMN)); // @sic R5s180571 sic@
    v_SI_List[0] := cs_SystemInformation_Common_NB(v_SIB2);
    
    // --- Initialise SIB3 ---
    v_SIB_MappingInfo_SI2 := {sibType3_NB_r13};
    v_SIB_SI2 := cs_SI_NB_SIB3(cs_508_SystemInformationBlockType3_NB_Def);
    
    // SIB 3 & SIB5 Inter-Frequency
    v_SIB_MappingInfo_SI3 := {sibType5_NB_r13};
    v_SIB_SI3 := cs_SI_NB_SIB5(p_SystemInformation5);
    
    v_SI_List[1] := cs_SystemInformation_Common_NB(v_SIB_SI2);
    v_SI_List[2] := cs_SystemInformation_Common_NB(v_SIB_SI3);
    v_SchedulingInfoList := cs_SchedulingInfo_NB_3SI(-, -, -, v_SIB_MappingInfo_SI2, -, -, -, v_SIB_MappingInfo_SI3);
    
    v_SIB1.message_.c1.systemInformationBlockType1_r13.schedulingInfoList_r13 := v_SchedulingInfoList;
    v_CellBcchInfo := cs_BCCHInfo_NB_C1(v_MIB, v_SIB1, v_SI_List);
    f_NBIOT_CellInfo_SetBCCH_Info(p_CellId, v_CellBcchInfo);
    f_NBIOT_CellInfo_SetCombination(p_CellId, c3);
  }

  /*
   * @desc      Initialise NAS parameters for RRC cells as per 36.508 Table 8.1.4.2-2
   * @param     p_CellId
   * @return    NAS_Parameter_Type
   * @status    APPROVED (NBIOT)
   */
  function fl_NBIOT_InitNAS_forRRC_Cells(NBIOT_CellId_Type p_CellId) return NAS_Parameter_Type
  {
    var template (value) NAS_Parameter_Type v_NAS_Param;
    var integer v_MmeGroupId := 32769;
    var integer v_MmeCode := 1;
    
    select (p_CellId){
      case (nbiot_Cell1, nbiot_Cell2, nbiot_Cell3, nbiot_Cell4, nbiot_Cell6, nbiot_Cell10, nbiot_Cell18) { // @sic R5-176139 sic@
        v_NAS_Param.TrackingAreaCode := int2bit(1, 16);
        v_NAS_Param.Guti_Parameters := cs_Guti(cs_HPLMN_Def, v_MmeGroupId, v_MmeCode);
      }
      case (nbiot_Cell5, nbiot_Cell11, nbiot_Cell23) { // @sic R5-176139 sic@
        v_NAS_Param.TrackingAreaCode := int2bit(2, 16);
        v_NAS_Param.Guti_Parameters := cs_Guti(cs_HPLMN_Def, v_MmeGroupId, v_MmeCode);
      }
      case (nbiot_Cell12){
        v_NAS_Param.TrackingAreaCode := int2bit(1, 16);
        v_NAS_Param.Guti_Parameters := cs_Guti(cs_HPLMN_002_11, v_MmeGroupId, v_MmeCode);
      }
      case (nbiot_Cell13){
        v_NAS_Param.TrackingAreaCode := int2bit(1, 16);
        v_NAS_Param.Guti_Parameters := cs_Guti(cs_HPLMN_003_21, v_MmeGroupId, v_MmeCode);
      }
      case (nbiot_Cell14){
        v_NAS_Param.TrackingAreaCode := int2bit(1, 16);
        v_NAS_Param.Guti_Parameters := cs_Guti(cs_HPLMN_004_31, v_MmeGroupId, v_MmeCode);
      }
      case else {
        FatalError(__FILE__, __LINE__, "invalid cell Identity");
      }
    }

    // Initialise Location Area Id
    v_NAS_Param.LocationAreaCode := tsc_LAC_Def;
    
    return valueof(v_NAS_Param);
  }

  /*
   * @desc      Initialise NAS parameters for NAS cells as per 36.508 Table
   * @param     p_CellId
   * @return    NAS_Parameter_Type
   * @status    APPROVED (NBIOT)
   */
  function fl_NBIOT_InitNAS_forNAS_Cells(NBIOT_CellId_Type p_CellId)
    return NAS_Parameter_Type
  {
    var template (value) NAS_Parameter_Type v_NAS_Param;
    
    select (p_CellId){
      case (nbiot_Cell50) {
        v_NAS_Param.TrackingAreaCode := int2bit (1, 16);
        v_NAS_Param.Guti_Parameters := cs_Guti(cs_HPLMN_Def, 32769, 1);
      }
      case (nbiot_Cell51) {
        v_NAS_Param.TrackingAreaCode := int2bit (2, 16);
        v_NAS_Param.Guti_Parameters := cs_Guti(cs_HPLMN_Def, 32770, 1);
      }
      case (nbiot_Cell52) {
        v_NAS_Param.TrackingAreaCode := int2bit (3, 16);
        v_NAS_Param.Guti_Parameters := cs_Guti(cs_HPLMN_Def, 32771, 1);
      }
      case (nbiot_Cell53) {
        v_NAS_Param.TrackingAreaCode := int2bit (4, 16);
        v_NAS_Param.Guti_Parameters := cs_Guti(cs_HPLMN_Def, 32772, 1);
      }
      case (nbiot_Cell54) {
        v_NAS_Param.TrackingAreaCode := int2bit (3, 16);
        v_NAS_Param.Guti_Parameters := cs_Guti(cs_HPLMN_002_101, 32777, 1);
      }
      case (nbiot_Cell55) {
        v_NAS_Param.TrackingAreaCode := int2bit (1, 16);
        v_NAS_Param.Guti_Parameters := cs_Guti(cs_HPLMN_001_02, 32775, 1);
      }
      case (nbiot_Cell56) {
        v_NAS_Param.TrackingAreaCode := int2bit (2, 16);
        v_NAS_Param.Guti_Parameters := cs_Guti(cs_HPLMN_001_02, 32776, 1);
      }
      case (nbiot_Cell57) {
        v_NAS_Param.TrackingAreaCode := int2bit (1, 16);
        v_NAS_Param.Guti_Parameters := cs_Guti(cs_HPLMN_002_101, 32777, 1);
      }
      case (nbiot_Cell58) {
        v_NAS_Param.TrackingAreaCode := int2bit (1, 16);
        v_NAS_Param.Guti_Parameters := cs_Guti(cs_HPLMN_003_101, 32778, 1);
      }
      case (nbiot_Cell59) {
        v_NAS_Param.TrackingAreaCode := int2bit (1, 16);
        v_NAS_Param.Guti_Parameters := cs_Guti(cs_HPLMN_002_101, 32777, 1);
      }
      case (nbiot_Cell60) {
        v_NAS_Param.TrackingAreaCode := int2bit (2, 16);
        v_NAS_Param.Guti_Parameters := cs_Guti(cs_HPLMN_002_101, 32779, 1);
      }
      case (nbiot_Cell61) {
        v_NAS_Param.TrackingAreaCode := int2bit (1, 16);
        v_NAS_Param.Guti_Parameters := cs_Guti(cs_HPLMN_Def, 32769, 1);
      }
      case (nbiot_Cell62) {
        v_NAS_Param.TrackingAreaCode := int2bit (1, 16);
        v_NAS_Param.Guti_Parameters := cs_Guti(cs_HPLMN_001_02, 32775, 1);
      }
      case (nbiot_Cell63) {
        v_NAS_Param.TrackingAreaCode := int2bit (1, 16);
        v_NAS_Param.Guti_Parameters := cs_Guti(cs_HPLMN_001_03, 32770, 1);
      }
      
      case else {
        FatalError(__FILE__, __LINE__, "invalid cell Idendtity");
      }
    }
    
    // Initialise Location Area Id
    v_NAS_Param.LocationAreaCode := tsc_LAC_Def;
    
    return valueof(v_NAS_Param);  // Note: valueof cannot be avoided here
  }

  /*
   * @desc      Initialise cell info for one cell
   * @param     p_CellId
   * @param     p_FrequencyBand
   * @param     p_SysinfoCombination
   * @param     p_DoAttachWithoutPDN
   * @param     p_SubCarrierSpacingUL
   * @return    NBIOT_CellInfo_Type
   * @status    APPROVED (NBIOT)
   */
  function f_NBIOT_CellInfo_Init(NBIOT_CellId_Type  p_CellId,
                                 integer  p_FrequencyBand,
                                 NB_Combination_Type p_SysinfoCombination,
                                 boolean p_DoAttachWithoutPDN,
                                 NB_SubCarrierSpacingUL_Type p_SubCarrierSpacingUL) return NBIOT_CellInfo_Type
  {
    var NB_CellIdentities_Type v_CellIds  := fl_NBIOT_InitCellIdentities(p_CellId);
    var CellTimingInfo_Type v_CellTiming := fl_NBIOT_InitialiseCellTiming(p_CellId);
    var NB_Combination_Type v_SysinfoCombination := fl_NBIOT_CheckSysinfoCombination(p_CellId, p_SysinfoCombination);
    var NB_CarrierFreq_Type v_UL_DL_Earfcn;
    var NAS_Parameter_Type v_NAS_Param;
    var template (value) NB_BcchInfo_Type  v_BCCH_Info;
    var template (value) NBIOT_CellInfo_Type v_CellInfo;

    var NB_OperationMode_Type v_OperationMode := f_NBIOT_OperationMode();

    // Initialise Frequencies f1/f2/f3/f5
    var NBIOT_Frequency_fList_Type v_Freq := f_NBIOT_InitFrequency_f1Tof3 (p_FrequencyBand, v_OperationMode); // @sic R5-171561, R5s170339 sic@
    
    // Initialised Frequency per cell. See 36.508 Table 8.1.4.2-1
    // Cell 1/2/4/11 -> Frequency f1
    // Cell 3/12/23 -> Frequency f2
    // Cell 6/13 -> Frequency f3
    // Cell 10 -> Frequency f5
    select (p_CellId) {
      case (nbiot_Cell1,
            nbiot_Cell2,
            nbiot_Cell4,
            nbiot_Cell5,
            nbiot_Cell10,
            nbiot_Cell11,
            nbiot_Cell18) { // @sic R5-176139 sic@
        v_UL_DL_Earfcn := v_Freq.f1;   //f1
      }
      case (nbiot_Cell3,
            nbiot_Cell12,
            nbiot_Cell23) {
        v_UL_DL_Earfcn := v_Freq.f2;  // f2
      }
      case (nbiot_Cell6, nbiot_Cell13) {
        v_UL_DL_Earfcn := v_Freq.f3;   // f3
      }
      case (nbiot_Cell14) {
        FatalError (__FILE__, __LINE__, "invalid cell Identity"); // @sic R5-171561 sic@
      }
      case else {
        FatalError (__FILE__, __LINE__, "invalid cell Identity");
      }
    }
    
    // Initialise NAS parameters
    v_NAS_Param := fl_NBIOT_InitNAS_forRRC_Cells(p_CellId);
    
    // Initialise SYSINFO
    v_BCCH_Info := f_NBIOT_InitSystemInformation(p_CellId,
                                                 v_CellIds.CellIdentity,
                                                 v_SysinfoCombination,
                                                 p_FrequencyBand,
                                                 v_OperationMode,
                                                 { f_NBIOT_PLMN_Identity(v_NAS_Param.Guti_Parameters.PLMN_Identity, p_DoAttachWithoutPDN) },
                                                 v_NAS_Param.TrackingAreaCode);
    
    v_CellInfo := cs_NBIOT_CellInfoDef(v_CellIds,
                                       v_SysinfoCombination,
                                       p_FrequencyBand,
                                       v_UL_DL_Earfcn,
                                       v_NAS_Param,
                                       v_BCCH_Info,
                                       v_CellTiming,
                                       p_SubCarrierSpacingUL,
                                       fl_NBIOT_Get_EUTRACarrierFreq(p_CellId)); // @sic R5w180205r1 sic@
     
    return valueof(v_CellInfo);
  }

  /*
   * @desc      Initialise all NBIOT cell info
   * @param     p_SysinfoCombination
   * @param     p_DoAttachWithoutPDN
   * @return    NBIOT_CellInfoList_Type
   * @status    APPROVED (NBIOT)
   */
  function f_NBIOT_CellArray_Init(NB_Combination_Type p_SysinfoCombination,
                                  boolean p_DoAttachWithoutPDN) return NBIOT_CellInfoList_Type
  {
    var NBIOT_CellInfoList_Type v_NBIOT_Cells;
    var integer v_Index;
    var integer v_PrimaryFrequencyBand := px_ePrimaryFrequencyBand;
    var integer v_SecondaryFrequencyBand := px_eSecondaryFrequencyBand;
    var NB_SubCarrierSpacingUL_Type v_SubCarrierSpacingUL := subCarrierSpacing_15kHz;
    
     
      
      
    v_Index := f_NBIOT_CellInfo_GetIndex(nbiot_Cell1);
    v_NBIOT_Cells[v_Index] := f_NBIOT_CellInfo_Init(nbiot_Cell1,
                                                    v_PrimaryFrequencyBand,
                                                    p_SysinfoCombination,
                                                    p_DoAttachWithoutPDN,
                                                    v_SubCarrierSpacingUL);
    
    v_Index := f_NBIOT_CellInfo_GetIndex(nbiot_Cell2);
    v_NBIOT_Cells[v_Index] := f_NBIOT_CellInfo_Init(nbiot_Cell2,
                                                    v_PrimaryFrequencyBand,
                                                    p_SysinfoCombination,
                                                    p_DoAttachWithoutPDN,
                                                    v_SubCarrierSpacingUL);
    
    v_Index := f_NBIOT_CellInfo_GetIndex(nbiot_Cell3);
    v_NBIOT_Cells[v_Index] := f_NBIOT_CellInfo_Init(nbiot_Cell3,
                                                    v_PrimaryFrequencyBand,
                                                    p_SysinfoCombination,
                                                    p_DoAttachWithoutPDN,
                                                    v_SubCarrierSpacingUL);
    
    v_Index := f_NBIOT_CellInfo_GetIndex(nbiot_Cell4);
    v_NBIOT_Cells[v_Index] := f_NBIOT_CellInfo_Init(nbiot_Cell4,
                                                    v_PrimaryFrequencyBand,
                                                    p_SysinfoCombination,
                                                    p_DoAttachWithoutPDN,
                                                    v_SubCarrierSpacingUL);
    
    v_Index := f_NBIOT_CellInfo_GetIndex(nbiot_Cell5); // @sic R5-176139 sic@
    v_NBIOT_Cells[v_Index] := f_NBIOT_CellInfo_Init(nbiot_Cell5,
                                                    v_PrimaryFrequencyBand,
                                                    p_SysinfoCombination,
                                                    p_DoAttachWithoutPDN,
                                                    v_SubCarrierSpacingUL);
    
    v_Index := f_NBIOT_CellInfo_GetIndex(nbiot_Cell6);
    v_NBIOT_Cells[v_Index] := f_NBIOT_CellInfo_Init(nbiot_Cell6,
                                                    v_PrimaryFrequencyBand,
                                                    p_SysinfoCombination,
                                                    p_DoAttachWithoutPDN,
                                                    v_SubCarrierSpacingUL);
    
    v_Index := f_NBIOT_CellInfo_GetIndex(nbiot_Cell10);
    v_NBIOT_Cells[v_Index] := f_NBIOT_CellInfo_Init(nbiot_Cell10,
                                                    v_SecondaryFrequencyBand,
                                                    p_SysinfoCombination,
                                                    p_DoAttachWithoutPDN,
                                                    v_SubCarrierSpacingUL);
    
    v_Index := f_NBIOT_CellInfo_GetIndex(nbiot_Cell11);
    v_NBIOT_Cells[v_Index] := f_NBIOT_CellInfo_Init(nbiot_Cell11,
                                                    v_PrimaryFrequencyBand,
                                                    p_SysinfoCombination,
                                                    p_DoAttachWithoutPDN,
                                                    v_SubCarrierSpacingUL);
    
    v_Index := f_NBIOT_CellInfo_GetIndex(nbiot_Cell12);
    v_NBIOT_Cells[v_Index] := f_NBIOT_CellInfo_Init(nbiot_Cell12,
                                                    v_PrimaryFrequencyBand,
                                                    p_SysinfoCombination,
                                                    p_DoAttachWithoutPDN,
                                                    v_SubCarrierSpacingUL);
    
    v_Index := f_NBIOT_CellInfo_GetIndex(nbiot_Cell13);
    v_NBIOT_Cells[v_Index] := f_NBIOT_CellInfo_Init(nbiot_Cell13,
                                                    v_PrimaryFrequencyBand,
                                                    p_SysinfoCombination,
                                                    p_DoAttachWithoutPDN,
                                                    v_SubCarrierSpacingUL);
    
    v_Index := f_NBIOT_CellInfo_GetIndex(nbiot_Cell14);
    /*v_NBIOT_Cells[v_Index] := f_NBIOT_CellInfo_Init(nbiot_Cell14,    FFS   Waiting for a prose CR to 36.508 to delete this cell
                                                    v_PrimaryFrequencyBand,
                                                    p_SysinfoCombination,
                                                    p_DoAttachWithoutPDN,
                                                    v_SubCarrierSpacingUL); */
    
    v_Index := f_NBIOT_CellInfo_GetIndex(nbiot_Cell18); // @sic R5-176139 sic@
    v_NBIOT_Cells[v_Index] := f_NBIOT_CellInfo_Init(nbiot_Cell18,
                                                    v_PrimaryFrequencyBand,
                                                    p_SysinfoCombination,
                                                    p_DoAttachWithoutPDN,
                                                    v_SubCarrierSpacingUL);
    
    v_Index := f_NBIOT_CellInfo_GetIndex(nbiot_Cell23);
    v_NBIOT_Cells[v_Index] := f_NBIOT_CellInfo_Init(nbiot_Cell23,
                                                    v_PrimaryFrequencyBand,
                                                    p_SysinfoCombination,
                                                    p_DoAttachWithoutPDN,
                                                    v_SubCarrierSpacingUL);
     
    
    return v_NBIOT_Cells;
  }

  /*
   * @desc      Initialise all NBIOT cell info for NAS test cases
   * @param     p_NBIOT_Cells
   * @param     p_CellsOnPLMN
   * @param     p_SysinfoCombination
   * @param     p_DoAttachWithoutPDN
   * @param     p_CellSpecialFreq
   * @return    NBIOT_CellInfoList_Type
   * @status    APPROVED (NBIOT)
   */
  function f_NBIOT_NAS_CellArray_Init(NBIOT_CellInfoList_Type p_NBIOT_Cells,
                                      EUTRA_NAS_NumOfPLMN_Type  p_CellsOnPLMN,
                                      NB_Combination_Type p_SysinfoCombination,
                                      boolean p_DoAttachWithoutPDN,
                                      EUTRA_NAS_CellSpecialFreq p_CellSpecialFreq) return NBIOT_CellInfoList_Type
  {
    var integer v_Index;
    var NB_SubCarrierSpacingUL_Type v_SubCarrierSpacingUL := subCarrierSpacing_15kHz;
    
    v_Index := f_NBIOT_CellInfo_GetIndex (nbiot_Cell50);
    p_NBIOT_Cells[v_Index] := fl_NBIOT_NAS_CellInfo_Init(nbiot_Cell50,
                                                         p_CellsOnPLMN,
                                                         p_SysinfoCombination,
                                                         px_ePrimaryFrequencyBand,
                                                         p_DoAttachWithoutPDN,
                                                         v_SubCarrierSpacingUL,
                                                         p_CellSpecialFreq);
    v_Index := f_NBIOT_CellInfo_GetIndex (nbiot_Cell51);
    p_NBIOT_Cells[v_Index] := fl_NBIOT_NAS_CellInfo_Init(nbiot_Cell51,
                                                         p_CellsOnPLMN,
                                                         p_SysinfoCombination,
                                                         px_ePrimaryFrequencyBand,
                                                         p_DoAttachWithoutPDN,
                                                         v_SubCarrierSpacingUL,
                                                         p_CellSpecialFreq);
    v_Index := f_NBIOT_CellInfo_GetIndex (nbiot_Cell52);
    p_NBIOT_Cells[v_Index] := fl_NBIOT_NAS_CellInfo_Init(nbiot_Cell52,
                                                         p_CellsOnPLMN,
                                                         p_SysinfoCombination,
                                                         px_ePrimaryFrequencyBand,
                                                         p_DoAttachWithoutPDN,
                                                         v_SubCarrierSpacingUL,
                                                         p_CellSpecialFreq);
    v_Index := f_NBIOT_CellInfo_GetIndex (nbiot_Cell53);
    p_NBIOT_Cells[v_Index] := fl_NBIOT_NAS_CellInfo_Init(nbiot_Cell53,
                                                         p_CellsOnPLMN,
                                                         p_SysinfoCombination,
                                                         px_ePrimaryFrequencyBand,
                                                         p_DoAttachWithoutPDN,
                                                         v_SubCarrierSpacingUL,
                                                         p_CellSpecialFreq);
    v_Index := f_NBIOT_CellInfo_GetIndex (nbiot_Cell61);
    p_NBIOT_Cells[v_Index] := fl_NBIOT_NAS_CellInfo_Init(nbiot_Cell61,
                                                         p_CellsOnPLMN,
                                                         p_SysinfoCombination,
                                                         px_ePrimaryFrequencyBand,
                                                         p_DoAttachWithoutPDN,
                                                         v_SubCarrierSpacingUL,
                                                         p_CellSpecialFreq);
    if (p_CellsOnPLMN == LTE_CellsOnDifferentPLMN) {
      v_Index := f_NBIOT_CellInfo_GetIndex (nbiot_Cell50);
      p_NBIOT_Cells[v_Index] := fl_NBIOT_NAS_CellInfo_Init(nbiot_Cell50,
                                                           p_CellsOnPLMN,
                                                           p_SysinfoCombination,
                                                           px_ePrimaryFrequencyBand,
                                                           p_DoAttachWithoutPDN,
                                                           v_SubCarrierSpacingUL,
                                                           p_CellSpecialFreq);
      v_Index := f_NBIOT_CellInfo_GetIndex (nbiot_Cell51);
      p_NBIOT_Cells[v_Index] := fl_NBIOT_NAS_CellInfo_Init(nbiot_Cell51,
                                                           p_CellsOnPLMN,
                                                           p_SysinfoCombination,
                                                           px_ePrimaryFrequencyBand,
                                                           p_DoAttachWithoutPDN,
                                                           v_SubCarrierSpacingUL,
                                                           p_CellSpecialFreq);
      v_Index := f_NBIOT_CellInfo_GetIndex (nbiot_Cell52);
      p_NBIOT_Cells[v_Index] := fl_NBIOT_NAS_CellInfo_Init(nbiot_Cell52,
                                                           p_CellsOnPLMN,
                                                           p_SysinfoCombination,
                                                           px_ePrimaryFrequencyBand,
                                                           p_DoAttachWithoutPDN,
                                                           v_SubCarrierSpacingUL,
                                                           p_CellSpecialFreq);
      v_Index := f_NBIOT_CellInfo_GetIndex (nbiot_Cell53);
      p_NBIOT_Cells[v_Index] := fl_NBIOT_NAS_CellInfo_Init(nbiot_Cell53,
                                                           p_CellsOnPLMN,
                                                           p_SysinfoCombination,
                                                           px_ePrimaryFrequencyBand,
                                                           p_DoAttachWithoutPDN,
                                                           v_SubCarrierSpacingUL,
                                                           p_CellSpecialFreq);
      v_Index := f_NBIOT_CellInfo_GetIndex (nbiot_Cell54);
      p_NBIOT_Cells[v_Index] := fl_NBIOT_NAS_CellInfo_Init(nbiot_Cell54,
                                                           p_CellsOnPLMN,
                                                           p_SysinfoCombination,
                                                           px_ePrimaryFrequencyBand,
                                                           p_DoAttachWithoutPDN,
                                                           v_SubCarrierSpacingUL,
                                                           p_CellSpecialFreq);
      v_Index := f_NBIOT_CellInfo_GetIndex (nbiot_Cell55);
      p_NBIOT_Cells[v_Index] := fl_NBIOT_NAS_CellInfo_Init(nbiot_Cell55,
                                                           p_CellsOnPLMN,
                                                           p_SysinfoCombination,
                                                           px_ePrimaryFrequencyBand,
                                                           p_DoAttachWithoutPDN,
                                                           v_SubCarrierSpacingUL,
                                                           p_CellSpecialFreq);
      v_Index := f_NBIOT_CellInfo_GetIndex (nbiot_Cell56);
      p_NBIOT_Cells[v_Index] := fl_NBIOT_NAS_CellInfo_Init(nbiot_Cell56,
                                                           p_CellsOnPLMN,
                                                           p_SysinfoCombination,
                                                           px_ePrimaryFrequencyBand,
                                                           p_DoAttachWithoutPDN,
                                                           v_SubCarrierSpacingUL,
                                                           p_CellSpecialFreq);
      v_Index := f_NBIOT_CellInfo_GetIndex (nbiot_Cell57);
      p_NBIOT_Cells[v_Index] := fl_NBIOT_NAS_CellInfo_Init(nbiot_Cell57,
                                                           p_CellsOnPLMN,
                                                           p_SysinfoCombination,
                                                           px_ePrimaryFrequencyBand,
                                                           p_DoAttachWithoutPDN,
                                                           v_SubCarrierSpacingUL,
                                                           p_CellSpecialFreq);
      v_Index := f_NBIOT_CellInfo_GetIndex (nbiot_Cell58);
     /* p_NBIOT_Cells[v_Index] := fl_NBIOT_NAS_CellInfo_Init(nbiot_Cell58,  FFS   Waiting for a prose CR to 36.508 to delete this cell
                                                           p_CellsOnPLMN,
                                                           p_SysinfoCombination,
                                                           px_ePrimaryFrequencyBand,
                                                           p_DoAttachWithoutPDN,
                                                           v_SubCarrierSpacingUL,
                                                           p_CellSpecialFreq); */
      v_Index := f_NBIOT_CellInfo_GetIndex (nbiot_Cell59);
      p_NBIOT_Cells[v_Index] := fl_NBIOT_NAS_CellInfo_Init(nbiot_Cell59,
                                                           p_CellsOnPLMN,
                                                           p_SysinfoCombination,
                                                           px_ePrimaryFrequencyBand,
                                                           p_DoAttachWithoutPDN,
                                                           v_SubCarrierSpacingUL,
                                                           p_CellSpecialFreq);
      v_Index := f_NBIOT_CellInfo_GetIndex (nbiot_Cell60);
      p_NBIOT_Cells[v_Index] := fl_NBIOT_NAS_CellInfo_Init(nbiot_Cell60,
                                                           p_CellsOnPLMN,
                                                           p_SysinfoCombination,
                                                           px_ePrimaryFrequencyBand,
                                                           p_DoAttachWithoutPDN,
                                                           v_SubCarrierSpacingUL,
                                                           p_CellSpecialFreq);
      v_Index := f_NBIOT_CellInfo_GetIndex (nbiot_Cell61);
      p_NBIOT_Cells[v_Index] := fl_NBIOT_NAS_CellInfo_Init(nbiot_Cell61,
                                                           p_CellsOnPLMN,
                                                           p_SysinfoCombination,
                                                           px_ePrimaryFrequencyBand,
                                                           p_DoAttachWithoutPDN,
                                                           v_SubCarrierSpacingUL,
                                                           p_CellSpecialFreq);
      v_Index := f_NBIOT_CellInfo_GetIndex (nbiot_Cell62);
      p_NBIOT_Cells[v_Index] := fl_NBIOT_NAS_CellInfo_Init(nbiot_Cell62,
                                                           p_CellsOnPLMN,
                                                           p_SysinfoCombination,
                                                           px_ePrimaryFrequencyBand,
                                                           p_DoAttachWithoutPDN,
                                                           v_SubCarrierSpacingUL,
                                                           p_CellSpecialFreq);
      v_Index := f_NBIOT_CellInfo_GetIndex (nbiot_Cell63);
      p_NBIOT_Cells[v_Index] := fl_NBIOT_NAS_CellInfo_Init(nbiot_Cell63,
                                                           p_CellsOnPLMN,
                                                           p_SysinfoCombination,
                                                           px_ePrimaryFrequencyBand,
                                                           p_DoAttachWithoutPDN,
                                                           v_SubCarrierSpacingUL,
                                                           p_CellSpecialFreq);
    }
    return p_NBIOT_Cells;
  }

  /*
   * @desc      Initialise cell info for one NAS cell
   * @param     p_CellId
   * @param     p_CellsOnPLMN
   * @param     p_SysinfoCombination
   * @param     p_FrequencyBand
   * @param     p_DoAttachWithoutPDN
   * @param     p_SubCarrierSpacingUL
   * @param     p_CellSpecialFreq
   * @return    NBIOT_CellInfo_Type
   * @status    APPROVED (NBIOT)
   */
  function fl_NBIOT_NAS_CellInfo_Init(NBIOT_CellId_Type        p_CellId,
                                      EUTRA_NAS_NumOfPLMN_Type p_CellsOnPLMN,
                                      NB_Combination_Type      p_SysinfoCombination,
                                      integer                  p_FrequencyBand,
                                      boolean p_DoAttachWithoutPDN,
                                      NB_SubCarrierSpacingUL_Type p_SubCarrierSpacingUL,
                                      EUTRA_NAS_CellSpecialFreq p_CellSpecialFreq) return NBIOT_CellInfo_Type
  {
    var NB_CellIdentities_Type v_CellIds  := fl_NBIOT_InitCellIdentities_NAS(p_CellId, p_CellsOnPLMN);
    var CellTimingInfo_Type  v_Celltiming := fl_NBIOT_InitialiseCellTiming (p_CellId, p_CellsOnPLMN);
    var NB_CarrierFreq_Type v_UL_DL_Earfcn;
    var NAS_Parameter_Type v_NAS_Param;
    var template (value) NB_BcchInfo_Type v_BCCH_Info;
    var template (value) NBIOT_CellInfo_Type v_CellInfo;
    var NB_Combination_Type v_SysinfoCombination := p_SysinfoCombination;
    
    var NB_OperationMode_Type v_OperationMode := f_NBIOT_OperationMode();

    // Initialise Frequencies f1/f2/f3
    var NBIOT_Frequency_fList_Type v_Freq := f_NBIOT_InitFrequency_f1Tof3 (px_ePrimaryFrequencyBand, v_OperationMode);
    
    // Initialise the Frequency of the cell.
    select (p_CellsOnPLMN) {
      case (LTE_AllCellsOnSamePLMN) {
        // If all cells in the test case are on the same PLMN
        // Acc. 36.508 Table 8.1.4.2-4
        // Cell 50/51/53 -> frequency f1
        // Cell 52/61 -> Frequency f2
        // others Cells: any value as other cells are on a different PLMN
        select (p_CellId) {
          case (nbiot_Cell50, nbiot_Cell51, nbiot_Cell53) {
            v_UL_DL_Earfcn := v_Freq.f1;   //f1
          }
          case (nbiot_Cell52, nbiot_Cell61) {
            v_UL_DL_Earfcn := v_Freq.f2;  //f2
          }
          case else {  // others Cells: not applicable as other cells are on a different PLMN
            v_UL_DL_Earfcn := v_Freq.f3;  //f3 Dummy value
          }
        }
      }
      case (LTE_CellsOnDifferentPLMN) {
        // If all cells in the test case are on differnt PLMN
        select (p_CellSpecialFreq) {
          case (LTE_NAS_NormalFreq) {   }
          case (LTE_NAS_Usef1_f2) {
            // Assign freq according to NOTE1 in 36.508 Table 8.1.4.2-5
            // f1 and f2 not being allocated to any cell in the test case, f1 is allocated, instead of f3
            v_Freq.f3 := v_Freq.f1;
          }
          case (LTE_NAS_Replacef3_f1) {
            // Assign freq according to NOTE1 in 36.508 Table 8.1.4.2-5
            // except that f3 is replaced by f1
            v_Freq.f3 := v_Freq.f1;
          }
          case (LTE_NAS_Replacef4_f1) {
            FatalError (__FILE__, __LINE__, "invalid value in p_CellSpecialFreq");
          }
          case (LTE_NAS_Replacef3_f2) {
            // Assign freq according to NOTE1 in 36.508 Table 8.1.4.2-5
            // except that f3 is replaced by f2
            v_Freq.f3 := v_Freq.f2;
          }
          case else {
            FatalError (__FILE__, __LINE__, "invalid value in p_CellSpecialFreq");
          }
        }
        // Acc. 36.508 Table 8.1.4.2-5
        // Cell 50/51/52/53/61/62/63 -> frequency f1
        // Cell 54/55/56 -> Frequency f2
        // Cell 57/59/60 -> Frequency f3
        // others Cells: no Other cells
        // The test frequency f3 is allocated to the cell if f1 and f2 are already allocated to the cells in the test.
        select (p_CellId) {
          case (nbiot_Cell50, nbiot_Cell51, nbiot_Cell52, nbiot_Cell53, nbiot_Cell61, nbiot_Cell62, nbiot_Cell63) {
            v_UL_DL_Earfcn := v_Freq.f1;     //f1
          }
          case (nbiot_Cell54, nbiot_Cell55, nbiot_Cell56) {
            v_UL_DL_Earfcn := v_Freq.f2;     //f2
          }
          case (nbiot_Cell57, nbiot_Cell59, nbiot_Cell60) {
            v_UL_DL_Earfcn := v_Freq.f3;     //f3
          }
          case else {
            FatalError (__FILE__, __LINE__, "invalid value in p_CellSpecialFreq"); // @sic R5-171561 sic@
          }
        }
      }
      case else {
        FatalError (__FILE__, __LINE__, "invalid value in p_CellSpecialFreq");
      }
    }
    
    // Initialise NAS parameters
    v_NAS_Param := fl_NBIOT_InitNAS_forNAS_Cells( p_CellId);
    
    // SIB5 is not valid
    if (p_SysinfoCombination == c3) { // @sic R5s170755 sic@
      if (p_CellsOnPLMN == LTE_AllCellsOnSamePLMN and (p_CellId == nbiot_Cell54 or
                                                       p_CellId == nbiot_Cell55 or
                                                       p_CellId == nbiot_Cell56 or  // @sic R5s170511 sic@
                                                       p_CellId == nbiot_Cell57 or
                                                       p_CellId == nbiot_Cell58 or
                                                       p_CellId == nbiot_Cell59 or
                                                       p_CellId == nbiot_Cell60 or
                                                       p_CellId == nbiot_Cell62 or
                                                       p_CellId == nbiot_Cell63 ))
        {v_SysinfoCombination := c1}
      if (p_CellsOnPLMN == LTE_CellsOnDifferentPLMN and (p_CellId == nbiot_Cell50 or
                                                         p_CellId == nbiot_Cell51 or
                                                         p_CellId == nbiot_Cell52 or  // @sic R5s170511 sic@
                                                         p_CellId == nbiot_Cell53 or
                                                         p_CellId == nbiot_Cell55 or
                                                         p_CellId == nbiot_Cell56 or
                                                         p_CellId == nbiot_Cell58 or
                                                         p_CellId == nbiot_Cell61 or
                                                         p_CellId == nbiot_Cell62 or
                                                         p_CellId == nbiot_Cell63 ))
        {v_SysinfoCombination := c1}
    }
    
    // Initialise BCCH info
    v_BCCH_Info := f_NBIOT_InitSystemInformation(p_CellId,
                                                 v_CellIds.CellIdentity,
                                                 v_SysinfoCombination,       //All cells are by default intitialise with the same sysinfo combination
                                                 p_FrequencyBand,
                                                 v_OperationMode,
                                                 { f_NBIOT_PLMN_Identity(v_NAS_Param.Guti_Parameters.PLMN_Identity, p_DoAttachWithoutPDN) },
                                                 v_NAS_Param.TrackingAreaCode,
                                                 p_CellsOnPLMN);
    
    
    v_CellInfo := cs_NBIOT_CellInfoDef(v_CellIds,
                                       v_SysinfoCombination,
                                       p_FrequencyBand,
                                       v_UL_DL_Earfcn,
                                       v_NAS_Param,
                                       v_BCCH_Info,
                                       v_Celltiming,
                                       p_SubCarrierSpacingUL,
                                       fl_NBIOT_Get_EUTRACarrierFreq(p_CellId, p_CellsOnPLMN)); // @sic R5w180205r1 sic@
    return valueof(v_CellInfo);  // Note: valueof cannot be avoided here
  }

  /*
   * @desc      get info of cell with given index (p_CellId)
   * @param     p_CellId
   * @return    NBIOT_CellInfo_Type
   * @status    APPROVED (NBIOT)
   */
  function f_NBIOT_CellInfo_Get(NBIOT_CellId_Type p_CellId) runs on NBIOT_PTC return NBIOT_CellInfo_Type
  {
    var integer v_Index := f_NBIOT_CellInfo_GetIndex(p_CellId);
    
    
    return vc_NBIOT_Global.CellArray[v_Index];
  }
    
  function f_NBIOT_CellInfo_SetC_RNTI(NBIOT_CellId_Type p_CellId,
                                      EUTRA_ASN1_C_RNTI_Type  p_C_RNTI) runs on NBIOT_PTC
  {
    var template (value) NBIOT_CellInfo_Type v_CellInfo := f_NBIOT_CellInfo_Get(p_CellId);
    v_CellInfo.RNTI := p_C_RNTI;
    f_NBIOT_CellInfo_Set(p_CellId, v_CellInfo);
  }
  

  /*
   * @desc      get information about the DRX configuration; this shall be the same configuration as configured at the SS
   * @param     p_CellId
   * @return    NB_DrxCtrl_Type
   * @status    APPROVED (NBIOT)
   */
  function f_NBIOT_CellInfo_GetDrxCtrl(NBIOT_CellId_Type p_CellId) runs on NBIOT_PTC return NB_DrxCtrl_Type
  {
    var NBIOT_CellInfo_Type v_CellInfo := f_NBIOT_CellInfo_Get(p_CellId);
    return v_CellInfo.DrxCtrl;
  }

  /*
   * @desc      get PCCH_Config from the system info as stored for the given cell
   * @param     p_CellId
   * @return    PCCH_Config_NB_r13
   * @status    APPROVED (NBIOT)
   */
  function f_NBIOT_CellInfo_GetPCCH_ConfigInSYSINFO(NBIOT_CellId_Type p_CellId) runs on NBIOT_PTC return PCCH_Config_NB_r13
  {
    var NBIOT_CellInfo_Type v_CellInfo := f_NBIOT_CellInfo_Get(p_CellId);
    return v_CellInfo.Sysinfo.BCCH_Info.SIs[0].message_.c1.systemInformation_r13.criticalExtensions.systemInformation_r13.sib_TypeAndInfo_r13[0].sib2_r13.radioResourceConfigCommon_r13.pcch_Config_r13;
  }

  /*
   * @desc      get sys info for given cell
   * @param     p_CellId
   * @return    NBIOT_CellSysInfo_Type
   * @status    APPROVED (NBIOT)
   */
  function f_NBIOT_CellInfo_GetSYSINFO(NBIOT_CellId_Type p_CellId) runs on NBIOT_PTC return NBIOT_CellSysInfo_Type
  {
    var NBIOT_CellInfo_Type v_CellInfo := f_NBIOT_CellInfo_Get(p_CellId);
    return v_CellInfo.Sysinfo;
  }

  /*
   * @desc      get GUTI for given cell: Guti parameters stored in the NBIOT_CellInfo
   *            The returned PLMN is of ans.1 type PLMN_Identity
   * @param     p_CellId
   * @return    GutiParameters_Type
   * @status    APPROVED (NBIOT)
   */
  function f_NBIOT_CellInfo_GetGuti(NBIOT_CellId_Type p_CellId) runs on NBIOT_PTC return GutiParameters_Type
  {
    var NBIOT_CellInfo_Type v_CellInfo := f_NBIOT_CellInfo_Get(p_CellId);
    return v_CellInfo.NAS_Parameters.Guti_Parameters;
  }

  /*
   * @desc      Return the PLMN in the Guti parameters stored in the NBIOT_CellInfo
   *            The returned PLMN is of ans.1 type EUTRA_ASN1_PLMN_Identity_Type
   * @param     p_CellId
   * @return    EUTRA_ASN1_PLMN_Identity_Type
   * @status    APPROVED (NBIOT)
   */
  function f_NBIOT_CellInfo_GetGutiPLMN(NBIOT_CellId_Type p_CellId) runs on NBIOT_PTC return EUTRA_ASN1_PLMN_Identity_Type
  {
    var NBIOT_CellInfo_Type v_CellInfo := f_NBIOT_CellInfo_Get(p_CellId);
    return v_CellInfo.NAS_Parameters.Guti_Parameters.PLMN_Identity;
  }

  /*
   * @desc      Return the TAC parameter stored in the NBIOT_CellInfo
   * @param     p_CellId
   * @return    EUTRA_ASN1_TrackingAreaCode_Type
   * @status    APPROVED (NBIOT)
   */
  function f_NBIOT_CellInfo_GetTAC(NBIOT_CellId_Type p_CellId) runs on NBIOT_PTC return EUTRA_ASN1_TrackingAreaCode_Type
  {
    var NBIOT_CellInfo_Type v_CellInfo := f_NBIOT_CellInfo_Get(p_CellId);
    return v_CellInfo.NAS_Parameters.TrackingAreaCode;
  }

  /*
   * @desc      Return the Physical Cell Id stored in the NBIOT_CellInfo
   * @param     p_CellId
   * @return    EUTRA_ASN1_PhysCellId_Type
   * @status    APPROVED (NBIOT)
   */
  function f_NBIOT_CellInfo_GetPhyCellId(NBIOT_CellId_Type p_CellId) runs on NBIOT_PTC return EUTRA_ASN1_PhysCellId_Type
  {
    var NBIOT_CellInfo_Type v_CellInfo := f_NBIOT_CellInfo_Get(p_CellId);
      
    return v_CellInfo.CellIds.PhysicalCellId;
  }

  /*
   * @desc      return the C-RNTI stored in NBIOT_CellInfo
   * @param     p_CellId
   * @return    EUTRA_ASN1_C_RNTI_Type
   * @status    APPROVED (NBIOT)
   */
  function f_NBIOT_CellInfo_GetC_RNTI(NBIOT_CellId_Type p_CellId) runs on NBIOT_PTC return EUTRA_ASN1_C_RNTI_Type
  {
    var NBIOT_CellInfo_Type v_CellInfo := f_NBIOT_CellInfo_Get(p_CellId);
    return v_CellInfo.RNTI;
  }

  /*
   * @desc      Set the EARFCN parameters (DL and UL) in the NBIOT_CellInfo
   * @param     p_CellId
   * @return    NB_CarrierFreq_Type
   * @status    APPROVED (NBIOT)
   */
  function f_NBIOT_CellInfo_GetEARFCN(NBIOT_CellId_Type p_CellId) runs on NBIOT_PTC return NB_CarrierFreq_Type
  {
    var NBIOT_CellInfo_Type v_CellInfo := f_NBIOT_CellInfo_Get(p_CellId);
    return v_CellInfo.Frequency.UL_DL_Earfcn;
  }

  /*
   * @desc      get Cell Identity for given cell
   * @param     p_CellId
   * @return    EUTRA_ASN1_CellIdentity_Type
   * @status    APPROVED (NBIOT)
   */
  function f_NBIOT_CellInfo_GetCellIdentity(NBIOT_CellId_Type p_CellId) runs on NBIOT_PTC return EUTRA_ASN1_CellIdentity_Type
  {
    var NBIOT_CellInfo_Type v_CellInfo := f_NBIOT_CellInfo_Get(p_CellId);
    return v_CellInfo.CellIds.CellIdentity;
  }

  /*
   * @desc      get EUTRA DL EARFCN for in-band/guard band
   * @param     p_CellId
   * @return    integer
   * @status    APPROVED (NBIOT)
   */
  function f_NBIOT_CellInfo_GetEUTRA_ARFCN(NBIOT_CellId_Type p_CellId) runs on NBIOT_PTC return integer
  {
    var NBIOT_CellInfo_Type v_CellInfo := f_NBIOT_CellInfo_Get(p_CellId);
    return v_CellInfo.EUTRA_DL_ARFCN;
  }

  /*
   * @desc      return default HARQ process or omit if there is only one HAR processes
   * @param     p_CellId
   * @return    template (omit) integer
   * @status    APPROVED (NBIOT)
   */
  function f_NBIOT_CellInfo_GetDefaultHarqProcessNumber(NBIOT_CellId_Type p_CellId) runs on NBIOT_PTC return template (omit) integer
  {
    var template (omit) integer v_HarqProcessNumber := omit;
    var NBIOT_CellInfo_Type v_CellInfo := f_NBIOT_CellInfo_Get(p_CellId);
    if (v_CellInfo.NumberOfHarqProcesses > 1) {
      v_HarqProcessNumber := 0;   /* first HARQ process per default */
    }
    return v_HarqProcessNumber;
  }

  /*
   * @desc      get timing info (SNF offset, Tcell) from the cell info as stored for the given cell
   * @param     p_CellId
   * @return    CellTimingInfo_Type
   * @status    APPROVED (NBIOT)
   */
  function f_NBIOT_CellInfo_GetCellTimingInfo(NBIOT_CellId_Type p_CellId) runs on NBIOT_PTC return CellTimingInfo_Type
  {
    var NBIOT_CellInfo_Type v_CellInfo := f_NBIOT_CellInfo_Get(p_CellId);
    return v_CellInfo.CellTimingInfo;
  }

  /*
   * @desc      return the SystemInformationBlockType1 stored in NBIOT_CellInfo
   * @param     p_CellId
   * @return    SystemInformationBlockType1_NB
   * @status    APPROVED (NBIOT)
   */
  function f_NBIOT_CellInfo_GetSIB1(NBIOT_CellId_Type p_CellId) runs on NBIOT_PTC return SystemInformationBlockType1_NB
  {
    var NBIOT_CellInfo_Type v_CellInfo := f_NBIOT_CellInfo_Get(p_CellId);
    return v_CellInfo.Sysinfo.BCCH_Info.SIB1_NB.message_.c1.systemInformationBlockType1_r13;
  }

  /*
   * @desc      return the SystemInformationBlockType2 stored in NBIOT_CellInfo
   * @param     p_CellId
   * @return    SystemInformationBlockType2_NB_r13
   * @status    APPROVED (NBIOT)
   */
  function f_NBIOT_CellInfo_GetSIB2(NBIOT_CellId_Type p_CellId) runs on NBIOT_PTC return SystemInformationBlockType2_NB_r13
  {
    var NBIOT_CellInfo_Type v_CellInfo := f_NBIOT_CellInfo_Get(p_CellId);
    return v_CellInfo.Sysinfo.BCCH_Info.SIs[0].message_.c1.systemInformation_r13.criticalExtensions.systemInformation_r13.sib_TypeAndInfo_r13[0].sib2_r13;
  }

  /*
   * @desc      return the SystemInformationBlockType3 stored in NBIOT_CellInfo
   * @param     p_CellId
   * @return    SystemInformationBlockType3_NB_r13
   * @status    APPROVED (NBIOT)
   */
  function f_NBIOT_CellInfo_GetSIB3(NBIOT_CellId_Type p_CellId) runs on NBIOT_PTC return SystemInformationBlockType3_NB_r13
  {
    var NBIOT_CellInfo_Type v_CellInfo := f_NBIOT_CellInfo_Get(p_CellId);
    return v_CellInfo.Sysinfo.BCCH_Info.SIs[1].message_.c1.systemInformation_r13.criticalExtensions.systemInformation_r13.sib_TypeAndInfo_r13[0].sib3_r13;
  }

  /*
   * @desc      return the SystemInformationBlockType5 stored in NBIOT_CellInfo
   * @param     p_CellId
   * @return    SystemInformationBlockType5_NB_r13
   * @status    APPROVED (NBIOT)
   */
  function f_NBIOT_CellInfo_GetSIB5(NBIOT_CellId_Type p_CellId) runs on NBIOT_PTC return SystemInformationBlockType5_NB_r13
  {
    var NBIOT_CellInfo_Type v_CellInfo := f_NBIOT_CellInfo_Get(p_CellId);
    return v_CellInfo.Sysinfo.BCCH_Info.SIs[2].message_.c1.systemInformation_r13.criticalExtensions.systemInformation_r13.sib_TypeAndInfo_r13[0].sib5_r13;
  }

  /*
   * @desc      return the SystemInformationBlockType2 stored in NBIOT_CellInfo
   * @param     p_CellId
   * @return    SystemInformationBlockType14_NB_r13
   * @status    APPROVED (NBIOT)
   */
  function f_NBIOT_CellInfo_GetSIB14(NBIOT_CellId_Type p_CellId) runs on NBIOT_PTC return SystemInformationBlockType14_NB_r13
  {
    var NBIOT_CellInfo_Type v_CellInfo := f_NBIOT_CellInfo_Get(p_CellId);
    return  v_CellInfo.Sysinfo.BCCH_Info.SIs[2].message_.c1.systemInformation_r13.criticalExtensions.systemInformation_r13.sib_TypeAndInfo_r13[0].sib14_r13;
  }

  /*
   * @desc      set cell info for given cell
   * @param     p_CellId
   * @param     p_CellInfo
   * @status    APPROVED (NBIOT)
   */
  function f_NBIOT_CellInfo_Set(NBIOT_CellId_Type p_CellId,
                                template (value) NBIOT_CellInfo_Type p_CellInfo) runs on NBIOT_PTC
  {
    var integer v_Index := f_NBIOT_CellInfo_GetIndex(p_CellId);
    vc_NBIOT_Global.CellArray[v_Index] := valueof(p_CellInfo);
  }

  /*
   * @desc      set DrxCtrl
   * @param     p_CellId
   * @param     p_DrxCtrl
   * @status    APPROVED (NBIOT)
   */
  function f_NBIOT_CellInfo_SetDrxCtrl(NBIOT_CellId_Type p_CellId,
                                       NB_DrxCtrl_Type p_DrxCtrl) runs on NBIOT_PTC
  {
    var NBIOT_CellInfo_Type v_CellInfo := f_NBIOT_CellInfo_Get(p_CellId);
    v_CellInfo.DrxCtrl := p_DrxCtrl;
    f_NBIOT_CellInfo_Set (p_CellId, v_CellInfo);
  }

  /*
   * @desc      Set TAC parameter in NBIOT_CellInfo
   * @param     p_CellId
   * @param     p_TAC
   * @status    APPROVED (NBIOT)
   */
  function f_NBIOT_CellInfo_SetTAC(NBIOT_CellId_Type p_CellId,
                                   EUTRA_ASN1_TrackingAreaCode_Type p_TAC) runs on NBIOT_PTC
  {
    var NBIOT_CellInfo_Type v_CellInfo := f_NBIOT_CellInfo_Get(p_CellId);
    
    v_CellInfo.NAS_Parameters.TrackingAreaCode := p_TAC;
    v_CellInfo.Sysinfo.BCCH_Info.SIB1_NB.message_.c1.systemInformationBlockType1_r13.cellAccessRelatedInfo_r13.trackingAreaCode_r13 := p_TAC;
    f_NBIOT_CellInfo_Set(p_CellId, v_CellInfo);
  }

  /*
   * @desc      Set GUTI parameter in NBIOT_CellInfo
   * @param     p_CellId
   * @param     p_Guti
   * @status    APPROVED (NBIOT)
   */
  function f_NBIOT_CellInfo_SetGuti(NBIOT_CellId_Type p_CellId,
                                    template (value) GutiParameters_Type p_Guti) runs on NBIOT_PTC
  {
    var NBIOT_CellInfo_Type v_CellInfo := f_NBIOT_CellInfo_Get(p_CellId);
    var template (value) NBIOT_CellInfo_Type v_NewCellInfo := v_CellInfo;
       
    v_NewCellInfo.NAS_Parameters.Guti_Parameters := p_Guti;
    v_NewCellInfo.Sysinfo.BCCH_Info.SIB1_NB.message_.c1.systemInformationBlockType1_r13.cellAccessRelatedInfo_r13.plmn_IdentityList_r13[0].plmn_Identity_r13.mcc := p_Guti.PLMN_Identity.mcc;
    v_NewCellInfo.Sysinfo.BCCH_Info.SIB1_NB.message_.c1.systemInformationBlockType1_r13.cellAccessRelatedInfo_r13.plmn_IdentityList_r13[0].plmn_Identity_r13.mnc := p_Guti.PLMN_Identity.mnc;
   
    f_NBIOT_CellInfo_Set(p_CellId, v_NewCellInfo);
  }

  /*
   * @desc      Set the selected PLMN index of the cell
   * @param     p_CellId
   * @param     p_SelectedPlmnIndex
   * @status    APPROVED (NBIOT)
   */
  function f_NBIOT_CellInfo_SetSelectedPlmnIndex(NBIOT_CellId_Type p_CellId,
                                                 integer p_SelectedPlmnIndex) runs on NBIOT_PTC
  {
    var NBIOT_CellInfo_Type v_CellInfo := f_NBIOT_CellInfo_Get(p_CellId);
    v_CellInfo.SelectedPlmnIndex := p_SelectedPlmnIndex;
    f_NBIOT_CellInfo_Set(p_CellId, v_CellInfo);
  }

  /*
   * @desc      Get the selected PLMN index of the cell
   * @param     p_CellId
   * @return    integer
   * @status    APPROVED (NBIOT)
   */
  function f_NBIOT_CellInfo_GetSelectedPlmnIndex(NBIOT_CellId_Type p_CellId) runs on NBIOT_PTC return integer
  {
    var NBIOT_CellInfo_Type v_CellInfo := f_NBIOT_CellInfo_Get(p_CellId);
    return v_CellInfo.SelectedPlmnIndex;
  }

  /*
   * @desc      wrapper function
   * @param     p_CellId
   * @param     p_PLMN
   * @param     p_AttachWithoutPDN  (default value: px_DoAttachWithoutPDN)
   * @status    APPROVED (NBIOT)
   */
  function f_NBIOT_CellInfo_SetPLMN_1Entry(NBIOT_CellId_Type p_CellId,
                                           template (value) EUTRA_ASN1_PLMN_Identity_Type p_PLMN,
                                           boolean p_AttachWithoutPDN := px_DoAttachWithoutPDN) runs on NBIOT_PTC
  {
    var template (value) PLMN_IdentityList_NB_Type v_PlmnList := { p_PLMN };
    f_NBIOT_CellInfo_SetPLMN_Common(p_CellId, v_PlmnList, -, p_AttachWithoutPDN);
  }

  /*
   * @desc      wrapper function
   * @param     p_CellId
   * @param     p_PLMN1
   * @param     p_PLMN2
   * @param     p_PlmnIndex         (default value: 0)
   * @param     p_AttachWithoutPDN  (default value: px_DoAttachWithoutPDN)
   * @status    APPROVED (NBIOT)
   */
  function f_NBIOT_CellInfo_SetPLMN_2Entries(NBIOT_CellId_Type p_CellId,
                                             template (value) EUTRA_ASN1_PLMN_Identity_Type p_PLMN1,
                                             template (value) EUTRA_ASN1_PLMN_Identity_Type p_PLMN2,
                                             integer p_PlmnIndex := 0,
                                             boolean p_AttachWithoutPDN := px_DoAttachWithoutPDN) runs on NBIOT_PTC
  {
    f_NBIOT_CellInfo_SetPLMN_Common(p_CellId, {p_PLMN1, p_PLMN2}, p_PlmnIndex, p_AttachWithoutPDN);
  }

  type record of EUTRA_ASN1_PLMN_Identity_Type  PLMN_IdentityList_NB_Type;   /* @status    APPROVED (NBIOT) */

  /*
   * @desc      Set the parameterised PLMN value in EUTRA Cellinfo
   * @param     p_CellId
   * @param     p_PlmnList
   * @param     p_PlmnIndex         (default value: 0)  ... index of of the PLMN in p_PlmnList to be used for PLMN_Identity
   * @param     p_AttachWithoutPDN
   * @status    APPROVED (NBIOT)
   */
  function f_NBIOT_CellInfo_SetPLMN_Common(NBIOT_CellId_Type p_CellId,
                                           template (value) PLMN_IdentityList_NB_Type p_PlmnList,
                                           integer p_PlmnIndex := 0,
                                           boolean p_AttachWithoutPDN := px_DoAttachWithoutPDN)  runs on NBIOT_PTC
  {
    var template (value) NBIOT_CellInfo_Type v_CellInfo := f_NBIOT_CellInfo_Get(p_CellId);
    var integer v_NoOfPlmns := lengthof(p_PlmnList);
    var integer i;
    
    v_CellInfo.NAS_Parameters.Guti_Parameters.PLMN_Identity := p_PlmnList[p_PlmnIndex];
    for (i:=0; i<v_NoOfPlmns; i:=i+1) {
      v_CellInfo.Sysinfo.BCCH_Info.SIB1_NB.message_.c1.systemInformationBlockType1_r13.cellAccessRelatedInfo_r13.plmn_IdentityList_r13[i] := f_NBIOT_PLMN_Identity(p_PlmnList[i], p_AttachWithoutPDN);
    }
    
    f_NBIOT_CellInfo_Set(p_CellId, valueof(v_CellInfo));
  }

  /*
   * @desc      Set the EARFCN parameters (DL and UL) in the NBIOT_CellInfo
   * @param     p_CellId
   * @param     p_CarrierFreq_Type
   * @status    APPROVED (NBIOT)
   */
  function f_NBIOT_CellInfo_SetEARFCN(NBIOT_CellId_Type p_CellId,
                                      NB_CarrierFreq_Type p_CarrierFreq_Type) runs on NBIOT_PTC
  {
    var NBIOT_CellInfo_Type v_CellInfo := f_NBIOT_CellInfo_Get(p_CellId);
    v_CellInfo.Frequency.UL_DL_Earfcn := p_CarrierFreq_Type;
    f_NBIOT_CellInfo_Set(p_CellId, v_CellInfo);
  }

  /*
   * @desc      Set the band in NBIOT_CellInfo and in MIB
   * @param     p_CellId
   * @param     p_Band
   * @status    APPROVED (NBIOT)
   */
  function f_NBIOT_CellInfo_SetBand(NBIOT_CellId_Type p_CellId,
                                    integer p_Band) runs on NBIOT_PTC
  {
    var NBIOT_CellInfo_Type v_CellInfo := f_NBIOT_CellInfo_Get(p_CellId);

    v_CellInfo.Frequency.FrequencyBandIndicator:= p_Band;
    v_CellInfo.Sysinfo.BCCH_Info.SIB1_NB.message_.c1.systemInformationBlockType1_r13.freqBandIndicator_r13 := p_Band;
    f_NBIOT_CellInfo_Set(p_CellId, v_CellInfo);
  }

  /*
   * @desc      Assign the cell configuration type of the cell
   * @param     p_CellId
   * @param     p_CellSysInfo
   * @status    APPROVED (NBIOT)
   */
  function f_NBIOT_SetSysinfo(NBIOT_CellId_Type p_CellId,
                              NBIOT_CellSysInfo_Type p_CellSysInfo) runs on NBIOT_PTC
  {
    var NBIOT_CellInfo_Type v_CellInfo := f_NBIOT_CellInfo_Get(p_CellId);
    
    v_CellInfo.Sysinfo := p_CellSysInfo;
    f_NBIOT_CellInfo_Set(p_CellId, v_CellInfo);
  }

  /*
   * @desc      Set the sysinfo combination of the cell
   * @param     p_CellId
   * @param     p_Combination
   * @status    APPROVED (NBIOT)
   */
  function f_NBIOT_CellInfo_SetCombination(NBIOT_CellId_Type p_CellId,
                                           NB_Combination_Type p_Combination) runs on NBIOT_PTC
  {
    var template (value) NBIOT_CellInfo_Type v_CellInfo := f_NBIOT_CellInfo_Get(p_CellId);
    v_CellInfo.Sysinfo.Combination := p_Combination;
    f_NBIOT_CellInfo_Set(p_CellId, v_CellInfo);
  }

  /*
   * @desc      Set the BCCH sysinfo content of the cell
   * @param     p_CellId
   * @param     p_BCCH_Info
   * @status    APPROVED (NBIOT)
   */
  function f_NBIOT_CellInfo_SetBCCH_Info(NBIOT_CellId_Type p_CellId,
                                         template (value) NB_BcchInfo_Type p_BCCH_Info) runs on NBIOT_PTC
  {
    var template (value) NBIOT_CellInfo_Type v_CellInfo := f_NBIOT_CellInfo_Get(p_CellId);
    v_CellInfo.Sysinfo.BCCH_Info := p_BCCH_Info;
    f_NBIOT_CellInfo_Set(p_CellId, v_CellInfo);
  }

   /*
   * @desc      Assign the parameterised intraFreqReselection value in SIB1 of the cell
   * @param     p_CellId
   * @param     p_IntraFreqReselection
   * @status    APPROVED (NBIOT)
   */
  function f_NBIOT_CellInfo_SetIntraFreqReselection(NBIOT_CellId_Type p_CellId,
                                                    NB_IntraFreqRes_Type p_IntraFreqReselection) runs on NBIOT_PTC
  {
    var NBIOT_CellInfo_Type v_CellInfo := f_NBIOT_CellInfo_Get(p_CellId);
    v_CellInfo.Sysinfo.BCCH_Info.SIB1_NB.message_.c1.systemInformationBlockType1_r13.cellAccessRelatedInfo_r13.intraFreqReselection_r13 := p_IntraFreqReselection;
    f_NBIOT_CellInfo_Set(p_CellId, v_CellInfo);
  }

   /*
   * @desc      Assign the parameterised cellBarred value in SIB1-NB of the Ncell
   * @param     p_CellId
   * @param     p_CellBarred
   * @status    APPROVED (NBIOT)
   */
  function f_NBIOT_CellInfo_SetSysInfo_CellBarred(NBIOT_CellId_Type p_CellId,
                                                  NB_CellBarred_Type p_CellBarred) runs on NBIOT_PTC
  {
    var template (value) NBIOT_CellInfo_Type v_CellInfo := f_NBIOT_CellInfo_Get(p_CellId);
    
    v_CellInfo.Sysinfo.BCCH_Info.SIB1_NB.message_.c1.systemInformationBlockType1_r13.cellAccessRelatedInfo_r13.cellBarred_r13 := p_CellBarred;
    f_NBIOT_CellInfo_Set(p_CellId, v_CellInfo);
  }

  /*
   * @desc      Set the AB_Enabled in MIB
   * @param     p_CellId
   * @param     p_AB_Enabled
   * @status    APPROVED (NBIOT)
   */
  function f_NBIOT_CellInfo_SetAB_Enabled(NBIOT_CellId_Type p_CellId,
                                          boolean p_AB_Enabled) runs on NBIOT_PTC
  {
    var NBIOT_CellInfo_Type v_CellInfo := f_NBIOT_CellInfo_Get(p_CellId);

    v_CellInfo.Sysinfo.BCCH_Info.MIB_NB.message_.ab_Enabled_r13 := p_AB_Enabled;
    f_NBIOT_CellInfo_Set(p_CellId, v_CellInfo);
  }

  /*
   * @desc      Assign SIB1 for p_CellId
   * @param     p_CellId
   * @param     p_SIB1
   * @status    APPROVED (NBIOT)
   */
  function f_NBIOT_CellInfo_SetSIB1(NBIOT_CellId_Type p_CellId,
                                    template (value) SystemInformationBlockType1_NB p_SIB1) runs on NBIOT_PTC
  {
    var template (value) NBIOT_CellInfo_Type v_CellInfo := f_NBIOT_CellInfo_Get(p_CellId);
    
    v_CellInfo.Sysinfo.BCCH_Info.SIB1_NB.message_.c1.systemInformationBlockType1_r13 := p_SIB1;
    f_NBIOT_CellInfo_Set(p_CellId, v_CellInfo);
  }

  /*
   * @desc      Assign SIB2 for p_CellId
   * @param     p_CellId
   * @param     p_SIB2
   * @status    APPROVED (NBIOT)
   */
  function f_NBIOT_CellInfo_SetSIB2(NBIOT_CellId_Type p_CellId,
                                    template (value) SystemInformationBlockType2_NB_r13 p_SIB2) runs on NBIOT_PTC
  {
    var template (value) NBIOT_CellInfo_Type v_CellInfo := f_NBIOT_CellInfo_Get(p_CellId);
    
    v_CellInfo.Sysinfo.BCCH_Info.SIs[0].message_.c1.systemInformation_r13.criticalExtensions.systemInformation_r13.sib_TypeAndInfo_r13[0].sib2_r13 := p_SIB2;
    f_NBIOT_CellInfo_Set(p_CellId, v_CellInfo);
  }

  /*
   * @desc      Assign SIB3 for all combinations for p_CellId
   * @param     p_CellId
   * @param     p_SIB3
   * @status    APPROVED (NBIOT)
   */
  function f_NBIOT_CellInfo_SetSIB3(NBIOT_CellId_Type p_CellId,
                                    template (value) SystemInformationBlockType3_NB_r13 p_SIB3) runs on NBIOT_PTC
  {
    var template (value) NBIOT_CellInfo_Type v_CellInfo := f_NBIOT_CellInfo_Get(p_CellId);
    
    // SIB3 is only present in combination c2, c3 and c4 (see 36.508 cl. 8.1.4.3.1.2)
    select (valueof(v_CellInfo.Sysinfo.Combination)) {
      case (c2, c3, c4) {
        //The combination initiation can be found in f_NBIOT_InitSystemInformation
        v_CellInfo.Sysinfo.BCCH_Info.SIs[1].message_.c1.systemInformation_r13.criticalExtensions.systemInformation_r13.sib_TypeAndInfo_r13[0].sib3_r13 := p_SIB3;
        f_NBIOT_CellInfo_Set(p_CellId, v_CellInfo);
      }
      case else {
        FatalError(__FILE__, __LINE__, "Invalid System Combination");
      }
    }
  }

  /*
   * @desc      Assign the parameterised SIB4 for p_CellId
   * @param     p_CellId
   * @param     p_Sib4
   * @status    APPROVED (NBIOT)
   */
  function f_NBIOT_CellInfo_SetSIB4(NBIOT_CellId_Type p_CellId,
                                    template (value) SystemInformationBlockType4_NB_r13 p_Sib4) runs on NBIOT_PTC
  {
    var template (value) NBIOT_CellInfo_Type v_CellInfo := f_NBIOT_CellInfo_Get(p_CellId);
    
    // SIB4 is only present in combination c2 (see 36.508 cl. 8.1.4.3.1.2)
    select (valueof(v_CellInfo.Sysinfo.Combination)) {
      case (c2) {
        //The combination initiation can be found in f_NBIOT_InitSystemInformation
        v_CellInfo.Sysinfo.BCCH_Info.SIs[2].message_.c1.systemInformation_r13.criticalExtensions.systemInformation_r13.sib_TypeAndInfo_r13[0].sib4_r13 := p_Sib4;
        f_NBIOT_CellInfo_Set(p_CellId, v_CellInfo);
      }
      case else {
        FatalError(__FILE__, __LINE__, "Invalid System Combination");
      }
    }
  }

  /*
   * @desc      Assign the parameterised SIB5 for p_CellId
   * @param     p_CellId
   * @param     p_SIB5
   * @status    APPROVED (NBIOT)
   */
  function f_NBIOT_CellInfo_SetSIB5(NBIOT_CellId_Type p_CellId,
                                    template (value) SystemInformationBlockType5_NB_r13 p_SIB5) runs on NBIOT_PTC
  {
    var template (value) NBIOT_CellInfo_Type v_CellInfo := f_NBIOT_CellInfo_Get(p_CellId);
    
    // SIB5 is only present in combination c3 (see 36.508 cl. 8.1.4.3.1.2)
    select (valueof(v_CellInfo.Sysinfo.Combination)) {
      case (c3) {
        v_CellInfo.Sysinfo.BCCH_Info.SIs[2].message_.c1.systemInformation_r13.criticalExtensions.systemInformation_r13.sib_TypeAndInfo_r13[0].sib5_r13 := p_SIB5;
        f_NBIOT_CellInfo_Set(p_CellId, v_CellInfo);
      }
      case else {
        FatalError(__FILE__, __LINE__, "Invalid System Combination");
      }
    }
  }

  /*
   * @desc      Assign the parameterised SIB14 for p_CellId
   * @param     p_CellId
   * @param     p_SIB14
   * @status    APPROVED (NBIOT)
   */
  function f_NBIOT_CellInfo_SetSIB14(NBIOT_CellId_Type p_CellId,
                                     template (value) SystemInformationBlockType14_NB_r13 p_SIB14) runs on NBIOT_PTC
  {
    var template (value) NBIOT_CellInfo_Type v_CellInfo := f_NBIOT_CellInfo_Get(p_CellId);
    
    // SIB14 is only present in combination c4 (see 36.508 cl. 8.1.4.3 Table 8.1.4.3.1.1-1 for more information)
    select (valueof(v_CellInfo.Sysinfo.Combination)) {
      case (c4) {
        v_CellInfo.Sysinfo.BCCH_Info.SIs[2].message_.c1.systemInformation_r13.criticalExtensions.systemInformation_r13.sib_TypeAndInfo_r13[0].sib14_r13 := p_SIB14;
        f_NBIOT_CellInfo_Set(p_CellId, v_CellInfo);
      }
      case else {
        FatalError (__FILE__, __LINE__, "Invalid System Combination");
      }
    }
  }

  /*
   * @desc      Assign the parameterised Attenuation in the NBIOT_CellInfo
   * @param     p_CellId
   * @param     p_ReferenceCellPower
   * @status    APPROVED (NBIOT)
   */
  function f_NBIOT_CellInfo_SetCellPower(NBIOT_CellId_Type p_CellId,
                                         template (value) ReferenceCellPower_Type p_ReferenceCellPower) runs on NBIOT_PTC
  {
    var template (value) NBIOT_CellInfo_Type v_CellInfo := f_NBIOT_CellInfo_Get(p_CellId);
    
    v_CellInfo.ReferencePower := p_ReferenceCellPower;
    f_NBIOT_CellInfo_Set(p_CellId, v_CellInfo);
  }

  /*
   * @desc      Return the Cell power parameters stored in the NBIOT_CellInfo
   * @param     p_CellId
   * @return    ReferenceCellPower_Type
   * @status    APPROVED (NBIOT)
   */
  function f_NBIOT_CellInfo_GetCellPower(NBIOT_CellId_Type p_CellId) runs on NBIOT_PTC return ReferenceCellPower_Type
  {
    var NBIOT_CellInfo_Type v_CellInfo := f_NBIOT_CellInfo_Get(p_CellId);
    return v_CellInfo.ReferencePower;
  };

  /*
   * @desc      set max. reference power for a cell before the cell is created; the attenuation is "Off" in this case
   * @param     p_CellId
   * @param     p_MaxReferencePower
   * @status    APPROVED (NBIOT)
   */
  function f_NBIOT_CellInfo_InitMaxReferencePower(NBIOT_CellId_Type p_CellId,
                                                  AbsoluteCellPower_Type p_MaxReferencePower) runs on NBIOT_PTC
  {
    var template (value) NBIOT_CellInfo_Type v_CellInfo := f_NBIOT_CellInfo_Get(p_CellId);
    v_CellInfo.ReferencePower.MaxReferencePower := p_MaxReferencePower;
    v_CellInfo.ReferencePower.Attenuation.Off := true;
    f_NBIOT_CellInfo_Set(p_CellId, v_CellInfo);
  }

  /*
   * @desc      Set Security Info
   * @param     p_SecurityParams
   * @status    APPROVED (NBIOT)
   */
  function f_NBIOT_Security_Set(NBIOT_SecurityParams_Type p_SecurityParams) runs on NBIOT_PTC
  {
    vc_NBIOT_Global.Security := p_SecurityParams;
  }

  /*
   * @desc      Get Security Info
   * @return    NBIOT_SecurityParams_Type
   * @status    APPROVED (NBIOT)
   */
  function f_NBIOT_Security_Get() runs on NBIOT_PTC return NBIOT_SecurityParams_Type
  {
    return vc_NBIOT_Global.Security;
  }

  /*
   * @desc      Access to the Security Parameter KSIasme
   * @return    NAS_KsiValue
   * @status    APPROVED (NBIOT)
   */
  function f_NBIOT_SecurityKSIasme_Get() runs on NBIOT_PTC return NAS_KsiValue
  {
    return vc_NBIOT_Global.Security.KSIasme;
  }

  /*
   * @desc      Set UECapability in the MobileInfo variable
   * @param     p_Cap
   * @status    APPROVED (NBIOT)
   */
  function f_NBIOT_MobileInfo_SetUECapability(UE_Capability_NB_r13 p_Cap) runs on NBIOT_PTC
  {
    vc_NBIOT_Global.MobileInfo.NBIOT_Capability := p_Cap;
  }

  /*
   * @desc      Get NBIOT UE Capability
   * @return    UE_Capability_NB_r13
   * @status    APPROVED (NBIOT)
   */
  function f_NBIOT_MobileInfo_GetUECapability() runs on NBIOT_PTC return UE_Capability_NB_r13
  {
    return vc_NBIOT_Global.MobileInfo.NBIOT_Capability;
  }

  /*
   * @desc      Set PDN Type and PTI as assigned to the UE
   *            (APN & PCOs are stored in separate functions as these may be sent in different messages)
   * @param     p_PDN               (default value: 0)
   * @param     p_PdnType
   * @param     p_PTI
   * @status    APPROVED (NBIOT)
   */
  function f_NBIOT_MobileInfo_SetAssignedPdnAndPTI(integer p_PDN := 0,
                                                   B3_Type p_PdnType,
                                                   ProcedureTransactionIdentifier p_PTI) runs on NBIOT_PTC
  {
    vc_NBIOT_Global.MobileInfo.PDNs[p_PDN].assignedPdnType := p_PdnType;
    vc_NBIOT_Global.MobileInfo.PDNs[p_PDN].pti := p_PTI;
    vc_NBIOT_Global.MobileInfo.PDNs[p_PDN].accessPointName := omit;
    vc_NBIOT_Global.MobileInfo.PDNs[p_PDN].protocolConfigurationOptions := omit;
  }

  /*
   * @desc      Set APN as assigned to the UE
   * @param     p_PDN               (default value: 0)
   * @param     p_APN
   * @status    APPROVED (NBIOT)
   */
  function f_NBIOT_MobileInfo_SetAPN(integer p_PDN := 0,
                                     AccessPointName p_APN) runs on NBIOT_PTC
  {
    vc_NBIOT_Global.MobileInfo.PDNs[p_PDN].accessPointName := p_APN;
  }

  /*
   * @desc      Set APN as assigned to the UE
   * @param     p_PDN               (default value: 0)
   * @param     p_PCO
   * @status    APPROVED (NBIOT)
   */
  function f_NBIOT_MobileInfo_SetExtPCO(integer p_PDN := 0,
                                        template (omit) ExtdProtocolConfigOptions p_PCO) runs on NBIOT_PTC
  {
    if (isvalue(p_PCO)) {
      vc_NBIOT_Global.MobileInfo.PDNs[p_PDN].protocolConfigurationOptions := valueof(p_PCO);
    }
  }

  /*
   * @desc      Check if PDN is configured, and if so, how many
   * @return    integer
   * @status    APPROVED (NBIOT)
   */
  function f_NBIOT_MobileInfo_GetNoOfPDNsConfigured() runs on NBIOT_PTC return integer
  {
    var integer v_NoOfPDNs := 0;
    
    if (ispresent (vc_NBIOT_Global.MobileInfo.PDNs)) {
      v_NoOfPDNs := lengthof(vc_NBIOT_Global.MobileInfo.PDNs);
    }
    return v_NoOfPDNs;
  }

  /*
   * @desc      Get PDN information as assigned to the UE
   * @param     p_PDN               (default value: 0)
   * @return    NBIOT_PDN_Type
   * @status    APPROVED (NBIOT)
   */
  function f_NBIOT_MobileInfo_GetAssignedPdn(integer p_PDN := 0) runs on NBIOT_PTC return NBIOT_PDN_Type
  {
    return vc_NBIOT_Global.MobileInfo.PDNs[p_PDN];
  }

  /*
   * @desc      Get PTI as assigned by the UE
   * @param     p_PDN               (default value: 0)
   * @return    ProcedureTransactionIdentifier
   * @status    APPROVED (NBIOT)
   */
  function f_NBIOT_MobileInfo_GetPTI(integer p_PDN := 0) runs on NBIOT_PTC return ProcedureTransactionIdentifier
  {
    return vc_NBIOT_Global.MobileInfo.PDNs[p_PDN].pti;
  }

  /*
   * @desc      Get extd PCO as assigned to the UE
   * @param     p_PDN               (default value: 0)
   * @return    ExtdProtocolConfigOptions
   * @status    APPROVED (NBIOT)
   */
  function f_NBIOT_MobileInfo_GetExtdPCO(integer p_PDN := 0) runs on NBIOT_PTC return ExtdProtocolConfigOptions
  {
    return vc_NBIOT_Global.MobileInfo.PDNs[p_PDN].protocolConfigurationOptions;
  }

  /*
   * @desc      set number of HARQ processes to be considered in UL/DL DCI
   * @param     p_CellId
   * @param     p_NumberOfHarqProcesses
   * @status    APPROVED (NBIOT)
   */
  function f_NBIOT_CellInfo_SetNumberOfHarqProcesses(NBIOT_CellId_Type p_CellId,
                                                     integer p_NumberOfHarqProcesses) runs on NBIOT_PTC
  {
    var NBIOT_CellInfo_Type v_CellInfo := f_NBIOT_CellInfo_Get(p_CellId);
  
    v_CellInfo.NumberOfHarqProcesses := p_NumberOfHarqProcesses;
    f_NBIOT_CellInfo_Set(p_CellId, v_CellInfo);
  }

  type record NB_InitParams_Local_Type {  /* @status    APPROVED (NBIOT) */
    EUTRA_NAS_NumOfPLMN_Type CellsOnSamePLMN,
    NB_Combination_Type SysinfoCombination,
    EUTRA_NAS_CellSpecialFreq CellSpecialFreq
  };

  /*
   * @desc      local initilisation
   * @param     p_Params
   * @param     p_DoAttachWithoutPDN
   * @status    APPROVED (NBIOT)
   */
  function fl_NBIOT_Common_Init(NB_InitParams_Local_Type p_Params,
                                boolean p_DoAttachWithoutPDN) runs on NBIOT_PTC
  {
    vc_NBIOT_Global.Ctrl.Default := null;
    vc_NBIOT_Global.Ctrl.TestBody := false;
    vc_NBIOT_Global.Ctrl.VerdictCtrl := normal;
    vc_NBIOT_Global.Ctrl.HarqErrorHandling := ignore;
    vc_NBIOT_Global.Ctrl.LoopbackIsActivated := false;

    // Initialise security parameters
    vc_NBIOT_Global.Security := f_NBIOT_Security_Init();
    
    // Initialise Cell array
    vc_NBIOT_Global.CellArray := f_NBIOT_CellArray_Init(p_Params.SysinfoCombination, p_DoAttachWithoutPDN);
    //VZW:COMMENTED FOR NBIOT IMSLESS vc_NBIOT_Global.CellArray := f_NBIOT_NAS_CellArray_Init(vc_NBIOT_Global.CellArray, p_Params.CellsOnSamePLMN, p_Params.SysinfoCombination, p_DoAttachWithoutPDN, p_Params.CellSpecialFreq);
    
    //Initialise Mobile Info
    vc_NBIOT_Global.MobileInfo.Tmsi := '00000000'O;
    vc_NBIOT_Global.MobileInfo.P_Tmsi := '00000000'O;
    vc_NBIOT_Global.MobileInfo.PDNs := omit;

    f_NBIOT_ActivateDefault(StandardDefault);
  }

  /*
   * @desc      common initialisation of the NBIOT_PTC
   * @param     p_SysinfoCombination   ..  Combinations of system information blocks  (36.508 cl. 8.1.4.3.1.1)
   * @param     p_AllowAttachWithoutPDN (default value: CONTROL_PLANE)  ..  If CONTROL_PLANE = true, if USER_PLANE = false)
   * @param     p_CellsOnSamePLMN   (default value: LTE_AllCellsOnSamePLMN)
   *                                   To take cell settings from 36.508 Table 8.1.4.2-4 or 8.1.4.2-5
   *                                   If prose for NAS test case specifies cells on visited PLMNS
   *                                   this parameter MUST be set to LTE_CellsOnDifferentPLMN
   * @param     p_CellSpecialFreq   (default value: LTE_NAS_NormalFreq)
   * @status    APPROVED (NBIOT)
   */
  function f_NBIOT_Init(NB_Combination_Type p_SysinfoCombination,
                        IOT_STATE_Type p_AllowAttachWithoutPDN := CONTROL_PLANE,
                        EUTRA_NAS_NumOfPLMN_Type p_CellsOnSamePLMN := LTE_AllCellsOnSamePLMN,
                        EUTRA_NAS_CellSpecialFreq p_CellSpecialFreq := LTE_NAS_NormalFreq) runs on NBIOT_PTC
  {
    var NB_InitParams_Local_Type v_Params := {
      CellsOnSamePLMN    := p_CellsOnSamePLMN,
      SysinfoCombination := p_SysinfoCombination,
      CellSpecialFreq    := p_CellSpecialFreq
    };
    var boolean v_DoAttachWithoutPDN := false;
    if (p_AllowAttachWithoutPDN == CONTROL_PLANE) { // @sic R5-171992 sic@
      //v_DoAttachWithoutPDN := true;//VZW NBIOT: Commenting to attach with pdn
    }
    
    fl_NBIOT_Common_Init(v_Params, v_DoAttachWithoutPDN);
  }

}
