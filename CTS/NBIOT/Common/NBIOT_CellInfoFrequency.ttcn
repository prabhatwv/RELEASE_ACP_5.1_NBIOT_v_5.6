/******************************************************************************/
// @copyright   Copyright Notification
//   No part may be reproduced except as authorized by written permission.
//   The copyright and the foregoing restriction extend to reproduction in all media.
//   Trademark 2019, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).
//   All rights reserved.
// @version: 36.523-3 v15.3.0
// $Date: 2018-11-19 09:57:10 +0100 (Mon, 19 Nov 2018) $
// $Rev: 22947 $
/******************************************************************************/
module NBIOT_CellInfoFrequency {

  import from NBIOT_RRC_ASN1_Definitions language "ASN.1:2002" all with {encode "UNALIGNED_PER_OctetAligned"};
  import from CommonDefs all;
  import from NBIOT_CommonDefs all;
  import from NBIOT_Imported_EUTRA_ASN1_Types all;

  type record NBIOT_FrequencyLowMidHigh_Type {   /* @status    APPROVED (NBIOT) */
    /* This structure is used to contain the different EARFCN as per 36.508 cl 4.3.1*/
    NB_CarrierFreq_Type      FrequencyLow,
    NB_CarrierFreq_Type      FrequencyMid,
    NB_CarrierFreq_Type      FrequencyHigh
  };

  type record NBIOT_Frequency_fList_Type {      /* @status    APPROVED (NBIOT) */
    /* This structure is used to contain the different frequencies f1, f2, f3 as per 36.508 cl 8.3.2.1-1 */
    NB_CarrierFreq_Type      f1,
    NB_CarrierFreq_Type      f2,
    NB_CarrierFreq_Type      f3
  };

  template (value) NBIOT_Frequency_fList_Type cs_NBIOT_FrequencyInitDummy:=
  { /* To initialise f1,f2,f3 with dummy frequency values  */
    /* @status    APPROVED (NBIOT) */
    f1 := cs_NB_DummyCarrierFreq,
    f2 := cs_NB_DummyCarrierFreq,
    f3 := cs_NB_DummyCarrierFreq
  };

  const integer tsc_NBIOT_DummyFrequency := 0;  /* Dummy frequency value to be used when the frequency is Not Applicable for the band
                                                   @status    APPROVED (NBIOT) */

  template (value) NB_CarrierFreq_Type cs_NB_DummyCarrierFreq :=
  { /* @status    APPROVED (NBIOT) */
    DL := {
      carrierFreq_r13 := tsc_NBIOT_DummyFrequency,
      carrierFreqOffset_r13 := omit
    },
    UL := {
      carrierFreq_r13 := tsc_NBIOT_DummyFrequency,
      carrierFreqOffset_r13 := omit
    }
  };

  template (value) NB_CarrierFreq_Type cs_NB_CarrierFreq(EUTRA_ASN1_ARFCN_ValueEUTRA_r9_Type p_DL_Freq,
                                                         template(omit) NB_CarrierFreqOffset_r13_Type p_DL_CarrierFreqOffset,
                                                         EUTRA_ASN1_ARFCN_ValueEUTRA_r9_Type p_UL_Freq,
                                                         template(omit) NB_CarrierFreqOffset_r13_Type p_UL_CarrierFreqOffset) :=
  { /* @status    APPROVED (NBIOT) */
    DL := {
      carrierFreq_r13 := p_DL_Freq,
      carrierFreqOffset_r13 := p_DL_CarrierFreqOffset
    },
    UL := {
      carrierFreq_r13 := p_UL_Freq,
      carrierFreqOffset_r13 := p_UL_CarrierFreqOffset
    }
  };

  /*
   * @desc      Function used to define the Frequency Low/Mid/High based on the Frequency band and channel bandwidth as per 36.508 cl 8.1.3.1.1.
   * @param     p_Band
   * @param     p_NB_OperationMode
   * @return    NBIOT_FrequencyLowMidHigh_Type
   * @status    APPROVED (NBIOT)
   */
  function f_NBIOT_InitFrequencyLowMidHigh(integer  p_Band,
                                           NB_OperationMode_Type p_NB_OperationMode)
    return NBIOT_FrequencyLowMidHigh_Type
  {
    var template (value) NBIOT_FrequencyLowMidHigh_Type v_FreqLMH;
    
    select (p_Band){
      case (1) {   // Band 1
        select (p_NB_OperationMode){
          case (standalone) {  //Table 8.1.3.1.1.1-1: NB-IoT standalone Test frequencies for operating band 1
            v_FreqLMH.FrequencyLow := cs_NB_CarrierFreq (1, v_0dot5, 18001, v0);
            v_FreqLMH.FrequencyMid := cs_NB_CarrierFreq (300, v_0dot5, 18300, v0);
            v_FreqLMH.FrequencyHigh := cs_NB_CarrierFreq (599, v_0dot5, 18599, v0);
          }
          case (inband_samePCI, inband_differentPCI) {  //Table 8.1.3.1.1.1-2: NB-IoT in-band Test frequencies for operating band 1
            // @sic R5-177378 use PRB 30 values sic@
            v_FreqLMH.FrequencyLow := cs_NB_CarrierFreq (60, v_1, 18060, v_2);
            v_FreqLMH.FrequencyMid := cs_NB_CarrierFreq (310, v_1, 18310, v_2);
            v_FreqLMH.FrequencyHigh := cs_NB_CarrierFreq (560, v_1, 18560, v_2);
          }
          case (guardband) { //Table 8.1.3.1.1.1-3: NB-IoT guard-band Test frequencies for operating band 1
            // @sic R5-185409 use 5MHz bandwidth sic@
            v_FreqLMH.FrequencyLow := cs_NB_CarrierFreq (1, v1, 18001, v0);
            v_FreqLMH.FrequencyMid := cs_NB_CarrierFreq (276, v1, 18276, v0);
            v_FreqLMH.FrequencyHigh := cs_NB_CarrierFreq (599, v_2, 18599, v0);
          }
          case else{
            FatalError (__FILE__, __LINE__, "invalid NB operation mode");
          }
        }
      }
      case (2) {   // Band 2
        select (p_NB_OperationMode){
          case (standalone) {  //Table 8.1.3.1.1.2-1: NB-IoT standalone Test frequencies for operating band 2
            v_FreqLMH.FrequencyLow := cs_NB_CarrierFreq (601, v_0dot5, 18601, v0);
            v_FreqLMH.FrequencyMid := cs_NB_CarrierFreq (900, v_0dot5, 18900, v0);
            v_FreqLMH.FrequencyHigh := cs_NB_CarrierFreq (1199, v_0dot5, 19199, v0);
          }
          case (inband_samePCI, inband_differentPCI) {  //Table 8.1.3.1.1.2-2: NB-IoT in-band Test frequencies for operating band 2
            // @sic R5-177378 use PRB 30 values sic@
            v_FreqLMH.FrequencyLow := cs_NB_CarrierFreq (660, v_1, 18660, v_2);
            v_FreqLMH.FrequencyMid := cs_NB_CarrierFreq (910, v_1, 18910, v_2);
            v_FreqLMH.FrequencyHigh := cs_NB_CarrierFreq (1160, v1, 19160, v_2);
          }
          case (guardband) { //Table 8.1.3.1.1.2-3: NB-IoT guard-band Test frequencies for operating band 2
            // @sic R5-185409 use 5MHz bandwidth sic@
            v_FreqLMH.FrequencyLow := cs_NB_CarrierFreq (601, v1, 18601, v0);
            v_FreqLMH.FrequencyMid := cs_NB_CarrierFreq (876, v1, 18876, v0);
            v_FreqLMH.FrequencyHigh := cs_NB_CarrierFreq (1199, v_2, 19199, v0);
          }
          case else{
            FatalError (__FILE__, __LINE__, "invalid NB operation mode");
          }
        }
      }
      case (3) {   // Band 3
        select (p_NB_OperationMode){
          case (standalone) {  //Table 8.1.3.1.1.3-1: NB-IoT standalone Test frequencies for operating band 3
            v_FreqLMH.FrequencyLow := cs_NB_CarrierFreq (1201, v_0dot5, 19201, v0);
            v_FreqLMH.FrequencyMid := cs_NB_CarrierFreq (1575, v_0dot5, 19575, v0);
            v_FreqLMH.FrequencyHigh := cs_NB_CarrierFreq (1949, v_0dot5, 19949, v0);
          }
          case (inband_samePCI, inband_differentPCI) {  //Table 8.1.3.1.1.3-2: NB-IoT in-band Test frequencies for operating band 3
            // @sic R5-177378 use PRB 30 values sic@
            v_FreqLMH.FrequencyLow := cs_NB_CarrierFreq (1260, v_1, 19260, v_2);
            v_FreqLMH.FrequencyMid := cs_NB_CarrierFreq (1585, v_1, 19585, v_2);
            v_FreqLMH.FrequencyHigh := cs_NB_CarrierFreq (1910, v_1, 19910, v_2);
          }
          case (guardband) { //Table 8.1.3.1.1.3-3: NB-IoT guard-band Test frequencies for operating band 3
            v_FreqLMH.FrequencyLow := cs_NB_CarrierFreq (1201, v1, 19201, v0);
            v_FreqLMH.FrequencyMid := cs_NB_CarrierFreq (1551, v1, 19551, v0);
            v_FreqLMH.FrequencyHigh := cs_NB_CarrierFreq (1949, v_2, 19949, v0);
          }
          case else{
            FatalError (__FILE__, __LINE__, "invalid NB operation mode");
          }
        }
      }
      case (4) {   // Band 4 @sic R5-183867 sic@
        select (p_NB_OperationMode){
          case (standalone) {  //Table 8.1.3.1.1.4-1: NB-IoT standalone Test frequencies for operating band 4
            v_FreqLMH.FrequencyLow := cs_NB_CarrierFreq (1951, v_0dot5, 19951, v0);
            v_FreqLMH.FrequencyMid := cs_NB_CarrierFreq (2175, v_0dot5, 20175, v0);
            v_FreqLMH.FrequencyHigh := cs_NB_CarrierFreq (2399, v_0dot5, 20399, v0);
          }
          case (inband_samePCI, inband_differentPCI) {  //Table 8.1.3.1.1.4-2: NB-IoT in-band Test frequencies for operating band 4
            v_FreqLMH.FrequencyLow := cs_NB_CarrierFreq (2010, v_2, 20010, v_2);
            v_FreqLMH.FrequencyMid := cs_NB_CarrierFreq (2185, v_1, 20185, v_2);
            v_FreqLMH.FrequencyHigh := cs_NB_CarrierFreq (2360, v_1, 20360, v_2);
          }
          case (guardband) { //Table 8.1.3.1.1.4-3: NB-IoT guard-band Test frequencies for operating band 4
            v_FreqLMH.FrequencyLow := cs_NB_CarrierFreq (1951, v1, 19951, v0);
            v_FreqLMH.FrequencyMid := cs_NB_CarrierFreq (2151, v1, 20151, v0);
            v_FreqLMH.FrequencyHigh := cs_NB_CarrierFreq (2399, v_2, 20399, v0);
          }
          case else{
            FatalError (__FILE__, __LINE__, "invalid NB operation mode");
          }
        }
      }
      case (5) {   // Band 5
        select (p_NB_OperationMode){
          case (standalone) {  //Table 8.1.3.1.1.5-1: NB-IoT standalone Test frequencies for operating band 5
            v_FreqLMH.FrequencyLow := cs_NB_CarrierFreq (2401, v_0dot5, 20401, v0);
            v_FreqLMH.FrequencyMid := cs_NB_CarrierFreq (2525, v_0dot5, 20525, v0);
            v_FreqLMH.FrequencyHigh := cs_NB_CarrierFreq (2649, v_0dot5, 20649, v0);
          }
          case (inband_samePCI, inband_differentPCI) {  //Table 8.1.3.1.1.5-2: NB-IoT in-band Test frequencies for operating band 5
            // @sic R5-177378 use PRB 30 values sic@
            v_FreqLMH.FrequencyLow := cs_NB_CarrierFreq (2460, v_1, 20460, v_2);
            v_FreqLMH.FrequencyMid := cs_NB_CarrierFreq (2535, v_1, 20535, v_2);
            v_FreqLMH.FrequencyHigh := cs_NB_CarrierFreq (2610, v_1, 20610, v_2);
          }
          case (guardband) { //Table 8.1.3.1.1.5-3: NB-IoT guard-band Test frequencies for operating band 5
            v_FreqLMH.FrequencyLow := cs_NB_CarrierFreq (2401, v1, 20401, v0);
            v_FreqLMH.FrequencyMid := cs_NB_CarrierFreq (2501, v1, 20501, v0);
            v_FreqLMH.FrequencyHigh := cs_NB_CarrierFreq (2649, v_2, 20649, v0);
          }
          case else{
            FatalError (__FILE__, __LINE__, "invalid NB operation mode");
          }
        }
      }
      case (8) {   // Band 8
        select (p_NB_OperationMode){
          case (standalone) {  //Table 8.1.3.1.1.8-1: NB-IoT standalone Test frequencies for operating band 8
            v_FreqLMH.FrequencyLow := cs_NB_CarrierFreq (3451, v_0dot5, 21451, v0);
            v_FreqLMH.FrequencyMid := cs_NB_CarrierFreq (3625, v_0dot5, 21625, v0);
            v_FreqLMH.FrequencyHigh := cs_NB_CarrierFreq (3799, v_0dot5, 21799, v0);
          }
          case (inband_samePCI, inband_differentPCI) {  //Table 8.1.3.1.1.8-2: NB-IoT in-band Test frequencies for operating band 8
            // @sic R5-177378 use PRB 30 values sic@
            v_FreqLMH.FrequencyLow := cs_NB_CarrierFreq (3510, v_1, 22510, v_2);
            v_FreqLMH.FrequencyMid := cs_NB_CarrierFreq (3635, v_1, 21635, v_2);
            v_FreqLMH.FrequencyHigh := cs_NB_CarrierFreq (3760, v_1, 21760, v_2);
          }
          case (guardband) { //Table 8.1.3.1.1.8-3: NB-IoT guard-band Test frequencies for operating band 8
            v_FreqLMH.FrequencyLow := cs_NB_CarrierFreq (3451, v1, 21451, v0);
            v_FreqLMH.FrequencyMid := cs_NB_CarrierFreq (3601, v1, 21601, v0);
            v_FreqLMH.FrequencyHigh := cs_NB_CarrierFreq (3799, v_2, 21799, v0);
          }
          case else{
            FatalError (__FILE__, __LINE__, "invalid NB operation mode");
          }
        }
      }
      case (11) {   // Band 11 @sic R5-175124 sic@
        select (p_NB_OperationMode){
          case (standalone) {  //Table 8.1.3.1.1.11-1: NB-IoT standalone Test frequencies for operating band 11
            v_FreqLMH.FrequencyLow := cs_NB_CarrierFreq (4751, v_0dot5, 22751, v0);
            v_FreqLMH.FrequencyMid := cs_NB_CarrierFreq (4850, v_0dot5, 22850, v0);
            v_FreqLMH.FrequencyHigh := cs_NB_CarrierFreq (4949, v_0dot5, 22949, v0);
          }
          case (inband_samePCI, inband_differentPCI) {  //Table 8.1.3.1.1.11-2: NB-IoT in-band Test frequencies for operating band 11
            // @sic R5-177378 use PRB 30 values sic@
            v_FreqLMH.FrequencyLow := cs_NB_CarrierFreq (4810, v_1, 22810, v_2);
            v_FreqLMH.FrequencyMid := cs_NB_CarrierFreq (4860, v_1, 22860, v_2);
            v_FreqLMH.FrequencyHigh := cs_NB_CarrierFreq (4910, v_1, 22910, v_2);
          }
          case (guardband) { //Table 8.1.3.1.1.11-3: NB-IoT guard-band Test frequencies for operating band 11
            v_FreqLMH.FrequencyLow := cs_NB_CarrierFreq (4751, v1, 22751, v0);
            v_FreqLMH.FrequencyMid := cs_NB_CarrierFreq (4826, v1, 22826, v0);
            v_FreqLMH.FrequencyHigh := cs_NB_CarrierFreq (4949, v_2, 22949, v0);
          }
          case else{
            FatalError (__FILE__, __LINE__, "invalid NB operation mode");
          }
        }
      }
      case (12) {   // Band 12
        select (p_NB_OperationMode){
          case (standalone) {  //Table 8.1.3.1.1.12-1: NB-IoT standalone Test frequencies for operating band 12
            v_FreqLMH.FrequencyLow := cs_NB_CarrierFreq (5011, v_0dot5, 23011, v0);
            v_FreqLMH.FrequencyMid := cs_NB_CarrierFreq (5095, v_0dot5, 23095, v0);
            v_FreqLMH.FrequencyHigh := cs_NB_CarrierFreq (5179, v_0dot5, 23179, v0);
          }
          case (inband_samePCI, inband_differentPCI) {  //Table 8.1.3.1.1.12-2: NB-IoT in-band Test frequencies for operating band 12
            // @sic R5-177378 use PRB 30 values sic@
            v_FreqLMH.FrequencyLow := cs_NB_CarrierFreq (5070, v_1, 23070, v_2);
            v_FreqLMH.FrequencyMid := cs_NB_CarrierFreq (5105, v_1, 23105, v_2);
            v_FreqLMH.FrequencyHigh := cs_NB_CarrierFreq (5140, v_1, 23140, v_2);
          }
          case (guardband) { //Table 8.1.3.1.1.12-3: NB-IoT guard-band Test frequencies for operating band 12
            v_FreqLMH.FrequencyLow := cs_NB_CarrierFreq (5011, v1, 23011, v0);
            v_FreqLMH.FrequencyMid := cs_NB_CarrierFreq (5071, v1, 23071, v0);
            v_FreqLMH.FrequencyHigh := cs_NB_CarrierFreq (5179, v_2, 23179, v0);
          }
          case else{
            FatalError (__FILE__, __LINE__, "invalid NB operation mode");
          }
        }
      }
      case (13) {   // Band 13
        select (p_NB_OperationMode){
          case (standalone) {  //Table 8.1.3.1.1.13-1: NB-IoT standalone Test frequencies for operating band 13
            v_FreqLMH.FrequencyLow := cs_NB_CarrierFreq (5228, v_0dot5, 23228, v0);
            v_FreqLMH.FrequencyMid := cs_NB_CarrierFreq (5277, v_0dot5, 23277, v0);
            v_FreqLMH.FrequencyHigh := cs_NB_CarrierFreq (5326, v_0dot5, 23326, v0);
          }
          case (inband_samePCI, inband_differentPCI) {  //Table 8.1.3.1.1.13-2: NB-IoT in-band Test frequencies for operating band 13
            // @sic R5-177378 use PRB 30 values sic@
            v_FreqLMH.FrequencyLow := cs_NB_CarrierFreq (5240, v_1, 23240, v_2);
            v_FreqLMH.FrequencyMid := cs_NB_CarrierFreq (5240, v_1, 23240, v_2);
            v_FreqLMH.FrequencyHigh := cs_NB_CarrierFreq (5240, v_1, 23240, v_2);
          }
          case (guardband) { //Table 8.1.3.1.1.13-3: NB-IoT guard-band Test frequencies for operating band 13
             // @sic R5-185409 use 5MHz bandwidth sic@
            v_FreqLMH.FrequencyLow := cs_NB_CarrierFreq (5181, v1, 23181, v3);
            v_FreqLMH.FrequencyMid := cs_NB_CarrierFreq (5206, v1, 23206, v3);
            v_FreqLMH.FrequencyHigh := cs_NB_CarrierFreq (5279, v_2, 23279, v_3);
          }
          case else{
            FatalError (__FILE__, __LINE__, "invalid NB operation mode");
          }
        }
      }
      case (14) {   // Band 14 @sic R5-183867 sic@
        select (p_NB_OperationMode){
          case (standalone) {  //Table 8.1.3.1.1.14-1: NB-IoT standalone Test frequencies for operating band 14
            v_FreqLMH.FrequencyLow := cs_NB_CarrierFreq (5281, v_0dot5, 23281, v0);
            v_FreqLMH.FrequencyMid := cs_NB_CarrierFreq (5330, v_0dot5, 23330, v0);
            v_FreqLMH.FrequencyHigh := cs_NB_CarrierFreq (5379, v_0dot5, 23379, v0);
          }
          case (inband_samePCI, inband_differentPCI) {  //Table 8.1.3.1.1.14-2: NB-IoT in-band Test frequencies for operating band 14
            v_FreqLMH.FrequencyLow := cs_NB_CarrierFreq (5340, v_1, 23340, v_2);
            v_FreqLMH.FrequencyMid := cs_NB_CarrierFreq (5340, v_1, 23340, v_2);
            v_FreqLMH.FrequencyHigh := cs_NB_CarrierFreq (5340, v_1, 23340, v_2);
          }
          case (guardband) { //Table 8.1.3.1.1.14-3: NB-IoT guard-band Test frequencies for operating band 14
            v_FreqLMH.FrequencyLow := cs_NB_CarrierFreq (5281, v1, 23281, v3);
            v_FreqLMH.FrequencyMid := cs_NB_CarrierFreq (5306, v1, 23306, v3);
            v_FreqLMH.FrequencyHigh := cs_NB_CarrierFreq (5379, v_2, 23379, v_3);
          }
          case else{
            FatalError (__FILE__, __LINE__, "invalid NB operation mode");
          }
        }
      }
      case (17) {   // Band 17
        select (p_NB_OperationMode){
          case (standalone) {  //Table 8.1.3.1.1.17-1: NB-IoT standalone Test frequencies for operating band 17
            v_FreqLMH.FrequencyLow := cs_NB_CarrierFreq (5731, v_0dot5, 23731, v0);
            v_FreqLMH.FrequencyMid := cs_NB_CarrierFreq (5790, v_0dot5, 23790, v0);
            v_FreqLMH.FrequencyHigh := cs_NB_CarrierFreq (5849, v_0dot5, 23849, v0);
          }
          case (inband_samePCI, inband_differentPCI) {  //Table 8.1.3.1.1.17-2: NB-IoT in-band Test frequencies for operating band 17
            // @sic R5-177378 use PRB 30 values sic@
            v_FreqLMH.FrequencyLow := cs_NB_CarrierFreq (5790, v_1, 23790, v_2);
            v_FreqLMH.FrequencyMid := cs_NB_CarrierFreq (5800, v_1, 23800, v_2);
            v_FreqLMH.FrequencyHigh := cs_NB_CarrierFreq (5810, v_1, 23810, v_2);
          }
          case (guardband) { //Table 8.1.3.1.1.17-3: NB-IoT guard-band Test frequencies for operating band 17
            v_FreqLMH.FrequencyLow := cs_NB_CarrierFreq (5731, v1, 23731, v0);
            v_FreqLMH.FrequencyMid := cs_NB_CarrierFreq (5766, v1, 23766, v0);
            v_FreqLMH.FrequencyHigh := cs_NB_CarrierFreq (5849, v_2, 23849, v0);
          }
          case else{
            FatalError (__FILE__, __LINE__, "invalid NB operation mode");
          }
        }
      }
      case (18) {   // Band 18
        select (p_NB_OperationMode){
          case (standalone) {  //Table 8.1.3.1.1.18-1: NB-IoT standalone Test frequencies for operating band 18
            v_FreqLMH.FrequencyLow := cs_NB_CarrierFreq (5851, v_0dot5, 23851, v0);
            v_FreqLMH.FrequencyMid := cs_NB_CarrierFreq (5925, v_0dot5, 23925, v0);
            v_FreqLMH.FrequencyHigh := cs_NB_CarrierFreq (5999, v_0dot5, 23999, v0);
          }
          case (inband_samePCI, inband_differentPCI) {  //Table 8.1.3.1.1.18-2: NB-IoT in-band Test frequencies for operating band 18
            // @sic R5-177378 use PRB 30 values sic@
            v_FreqLMH.FrequencyLow := cs_NB_CarrierFreq (5910, v_1, 23910, v_2);
            v_FreqLMH.FrequencyMid := cs_NB_CarrierFreq (5935, v_1, 23935, v_2);
            v_FreqLMH.FrequencyHigh := cs_NB_CarrierFreq (5960, v_1, 23960, v_2);
          }
          case (guardband) { //Table 8.1.3.1.1.18-3: NB-IoT guard-band Test frequencies for operating band 18
            v_FreqLMH.FrequencyLow := cs_NB_CarrierFreq (5851, v1, 23851, v0);
            v_FreqLMH.FrequencyMid := cs_NB_CarrierFreq (5901, v1, 23901, v0);
            v_FreqLMH.FrequencyHigh := cs_NB_CarrierFreq (5999, v_2, 23999, v0);
          }
          case else{
            FatalError (__FILE__, __LINE__, "invalid NB operation mode");
          }
        }
      }
      case (19) {   // Band 19
        select (p_NB_OperationMode){
          case (standalone) {  //Table 8.1.3.1.1.19-1: NB-IoT standalone Test frequencies for operating band 19
            v_FreqLMH.FrequencyLow := cs_NB_CarrierFreq (6001, v_0dot5, 24001, v0);
            v_FreqLMH.FrequencyMid := cs_NB_CarrierFreq (6075, v_0dot5, 24075, v0);
            v_FreqLMH.FrequencyHigh := cs_NB_CarrierFreq (6149, v_0dot5, 24149, v0);
          }
          case (inband_samePCI, inband_differentPCI) {  //Table 8.1.3.1.1.19-2: NB-IoT in-band Test frequencies for operating band 19
            // @sic R5-177378 use PRB 30 values sic@
            v_FreqLMH.FrequencyLow := cs_NB_CarrierFreq (6060, v_1, 24060, v_2);
            v_FreqLMH.FrequencyMid := cs_NB_CarrierFreq (6085, v_1, 24085, v_2);
            v_FreqLMH.FrequencyHigh := cs_NB_CarrierFreq (6110, v_1, 24110, v_2);
          }
          case (guardband) { //Table 8.1.3.1.1.19-3: NB-IoT guard-band Test frequencies for operating band 19
            v_FreqLMH.FrequencyLow := cs_NB_CarrierFreq (6001, v1, 24001, v0);
            v_FreqLMH.FrequencyMid := cs_NB_CarrierFreq (6051, v1, 24051, v0);
            v_FreqLMH.FrequencyHigh := cs_NB_CarrierFreq (6149, v_2, 24149, v0);
          }
          case else{
            FatalError (__FILE__, __LINE__, "invalid NB operation mode");
          }
        }
      }
      case (20) {   // Band 20
        select (p_NB_OperationMode){
          case (standalone) {  //Table 8.1.3.1.1.20-1: NB-IoT standalone Test frequencies for operating band 2
            v_FreqLMH.FrequencyLow := cs_NB_CarrierFreq (6151, v_0dot5, 24151, v0);
            v_FreqLMH.FrequencyMid := cs_NB_CarrierFreq (6300, v_0dot5, 24300, v0);
            v_FreqLMH.FrequencyHigh := cs_NB_CarrierFreq (6449, v_0dot5, 24449, v0);
          }
          case (inband_samePCI, inband_differentPCI) {  //Table 8.1.3.1.1.20-2: NB-IoT in-band Test frequencies for operating band 20
            // @sic R5-177378 use PRB 30 values sic@
            v_FreqLMH.FrequencyLow := cs_NB_CarrierFreq (6210, v_1, 24210, v_2);
            v_FreqLMH.FrequencyMid := cs_NB_CarrierFreq (6310, v_1, 24310, v_2);
            v_FreqLMH.FrequencyHigh := cs_NB_CarrierFreq (6410, v_1, 24410, v_2);
          }
          case (guardband) { //Table 8.1.3.1.1.20-3: NB-IoT guard-band Test frequencies for operating band 20
             // @sic R5-185409 use 5MHz bandwidth sic@
            v_FreqLMH.FrequencyLow := cs_NB_CarrierFreq (6151, v1, 24151, v3);
            v_FreqLMH.FrequencyMid := cs_NB_CarrierFreq (6276, v1, 24276, v3);
            v_FreqLMH.FrequencyHigh := cs_NB_CarrierFreq (6449, v_2, 24449, v_3);
          }
          case else{
            FatalError (__FILE__, __LINE__, "invalid NB operation mode");
          }
        }
      }
      case (21) {   // Band 21 @sic R5-175124 sic@
        select (p_NB_OperationMode){
          case (standalone) {  //Table 8.1.3.1.1.21-1: NB-IoT standalone Test frequencies for operating band 21
            v_FreqLMH.FrequencyLow := cs_NB_CarrierFreq (6451, v_0dot5, 24451, v0);
            v_FreqLMH.FrequencyMid := cs_NB_CarrierFreq (6525, v_0dot5, 24525, v0);
            v_FreqLMH.FrequencyHigh := cs_NB_CarrierFreq (6599, v_0dot5, 24599, v0);
          }
          case (inband_samePCI, inband_differentPCI) {  //Table 8.1.3.1.1.21-2: NB-IoT in-band Test frequencies for operating band 21
            // @sic R5-177378 use PRB 30 values sic@
            v_FreqLMH.FrequencyLow := cs_NB_CarrierFreq (6510, v_1, 24510, v_2);
            v_FreqLMH.FrequencyMid := cs_NB_CarrierFreq (6535, v_1, 24535, v_2);
            v_FreqLMH.FrequencyHigh := cs_NB_CarrierFreq (6560, v_1, 24560, v_2);
          }
          case (guardband) { //Table 8.1.3.1.1.21-3: NB-IoT guard-band Test frequencies for operating band 21
            v_FreqLMH.FrequencyLow := cs_NB_CarrierFreq (6451, v1, 24451, v0);
            v_FreqLMH.FrequencyMid := cs_NB_CarrierFreq (6501, v1, 24501, v0);
            v_FreqLMH.FrequencyHigh := cs_NB_CarrierFreq (6599, v_2, 24599, v0);
          }
          case else{
            FatalError (__FILE__, __LINE__, "invalid NB operation mode");
          }
        }
      }
      case (25) {   // Band 25 @sic R5-175124 sic@
        select (p_NB_OperationMode){
          case (standalone) {  //Table 8.1.3.1.1.25-1: NB-IoT standalone Test frequencies for operating band 25
            v_FreqLMH.FrequencyLow := cs_NB_CarrierFreq (8041, v_0dot5, 26041, v0);
            v_FreqLMH.FrequencyMid := cs_NB_CarrierFreq (8365, v_0dot5, 26365, v0);
            v_FreqLMH.FrequencyHigh := cs_NB_CarrierFreq (8689, v_0dot5, 26689, v0);
          }
          case (inband_samePCI, inband_differentPCI) {  //Table 8.1.3.1.1.25-2: NB-IoT in-band Test frequencies for operating band 25
            // @sic R5-177378 use PRB 30 values sic@
            v_FreqLMH.FrequencyLow := cs_NB_CarrierFreq (8100, v_1, 26100, v_2);
            v_FreqLMH.FrequencyMid := cs_NB_CarrierFreq (8375, v_1, 26375, v_2);
            v_FreqLMH.FrequencyHigh := cs_NB_CarrierFreq (8650, v_1, 26650, v_2);
          }
          case (guardband) { //Table 8.1.3.1.1.25-3: NB-IoT guard-band Test frequencies for operating band 25
            v_FreqLMH.FrequencyLow := cs_NB_CarrierFreq (8041, v1, 26041, v0);
            v_FreqLMH.FrequencyMid := cs_NB_CarrierFreq (8341, v1, 26341, v0);
            v_FreqLMH.FrequencyHigh := cs_NB_CarrierFreq (8689, v_2, 26689, v0);
          }
          case else{
            FatalError (__FILE__, __LINE__, "invalid NB operation mode");
          }
        }
      }
      case (26) {   // Band 26
        select (p_NB_OperationMode){
          case (standalone) {  //Table 8.1.3.1.1.26-1: NB-IoT standalone Test frequencies for operating band 26
            v_FreqLMH.FrequencyLow := cs_NB_CarrierFreq (8691, v_0dot5, 26691, v0);
            v_FreqLMH.FrequencyMid := cs_NB_CarrierFreq (8865, v_0dot5, 26865, v0);
            v_FreqLMH.FrequencyHigh := cs_NB_CarrierFreq (9039, v_0dot5, 27039, v0);
          }
          case (inband_samePCI, inband_differentPCI) {  //Table 8.1.3.1.1.26-2: NB-IoT in-band Test frequencies for operating band 26
            // @sic R5-177378 use PRB 30 values sic@
            v_FreqLMH.FrequencyLow := cs_NB_CarrierFreq (8750, v_1, 26750, v_2);
            v_FreqLMH.FrequencyMid := cs_NB_CarrierFreq (8875, v_1, 26875, v_2);
            v_FreqLMH.FrequencyHigh := cs_NB_CarrierFreq (9000, v_1, 27000, v_2);
          }
          case (guardband) { //Table 8.1.3.1.1.26-3: NB-IoT guard-band Test frequencies for operating band 26
            v_FreqLMH.FrequencyLow := cs_NB_CarrierFreq (8691, v1, 26691, v0);
            v_FreqLMH.FrequencyMid := cs_NB_CarrierFreq (8841, v1, 26841, v0);
            v_FreqLMH.FrequencyHigh := cs_NB_CarrierFreq (9039, v_2, 27039, v0);
          }
          case else{
            FatalError (__FILE__, __LINE__, "invalid NB operation mode");
          }
        }
      }
      case (28) {   // Band 28
        select (p_NB_OperationMode){
          case (standalone) {  //Table 8.1.3.1.1.28-1: NB-IoT standalone Test frequencies for operating band 28
            v_FreqLMH.FrequencyLow := cs_NB_CarrierFreq (9211, v_0dot5, 27211, v0);
            v_FreqLMH.FrequencyMid := cs_NB_CarrierFreq (9435, v_0dot5, 27435, v0);
            v_FreqLMH.FrequencyHigh := cs_NB_CarrierFreq (9659, v_0dot5, 27659, v0);
          }
          case (inband_samePCI, inband_differentPCI) {  //Table 8.1.3.1.1.28-2: NB-IoT in-band Test frequencies for operating band 28
            // @sic R5-177378 use PRB 30 values sic@
            v_FreqLMH.FrequencyLow := cs_NB_CarrierFreq (9270, v_1, 27270, v_2);
            v_FreqLMH.FrequencyMid := cs_NB_CarrierFreq (9420, v_1, 27420, v_2); // @sic R5-184110 sic@
            v_FreqLMH.FrequencyHigh := cs_NB_CarrierFreq (9620, v_1, 27620, v_2);
          }
          case (guardband) { //Table 8.1.3.1.1.28-3: NB-IoT guard-band Test frequencies for operating band 28
            v_FreqLMH.FrequencyLow := cs_NB_CarrierFreq (9211, v1, 27211, v0);
            v_FreqLMH.FrequencyMid := cs_NB_CarrierFreq (9411, v1, 27411, v0);
            v_FreqLMH.FrequencyHigh := cs_NB_CarrierFreq (9659, v_2, 27659, v0);
          }
          case else{
            FatalError (__FILE__, __LINE__, "invalid NB operation mode");
          }
        }
      }
      case (31) {   // Band 31 @sic R5-175124 sic@
        select (p_NB_OperationMode){
          case (standalone) {  //Table 8.1.3.1.1.31-1: NB-IoT standalone Test frequencies for operating band 31
            v_FreqLMH.FrequencyLow := cs_NB_CarrierFreq (9871, v_0dot5, 27761, v0);
            v_FreqLMH.FrequencyMid := cs_NB_CarrierFreq (9895, v_0dot5, 27785, v0);
            v_FreqLMH.FrequencyHigh := cs_NB_CarrierFreq (9919, v_0dot5, 27809, v0);
          }
          case (inband_samePCI, inband_differentPCI) {  //Table 8.1.3.1.1.31-2: NB-IoT in-band Test frequencies for operating band 31
            // @sic R5-177378 use PRB 17 values sic@
            v_FreqLMH.FrequencyLow := cs_NB_CarrierFreq (9904, v1, 27794, v0);
            v_FreqLMH.FrequencyMid := cs_NB_CarrierFreq (9904, v1, 27794, v0);
            v_FreqLMH.FrequencyHigh := cs_NB_CarrierFreq (9904, v1, 27794, v0);
          }
          case (guardband) { //Table 8.1.3.1.1.31-3: NB-IoT guard-band Test frequencies for operating band 31
            v_FreqLMH.FrequencyLow := cs_NB_CarrierFreq (9871, v1, 27761, v0);
            v_FreqLMH.FrequencyMid := cs_NB_CarrierFreq (9871, v1, 27761, v0);
            v_FreqLMH.FrequencyHigh := cs_NB_CarrierFreq (9919, v_2, 27809, v0);
          }
          case else{
            FatalError (__FILE__, __LINE__, "invalid NB operation mode");
          }
        }
      }
      case (66) {   // Band 66
        select (p_NB_OperationMode){
          case (standalone) {  //Table 8.1.3.1.1.66-1: NB-IoT standalone Test frequencies for operating band 66
            v_FreqLMH.FrequencyLow := cs_NB_CarrierFreq (66437, v_0dot5, 131973, v0);
            v_FreqLMH.FrequencyMid := cs_NB_CarrierFreq (66786, v_0dot5, 132322, v0);
            v_FreqLMH.FrequencyHigh := cs_NB_CarrierFreq (67135, v_0dot5, 132671, v0);
          }
          case (inband_samePCI, inband_differentPCI) {  //Table 8.1.3.1.1.66-2: NB-IoT in-band Test frequencies for operating band 66
            // @sic R5-177378 use PRB 30 values sic@
            v_FreqLMH.FrequencyLow := cs_NB_CarrierFreq (66496, v_1, 132032, v_2);
            v_FreqLMH.FrequencyMid := cs_NB_CarrierFreq (66896, v_1, 132432, v_2); // @sic R5-184110 sic@
            v_FreqLMH.FrequencyHigh := cs_NB_CarrierFreq (67096, v_1, 132632, v_2);
          }
          case (guardband) { //Table 8.1.3.1.1.66-3: NB-IoT guard-band Test frequencies for operating band 66
            v_FreqLMH.FrequencyLow := cs_NB_CarrierFreq (66437, v1, 131973, v0);
            v_FreqLMH.FrequencyMid := cs_NB_CarrierFreq (66762, v1, 132298, v0);
            v_FreqLMH.FrequencyHigh := cs_NB_CarrierFreq (67135, v_2, 132671, v0);
          }
          case else{
            FatalError (__FILE__, __LINE__, "invalid NB operation mode");
          }
        }
      }
      case (70) {   // Band 70 @sic R5-172115 sic@
        select (p_NB_OperationMode){
          case (standalone) {  //Table 8.1.3.1.1.70-1: NB-IoT standalone Test frequencies for operating band 70
            v_FreqLMH.FrequencyLow := cs_NB_CarrierFreq (68337, v_0dot5, 132973, v0);
            v_FreqLMH.FrequencyMid := cs_NB_CarrierFreq (68411, v_0dot5, 133047, v0);
            v_FreqLMH.FrequencyHigh := cs_NB_CarrierFreq (68485, v_0dot5, 133121, v0);
          }
          case (inband_samePCI, inband_differentPCI) {  //Table 8.1.3.1.1.70-2: NB-IoT in-band Test frequencies for operating band 70
            v_FreqLMH.FrequencyLow := cs_NB_CarrierFreq (68343, v_2, 132979, v_3);
            v_FreqLMH.FrequencyMid := cs_NB_CarrierFreq (68421, v_2, 133057, v_3); //@sic R5-186472 sic@
            v_FreqLMH.FrequencyHigh := cs_NB_CarrierFreq (68479, v1, 133115, v3);
          }
          case (guardband) { //Table 8.1.3.1.1.70-3: NB-IoT guard-band Test frequencies for operating band 70
            v_FreqLMH.FrequencyLow := cs_NB_CarrierFreq (68337, v1, 132973, v0);
            v_FreqLMH.FrequencyMid := cs_NB_CarrierFreq (68387, v1, 133023, v0);
            v_FreqLMH.FrequencyHigh := cs_NB_CarrierFreq (68485, v_2, 133121, v0);
          }
          case else{
            FatalError (__FILE__, __LINE__, "invalid NB operation mode");
          }
        }
      }
      case (71) {   // Band 71 @sic R5-183867 sic@
        select (p_NB_OperationMode){
          case (standalone) {  //Table 8.1.3.1.1.71-1: NB-IoT standalone Test frequencies for operating band 71
            v_FreqLMH.FrequencyLow := cs_NB_CarrierFreq (68587, v_0dot5, 133123, v0);
            v_FreqLMH.FrequencyMid := cs_NB_CarrierFreq (68761, v_0dot5, 133297, v0);
            v_FreqLMH.FrequencyHigh := cs_NB_CarrierFreq (68935, v_0dot5, 133471, v0);
          }
          case (inband_samePCI, inband_differentPCI) {  //Table 8.1.3.1.1.71-2: NB-IoT in-band Test frequencies for operating band 71
            v_FreqLMH.FrequencyLow := cs_NB_CarrierFreq (68646, v_1, 133182, v_2);
            v_FreqLMH.FrequencyMid := cs_NB_CarrierFreq (68771, v_1, 133307, v_2);
            v_FreqLMH.FrequencyHigh := cs_NB_CarrierFreq (68896, v_1, 133432, v_2);
          }
          case (guardband) { //Table 8.1.3.1.1.71-3: NB-IoT guard-band Test frequencies for operating band 71
            v_FreqLMH.FrequencyLow := cs_NB_CarrierFreq (68587, v1, 133123, v0);
            v_FreqLMH.FrequencyMid := cs_NB_CarrierFreq (68737, v1, 133273, v0);
            v_FreqLMH.FrequencyHigh := cs_NB_CarrierFreq (68935, v_2, 133471, v0);
          }
          case else{
            FatalError (__FILE__, __LINE__, "invalid NB operation mode");
          }
        }
      }
      case else {
        FatalError (__FILE__, __LINE__, "invalid Band");
      }
    }
    return valueof(v_FreqLMH);
  }

  /*
   * @desc      Function used to define the Frequency f1/f2/f3 based on the Frequency band as per 36.508
   * @param     p_Band
   * @param     p_NB_OperationMode
   * @return    NBIOT_Frequency_fList_Type
   * @status    APPROVED (NBIOT)
   */
  function f_NBIOT_InitFrequency_f1Tof3(integer p_Band,
                                        NB_OperationMode_Type p_NB_OperationMode)
    return NBIOT_Frequency_fList_Type
  {
    var template (value) NBIOT_Frequency_fList_Type v_Freq := cs_NBIOT_FrequencyInitDummy;   //Initialise with Dummy value
    
    v_Freq := fl_NBIOT_InitFrequencyDef_f1Tof3(p_Band, p_NB_OperationMode); // @sic R5-171561 sic@
    
    return valueof(v_Freq);
  }

  /*
   * @desc      Function used to define the Default signalling Frequency f1/f2/f3 based on the Frequency band and channel bandwidth as per 36.508
   * @param     p_Band
   * @param     p_NB_OperationMode
   * @return    NBIOT_Frequency_fList_Type
   * @status    APPROVED (NBIOT)
   */
  function fl_NBIOT_InitFrequencyDef_f1Tof3(integer  p_Band,
                                            NB_OperationMode_Type p_NB_OperationMode)
    return NBIOT_Frequency_fList_Type
  {
    var NBIOT_FrequencyLowMidHigh_Type v_FreqLMH;
    var template(value) NBIOT_Frequency_fList_Type v_Freq := cs_NBIOT_FrequencyInitDummy;   //Initialise with Dummy value
    
    // Initialise Frequencies Low/Mid/High for the primary Band
    v_FreqLMH:= f_NBIOT_InitFrequencyLowMidHigh(p_Band, p_NB_OperationMode);
    
    // Most of the bands assigns f1->Mid  f2->High  f3->Low
    v_Freq.f1 := v_FreqLMH.FrequencyMid;
    v_Freq.f2 := v_FreqLMH.FrequencyHigh;
    v_Freq.f3 := v_FreqLMH.FrequencyLow;

    return valueof(v_Freq);
  }

}
